{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4\\n\\n3\\n\\n0 1 2\\n\\n1\\n\\n0 3 2\\n\\n2\\n\\n3 1 0\\n\\n2\\n\\n1 3 0\"]","prob_desc_input_spec":"The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 18$$$)\u00a0\u2014 the number of testcases. The first line of each testcase contains a single integer $$$x$$$ ($$$1 \\le x \\le 3$$$)\u00a0\u2014 the number on the key in your hands. The second line contains three integers $$$a, b$$$ and $$$c$$$ ($$$0 \\le a, b, c \\le 3$$$)\u00a0\u2014 the number on the key behind each of the doors. If there is no key behind the door, the number is equal to $$$0$$$. Values $$$1, 2$$$ and $$$3$$$ appear exactly once among $$$x, a, b$$$ and $$$c$$$.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"5cd113a30bbbb93d8620a483d4da0349","prob_desc_created_at":"1658414100","source_code":"N = int(input())\r\n \r\nfor i in range(N):\r\n    \r\n    key = int(input())\r\n    arr = [int(i) for i in input().split()]\r\n    if (arr[key-1] ==0) or (arr[arr[key-1]-1]==0):\r\n        print(\"NO\")          \r\n    else:\r\n        print(\"YES\")","prob_desc_sample_outputs":"[\"YES\\nNO\\nYES\\nNO\"]","lang_cluster":"Python","code_uid":"31fb2d99adca01c7467c4688194d7c76","prob_desc_notes":null,"prob_desc_output_spec":"For each testcase, print \"YES\" if you can open all the doors. Otherwise, print \"NO\".","prob_desc_output_to":"standard output","prob_desc_description":"There are three doors in front of you, numbered from $$$1$$$ to $$$3$$$ from left to right. Each door has a lock on it, which can only be opened with a key with the same number on it as the number on the door.There are three keys\u00a0\u2014 one for each door. Two of them are hidden behind the doors, so that there is no more than one key behind each door. So two doors have one key behind them, one door doesn't have a key behind it. To obtain a key hidden behind a door, you should first unlock that door. The remaining key is in your hands.Can you open all the doors?","hidden_unit_tests":"[{\"input\": \"4\\n3\\n0 1 2\\n1\\n0 3 2\\n2\\n3 1 0\\n2\\n1 3 0\\n\", \"output\": [\"\\nYes\\nNo\\nYes\\nNo\", \"\\nYES\\nNO\\nYES\\nNO\", \"YES\\nNO\\nYES\\nNO\\n\\n\", \"YES\\nNO\\nYES\\nNO\\n\", \"yes\\nNO\\nyes\\nNO\\n\", \"YES \\nNO \\nYES \\nNO \\n\", \"YES\\nNO\\nYES\\nNO\", \"YES NO YES NO \", \"YES\\nNo\\nYES\\nNO\\n\", \"YES\\n\\nNO\\n\\nYES\\n\\nNO\\n\\n\", \"yes\\nno\\nyes\\nno\", \"yes\\nno\\nyes\\nno\\n\", \"Yes\\nNo\\nYes\\nNo\\n\", \"YES\\nNO\\nYES\\nNO\", \"Yes\\nNo\\nYes\\nNo\\n\", \"\\nYES\\n\\nNO\\n\\nYES\\n\\nNO\\n\", \"yes\\nno\\nyes\\nNO\\n\", \"YES\\nNO\\nYES\\nNO\\n\", \"YES\\nNO \\nYES\\nNO \\n\", \"Yes\\nno\\nYes\\nno\\n\", \"YES\\n\\nNO\\n\\nYES\\n\\nNO\\n\\n\", \"YES\\nNO\\nYES\\nNO\\n\", \"YES\\nNO\\nYES\\nNO\\n\\n\", \"Yes\\nNO\\nYes\\nNO\\n\", \"\\nyes\\n\\nno\\n\\nyes\\n\\nno\\n\", \"yes\\nNo\\nyes\\nNo\\n\", \"YES\\nNo\\nYES\\nNo\\n\"]}, {\"input\": \"18\\n1\\n0 2 3\\n2\\n1 0 3\\n3\\n1 2 0\\n1\\n0 3 2\\n3\\n1 0 2\\n2\\n1 3 0\\n2\\n0 1 3\\n1\\n2 0 3\\n3\\n2 1 0\\n2\\n0 3 1\\n3\\n2 0 1\\n1\\n2 3 0\\n3\\n0 1 2\\n1\\n3 0 2\\n2\\n3 1 0\\n3\\n0 2 1\\n2\\n3 0 1\\n1\\n3 2 0\\n\", \"output\": [\"\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nNO\\n\\nNO\\n\\nNO\\n\", \"\\nno\\n\\nno\\n\\nno\\n\\nno\\n\\nno\\n\\nno\\n\\nno\\n\\nno\\n\\nno\\n\\nyes\\n\\nyes\\n\\nyes\\n\\nyes\\n\\nyes\\n\\nyes\\n\\nno\\n\\nno\\n\\nno\\n\", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nyes\\nyes\\nyes\\nyes\\nyes\\nyes\\nNO\\nNO\\nNO\\n\", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\\n\", \"No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\n\", \"no\\nno\\nno\\nno\\nNO\\nNO\\nNO\\nNO\\nno\\nyes\\nyes\\nyes\\nyes\\nyes\\nyes\\nNO\\nno\\nNO\\n\", \"No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNo\\nNo\\nNo\\n\", \"\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\", \"no\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nyes\\nyes\\nyes\\nyes\\nyes\\nyes\\nno\\nno\\nno\", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nyes\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\\n\", \"NO \\nNO \\nNO \\nNO \\nNO \\nNO \\nNO \\nNO \\nNO \\nYES \\nYES \\nYES \\nYES \\nYES \\nYES \\nNO \\nNO \\nNO \\n\", \"NO NO NO NO NO NO NO NO NO Yes YES YES YES YES YES NO NO NO \", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\\n\", \"no\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nyes\\nyes\\nyes\\nyes\\nyes\\nyes\\nno\\nno\\nno\\n\", \"NO \\nNO \\nNO \\nNO \\nNO \\nNO \\nNO \\nNO \\nNO \\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO \\nNO \\nNO \\n\", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\\n\\n\", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nNO\\nNO\\nNO\\n\", \"No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\n\", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\\n\\n\", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\\n\", \"No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nyes\\nyes\\nyes\\nyes\\nyes\\nyes\\nNo\\nNo\\nNo\\n\", \"NO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nNO\\n\\nNO\\n\\nNO\\n\\n\", \"NO NO NO NO NO NO NO NO NO YES YES YES YES YES YES NO NO NO \", \"NO\\nNO\\nNO\\nNo\\nNO\\nNO\\nNO\\nNO\\nNo\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNo\\nNO\\n\", \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\", \"NO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nNO\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nYES\\n\\nNO\\n\\nNO\\n\\nNO\\n\\n\", \"no\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nno\\nno\\nno\\n\"]}]","length":10,"num_hidden_unit_tests":2}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n22\\n9999\\n1\\n777\"]","prob_desc_input_spec":"The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 36$$$) \u2014 the number of test cases. The only line of the test case contains one integer $$$x$$$ ($$$1 \\le x \\le 9999$$$) \u2014 the apartment number of the resident who answered the call. It is guaranteed that $$$x$$$ consists of the same digit.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"289a55128be89bb86a002d218d31b57f","prob_desc_created_at":"1603204500","source_code":"t=int(input())\nfor _ in range(t):\n    n=input()\n    res=0\n    for j in range(len(n)):\n        res+=j+1\n    offset=int(n[0])-1\n\n    res+=offset*10\n\n    print(res)\n","prob_desc_sample_outputs":"[\"13\\n90\\n1\\n66\"]","lang_cluster":"Python","code_uid":"ddc136542616196e3d3da249e2df444a","prob_desc_notes":null,"prob_desc_output_spec":"For each test case, print the answer: how many digits our character pressed in total.","prob_desc_output_to":"standard output","prob_desc_description":"There is a building consisting of $$$10~000$$$ apartments numbered from $$$1$$$ to $$$10~000$$$, inclusive.Call an apartment boring, if its number consists of the same digit. Examples of boring apartments are $$$11, 2, 777, 9999$$$ and so on.Our character is a troublemaker, and he calls the intercoms of all boring apartments, till someone answers the call, in the following order:  First he calls all apartments consisting of digit $$$1$$$, in increasing order ($$$1, 11, 111, 1111$$$).  Next he calls all apartments consisting of digit $$$2$$$, in increasing order ($$$2, 22, 222, 2222$$$)  And so on. The resident of the boring apartment $$$x$$$ answers the call, and our character stops calling anyone further.Our character wants to know how many digits he pressed in total and your task is to help him to count the total number of keypresses.For example, if the resident of boring apartment $$$22$$$ answered, then our character called apartments with numbers $$$1, 11, 111, 1111, 2, 22$$$ and the total number of digits he pressed is $$$1 + 2 + 3 + 4 + 1 + 2 = 13$$$.You have to answer $$$t$$$ independent test cases.","hidden_unit_tests":"[{\"input\": \"4\\r\\n22\\r\\n9999\\r\\n1\\r\\n777\\r\\n\", \"output\": [\"13\\n90\\n1\\n66\", \"13\\r\\n90\\r\\n1\\r\\n66\"]}, {\"input\": \"36\\r\\n1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n11\\r\\n22\\r\\n33\\r\\n44\\r\\n55\\r\\n66\\r\\n77\\r\\n88\\r\\n99\\r\\n111\\r\\n222\\r\\n333\\r\\n444\\r\\n555\\r\\n666\\r\\n777\\r\\n888\\r\\n999\\r\\n1111\\r\\n2222\\r\\n3333\\r\\n4444\\r\\n5555\\r\\n6666\\r\\n7777\\r\\n8888\\r\\n9999\\r\\n\", \"output\": [\"1\\r\\n11\\r\\n21\\r\\n31\\r\\n41\\r\\n51\\r\\n61\\r\\n71\\r\\n81\\r\\n3\\r\\n13\\r\\n23\\r\\n33\\r\\n43\\r\\n53\\r\\n63\\r\\n73\\r\\n83\\r\\n6\\r\\n16\\r\\n26\\r\\n36\\r\\n46\\r\\n56\\r\\n66\\r\\n76\\r\\n86\\r\\n10\\r\\n20\\r\\n30\\r\\n40\\r\\n50\\r\\n60\\r\\n70\\r\\n80\\r\\n90\", \"1\\n11\\n21\\n31\\n41\\n51\\n61\\n71\\n81\\n3\\n13\\n23\\n33\\n43\\n53\\n63\\n73\\n83\\n6\\n16\\n26\\n36\\n46\\n56\\n66\\n76\\n86\\n10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\"]}, {\"input\": \"36\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n\", \"output\": [\"90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\", \"90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\"]}, {\"input\": \"20\\r\\n999\\r\\n33\\r\\n2222\\r\\n22\\r\\n2222\\r\\n333\\r\\n4\\r\\n99\\r\\n11\\r\\n444\\r\\n8888\\r\\n444\\r\\n2222\\r\\n6666\\r\\n666\\r\\n7\\r\\n555\\r\\n5\\r\\n8\\r\\n9999\\r\\n\", \"output\": [\"86\\n23\\n20\\n13\\n20\\n26\\n31\\n83\\n3\\n36\\n80\\n36\\n20\\n60\\n56\\n61\\n46\\n41\\n71\\n90\", \"86\\r\\n23\\r\\n20\\r\\n13\\r\\n20\\r\\n26\\r\\n31\\r\\n83\\r\\n3\\r\\n36\\r\\n80\\r\\n36\\r\\n20\\r\\n60\\r\\n56\\r\\n61\\r\\n46\\r\\n41\\r\\n71\\r\\n90\"]}]","length":11,"num_hidden_unit_tests":4}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\\n\\n0 0\\n\\n0 0\\n\\n1 0\\n\\n0 1\\n\\n1 1\\n\\n1 1\"]","prob_desc_input_spec":"The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 16$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow. The test case consists of two lines, each of these lines contains two integers. The $$$j$$$-th integer in the $$$i$$$-th row is $$$a_{i, j}$$$. If $$$a_{i, j} = 0$$$ then the cell $$$(i, j)$$$ is empty, and if $$$a_{i, j} = 1$$$ the cell $$$(i, j)$$$ contains grass.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"7336b8becd2438f0439240ee8f9610ec","prob_desc_created_at":"1657290900","source_code":"p=int(input())\r\nfor i in range(p):\r\n\r\n    l=[]\r\n    for j in range(2):\r\n        li=[int(i) for i in input().split()]\r\n        for k in li:\r\n            l.append(k)\r\n    count=0\r\n    for i in l:\r\n        if i==1:\r\n            count=count+1\r\n    if count==0:\r\n        print(\"0\")\r\n    elif count==4:\r\n        print(\"2\")\r\n    else:\r\n        print(\"1\")\r\n        \r\n        \r\n        ","prob_desc_sample_outputs":"[\"0\\n1\\n2\"]","lang_cluster":"Python","code_uid":"b867f5e9bed642f2a55452d6058ee2d4","prob_desc_notes":null,"prob_desc_output_spec":"For each test case, print one integer \u2014 the minimum number of moves required to cut the grass in all non-empty cells of the field (i.\u2009e. make all $$$a_{i, j}$$$ zeros) in the corresponding test case.","prob_desc_output_to":"standard output","prob_desc_description":"There is a field of size $$$2 \\times 2$$$. Each cell of this field can either contain grass or be empty. The value $$$a_{i, j}$$$ is $$$1$$$ if the cell $$$(i, j)$$$ contains grass, or $$$0$$$ otherwise.In one move, you can choose one row and one column and cut all the grass in this row and this column. In other words, you choose the row $$$x$$$ and the column $$$y$$$, then you cut the grass in all cells $$$a_{x, i}$$$ and all cells $$$a_{i, y}$$$ for all $$$i$$$ from $$$1$$$ to $$$2$$$. After you cut the grass from a cell, it becomes empty (i.\u2009e. its value is replaced by $$$0$$$).Your task is to find the minimum number of moves required to cut the grass in all non-empty cells of the field (i.\u2009e. make all $$$a_{i, j}$$$ zeros).You have to answer $$$t$$$ independent test cases.","hidden_unit_tests":"[{\"input\": \"3\\n0 0\\n0 0\\n1 0\\n0 1\\n1 1\\n1 1\\n\", \"output\": [\"0 \\n1 \\n2\\n \", \"0\\n1\\n2\", \"0 \\n1 \\n2 \\n\", \"\\n0\\n1\\n2\\n\", \"0\\n1\\n2\\n\", \"0\\n1\\n2\\n\", \"\\n0\\n\\n1\\n\\n2\\n\", \"0 1 2\\n\", \"0\\n1\\n2\", \"0\\n1\\n2\\n\\n\", \"\\n0\\n1\\n2\", \"0 1 2 \", \"0\\n1\\n2\\n\", \"0\\n1\\n2\\n\\n\"]}, {\"input\": \"16\\n0 0\\n1 1\\n0 1\\n1 0\\n1 0\\n0 1\\n0 0\\n0 0\\n0 0\\n0 1\\n0 1\\n1 1\\n1 1\\n0 0\\n0 1\\n0 1\\n1 1\\n0 1\\n1 0\\n0 0\\n1 1\\n1 0\\n1 1\\n1 1\\n0 1\\n0 0\\n0 0\\n1 0\\n1 0\\n1 1\\n1 0\\n1 0\\n\", \"output\": [\"1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n\", \"1 \\n1 \\n1 \\n0 \\n1 \\n1 \\n1 \\n1 \\n1 \\n1 \\n1 \\n2 \\n1 \\n1 \\n1 \\n1 \\n\", \"1 1 1 0 1 1 1 1 1 1 1 2 1 1 1 1 \", \"\\n1\\n\\n1\\n\\n1\\n\\n0\\n\\n1\\n1\\n\\n1\\n\\n1\\n\\n1\\n\\n1\\n1\\n\\n2\\n\\n1\\n1\\n1\\n\\n1\\n\", \"\\n1\\n\\n1\\n\\n1\\n\\n0\\n\\n1\\n\\n1\\n\\n1\\n\\n1\\n\\n1\\n\\n1\\n\\n1\\n\\n2\\n\\n1\\n\\n1\\n\\n1\\n\\n1\\n\", \"1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n\", \"1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n\\n\", \"1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\", \"1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\", \"\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n\", \"1 \\n1 \\n1 \\n0 \\n1 \\n1 \\n1 \\n1 \\n1 \\n1 \\n1 \\n2\\n 1 \\n1 \\n1 \\n1 \\n\", \"1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n\", \"1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n\\n\"]}, {\"input\": \"2\\n1 1\\n1 1\\n1 1\\n1 1\\n\", \"output\": [\"2\\n2\\n\\n\", \"2 2 \", \"2\\n2\\n\", \"2\\n2\\n\", \"2\\n 2\\n \", \"2 \\n2 \\n\", \"\\n2\\n2\\n\", \"2\\n2\\n\", \"\\n2\\n\\n2\\n\", \"2\\n2\\n\\n\", \"2\\n2\", \"2\\n2\"]}, {\"input\": \"4\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\", \"output\": [\"2\\n2\\n2\\n2\\n\", \"\\n2\\n2\\n2\\n2\\n\", \"2\\n2\\n2\\n2\", \"2\\n2\\n2\\n2\\n\", \"2\\n2\\n2\\n2\\n\\n\", \"2\\n 2\\n 2\\n 2\\n \", \"2 2 2 2 \", \"2\\n2\\n2\\n2\\n\", \"2 \\n2 \\n2 \\n2 \\n\", \"2\\n2\\n2\\n2\", \"\\n2\\n\\n2\\n\\n2\\n\\n2\\n\", \"2\\n2\\n2\\n2\\n\\n\"]}]","length":21,"num_hidden_unit_tests":4}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\nbaabbb\", \"10\\nooopppssss\", \"1\\nz\"]","prob_desc_input_spec":"The first line contains integer $$$n$$$ ($$$1 \\le n \\le 55$$$) \u2014 the length of the encrypted string. The second line of the input contains $$$t$$$ \u2014 the result of encryption of some string $$$s$$$. It contains only lowercase Latin letters. The length of $$$t$$$ is exactly $$$n$$$. It is guaranteed that the answer to the test exists.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"08e8c0c37b223f6aae01d5609facdeaf","prob_desc_created_at":"1545921300","source_code":"#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Aug 31 18:23:00 2019\n\n@author: apple\n\"\"\"\nn=int(input())\nes=input()\nc=[]\nsum=0\nfor i in range(n):\n    if(sum<n):\n        c.append(es[sum])\n        sum+=i\n    else:\n        break\ns=\"\"\nfor i in range(len(c)):               #coonteestt\n     s+=c[i] \nif(n>1):\n   print(s[1:])\nelse:\n    print(es)\n     ","prob_desc_sample_outputs":"[\"bab\", \"oops\", \"z\"]","lang_cluster":"Python","code_uid":"224b877d5109632528b49e9833f2207b","prob_desc_notes":null,"prob_desc_output_spec":"Print such string $$$s$$$ that after encryption it equals $$$t$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Polycarp loves ciphers. He has invented his own cipher called repeating.Repeating cipher is used for strings. To encrypt the string $$$s=s_{1}s_{2} \\dots s_{m}$$$ ($$$1 \\le m \\le 10$$$), Polycarp uses the following algorithm:  he writes down $$$s_1$$$ ones,  he writes down $$$s_2$$$ twice,  he writes down $$$s_3$$$ three times,  ...  he writes down $$$s_m$$$ $$$m$$$ times. For example, if $$$s$$$=\"bab\" the process is: \"b\" $$$\\to$$$ \"baa\" $$$\\to$$$ \"baabbb\". So the encrypted $$$s$$$=\"bab\" is \"baabbb\".Given string $$$t$$$ \u2014 the result of encryption of some string $$$s$$$. Your task is to decrypt it, i.\u2009e. find the string $$$s$$$.","hidden_unit_tests":"[{\"input\": \"6\\r\\nbaabbb\\r\\n\", \"output\": [\"bab\\n\", \"bab\", \"bab\\r\\n\"]}, {\"input\": \"10\\r\\nooopppssss\\r\\n\", \"output\": [\"oops\\r\\n\", \"oops\\n\", \"oops\"]}, {\"input\": \"1\\r\\nz\\r\\n\", \"output\": [\"z\\n\", \"z\", \"z\\r\\n\"]}, {\"input\": \"3\\r\\nzww\\r\\n\", \"output\": [\"zw\", \"zw\\n\", \"zw\\r\\n\"]}, {\"input\": \"55\\r\\ncooooonnnnttttteeeeeeeeeeeeessssssssttttttttttttttttttt\\r\\n\", \"output\": [\"coonteestt\\r\\n\", \"coonteestt\", \"coonteestt\\n\"]}, {\"input\": \"21\\r\\ncoodddeeeecccccoooooo\\r\\n\", \"output\": [\"codeco\", \"codeco\\r\\n\", \"codeco\\n\"]}, {\"input\": \"55\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"aaaaaaaaaa\\r\\n\", \"aaaaaaaaaa\\n\", \"aaaaaaaaaa\"]}, {\"input\": \"36\\r\\nabbcccddddeeeeeffffffggggggghhhhhhhh\\r\\n\", \"output\": [\"abcdefgh\\n\", \"abcdefgh\\r\\n\", \"abcdefgh\"]}]","length":25,"num_hidden_unit_tests":8}
{"prob_desc_memory_limit":"512 megabytes","difficulty":1900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 3\", \"4 2\", \"4 6\", \"1337 424242424242\"]","prob_desc_input_spec":"The only line of the input contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 3 \\cdot 10^5$$$; $$$1 \\le m \\le 10^{12}$$$).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"0fdd91ed33431848614075ebe9d2ee68","prob_desc_created_at":"1666276500","source_code":"#!\/bin\/env python\n\nfrom typing import List\nfrom math import sqrt\n\nMOD = 998244353\n\n\ndef sieve(n) -> List[bool]:\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(4, n + 1, 2):\n        is_prime[i] = False\n    \n    for i in range(3, int(sqrt(n)) + 2, 2):\n        if is_prime[i]:\n            for j in range(i * i, n, 2 * i):\n                is_prime[j] = False\n    \n    return is_prime\n\n\ndef main():\n    n, m = map(int, input().split())\n    is_prime = sieve(n)\n\n    unambiguous = 0\n    last = 1\n    primes_acc = 1\n\n    for i in range(1, n + 1):\n        if primes_acc > m:\n            break\n\n        if is_prime[i]:\n            primes_acc *= i\n\n        last *= m \/\/ primes_acc\n        unambiguous = (unambiguous + last) % MOD\n\n    \n    if m != 1:\n        all = pow(m, n + 1, MOD) - 1\n        all = (all * pow(m - 1, MOD - 2, MOD) - 1 + MOD) % MOD\n    else:\n        all = n % MOD\n\n    ans = (all - unambiguous + MOD) % MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","prob_desc_sample_outputs":"[\"6\", \"26\", \"1494\", \"119112628\"]","lang_cluster":"Python","code_uid":"f62fa553ce31f380fcc59493c49fb6eb","prob_desc_notes":null,"prob_desc_output_spec":"Print one integer \u2014 the number of ambiguous arrays $$$a$$$ such that the length of $$$a$$$ is from $$$1$$$ to $$$n$$$ and each $$$a_i$$$ is an integer from $$$1$$$ to $$$m$$$. Since the answer can be very large, print it modulo $$$998244353$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Consider an array $$$a$$$ of length $$$n$$$ with elements numbered from $$$1$$$ to $$$n$$$. It is possible to remove the $$$i$$$-th element of $$$a$$$ if $$$gcd(a_i, i) = 1$$$, where $$$gcd$$$ denotes the greatest common divisor. After an element is removed, the elements to the right are shifted to the left by one position.An array $$$b$$$ with $$$n$$$ integers such that $$$1 \\le b_i \\le n - i + 1$$$ is a removal sequence for the array $$$a$$$ if it is possible to remove all elements of $$$a$$$, if you remove the $$$b_1$$$-th element, then the $$$b_2$$$-th, ..., then the $$$b_n$$$-th element. For example, let $$$a = [42, 314]$$$:  $$$[1, 1]$$$ is a removal sequence: when you remove the $$$1$$$-st element of the array, the condition $$$gcd(42, 1) = 1$$$ holds, and the array becomes $$$[314]$$$; when you remove the $$$1$$$-st element again, the condition $$$gcd(314, 1) = 1$$$ holds, and the array becomes empty.  $$$[2, 1]$$$ is not a removal sequence: when you try to remove the $$$2$$$-nd element, the condition $$$gcd(314, 2) = 1$$$ is false. An array is ambiguous if it has at least two removal sequences. For example, the array $$$[1, 2, 5]$$$ is ambiguous: it has removal sequences $$$[3, 1, 1]$$$ and $$$[1, 2, 1]$$$. The array $$$[42, 314]$$$ is not ambiguous: the only removal sequence it has is $$$[1, 1]$$$.You are given two integers $$$n$$$ and $$$m$$$. You have to calculate the number of ambiguous arrays $$$a$$$ such that the length of $$$a$$$ is from $$$1$$$ to $$$n$$$ and each $$$a_i$$$ is an integer from $$$1$$$ to $$$m$$$.","hidden_unit_tests":"[{\"input\": \"2 3\\n\", \"output\": [\"6\\n\", \"\\n6\", \"6\", \"6\\n\", \"6 \\n\", \"6 \", \"6\\n\\n\", \"6\\n\\n\\n\", \"6\\n\\n\"]}, {\"input\": \"4 2\\n\", \"output\": [\"\\n26\", \"26 \\n\", \"26\\n\", \"26\", \"26\\n\\n\", \"26\\n\\n\\n\", \"26\\n\\n\", \"26\\n\", \"26 \"]}, {\"input\": \"4 6\\n\", \"output\": [\"1494\\n\", \"1494\\n\\n\", \"1494\", \"1494 \", \"1494\\n\\n\\n\", \"1494 \\n\", \"\\n1494\", \"1494\\n\", \"1494\\n\\n\"]}, {\"input\": \"1337 424242424242\\n\", \"output\": [\"119112628 \\n\", \"119112628\\n\\n\", \"119112628\\n\\n\", \"\\n119112628\", \"119112628\\n\", \"119112628 \", \"119112628\", \"119112628\\n\\n\\n\", \"119112628\\n\"]}, {\"input\": \"300000 1000000000\\n\", \"output\": [\"590856313 \\n\", \"590856313 \", \"590856313\", \"590856313\\n\", \"590856313\\n\\n\", \"590856313\\n\", \"590856313\\n\\n\\n\", \"\\n590856313\", \"590856313\\n\\n\"]}, {\"input\": \"300000 1\\n\", \"output\": [\"299999\\n\", \"299999 \\n\", \"299999 \", \"\\n299999\", \"299999\\n\\n\\n\", \"299999\\n\", \"299999\\n\\n\", \"299999\\n\\n\", \"299999\"]}, {\"input\": \"2 1\\n\", \"output\": [\"\\n1\", \"1\\n\\n\\n\", \"1\", \"1\\n\", \"1\\n\\n\", \"1 \\n\", \"1\\n\\n\", \"1 \", \"1\\n\"]}, {\"input\": \"2 1000000000000\\n\", \"output\": [\"\\n138131255\", \"138131255\", \"138131255\\n\", \"138131255\\n\", \"138131255\\n\\n\", \"138131255\\n\\n\", \"138131255\\n\\n\\n\", \"138131255 \\n\", \"138131255 \"]}, {\"input\": \"17957 2\\n\", \"output\": [\"653647969\", \"653647969\\n\", \"653647969 \\n\", \"653647969\\n\", \"653647969\\n\\n\", \"\\n653647969\", \"653647969\\n\\n\\n\", \"653647969 \", \"653647969\\n\\n\"]}]","length":53,"num_hidden_unit_tests":9}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1100.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"2\"]","prob_desc_input_spec":"The only line of the input contains one integer n (0\u2009\u2264\u2009n\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"c046895a90f2e1381a7c1867020453bd","prob_desc_created_at":"1455807600","source_code":"n = int(input())\nprint(2 * n + 1 + (3 * n + 1) * n)","prob_desc_sample_outputs":"[\"19\"]","lang_cluster":"Python","code_uid":"df983b614a58da759291428ab427331f","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer \u2014 the number of hexagons situated not farther than n cells away from a given cell.","prob_desc_output_to":"standard output","prob_desc_description":"After a probationary period in the game development company of IT City Petya was included in a group of the programmers that develops a new turn-based strategy game resembling the well known \"Heroes of Might &amp; Magic\". A part of the game is turn-based fights of big squadrons of enemies on infinite fields where every cell is in form of a hexagon.Some of magic effects are able to affect several field cells at once, cells that are situated not farther than n cells away from the cell in which the effect was applied. The distance between cells is the minimum number of cell border crosses on a path from one cell to another.It is easy to see that the number of cells affected by a magic effect grows rapidly when n increases, so it can adversely affect the game performance. That's why Petya decided to write a program that can, given n, determine the number of cells that should be repainted after effect application, so that game designers can balance scale of the effects and the game performance. Help him to do it. Find the number of hexagons situated not farther than n cells away from a given cell.  ","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"749431\\r\\n\", \"output\": [\"1684942719577\"]}, {\"input\": \"748629743\\r\\n\", \"output\": [\"1681339478558627377\"]}, {\"input\": \"945234000\\r\\n\", \"output\": [\"2680401947103702001\"]}, {\"input\": \"900000000\\r\\n\", \"output\": [\"2430000002700000001\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"2999999997000000001\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"3000000003000000001\"]}]","length":2,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1100.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"2\"]","prob_desc_input_spec":"The only line of input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u200955) \u2014 the maximum length of a number that a door-plate can hold.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"f1b43baa14d4c262ba616d892525dfde","prob_desc_created_at":"1455807600","source_code":"n = int(input())\nans = 0\nfor x in range(1, n + 1):\n\tans += 2 ** x\nprint(ans)","prob_desc_sample_outputs":"[\"6\"]","lang_cluster":"Python","code_uid":"4bbb9125f1f05afaef524fb9830cb251","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer \u2014 the maximum number of offices, than can have unique lucky numbers not longer than n digits.","prob_desc_output_to":"standard output","prob_desc_description":"The numbers of all offices in the new building of the Tax Office of IT City will have lucky numbers.Lucky number is a number that consists of digits 7 and 8 only. Find the maximum number of offices in the new building of the Tax Office given that a door-plate can hold a number not longer than n digits.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"62\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"8190\"]}, {\"input\": \"34\\r\\n\", \"output\": [\"34359738366\"]}, {\"input\": \"43\\r\\n\", \"output\": [\"17592186044414\"]}, {\"input\": \"49\\r\\n\", \"output\": [\"1125899906842622\"]}, {\"input\": \"54\\r\\n\", \"output\": [\"36028797018963966\"]}, {\"input\": \"55\\r\\n\", \"output\": [\"72057594037927934\"]}]","length":5,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1400.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"5\"]","prob_desc_input_spec":"The only line of the input contains one integer n (5\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of east to west paths and north to south paths.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"92db14325cd8aee06b502c12d2e3dd81","prob_desc_created_at":"1455807600","source_code":"n = int(input())\nprint(((n*(n-1)*(n-2)*(n-3)*(n-4))**2)\/\/120)","prob_desc_sample_outputs":"[\"120\"]","lang_cluster":"Python","code_uid":"59818fd9dcb02014b1f1ecbc70fab20e","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer \u2014 the number of ways to place the benches.","prob_desc_output_to":"standard output","prob_desc_description":"The city park of IT City contains n east to west paths and n north to south paths. Each east to west path crosses each north to south path, so there are n2 intersections.The city funded purchase of five benches. To make it seems that there are many benches it was decided to place them on as many paths as possible. Obviously this requirement is satisfied by the following scheme: each bench is placed on a cross of paths and each path contains not more than one bench.Help the park administration count the number of ways to place the benches.","hidden_unit_tests":"[{\"input\": \"5\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"4320\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"52920\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"1082161080\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"4594961280\"]}, {\"input\": \"72\\r\\n\", \"output\": [\"23491596420472320\"]}, {\"input\": \"83\\r\\n\", \"output\": [\"101159538130177920\"]}, {\"input\": \"95\\r\\n\", \"output\": [\"402852449038723320\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"613867215317368320\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"680185280130048000\"]}]","length":2,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1500.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"12\"]","prob_desc_input_spec":"The only line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091018) \u2014 the prediction on the number of people who will buy the game.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"e392be5411ffccc1df50e65ec1f5c589","prob_desc_created_at":"1455807600","source_code":"def main():\n\tn = int(input())\n\tprint(solver(n))\n\ndef solver(n):\n\tfactors = [2, 3, 5, 7]\n\tsingles = n \/\/ 2 + n \/\/ 3 + n \/\/ 5 + n \/\/ 7\n\tpairs = n \/\/ (2 * 3) + n \/\/ (2 * 5) + n \/\/ (2 * 7) + \\\n\tn \/\/ (3 * 5) + n \/\/ (3 * 7) + n \/\/ (5 * 7)\n\ttriples = n \/\/ (2 * 3 * 5) + n \/\/ (2 * 3 * 7) + \\\n\tn \/\/ (2 * 5 * 7) + n \/\/ (3 * 5 * 7)\n\tquads = n \/\/ (2 * 3 * 5 * 7)\n\treturn n - singles + pairs - triples + quads\n\nmain()","prob_desc_sample_outputs":"[\"2\"]","lang_cluster":"Python","code_uid":"55019f26f970076f44fd5b6f9d161b40","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer showing how many numbers from 1 to n are not divisible by any number from 2 to 10.","prob_desc_output_to":"standard output","prob_desc_description":"IT City company developing computer games decided to upgrade its way to reward its employees. Now it looks the following way. After a new game release users start buying it actively, and the company tracks the number of sales with precision to each transaction. Every time when the next number of sales is not divisible by any number from 2 to 10 every developer of this game gets a small bonus.A game designer Petya knows that the company is just about to release a new game that was partly developed by him. On the basis of his experience he predicts that n people will buy the game during the first month. Now Petya wants to determine how many times he will get the bonus. Help him to know it.","hidden_unit_tests":"[{\"input\": \"12\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2519\\r\\n\", \"output\": [\"576\"]}, {\"input\": \"2521\\r\\n\", \"output\": [\"577\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"314159265\\r\\n\", \"output\": [\"71807832\"]}, {\"input\": \"718281828459045235\\r\\n\", \"output\": [\"164178703647781768\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"228571428571428571\"]}, {\"input\": \"987654321234567890\\r\\n\", \"output\": [\"225749559139329804\"]}, {\"input\": \"3628800\\r\\n\", \"output\": [\"829440\"]}, {\"input\": \"504000000000000000\\r\\n\", \"output\": [\"115200000000000000\"]}]","length":15,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"512 4\", \"1000000000 9\"]","prob_desc_input_spec":"The first line of the input contains two integer numbers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 10^9$$$, $$$1 \\le k \\le 50$$$) \u2014 the number from which Tanya will subtract and the number of subtractions correspondingly.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"064162604284ce252b88050b4174ba55","prob_desc_created_at":"1567258500","source_code":"a = input().split()\nn = int(a[0])\nk = int(a[1])\n\nfor i in range(k):\n    if n%10!=0:\n        n=n-1\n    else:\n        n=n\/10\n        \nprint(int(n))\n    \n","prob_desc_sample_outputs":"[\"50\", \"1\"]","lang_cluster":"Python","code_uid":"e5c2241b407b75ddf3458e4e78dbdc59","prob_desc_notes":"NoteThe first example corresponds to the following sequence: $$$512 \\rightarrow 511 \\rightarrow 510 \\rightarrow 51 \\rightarrow 50$$$.","prob_desc_output_spec":"Print one integer number \u2014 the result of the decreasing $$$n$$$ by one $$$k$$$ times. It is guaranteed that the result will be positive integer number. ","prob_desc_output_to":"standard output","prob_desc_description":"Little girl Tanya is learning how to decrease a number by one, but she does it wrong with a number consisting of two or more digits. Tanya subtracts one from a number by the following algorithm:  if the last digit of the number is non-zero, she decreases the number by one;  if the last digit of the number is zero, she divides the number by 10 (i.e. removes the last digit). You are given an integer number $$$n$$$. Tanya will subtract one from it $$$k$$$ times. Your task is to print the result after all $$$k$$$ subtractions.It is guaranteed that the result will be positive integer number.","hidden_unit_tests":"[{\"input\": \"512 4\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1000000000 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"131203 11\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"999999999 50\\r\\n\", \"output\": [\"9999\"]}, {\"input\": \"999999999 49\\r\\n\", \"output\": [\"99990\"]}, {\"input\": \"131203 9\\r\\n\", \"output\": [\"130\"]}, {\"input\": \"900000000 16\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"909090909 50\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1001 2\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"5 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"1\"]}]","length":12,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1100.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"3000\"]","prob_desc_input_spec":"The only line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091018) \u2014 the prediction on the number of people who will buy the game.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"8551308e5ff435e0fc507b89a912408a","prob_desc_created_at":"1455807600","source_code":"print(int(int(input())\/2520))","prob_desc_sample_outputs":"[\"1\"]","lang_cluster":"Python","code_uid":"64a8de51f0cd1a62244b393fad5dd07d","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer showing how many numbers from 1 to n are divisible by all numbers from 2 to 10.","prob_desc_output_to":"standard output","prob_desc_description":"IT City company developing computer games invented a new way to reward its employees. After a new game release users start buying it actively, and the company tracks the number of sales with precision to each transaction. Every time when the next number of sales is divisible by all numbers from 2 to 10 every developer of this game gets a small bonus.A game designer Petya knows that the company is just about to release a new game that was partly developed by him. On the basis of his experience he predicts that n people will buy the game during the first month. Now Petya wants to determine how many times he will get the bonus. Help him to know it.","hidden_unit_tests":"[{\"input\": \"3000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2520\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2519\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2521\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"314159265\\r\\n\", \"output\": [\"124666\"]}, {\"input\": \"718281828459045235\\r\\n\", \"output\": [\"285032471610732\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"396825396825396\"]}, {\"input\": \"987654321234567890\\r\\n\", \"output\": [\"391926317950225\"]}, {\"input\": \"3628800\\r\\n\", \"output\": [\"1440\"]}, {\"input\": \"504000000000000000\\r\\n\", \"output\": [\"200000000000000\"]}]","length":1,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"25 3\", \"50 5\"]","prob_desc_input_spec":"The only input line contains a pair of integers a, n (1\u2009\u2264\u2009a,\u2009n\u2009\u2264\u2009107; a\u2009+\u2009n\u2009-\u20091\u2009\u2264\u2009107).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"915081861e391958dce6ee2a117abd4e","prob_desc_created_at":"1333440000","source_code":"F = {}\n\ndef f(k):\n    if not k in F:\n        s, i, j = 0, 4, 4\n        while i <= k:\n            s += i * f(k \/\/ i)\n            i += j + 1\n            j += 2\n        F[k] = (k * (k + 1)) \/\/ 2 - s\n    return F[k]\n\ndef g(k):\n    s, i, j = 0, 4, 4\n    while i <= k:\n        s += (i - 1) * f(k \/\/ i)\n        i += j + 1\n        j += 2\n    return (k * (k + 1)) \/\/ 2 - s\n\na, n = map(int, input().split())\nprint(g(a + n - 1) - g(a - 1))","prob_desc_sample_outputs":"[\"30\", \"125\"]","lang_cluster":"Python","code_uid":"7eec0f17c590fb5fd85d790a34f8d98a","prob_desc_notes":"NoteA note to the first sample test. A year of 25 days will consist of one month containing 25 days. A year of 26 days will consist of 26 months, one day each. A year of 27 days will have three months, 9 days each.","prob_desc_output_spec":"Print the required number p.  Please, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use cin, cout streams or the %I64d specifier.","prob_desc_output_to":"standard output","prob_desc_description":"Reforms have started in Berland again! At this time, the Parliament is discussing the reform of the calendar. To make the lives of citizens of Berland more varied, it was decided to change the calendar. As more and more people are complaining that \"the years fly by...\", it was decided that starting from the next year the number of days per year will begin to grow. So the coming year will have exactly a days, the next after coming year will have a\u2009+\u20091 days, the next one will have a\u2009+\u20092 days and so on. This schedule is planned for the coming n years (in the n-th year the length of the year will be equal a\u2009+\u2009n\u2009-\u20091 day).No one has yet decided what will become of months. An MP Palevny made the following proposal.   The calendar for each month is comfortable to be printed on a square sheet of paper. We are proposed to make the number of days in each month be the square of some integer. The number of days per month should be the same for each month of any year, but may be different for different years.  The number of days in each year must be divisible by the number of days per month in this year. This rule ensures that the number of months in each year is an integer.  The number of days per month for each year must be chosen so as to save the maximum amount of paper to print the calendars. In other words, the number of days per month should be as much as possible. These rules provide an unambiguous method for choosing the number of days in each month for any given year length. For example, according to Palevny's proposition, a year that consists of 108 days will have three months, 36 days each. The year that consists of 99 days will have 11 months, 9 days each, and a year of 365 days will have 365 months, one day each.The proposal provoked heated discussion in the community, the famous mathematician Perelmanov quickly calculated that if the proposal is supported, then in a period of n years, beginning with the year that has a days, the country will spend p sheets of paper to print a set of calendars for these years. Perelmanov's calculations take into account the fact that the set will contain one calendar for each year and each month will be printed on a separate sheet.Repeat Perelmanov's achievement and print the required number p. You are given positive integers a and n. Perelmanov warns you that your program should not work longer than four seconds at the maximum test.","hidden_unit_tests":"[{\"input\": \"25 3\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"50 5\\r\\n\", \"output\": [\"125\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 10\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"1 5000000\\r\\n\", \"output\": [\"8224640917276\"]}, {\"input\": \"5000000 5000000\\r\\n\", \"output\": [\"24674231279431\"]}, {\"input\": \"4000000 5000000\\r\\n\", \"output\": [\"21384022194564\"]}, {\"input\": \"3000000 5000000\\r\\n\", \"output\": [\"18094224526592\"]}, {\"input\": \"1000000 5000000\\r\\n\", \"output\": [\"11514506860120\"]}, {\"input\": \"1 10000000\\r\\n\", \"output\": [\"32898872196712\"]}]","length":22,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 2 2\", \"5 1 5\"]","prob_desc_input_spec":"The only input line contains three integers $$$n$$$, $$$l$$$ and $$$r$$$ ($$$1 \\leq n \\leq 1\\,000$$$, $$$1 \\leq l \\leq r \\leq \\min(n, 20)$$$)\u00a0\u2014 an array's size, the minimal number and the maximal number of distinct elements in an array.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"ce220726392fb0cacf0ec44a7490084a","prob_desc_created_at":"1566311700","source_code":"n,l,r=map(int,input().split())\nm=n\na=1\nx=0\nA=[]\nB=[]\nwhile n>0:\n    if l==1:\n        A.append(1)\n        n-=1\n    else:\n        A.append(2**(l-1))\n        l-=1\n        n-=1\nwhile x<m:\n    if a==r:\n        B.append(2**(a-1))\n        x+=1\n    else:\n        B.append(2**(a-1))\n        x+=1\n        a+=1\nprint(sum(A),sum(B))\n        \n    \n    \n    \n","prob_desc_sample_outputs":"[\"5 7\", \"5 31\"]","lang_cluster":"Python","code_uid":"0dff3782c421099f55a098c99f27387c","prob_desc_notes":"NoteIn the first example, an array could be the one of the following: $$$[1,1,1,2]$$$, $$$[1,1,2,2]$$$ or $$$[1,2,2,2]$$$. In the first case the minimal sum is reached and in the last case the maximal sum is reached.In the second example, the minimal sum is reached at the array $$$[1,1,1,1,1]$$$, and the maximal one is reached at the array $$$[1,2,4,8,16]$$$.","prob_desc_output_spec":"Output two numbers\u00a0\u2014 the minimal and the maximal possible sums of all elements in an array.","prob_desc_output_to":"standard output","prob_desc_description":"Mislove had an array $$$a_1$$$, $$$a_2$$$, $$$\\cdots$$$, $$$a_n$$$ of $$$n$$$ positive integers, but he has lost it. He only remembers the following facts about it: The number of different numbers in the array is not less than $$$l$$$ and is not greater than $$$r$$$; For each array's element $$$a_i$$$ either $$$a_i = 1$$$ or $$$a_i$$$ is even and there is a number $$$\\dfrac{a_i}{2}$$$ in the array.For example, if $$$n=5$$$, $$$l=2$$$, $$$r=3$$$ then an array could be $$$[1,2,2,4,4]$$$ or $$$[1,1,1,1,2]$$$; but it couldn't be $$$[1,2,2,4,8]$$$ because this array contains $$$4$$$ different numbers; it couldn't be $$$[1,2,2,3,3]$$$ because $$$3$$$ is odd and isn't equal to $$$1$$$; and it couldn't be $$$[1,1,2,2,16]$$$ because there is a number $$$16$$$ in the array but there isn't a number $$$\\frac{16}{2} = 8$$$.According to these facts, he is asking you to count the minimal and the maximal possible sums of all elements in an array. ","hidden_unit_tests":"[{\"input\": \"4 2 2\\r\\n\", \"output\": [\"5 7\"]}, {\"input\": \"5 1 5\\r\\n\", \"output\": [\"5 31\"]}, {\"input\": \"106 16 18\\r\\n\", \"output\": [\"65625 11796479\"]}, {\"input\": \"114 18 19\\r\\n\", \"output\": [\"262239 25427967\"]}, {\"input\": \"655 3 18\\r\\n\", \"output\": [\"659 83755007\"]}, {\"input\": \"1000 1 20\\r\\n\", \"output\": [\"1000 514850815\"]}, {\"input\": \"1000 20 20\\r\\n\", \"output\": [\"1049555 514850815\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"588 13 15\\r\\n\", \"output\": [\"8766 9420799\"]}, {\"input\": \"408 13 13\\r\\n\", \"output\": [\"8586 1626111\"]}, {\"input\": \"879 17 17\\r\\n\", \"output\": [\"131933 56623103\"]}, {\"input\": \"17 2 14\\r\\n\", \"output\": [\"18 40959\"]}, {\"input\": \"624 7 17\\r\\n\", \"output\": [\"744 39911423\"]}, {\"input\": \"1000 1 1\\r\\n\", \"output\": [\"1000 1000\"]}]","length":27,"num_hidden_unit_tests":14}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n5 10 2 3 14 5\", \"2\\n1 100\"]","prob_desc_input_spec":"The first line of the input contains one integer $$$n$$$ ($$$2 \\le n \\le 100$$$) \u2014 the number of students. It is guaranteed that $$$n$$$ is even. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 100$$$), where $$$a_i$$$ is the skill of the $$$i$$$-th student.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"55485fe203a114374f0aae93006278d3","prob_desc_created_at":"1545143700","source_code":"import sys, os, io\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(sys.stdin.readline())\ndef ria(): return list(map(int, sys.stdin.readline().split()))\ndef ws(s): sys.stdout.write(s + '\\n')\ndef wi(n): sys.stdout.write(str(n) + '\\n')\ndef wia(a): sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')\nimport math,datetime,functools\nfrom collections import deque,defaultdict,OrderedDict\nimport collections\n\n\ndef main():\n    starttime=datetime.datetime.now()\n    if(os.path.exists('input.txt')):\n        sys.stdin = open(\"input.txt\",\"r\")\n        sys.stdout = open(\"output.txt\",\"w\")\n    \n\n\n\n\n\n    #Solving Area Starts-->\n    for _ in range(1):\n        n=ri()\n        a=ria()\n        a=sorted(a)\n        s=0\n        for i in range(1,n,2):\n            s+=a[i]-a[i-1]\n        wi(s)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    #<--Solving Area Ends\n    endtime=datetime.datetime.now()\n    time=(endtime-starttime).total_seconds()*1000\n    if(os.path.exists('input.txt')):\n        print(\"Time:\",time,\"ms\")  \n    \n                \nclass FastReader(io.IOBase):\n    newlines = 0\n\n    def __init__(self, fd, chunk_size=1024 * 8):\n        self._fd = fd\n        self._chunk_size = chunk_size\n        self.buffer = io.BytesIO()\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, self._chunk_size))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self, size=-1):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, self._chunk_size if size == -1 else size))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n\nclass FastWriter(io.IOBase):\n\n    def __init__(self, fd):\n        self._fd = fd\n        self.buffer = io.BytesIO()\n        self.write = self.buffer.write\n\n    def flush(self):\n        os.write(self._fd, self.buffer.getvalue())\n        self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass FastStdin(io.IOBase):\n    def __init__(self, fd=0):\n        self.buffer = FastReader(fd)\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nclass FastStdout(io.IOBase):\n    def __init__(self, fd=1):\n        self.buffer = FastWriter(fd)\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.flush = self.buffer.flush\n\n\nif __name__ == '__main__':\n    sys.stdin = FastStdin()\n    sys.stdout = FastStdout()\n    main()\n\n\n\n\n\n\n\n","prob_desc_sample_outputs":"[\"5\", \"99\"]","lang_cluster":"Python","code_uid":"90ef4f3870b03277a543b96b8bd58d15","prob_desc_notes":"NoteIn the first example the optimal teams will be: $$$(3, 4)$$$, $$$(1, 6)$$$ and $$$(2, 5)$$$, where numbers in brackets are indices of students. Then, to form the first team the third student should solve $$$1$$$ problem, to form the second team nobody needs to solve problems and to form the third team the second student should solve $$$4$$$ problems so the answer is $$$1 + 4 = 5$$$.In the second example the first student should solve $$$99$$$ problems to form a team with the second one.","prob_desc_output_spec":"Print one number \u2014 the minimum total number of problems students should solve to form exactly $$$\\frac{n}{2}$$$ teams.","prob_desc_output_to":"standard output","prob_desc_description":"There are $$$n$$$ students in a university. The number of students is even. The $$$i$$$-th student has programming skill equal to $$$a_i$$$. The coach wants to form $$$\\frac{n}{2}$$$ teams. Each team should consist of exactly two students, and each student should belong to exactly one team. Two students can form a team only if their skills are equal (otherwise they cannot understand each other and cannot form a team).Students can solve problems to increase their skill. One solved problem increases the skill by one.The coach wants to know the minimum total number of problems students should solve to form exactly $$$\\frac{n}{2}$$$ teams (i.e. each pair of students should form a team). Your task is to find this number.","hidden_unit_tests":"[{\"input\": \"6\\r\\n5 10 2 3 14 5\\r\\n\", \"output\": [\"5\", \"5\\n\\r\\n\", \"5\\r\\n\", \"5\\n\"]}, {\"input\": \"2\\r\\n1 100\\r\\n\", \"output\": [\"99\\n\\r\\n\", \"99\\r\\n\", \"99\", \"99\\n\"]}, {\"input\": \"100\\r\\n15 14 32 65 28 96 33 93 48 28 57 20 32 20 90 42 57 53 18 58 94 21 27 29 37 22 94 45 67 60 83 23 20 23 35 93 3 42 6 46 68 46 34 25 17 16 50 5 49 91 23 76 69 100 58 68 81 32 88 41 64 29 37 13 95 25 6 59 74 58 31 35 16 80 13 80 10 59 85 18 16 70 51 40 44 28 8 76 8 87 53 86 28 100 2 73 14 100 52 9\\r\\n\", \"output\": [\"60\\n\\r\\n\", \"60\\n\", \"60\", \"60\\r\\n\"]}, {\"input\": \"100\\r\\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"100\\r\\n45 59 59 59 45 45 45 59 45 59 45 45 59 59 45 45 45 59 45 45 45 59 45 59 59 59 45 45 45 59 45 59 59 45 45 59 59 59 59 45 59 59 45 45 45 45 59 45 59 59 59 45 45 45 59 45 45 59 59 45 45 59 45 59 59 59 59 59 59 45 45 59 45 59 59 45 45 59 59 45 59 59 45 59 59 59 45 59 45 45 59 45 59 59 45 59 59 59 59 59\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"100\\r\\n89 51 37 17 13 97 78 26 44 82 36 75 39 76 96 34 88 69 27 28 93 31 53 14 93 78 71 95 44 12 34 96 97 88 37 36 16 78 13 87 41 27 44 38 17 72 93 31 27 51 12 53 12 23 14 9 39 87 76 97 28 39 27 81 93 15 1 71 78 26 75 82 89 39 9 81 53 1 26 26 12 38 38 72 99 44 1 1 16 23 27 53 15 97 41 38 27 95 99 69\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"100\\r\\n98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39\\r\\n\", \"output\": [\"50\\r\\n\", \"50\\n\", \"50\", \"50\\n\\r\\n\"]}, {\"input\": \"100\\r\\n32 32 32 3 32 3 32 32 3 32 32 3 32 3 32 32 32 32 32 32 3 3 3 3 3 32 32 3 32 3 32 3 32 32 32 32 32 3 3 3 3 3 3 32 3 3 3 3 32 32 32 32 32 3 3 3 3 32 32 32 32 32 3 32 32 32 3 3 32 32 32 3 3 32 32 32 3 3 33 32 3 32 3 32 32 3 3 3 32 3 3 32 32 32 32 32 32 32 3 32\\r\\n\", \"output\": [\"1\", \"1\\n\", \"1\\n\\r\\n\", \"1\\r\\n\"]}, {\"input\": \"100\\r\\n31 76 76 31 31 31 31 31 31 76 31 31 76 31 31 76 31 76 31 76 31 76 76 31 31 76 76 76 31 31 31 31 31 76 31 76 31 31 31 76 76 76 76 31 76 76 31 76 76 31 76 31 31 76 31 76 31 76 31 31 76 31 31 31 31 31 76 31 31 31 31 76 31 31 31 76 76 31 31 31 76 31 76 31 76 32 77 76 76 31 76 31 31 31 76 31 31 31 76 31\\r\\n\", \"output\": [\"2\\n\\r\\n\", \"2\\n\", \"2\\r\\n\", \"2\"]}, {\"input\": \"100\\r\\n1 1 100 100 1 100 1 1 1 1 1 1 100 1 100 100 100 1 1 100 100 100 100 100 1 100 1 100 1 1 1 100 1 1 100 1 100 1 1 1 100 100 1 1 1 100 100 100 100 100 1 100 100 1 1 1 1 100 1 1 100 1 1 1 1 100 100 100 1 100 1 100 100 100 1 1 100 100 100 100 1 100 1 100 100 1 100 1 100 100 100 100 100 100 1 1 1 100 100 1\\r\\n\", \"output\": [\"99\\n\\r\\n\", \"99\\r\\n\", \"99\", \"99\\n\"]}, {\"input\": \"100\\r\\n55 2 69 13 65 71 65 8 9 87 57 43 64 53 3 74 55 31 87 5 79 47 9 29 5 31 59 1 79 97 48 91 36 40 92 37 76 73 21 44 98 55 47 1 96 63 37 83 35 8 50 54 84 100 62 98 88 1 78 57 48 46 55 49 30 100 11 39 27 61 38 55 67 16 95 25 76 67 20 46 91 91 50 33 65 64 82 30 31 42 85 78 42 29 2 69 12 50 54 79\\r\\n\", \"output\": [\"47\", \"47\\n\", \"47\\r\\n\", \"47\\n\\r\\n\"]}, {\"input\": \"2\\r\\n1 1\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"66\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"4\\r\\n3 2 99 99\\r\\n\", \"output\": [\"1\", \"1\\n\", \"1\\n\\r\\n\", \"1\\r\\n\"]}, {\"input\": \"2\\r\\n1 70\\r\\n\", \"output\": [\"69\\r\\n\", \"69\\n\", \"69\\n\\r\\n\", \"69\"]}, {\"input\": \"2\\r\\n1 71\\r\\n\", \"output\": [\"70\\r\\n\", \"70\", \"70\\n\", \"70\\n\\r\\n\"]}]","length":125,"num_hidden_unit_tests":16}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 3 2 3\", \"5 3 100 1\"]","prob_desc_input_spec":"The only line contains four integers $$$k$$$, $$$n$$$, $$$s$$$, $$$p$$$ ($$$1 \\le k, n, s, p \\le 10^4$$$)\u00a0\u2014 the number of people, the number of airplanes each should make, the number of airplanes that can be made using one sheet and the number of sheets in one pack, respectively.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"73f0c7cfc06a9b04e4766d6aa61fc780","prob_desc_created_at":"1524677700","source_code":"from math import *\nk, n, s, p = map(int, input().split())\nq = k * ceil(n \/ s)\nw = ceil(q \/ p)\nprint(w)\n","prob_desc_sample_outputs":"[\"4\", \"5\"]","lang_cluster":"Python","code_uid":"a20312e80bf4ce08b5c1c0917d811db1","prob_desc_notes":"NoteIn the first sample they have to buy $$$4$$$ packs of paper: there will be $$$12$$$ sheets in total, and giving $$$2$$$ sheets to each person is enough to suit everyone's needs.In the second sample they have to buy a pack for each person as they can't share sheets.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the minimum number of packs they should buy.","prob_desc_output_to":"standard output","prob_desc_description":"To make a paper airplane, one has to use a rectangular piece of paper. From a sheet of standard size you can make $$$s$$$ airplanes.A group of $$$k$$$ people decided to make $$$n$$$ airplanes each. They are going to buy several packs of paper, each of them containing $$$p$$$ sheets, and then distribute the sheets between the people. Each person should have enough sheets to make $$$n$$$ airplanes. How many packs should they buy?","hidden_unit_tests":"[{\"input\": \"5 3 2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"5 3 100 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"10000 10000 1 1\\r\\n\", \"output\": [\"100000000\"]}, {\"input\": \"1 1 10000 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"300 300 21 23\\r\\n\", \"output\": [\"196\"]}, {\"input\": \"300 2 37 51\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2 400 23 57\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000 10000 3 2\\r\\n\", \"output\": [\"16670000\"]}, {\"input\": \"1 2 1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 10 10\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5324 5439 32 13\\r\\n\", \"output\": [\"69622\"]}, {\"input\": \"9000 1 2432 1\\r\\n\", \"output\": [\"9000\"]}, {\"input\": \"230 1234 9124 23\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"11 1 1 1\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"6246 8489 1227 9\\r\\n\", \"output\": [\"4858\"]}, {\"input\": \"9 20 5 7\\r\\n\", \"output\": [\"6\"]}]","length":5,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 4\", \"2 1\"]","prob_desc_input_spec":"The only line contains two integers $$$N$$$ and $$$M$$$ ($$$1 \\leq N, M \\leq 10^9$$$) \u2014 the number of rows and columns in the grid.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"a91aab4c0618d036c81022232814ef44","prob_desc_created_at":"1662298500","source_code":"G = list(map(int, input().split()))\nN = G[0]\nM = G[1]\n\nif M > 1:\n  print(N * (M - 1))\nelse:\n  print(M * (N - 1))\n\t\t \t\t\t\t\t \t        \t\t\t\t\t  \t \t\t\t\t","prob_desc_sample_outputs":"[\"9\", \"1\"]","lang_cluster":"Python","code_uid":"bd0cd59e2175057a315437451a1cd34d","prob_desc_notes":"NoteThe picture below is the grid that Pak Chanek has in the first example.  The picture below is an example of a tight domino in the grid.  ","prob_desc_output_spec":"An integer representing the number of distinct tight dominoes in the grid.","prob_desc_output_to":"standard output","prob_desc_description":"Pak Chanek has a grid that has $$$N$$$ rows and $$$M$$$ columns. Each row is numbered from $$$1$$$ to $$$N$$$ from top to bottom. Each column is numbered from $$$1$$$ to $$$M$$$ from left to right.Each tile in the grid contains a number. The numbers are arranged as follows:   Row $$$1$$$ contains integers from $$$1$$$ to $$$M$$$ from left to right.  Row $$$2$$$ contains integers from $$$M+1$$$ to $$$2 \\times M$$$ from left to right.  Row $$$3$$$ contains integers from $$$2 \\times M+1$$$ to $$$3 \\times M$$$ from left to right.  And so on until row $$$N$$$. A domino is defined as two different tiles in the grid that touch by their sides. A domino is said to be tight if and only if the two numbers in the domino have a difference of exactly $$$1$$$. Count the number of distinct tight dominoes in the grid.Two dominoes are said to be distinct if and only if there exists at least one tile that is in one domino, but not in the other.","hidden_unit_tests":"[{\"input\": \"3 4\\n\", \"output\": [\"\\n9\", \"9\", \"9\\n\\n\", \"9\\n\\n\", \"\\n\\n\\n9\\n\", \"9\\n\", \"\\n9\\n\", \"\\n\\n\\n\\n\\n\\n\\n\\n9\\n\", \"9\\n\"]}, {\"input\": \"2 1\\n\", \"output\": [\"\\n1\", \"1\\n\", \"1\", \"1\\n\\n\", \"\\n1\\n\", \"1\\n\\n\", \"\\n\\n1\\n\", \"1\\n\", \"\\n\\n\\n\\n\\n1\\n\"]}, {\"input\": \"1 1\\n\", \"output\": [\"\\n0\\n\", \"\\n0\", \"0\\n\\n\", \"0\\n\\n\", \"0\\n\", \"0\\n\", \"\\n\\n0\\n\", \"0\"]}, {\"input\": \"1 2\\n\", \"output\": [\"\\n1\", \"1\\n\", \"1\", \"1\\n\\n\", \"\\n1\\n\", \"1\\n\\n\", \"\\n\\n1\\n\", \"1\\n\"]}, {\"input\": \"2 2\\n\", \"output\": [\"2\\n\", \"2\", \"\\n\\n\\n\\n\\n2\\n\", \"2\\n\\n\", \"\\n\\n2\\n\", \"\\n2\", \"2\\n\\n\", \"\\n2\\n\", \"2\\n\"]}, {\"input\": \"1 1000000000\\n\", \"output\": [\"999999999\\n\", \"\\n999999999\\n\", \"\\n999999999\", \"999999999\\n\", \"999999999\\n\\n\", \"999999999\", \"999999999\\n\\n\"]}, {\"input\": \"1 999999997\\n\", \"output\": [\"999999996\\n\\n\", \"\\n999999996\", \"999999996\\n\\n\", \"999999996\\n\", \"999999996\\n\", \"\\n999999996\\n\", \"999999996\"]}, {\"input\": \"1 589284012\\n\", \"output\": [\"589284011\\n\", \"\\n589284011\", \"589284011\", \"589284011\\n\\n\", \"589284011\\n\\n\", \"\\n589284011\\n\", \"589284011\\n\"]}, {\"input\": \"1000000000 1\\n\", \"output\": [\"999999999\\n\", \"\\n999999999\\n\", \"\\n999999999\", \"999999999\\n\", \"999999999\\n\\n\", \"999999999\", \"999999999\\n\\n\"]}, {\"input\": \"999999999 1\\n\", \"output\": [\"\\n999999998\", \"\\n999999998\\n\", \"999999998\", \"999999998\\n\\n\", \"999999998\\n\", \"999999998\\n\\n\", \"999999998\\n\"]}, {\"input\": \"636562060 1\\n\", \"output\": [\"\\n636562059\", \"636562059\\n\\n\", \"636562059\\n\", \"636562059\", \"\\n636562059\\n\", \"636562059\\n\", \"636562059\\n\\n\"]}, {\"input\": \"2 1000000000\\n\", \"output\": [\"1999999998\\n\\n\", \"\\n1999999998\\n\", \"1999999998\\n\", \"1999999998\", \"1999999998\\n\", \"\\n1999999998\", \"1999999998\\n\\n\"]}, {\"input\": \"1000000000 2\\n\", \"output\": [\"1000000000\", \"1000000000\\n\\n\", \"1000000000\\n\", \"1000000000\\n\", \"\\n1000000000\", \"\\n1000000000\\n\", \"1000000000\\n\\n\"]}, {\"input\": \"30001 30001\\n\", \"output\": [\"900030000\\n\", \"\\n900030000\\n\", \"900030000\", \"\\n900030000\", \"900030000\\n\\n\", \"900030000\\n\\n\", \"900030000\\n\"]}, {\"input\": \"1000000000 1000000000\\n\", \"output\": [\"999999999000000000\\n\", \"999999999000000000\\n\\n\", \"999999999000000000\\n\\n\", \"999999999000000000\\n\", \"999999999000000000\"]}, {\"input\": \"767928735 1000000000\\n\", \"output\": [\"767928734232071265\\n\\n\", \"767928734232071265\\n\", \"767928734232071265\\n\\n\", \"767928734232071265\\n\", \"767928734232071265\"]}, {\"input\": \"1000000000 906523442\\n\", \"output\": [\"906523441000000000\\n\\n\", \"906523441000000000\", \"906523441000000000\\n\", \"906523441000000000\\n\\n\", \"906523441000000000\\n\"]}, {\"input\": \"647242241 921242095\\n\", \"output\": [\"596266797424092654\\n\", \"596266797424092654\\n\\n\", \"596266797424092654\\n\", \"596266797424092654\", \"596266797424092654\\n\\n\"]}]","length":9,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 6\\n10 12 10 7 5 22\"]","prob_desc_input_spec":"The first line contains space-separated integers n and m (2\u2009\u2264\u2009n\u2009\u2264\u2009m\u2009\u2264\u200950). The second line contains m space-separated integers f1,\u2009f2,\u2009...,\u2009fm (4\u2009\u2264\u2009fi\u2009\u2264\u20091000) \u2014 the quantities of pieces in the puzzles sold in the shop.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"7830aabb0663e645d54004063746e47f","prob_desc_created_at":"1376668800","source_code":"n,m = input().split()\nm=int(m)\nn=int(n)\narr = sorted(map(int,input().split()))\nmini=999999999\nfor j in range(m-n+1):\n if (arr[j+n-1]-arr[j]<mini):\n   mini=arr[j+n-1]-arr[j]\nprint (mini)","prob_desc_sample_outputs":"[\"5\"]","lang_cluster":"Python","code_uid":"889715f9788c64eeaa5df9c316caa65b","prob_desc_notes":"NoteSample 1. The class has 4 students. The shop sells 6 puzzles. If Ms. Manana buys the first four puzzles consisting of 10, 12, 10 and 7 pieces correspondingly, then the difference between the sizes of the largest and the smallest puzzle will be equal to 5. It is impossible to obtain a smaller difference. Note that the teacher can also buy puzzles 1, 3, 4 and 5 to obtain the difference 5.","prob_desc_output_spec":"Print a single integer \u2014 the least possible difference the teacher can obtain.","prob_desc_output_to":"standard output","prob_desc_description":"The end of the school year is near and Ms. Manana, the teacher, will soon have to say goodbye to a yet another class. She decided to prepare a goodbye present for her n students and give each of them a jigsaw puzzle (which, as wikipedia states, is a tiling puzzle that requires the assembly of numerous small, often oddly shaped, interlocking and tessellating pieces).The shop assistant told the teacher that there are m puzzles in the shop, but they might differ in difficulty and size. Specifically, the first jigsaw puzzle consists of f1 pieces, the second one consists of f2 pieces and so on.Ms. Manana doesn't want to upset the children, so she decided that the difference between the numbers of pieces in her presents must be as small as possible. Let A be the number of pieces in the largest puzzle that the teacher buys and B be the number of pieces in the smallest such puzzle. She wants to choose such n puzzles that A\u2009-\u2009B is minimum possible. Help the teacher and find the least possible value of A\u2009-\u2009B.","hidden_unit_tests":"[{\"input\": \"4 6\\r\\n10 12 10 7 5 22\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 2\\r\\n4 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 10\\r\\n4 5 6 7 8 9 10 11 12 12\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 5\\r\\n818 136 713 59 946\\r\\n\", \"output\": [\"759\"]}, {\"input\": \"3 20\\r\\n446 852 783 313 549 965 40 88 86 617 479 118 768 34 47 826 366 957 463 903\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"2 25\\r\\n782 633 152 416 432 825 115 97 386 357 836 310 530 413 354 373 847 882 913 682 729 582 671 674 94\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 25\\r\\n226 790 628 528 114 64 239 279 619 39 894 763 763 847 525 93 882 697 999 643 650 244 159 884 190\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"2 50\\r\\n971 889 628 39 253 157 925 694 129 516 660 272 738 319 611 816 142 717 514 392 41 105 132 676 958 118 306 768 600 685 103 857 704 346 857 309 23 718 618 161 176 379 846 834 640 468 952 878 164 997\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"25 50\\r\\n582 146 750 905 313 509 402 21 488 512 32 898 282 64 579 869 37 996 377 929 975 697 666 837 311 205 116 992 533 298 648 268 54 479 792 595 152 69 267 417 184 433 894 603 988 712 24 414 301 176\\r\\n\", \"output\": [\"412\"]}, {\"input\": \"49 50\\r\\n58 820 826 960 271 294 473 102 925 318 729 672 244 914 796 646 868 6 893 882 726 203 528 498 271 195 355 459 721 680 547 147 631 116 169 804 145 996 133 559 110 257 771 476 576 251 607 314 427 886\\r\\n\", \"output\": [\"938\"]}, {\"input\": \"50 50\\r\\n374 573 323 744 190 806 485 247 628 336 491 606 702 321 991 678 337 579 86 240 993 208 668 686 855 205 363 177 719 249 896 919 782 434 59 647 787 996 286 216 636 212 546 903 958 559 544 126 608 993\\r\\n\", \"output\": [\"937\"]}, {\"input\": \"6 50\\r\\n6 8 7 8 5 4 4 5 7 8 6 5 7 4 7 7 7 8 6 4 6 6 8 8 7 7 8 7 5 8 5 4 4 7 8 4 4 6 6 6 8 7 4 7 6 6 5 8 4 7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"37 50\\r\\n14 5 11 17 8 20 19 16 20 11 17 20 16 9 14 14 13 18 11 20 8 8 8 5 19 17 6 18 10 20 9 7 12 6 14 17 4 4 10 13 7 4 11 6 20 19 12 12 15 19\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"40 50\\r\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"40 50\\r\\n17 20 43 26 41 37 14 8 30 35 30 24 43 8 42 9 41 50 41 35 27 32 35 43 28 36 31 16 5 7 23 16 14 29 8 39 12 16 36 18 49 39 33 37 38 6 6 27 23 17\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"2 2\\r\\n1000 4\\r\\n\", \"output\": [\"996\"]}, {\"input\": \"2 3\\r\\n4 502 1000\\r\\n\", \"output\": [\"498\"]}, {\"input\": \"3 3\\r\\n4 1000 4\\r\\n\", \"output\": [\"996\"]}]","length":9,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"512 megabytes","difficulty":1200.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"21\", \"20\"]","prob_desc_input_spec":"The first line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"ae20ae2a16273a0d379932d6e973f878","prob_desc_created_at":"1508151900","source_code":"n = int(input())\nm = str(n)\ng = len(m)\nl = [int(m[0])-1]+[9]*(g-1)\nh = 0\nless = 0\nwhile(h<len(l)):\n    less = less + l[h]\n    h = h + 1\na = n - less\nr = []\ni = 0\nwhile(a<n):\n    j = 0\n    s = str(a)\n    c = a\n    while j<len(s):\n        c = c + int(s[j])\n        j = j + 1\n    if(c==n):\n        i +=1\n        r = r + [a]\n    a = a + 1\nif(i==0):\n    print(0)\nelse:\n    print(i)\n    j = 0\n    while(j<len(r)):\n        print(r[j])\n        j = j + 1\n","prob_desc_sample_outputs":"[\"1\\n15\", \"0\"]","lang_cluster":"Python","code_uid":"3d9b561821b9d49b6ba48d5bbb08b2e1","prob_desc_notes":"NoteIn the first test case x\u2009=\u200915 there is only one variant: 15\u2009+\u20091\u2009+\u20095\u2009=\u200921.In the second test case there are no such x.","prob_desc_output_spec":"In the first line print one integer k\u00a0\u2014 number of different values of x satisfying the condition.  In next k lines print these values in ascending order.","prob_desc_output_to":"standard output","prob_desc_description":"Eighth-grader Vova is on duty today in the class. After classes, he went into the office to wash the board, and found on it the number n. He asked what is this number and the teacher of mathematics Inna Petrovna answered Vova that n is the answer to the arithmetic task for first-graders. In the textbook, a certain positive integer x was given. The task was to add x to the sum of the digits of the number x written in decimal numeral system.Since the number n on the board was small, Vova quickly guessed which x could be in the textbook. Now he wants to get a program which will search for arbitrary values of the number n for all suitable values of x or determine that such x does not exist. Write such a program for Vova.","hidden_unit_tests":"[{\"input\": \"21\\r\\n\", \"output\": [\"1\\r\\n15\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100000001\\r\\n\", \"output\": [\"2\\r\\n99999937\\r\\n 100000000\", \"2\\r\\n99999937 100000000\", \"2\\r\\n99999937\\r\\n100000000\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"1\\r\\n999999932\"]}, {\"input\": \"999999979\\r\\n\", \"output\": [\"2\\r\\n999999899\\r\\n 999999908\", \"2\\r\\n999999899 999999908\", \"2\\r\\n999999899\\r\\n999999908\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"1\\r\\n5\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"1\\r\\n10\"]}, {\"input\": \"39\\r\\n\", \"output\": [\"1\\r\\n33\"]}, {\"input\": \"66\\r\\n\", \"output\": [\"1\\r\\n60\"]}, {\"input\": \"75\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"1\\r\\n86\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"2\\r\\n91\\r\\n100\", \"2\\r\\n91\\r\\n 100\", \"2\\r\\n91 100\"]}, {\"input\": \"2014\\r\\n\", \"output\": [\"2\\r\\n1988\\r\\n2006\", \"2\\r\\n1988 2006\", \"2\\r\\n1988\\r\\n 2006\"]}, {\"input\": \"999999994\\r\\n\", \"output\": [\"0\"]}]","length":31,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 2\", \"2 4\"]","prob_desc_input_spec":"The only line contains two space separated integers $$$w$$$, $$$h$$$\u00a0($$$1 \\leq w,h \\leq 1\\,000$$$)\u00a0\u2014\u00a0the width and height of the kitchen, measured in tiles.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"8b2a9ae21740c89079a6011a30cd6aee","prob_desc_created_at":"1563636900","source_code":"w, h = map(int, input().split())\n\nprint(pow(2, w + h) % 998244353)\n","prob_desc_sample_outputs":"[\"16\", \"64\"]","lang_cluster":"Python","code_uid":"7b8bf3970c36c64086087dcb2fc5a64f","prob_desc_notes":null,"prob_desc_output_spec":"Output a single integer $$$n$$$\u00a0\u2014\u00a0the remainder of the number of tilings when divided by $$$998244353$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Bob is decorating his kitchen, more precisely, the floor. He has found a prime candidate for the tiles he will use. They come in a simple form factor\u00a0\u2014\u00a0a square tile that is diagonally split into white and black part as depicted in the figure below.  The dimension of this tile is perfect for this kitchen, as he will need exactly $$$w \\times h$$$ tiles without any scraps. That is, the width of the kitchen is $$$w$$$ tiles, and the height is $$$h$$$ tiles. As each tile can be rotated in one of four ways, he still needs to decide on how exactly he will tile the floor. There is a single aesthetic criterion that he wants to fulfil: two adjacent tiles must not share a colour on the edge\u00a0\u2014\u00a0i.e. one of the tiles must have a white colour on the shared border, and the second one must be black.    The picture on the left shows one valid tiling of a $$$3 \\times 2$$$ kitchen. The picture on the right shows an invalid arrangement, as the bottom two tiles touch with their white parts. Find the number of possible tilings. As this number may be large, output its remainder when divided by $$$998244353$$$ (a prime number). ","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"2 4\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"20 10\\r\\n\", \"output\": [\"75497471\"]}, {\"input\": \"1000 1000\\r\\n\", \"output\": [\"708964705\"]}, {\"input\": \"1 1000\\r\\n\", \"output\": [\"46452554\"]}, {\"input\": \"1000 122\\r\\n\", \"output\": [\"712990290\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"15 22\\r\\n\", \"output\": [\"679477111\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"2 5\\r\\n\", \"output\": [\"128\"]}, {\"input\": \"432 333\\r\\n\", \"output\": [\"726933080\"]}, {\"input\": \"17 23\\r\\n\", \"output\": [\"444595123\"]}, {\"input\": \"843 134\\r\\n\", \"output\": [\"230806096\"]}, {\"input\": \"912 584\\r\\n\", \"output\": [\"626052968\"]}, {\"input\": \"88 88\\r\\n\", \"output\": [\"412395273\"]}, {\"input\": \"3 16\\r\\n\", \"output\": [\"524288\"]}]","length":3,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n1 1 0 1\", \"6\\n0 1 0 0 1 0\", \"1\\n0\"]","prob_desc_input_spec":"The first line contains one integer number n (1\u2009\u2264\u2009n\u2009\u2264\u2009100). The second line contains n space-separated integer numbers s1,\u2009s2,\u2009...,\u2009sn (0\u2009\u2264\u2009si\u2009\u2264\u20091). 0 corresponds to an unsuccessful game, 1 \u2014 to a successful one.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"c7b1f0b40e310f99936d1c33e4816b95","prob_desc_created_at":"1504623900","source_code":"n = int(input())\nt = -1\nan = 0\na = list(map(int, input().split()))\nwhile a.count(1):\n    an = max(a.index(1) + a.count(1), an)\n    del a[a.index(1)]\n    \nprint(max(an, len(a)))\n","prob_desc_sample_outputs":"[\"3\", \"4\", \"1\"]","lang_cluster":"Python","code_uid":"d22f3f53434188ee8982353ac8c5f44b","prob_desc_notes":null,"prob_desc_output_spec":"Print one integer \u2014 the maximum number of games Hideo can leave in his CV so that no unsuccessful game comes after a successful one.","prob_desc_output_to":"standard output","prob_desc_description":"Hideo Kojima has just quit his job at Konami. Now he is going to find a new place to work. Despite being such a well-known person, he still needs a CV to apply for a job.During all his career Hideo has produced n games. Some of them were successful, some were not. Hideo wants to remove several of them (possibly zero) from his CV to make a better impression on employers. As a result there should be no unsuccessful game which comes right after successful one in his CV.More formally, you are given an array s1,\u2009s2,\u2009...,\u2009sn of zeros and ones. Zero corresponds to an unsuccessful game, one \u2014 to a successful one. Games are given in order they were produced, and Hideo can't swap these values. He should remove some elements from this array in such a way that no zero comes right after one.Besides that, Hideo still wants to mention as much games in his CV as possible. Help this genius of a man determine the maximum number of games he can leave in his CV.","hidden_unit_tests":"[{\"input\": \"4\\r\\n1 1 0 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6\\r\\n0 1 0 0 1 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1\\r\\n0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n0 0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n1 1 0 1 1 0 0 0 0 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 1 1 0 0 0 1 0 0 1 0 1 1 0 1 0 0 1 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 1 0 1 1 1 0 0 1 1 0 0 0 0 1\\r\\n\", \"output\": [\"53\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"3\\r\\n1 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n1 1 0 0 0 1 1 0 0 0\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"90\\r\\n1 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 1 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 1 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0 1 0\\r\\n\", \"output\": [\"52\"]}, {\"input\": \"78\\r\\n0 0 1 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 1 0 1 1 1 0 1 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 1 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 0\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"4\\r\\n1 0 0 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2\\r\\n0 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\n0 1 0 0 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3\\r\\n1 0 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n1 1 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"16\\r\\n1 1 1 1 1 0 0 0 0 0 1 0 1 0 0 1\\r\\n\", \"output\": [\"9\"]}]","length":9,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"xaxxxxa\", \"aaabaa\"]","prob_desc_input_spec":"The first line contains a string $$$s$$$ ($$$1 \\leq |s| \\leq 50$$$) consisting of lowercase English letters. It is guaranteed that there is at least one \"a\" in $$$s$$$.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"84cb9ad2ae3ba7e912920d7feb4f6219","prob_desc_created_at":"1555783500","source_code":"s = input()\nprint(min(len(s), s.count('a')*2-1))\n","prob_desc_sample_outputs":"[\"3\", \"6\"]","lang_cluster":"Python","code_uid":"c784c610f4fbbfc325481df7ead8e52b","prob_desc_notes":"NoteIn the first example, it's enough to erase any four of the \"x\"s. The answer is $$$3$$$ since that is the maximum number of characters that can remain.In the second example, we don't need to erase any characters.","prob_desc_output_spec":"Print a single integer, the length of the longest good string that Alice can get after erasing some characters from $$$s$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Alice has a string $$$s$$$. She really likes the letter \"a\". She calls a string good if strictly more than half of the characters in that string are \"a\"s. For example \"aaabb\", \"axaa\" are good strings, and \"baca\", \"awwwa\", \"\" (empty string) are not.Alice can erase some characters from her string $$$s$$$. She would like to know what is the longest string remaining after erasing some characters (possibly zero) to get a good string. It is guaranteed that the string has at least one \"a\" in it, so the answer always exists.","hidden_unit_tests":"[{\"input\": \"xaxxxxa\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"aaabaa\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"ababababababababababababababababababababababababav\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"abababababababababababababababababababababababava\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"abababababababababababababababababababababababavv\\r\\n\", \"output\": [\"47\"]}, {\"input\": \"a\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"ap\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"dya\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"qyax\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"ahaos\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"caidsucitzpblhucxnzcdupstfoourafborgyqwvaymdk\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"wqufdkunalpjjmeolduzppvzabhytailycojjhnsykfhim\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"qfggoxltgxqqirqazusxblbhhuajrjrsuojnwvdnzwymhjx\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"kvujzkexnkqygxalmlpupghpqqsvqsabpbgrhmwixfroghpm\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"ckhklxvduyregcmxabkrbcnxxjlgoaiikpbvuamdvrksefigx\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"yqahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiab\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"ass\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"xaxax\\r\\n\", \"output\": [\"3\"]}]","length":2,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"RGB\\nRRR\", \"RRRBGBRBBB\\nBBBRR\", \"BRRBGBRGRBGRGRRGGBGBGBRGBRGRGGGRBRRRBRBBBGRRRGGBBB\\nBBRBGGRGRGBBBRBGRBRBBBBRBRRRBGBBGBBRRBBGGRBRRBRGRB\"]","prob_desc_input_spec":"The input contains two lines. The first line contains the string s (1\u2009\u2264\u2009|s|\u2009\u2264\u200950). The second line contains the string t (1\u2009\u2264\u2009|t|\u2009\u2264\u200950). The characters of each string will be one of \"R\", \"G\", or \"B\". It is guaranteed that Liss don't move out of the sequence.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"f5a907d6d35390b1fb11c8ce247d0252","prob_desc_created_at":"1358686800","source_code":"colors = input()\ninstructions = input()\n \npointer = 0\nfor index in range(len(instructions)):\n    if(instructions[index] == colors[pointer]):\n        pointer += 1\nprint(pointer+1)","prob_desc_sample_outputs":"[\"2\", \"3\", \"15\"]","lang_cluster":"Python","code_uid":"9fb167c2c0ae750191d92e7cd8055092","prob_desc_notes":null,"prob_desc_output_spec":"Print the final 1-based position of Liss in a single line.","prob_desc_output_to":"standard output","prob_desc_description":"There is a sequence of colorful stones. The color of each stone is one of red, green, or blue. You are given a string s. The i-th (1-based) character of s represents the color of the i-th stone. If the character is \"R\", \"G\", or \"B\", the color of the corresponding stone is red, green, or blue, respectively.Initially Squirrel Liss is standing on the first stone. You perform instructions one or more times.Each instruction is one of the three types: \"RED\", \"GREEN\", or \"BLUE\". After an instruction c, if Liss is standing on a stone whose colors is c, Liss will move one stone forward, else she will not move.You are given a string t. The number of instructions is equal to the length of t, and the i-th character of t represents the i-th instruction.Calculate the final position of Liss (the number of the stone she is going to stand on in the end) after performing all the instructions, and print its 1-based position. It is guaranteed that Liss don't move out of the sequence.","hidden_unit_tests":"[{\"input\": \"RGB\\r\\nRRR\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"RRRBGBRBBB\\r\\nBBBRR\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"BRRBGBRGRBGRGRRGGBGBGBRGBRGRGGGRBRRRBRBBBGRRRGGBBB\\r\\nBBRBGGRGRGBBBRBGRBRBBBBRBRRRBGBBGBBRRBBGGRBRRBRGRB\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"G\\r\\nRRBBRBRRBR\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"RRRRRBRRBRRGRBGGRRRGRBBRBBBBBRGRBGBRRGBBBRBBGBRGBB\\r\\nB\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"RRGGBRGRBG\\r\\nBRRGGBBGGR\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"BBRRGBGGRGBRGBRBRBGR\\r\\nGGGRBGGGBRRRRGRBGBGRGRRBGRBGBG\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"GBRRBGBGBBBBRRRGBGRRRGBGBBBRGR\\r\\nRRGBRRGRBBBBBBGRRBBR\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"BRGRRGRGRRGBBGBBBRRBBRRBGBBGRGBBGGRGBRBGGGRRRBGGBB\\r\\nRGBBGRRBBBRRGRRBRBBRGBBGGGRGBGRRRRBRBGGBRBGGGRGBRR\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"GGRGGBRRGRGBRRGGRBBGGRRGBBBGBBBGGRBGGBRBBRGBRRRBRG\\r\\nGGRGRRRRRRRRRGBBBBRGBRGRGRRGBBRGGBRBBRBGBRGRRRRGGR\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"RBBRBGBBGGGBRRBGBRGRRGGRBBBBGRBGGBRRBGBBRBRGBBGGGG\\r\\nBRRGRBGRBGBRGBRBGGBBBGBBRGRBGRGRBGRBGGRRBGBRGRRBBG\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"RRGGRRBRGRGBRGBRGBBRGGGBRBGBRGBRGGBRBRGBGRRBBGGRBR\\r\\nBRGRBBBGRBGRRGGRRRRRRRRGGGGGGGGBGGGGGGGRGRBBRGRGBR\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"RBRBRRRRRGGR\\r\\nBBBBRRGGBGRBRGBBRGGGRGGBRRBRBRBGGG\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"GGRGGGBRGRGRBBRGGGRBGRRR\\r\\nGBBBBGBGBGBBBRGGRGGBGRRGRRRGBGB\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"RGRBGBRBBGBRRGGGBBGBRRBGRGBBBBBGRRRGGRBB\\r\\nBGR\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"R\\r\\nB\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\\r\\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\\r\\nGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"R\\r\\nGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\\r\\n\", \"output\": [\"1\"]}]","length":8,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"6\\n0 0 0 0 0\\n1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 0 1\", \"3\\n0 0 1 2 0\\n0 0 9 2 0\\n0 0 5 9 0\"]","prob_desc_input_spec":"The first line of input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009103)\u00a0\u2014 the number of points. The next n lines of input contain five integers ai,\u2009bi,\u2009ci,\u2009di,\u2009ei (|ai|,\u2009|bi|,\u2009|ci|,\u2009|di|,\u2009|ei|\u2009\u2264\u2009103) \u00a0\u2014 the coordinates of the i-th point. All points are distinct.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"c1cfe1f67217afd4c3c30a6327e0add9","prob_desc_created_at":"1504535700","source_code":"def vec(c0, a, b):\n    an = 0\n    for i in range(5):\n        an += (a[i] - c0[i]) * (b[i] - c0[i])\n    return an\n\n\nn = int(input())\nif n > 80:\n    print(0)\n    exit(0)\na = [[0] * 5 for i in range(n)]\nfor i in range(n):\n    a[i] = [int(j) for j in input().split()]\nans = []\nfor i in range(n):\n    flag = True\n    for j in range(n):\n        for k in range(n):\n            if i != j and j != k and k != i and vec(a[i], a[j], a[k]) > 0:\n                flag = False\n    if flag:\n        ans.append(i)\nprint(len(ans))\nfor i in ans:\n    print(i + 1)","prob_desc_sample_outputs":"[\"1\\n1\", \"0\"]","lang_cluster":"Python","code_uid":"e2dd31b0b30bcf9677e6bfb6bc98fe95","prob_desc_notes":"NoteIn the first sample, the first point forms exactly a  angle with all other pairs of points, so it is good.In the second sample, along the cd plane, we can see the points look as follows:We can see that all angles here are acute, so no points are good.","prob_desc_output_spec":"First, print a single integer k\u00a0\u2014 the number of good points. Then, print k integers, each on their own line\u00a0\u2014 the indices of the good points in ascending order.","prob_desc_output_to":"standard output","prob_desc_description":"You are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.We will call point a bad if there are different points b and c, not equal to a, from the given set such that angle between vectors  and  is acute (i.e. strictly less than ). Otherwise, the point is called good.The angle between vectors  and  in 5-dimensional space is defined as , where  is the scalar product and  is length of .Given the list of points, print the indices of the good points in ascending order.","hidden_unit_tests":"[{\"input\": \"6\\r\\n0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 0 1 0 0\\r\\n0 0 0 1 0\\r\\n0 0 0 0 1\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"3\\r\\n0 0 1 2 0\\r\\n0 0 9 2 0\\r\\n0 0 5 9 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"2\\r\\n0 1 2 3 4\\r\\n5 6 7 8 9\\r\\n\", \"output\": [\"2\\r\\n1\\r\\n2\"]}, {\"input\": \"992\\r\\n-1000 -1000 1000 -30 -1000\\r\\n-1000 -1000 -1000 -1000 -50\\r\\n-30 1000 1000 -1000 1000\\r\\n-1000 -60 -1000 -1000 1000\\r\\n1000 -10 -1000 -1000 1000\\r\\n1000 1000 -1000 -60 -1000\\r\\n1000 1000 1000 0 -1000\\r\\n-30 1000 -1000 -1000 1000\\r\\n1000 1000 -1000 20 -1000\\r\\n1000 -1000 1000 -1000 -20\\r\\n-1000 -1000 1000 -20 -1000\\r\\n-1000 -10 -1000 1000 -1000\\r\\n-1000 20 -1000 -1000 -1000\\r\\n1000 1000 1000 0 1000\\r\\n40 1000 -1000 1000 1000\\r\\n1000 -1000 -40 -1000 1000\\r\\n-1000 1000 1000 -40 -1000\\r\\n1000 20 -1000 -1000 -1000\\r\\n-1000 -50 1000 -1000 -10...\", \"output\": [\"0\"]}, {\"input\": \"960\\r\\n-30 -1000 1000 1000 -1000\\r\\n1000 -1000 -20 1000 -1000\\r\\n1000 1000 1000 1000 -20\\r\\n-60 1000 1000 1000 1000\\r\\n-30 1000 1000 1000 1000\\r\\n-1000 -1000 50 -1000 -1000\\r\\n1000 -50 -1000 1000 1000\\r\\n20 1000 1000 1000 -1000\\r\\n1000 1000 1000 10 1000\\r\\n-1000 -1000 40 1000 1000\\r\\n10 -1000 -1000 1000 -1000\\r\\n1000 -1000 1000 -1000 30\\r\\n-1000 -1000 -20 -1000 -1000\\r\\n1000 -1000 -40 -1000 -1000\\r\\n-1000 -40 -1000 1000 -1000\\r\\n1000 1000 -1000 0 -1000\\r\\n1000 1000 -1000 -1000 40\\r\\n-1000 1000 -30 1000 1000\\r\\n1000 -1000 50 -1000 -1000\\r\\n1000 -...\", \"output\": [\"0\"]}, {\"input\": \"768\\r\\n715 -250 -245 715 -130\\r\\n325 -425 175 650 -650\\r\\n325 -25 60 455 -650\\r\\n65 125 545 -65 -455\\r\\n260 -325 -65 455 -195\\r\\n455 -550 -370 715 65\\r\\n325 325 65 -455 -650\\r\\n325 -200 480 390 -650\\r\\n-65 -200 -365 -195 455\\r\\n260 275 185 455 -195\\r\\n-65 125 545 -65 455\\r\\n455 200 365 195 65\\r\\n260 -775 170 -65 -195\\r\\n520 -500 -490 -195 -390\\r\\n-65 -725 50 650 455\\r\\n0 -250 -245 715 0\\r\\n-65 -50 120 910 455\\r\\n260 -200 480 390 -195\\r\\n-195 25 -60 -455 -260\\r\\n0 -50 120 910 0\\r\\n260 -875 410 130 -195\\r\\n195 100 -240 -195 260\\r\\n-65 225 305 -260 455\\r\\n...\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n0 -110 68 -51 -155\\r\\n-85 -110 68 -51 -155\\r\\n85 -70 51 68 -230\\r\\n0 -40 51 68 75\\r\\n0 5 -51 -68 -190\\r\\n85 0 0 0 0\\r\\n85 -115 -68 51 35\\r\\n85 -75 -187 34 -40\\r\\n-85 -110 -136 102 -155\\r\\n85 -110 -17 119 -155\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6\\r\\n-305 -390 638 -623 343\\r\\n479 755 -343 144 89\\r\\n-268 843 -461 989 -301\\r\\n-986 -274 347 -847 -728\\r\\n278 718 -372 -674 270\\r\\n-477 562 -489 -858 611\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n-705 38 170 -768 689\\r\\n-705 86 248 -768 709\\r\\n-705 86 170 -742 709\\r\\n-705 86 144 -768 709\\r\\n-705 86 170 -820 709\\r\\n-705 106 170 -768 661\\r\\n-822 86 170 -768 709\\r\\n-705 98 170 -768 714\\r\\n-705 86 170 -768 709\\r\\n-601 86 170 -768 709\\r\\n\", \"output\": [\"1\\r\\n9\"]}, {\"input\": \"11\\r\\n358 -724 -232 53 -520\\r\\n486 -554 -328 53 -220\\r\\n358 -554 -232 -372 -520\\r\\n358 -554 -232 308 -520\\r\\n868 -554 448 53 -520\\r\\n478 -554 -322 53 -600\\r\\n358 296 -232 53 -520\\r\\n256 -554 -368 53 -520\\r\\n230 -554 -136 53 -820\\r\\n-182 -554 173 53 -160\\r\\n358 -554 -232 53 -520\\r\\n\", \"output\": [\"1\\r\\n11\"]}, {\"input\": \"8\\r\\n-559 581 509 257 343\\r\\n-544 451 569 277 343\\r\\n-451 451 434 401 343\\r\\n-559 451 509 257 83\\r\\n-664 451 89 117 343\\r\\n-559 451 509 257 993\\r\\n-715 451 509 374 343\\r\\n-811 451 684 -79 343\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999\\r\\n-301 26 -665 194 -96\\r\\n-901 -537 578 418 152\\r\\n346 -572 111 785 -659\\r\\n-774 433 -503 655 -778\\r\\n-314 -17 493 869 -509\\r\\n548 -725 -570 -491 -325\\r\\n-957 448 -556 985 -810\\r\\n270 -748 -397 -488 -561\\r\\n-247 -96 494 -759 731\\r\\n91 -380 37 537 191\\r\\n-466 262 -76 -70 500\\r\\n206 160 698 -714 -277\\r\\n845 456 -813 316 514\\r\\n467 -950 286 310 735\\r\\n521 -141 -148 559 299\\r\\n-396 379 947 462 668\\r\\n570 -879 -520 -383 55\\r\\n705 350 -191 368 -39\\r\\n698 -23 987 237 -204\\r\\n-808 -190 559 4 -227\\r\\n563 -172 -987 -265 -908\\r\\n451 -117 -217 -849 239\\r\\n93...\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n8 8 8 8 8\\r\\n2 2 2 2 2\\r\\n0 0 0 0 0\\r\\n6 6 6 6 6\\r\\n7 7 7 7 7\\r\\n10 10 10 10 10\\r\\n9 9 9 9 9\\r\\n3 3 3 3 3\\r\\n1 1 1 1 1\\r\\n5 5 5 5 5\\r\\n4 4 4 4 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"7\\r\\n49 457 -650 325 -325\\r\\n0 0 325 325 0\\r\\n253 204 -325 0 -325\\r\\n204 -253 325 325 325\\r\\n408 -506 -325 -325 325\\r\\n49 457 -650 325 -650\\r\\n0 0 0 650 -325\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000\\r\\n89 -573 642 349 -32\\r\\n-619 -549 767 -674 414\\r\\n-405 -68 -629 -343 -734\\r\\n-889 220 -814 329 -336\\r\\n-887 396 -531 -800 -940\\r\\n-849 142 -700 705 -311\\r\\n258 584 -547 -661 -153\\r\\n-58 717 658 -477 456\\r\\n-375 -530 195 681 716\\r\\n-944 274 491 -475 215\\r\\n270 989 960 536 -990\\r\\n685 889 -386 -556 303\\r\\n557 -374 589 488 -65\\r\\n-159 224 -753 -277 577\\r\\n-67 -786 -495 -72 -811\\r\\n-429 -202 522 812 -249\\r\\n807 341 -773 -197 -585\\r\\n128 -943 -653 924 -492\\r\\n-602 815 180 -871 -939\\r\\n-583 863 915 -513 768\\r\\n774 791 -337 649 170\\r\\n-341 834 -528 ...\", \"output\": [\"0\"]}, {\"input\": \"1000\\r\\n0 0 0 0 0\\r\\n1 1 1 1 1\\r\\n2 2 2 2 2\\r\\n3 3 3 3 3\\r\\n4 4 4 4 4\\r\\n5 5 5 5 5\\r\\n6 6 6 6 6\\r\\n7 7 7 7 7\\r\\n8 8 8 8 8\\r\\n9 9 9 9 9\\r\\n10 10 10 10 10\\r\\n11 11 11 11 11\\r\\n12 12 12 12 12\\r\\n13 13 13 13 13\\r\\n14 14 14 14 14\\r\\n15 15 15 15 15\\r\\n16 16 16 16 16\\r\\n17 17 17 17 17\\r\\n18 18 18 18 18\\r\\n19 19 19 19 19\\r\\n20 20 20 20 20\\r\\n21 21 21 21 21\\r\\n22 22 22 22 22\\r\\n23 23 23 23 23\\r\\n24 24 24 24 24\\r\\n25 25 25 25 25\\r\\n26 26 26 26 26\\r\\n27 27 27 27 27\\r\\n28 28 28 28 28\\r\\n29 29 29 29 29\\r\\n30 30 30 30 30\\r\\n31 31 31 31 31\\r\\n32 32 32 32 32\\r\\n33 33 33 33 33\\r\\n34 34 34 34...\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n1 0 0 0 0\\r\\n-1 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 -1 0 0 0\\r\\n0 0 1 0 0\\r\\n0 0 -1 0 0\\r\\n0 0 0 1 0\\r\\n0 0 0 -1 0\\r\\n0 0 0 0 1\\r\\n0 0 0 0 -1\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\\r\\n11\"]}, {\"input\": \"4\\r\\n0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 1 1 0 0\\r\\n\", \"output\": [\"0\"]}]","length":26,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"10\\nrocesfedoc\", \"16\\nplmaetwoxesisiht\", \"1\\nz\"]","prob_desc_input_spec":"The first line of input consists of a single integer $$$n$$$ ($$$1 \\le n \\le 100$$$) \u2014 the length of the string $$$t$$$. The second line of input consists of the string $$$t$$$. The length of $$$t$$$ is $$$n$$$, and it consists only of lowercase Latin letters.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"1b0b2ee44c63cb0634cb63f2ad65cdd3","prob_desc_created_at":"1529591700","source_code":"a = int(input())\ns = list(input())\n\nb = []\nfor i in range(a, 1, -1):\n    if a % i == 0:\n        b.append(i)\n\nfor i in range(len(b)-1, -1, -1):\n    s[0:b[i]] = reversed(s[0:b[i]])\n\ns = \"\".join(s)\nprint(s)","prob_desc_sample_outputs":"[\"codeforces\", \"thisisexampletwo\", \"z\"]","lang_cluster":"Python","code_uid":"72f78d9ae9f025807e729b822077ace2","prob_desc_notes":"NoteThe first example is described in the problem statement.","prob_desc_output_spec":"Print a string $$$s$$$ such that the above algorithm results in $$$t$$$.","prob_desc_output_to":"standard output","prob_desc_description":"A string $$$s$$$ of length $$$n$$$ can be encrypted by the following algorithm:  iterate over all divisors of $$$n$$$ in decreasing order (i.e. from $$$n$$$ to $$$1$$$),  for each divisor $$$d$$$, reverse the substring $$$s[1 \\dots d]$$$ (i.e. the substring which starts at position $$$1$$$ and ends at position $$$d$$$). For example, the above algorithm applied to the string $$$s$$$=\"codeforces\" leads to the following changes: \"codeforces\" $$$\\to$$$ \"secrofedoc\" $$$\\to$$$ \"orcesfedoc\" $$$\\to$$$ \"rocesfedoc\" $$$\\to$$$ \"rocesfedoc\" (obviously, the last reverse operation doesn't change the string because $$$d=1$$$).You are given the encrypted string $$$t$$$. Your task is to decrypt this string, i.e., to find a string $$$s$$$ such that the above algorithm results in string $$$t$$$. It can be proven that this string $$$s$$$ always exists and is unique.","hidden_unit_tests":"[{\"input\": \"10\\r\\nrocesfedoc\\r\\n\", \"output\": [\"codeforces\"]}, {\"input\": \"16\\r\\nplmaetwoxesisiht\\r\\n\", \"output\": [\"thisisexampletwo\"]}, {\"input\": \"1\\r\\nz\\r\\n\", \"output\": [\"z\"]}, {\"input\": \"2\\r\\nir\\r\\n\", \"output\": [\"ri\"]}, {\"input\": \"3\\r\\nilj\\r\\n\", \"output\": [\"jli\"]}, {\"input\": \"4\\r\\njfyy\\r\\n\", \"output\": [\"yyjf\"]}, {\"input\": \"6\\r\\nkrdych\\r\\n\", \"output\": [\"hcyrkd\"]}, {\"input\": \"60\\r\\nfnebsopcvmlaoecpzmakqigyuutueuozjxutlwwiochekmhjgwxsgfbcrpqj\\r\\n\", \"output\": [\"jqprcbfgsxwgjhmkehcoiwwltuxjzokamzpalobnfespcvmoecqigyuutueu\"]}, {\"input\": \"64\\r\\nhnlzzhrvqnldswxfsrowfhmyzbxtyoxhogudasgywxycyhzgiseerbislcncvnwy\\r\\n\", \"output\": [\"ywnvcnclsibreesigzhycyxwygsadugofxwsdlnqzlhnzhrvsrowfhmyzbxtyoxh\"]}, {\"input\": \"97\\r\\nqnqrmdhmbubaijtwsecbidqouhlecladwgwcuxbigckrfzasnbfbslukoayhcgquuacygakhxoubibxtqkpyyhzjipylujgrc\\r\\n\", \"output\": [\"crgjulypijzhyypkqtxbibuoxhkagycauuqgchyaokulsbfbnsazfrkcgibxucwgwdalcelhuoqdibceswtjiabubmhdmrqnq\"]}, {\"input\": \"100\\r\\nedykhvzcntljuuoqghptioetqnfllwekzohiuaxelgecabvsbibgqodqxvyfkbyjwtgbyhvssntinkwsinwsmalusiwnjmtcoovf\\r\\n\", \"output\": [\"fvooctmjnwisulamswniswknitnssvhybgtwjybkfyvxqdoqgbqteoitnczvkyedhljuuoqghptnfllwekzohiuaxelgecabvsbi\"]}, {\"input\": \"96\\r\\nqtbcksuvxonzbkokhqlgkrvimzqmqnrvqlihrmksldyydacbtckfphenxszcnzhfjmpeykrvshgiboivkvabhrpphgavvprz\\r\\n\", \"output\": [\"zrpvvaghpprhbavkviobighsvrkyepmjfhznczsxnehpfkctvrnqmqzmkokbvuctqbksxonzhqlgkrviqlihrmksldyydacb\"]}, {\"input\": \"90\\r\\nmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\\r\\n\", \"output\": [\"mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\"]}, {\"input\": \"89\\r\\nwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\r\\n\", \"output\": [\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\"]}, {\"input\": \"99\\r\\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\\r\\n\", \"output\": [\"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\"]}, {\"input\": \"100\\r\\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\r\\n\", \"output\": [\"oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"]}, {\"input\": \"60\\r\\nwwwwwxwwwwwwfhwwhwwwwwwawwwwwwwwwwwwwnwwwwwwwwwwwwwwwwwwwwww\\r\\n\", \"output\": [\"wwwwwwwwwwwwwwwwwwwwwwnwwwwwwwwwwhwwwxwwwwwwwwwfhwwwwawwwwww\"]}, {\"input\": \"90\\r\\ncccchccccccccccccccccccccccccccwcccccccccgcccccchccccccccccccccccccccccxccccccncccccccuccc\\r\\n\", \"output\": [\"cccucccccccnccccccxcccccccccccccccccccccchccccccccccccccccccccccchccccccccccwcccccccccgccc\"]}, {\"input\": \"97\\r\\nfwffffffffffffffffffffffffrffffffffffffffzfffffffffffffffftfcfffffffqffffffffffffffffffffffyfffff\\r\\n\", \"output\": [\"fffffyffffffffffffffffffffffqfffffffcftffffffffffffffffzffffffffffffffrffffffffffffffffffffffffwf\"]}, {\"input\": \"100\\r\\ndjjjjjjjjjjgjjjjjjjjjjjjjjsvjjjjjjjjjjmjjjjjjjjjjjjjajjjjjjajjjjjjrjjjjjjjjjjjjrjjtjjjjjjjjjjjjjojjj\\r\\n\", \"output\": [\"jjjojjjjjjjjjjjjjtjjrjjjjjjjjjjjjrjjjjjjajjjjjjajjjjjjjjjjjjjjdjjjgjjjjjjjjjsvjjjjjjjjjjmjjjjjjjjjjj\"]}]","length":13,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"7\\nj......\", \"7\\n...feon\", \"7\\n.l.r.o.\"]","prob_desc_input_spec":"First line contains an integer n (6\u2009\u2264\u2009n\u2009\u2264\u20098) \u2013 the length of the string. Next line contains a string consisting of n characters, each of which is either a lower case english letter (indicating a known letter) or a dot character (indicating an empty cell in the crossword).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"ec3d15ff198d1e4ab9fd04dd3b12e6c0","prob_desc_created_at":"1406480400","source_code":"import re\ninput()\nprint(next(filter(re.compile(input()[:-3] + '$').match, ['vapor', 'jolt', 'flar', 'esp', 'umbr', 'leaf', 'glac', 'sylv'])) + 'eon')\n","prob_desc_sample_outputs":"[\"jolteon\", \"leafeon\", \"flareon\"]","lang_cluster":"Python","code_uid":"b9336adcd50f1b3edf352a1219c9659b","prob_desc_notes":"NoteHere's a set of names in a form you can paste into your solution:[\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"]{\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"}","prob_desc_output_spec":"Print a name of the pokemon that Eevee can evolve into that matches the pattern in the input. Use lower case letters only to print the name (in particular, do not capitalize the first letter).","prob_desc_output_to":"standard output","prob_desc_description":"You are solving the crossword problem K from IPSC 2014. You solved all the clues except for one: who does Eevee evolve into? You are not very into pokemons, but quick googling helped you find out, that Eevee can evolve into eight different pokemons: Vaporeon, Jolteon, Flareon, Espeon, Umbreon, Leafeon, Glaceon, and Sylveon.You know the length of the word in the crossword, and you already know some letters. Designers of the crossword made sure that the answer is unambiguous, so you can assume that exactly one pokemon out of the 8 that Eevee evolves into fits the length and the letters given. Your task is to find it.","hidden_unit_tests":"[{\"input\": \"7\\r\\nj......\\r\\n\", \"output\": [\"jolteon\"]}, {\"input\": \"7\\r\\n...feon\\r\\n\", \"output\": [\"leafeon\"]}, {\"input\": \"7\\r\\n.l.r.o.\\r\\n\", \"output\": [\"flareon\"]}, {\"input\": \"6\\r\\n.s..o.\\r\\n\", \"output\": [\"espeon\"]}, {\"input\": \"7\\r\\n.mb....\\r\\n\", \"output\": [\"umbreon\"]}, {\"input\": \"7\\r\\nglaceon\\r\\n\", \"output\": [\"glaceon\"]}, {\"input\": \"7\\r\\n.y.....\\r\\n\", \"output\": [\"sylveon\"]}, {\"input\": \"8\\r\\n.a.o.e.n\\r\\n\", \"output\": [\"vaporeon\"]}, {\"input\": \"6\\r\\n......\\r\\n\", \"output\": [\"espeon\"]}, {\"input\": \"8\\r\\n........\\r\\n\", \"output\": [\"vaporeon\"]}, {\"input\": \"6\\r\\n..p...\\r\\n\", \"output\": [\"espeon\"]}, {\"input\": \"7\\r\\n.laceon\\r\\n\", \"output\": [\"glaceon\"]}, {\"input\": \"8\\r\\n..p.....\\r\\n\", \"output\": [\"vaporeon\"]}, {\"input\": \"7\\r\\n..lveon\\r\\n\", \"output\": [\"sylveon\"]}, {\"input\": \"7\\r\\n.l.ceon\\r\\n\", \"output\": [\"glaceon\"]}, {\"input\": \"7\\r\\n.l.c...\\r\\n\", \"output\": [\"glaceon\"]}, {\"input\": \"7\\r\\n..b....\\r\\n\", \"output\": [\"umbreon\"]}, {\"input\": \"7\\r\\n..areon\\r\\n\", \"output\": [\"flareon\"]}, {\"input\": \"7\\r\\n..ar...\\r\\n\", \"output\": [\"flareon\"]}, {\"input\": \"7\\r\\n..lv...\\r\\n\", \"output\": [\"sylveon\"]}]","length":3,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"httpsunrux\", \"ftphttprururu\"]","prob_desc_input_spec":"The first line contains a non-empty string that Vasya wrote out in his notebook. This line consists of lowercase English letters only.  It is guaranteed that the given string contains at most 50 letters. It is guaranteed that the given string can be obtained from some correct Internet resource address, described above.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"4c999b7854a8a08960b6501a90b3bba3","prob_desc_created_at":"1353339000","source_code":"a = list(input())\nif a[0] == 'f':\n    print('ftp:\/\/',end = '')\n    a = a[3:]\n    while len(a[:''.join(a).index('ru')]) == 0:\n        if len(a[:''.join(a).index('ru')]) != 0:\n            print(''.join(a[:''.join(a).index('ru')]),end = '')\n        else:\n            print('ru',end = '')\n            a = a[''.join(a).index('ru')+2:]\n    print(''.join(a[:''.join(a).index('ru')]),end = '')        \n    a = a[''.join(a).index('ru')+2:]\n    print('.ru',end='')\n    if len(a) != 0:\n        print('\/',end='')\n        print(''.join(a))  \nelse:\n    print('http:\/\/',end = '')\n    a = a[4:]    \n    while len(a[:''.join(a).index('ru')]) == 0:\n        if len(a[:''.join(a).index('ru')]) != 0:\n            print(''.join(a[:''.join(a).index('ru')]),end = '')\n        else:\n            print('ru',end = '')\n            a = a[''.join(a).index('ru')+2:]\n    print(''.join(a[:''.join(a).index('ru')]),end = '')\n    a = a[''.join(a).index('ru')+2:]\n    print('.ru',end='')\n    if len(a) != 0:\n        print('\/',end='')\n        print(''.join(a)) ","prob_desc_sample_outputs":"[\"http:\/\/sun.ru\/x\", \"ftp:\/\/http.ru\/ruru\"]","lang_cluster":"Python","code_uid":"cc401c8587aef9859ad1245ff60c6953","prob_desc_notes":"NoteIn the second sample there are two more possible answers: \"ftp:\/\/httpruru.ru\" and \"ftp:\/\/httpru.ru\/ru\".","prob_desc_output_spec":"Print a single line \u2014 the address of the Internet resource that Vasya liked. If there are several addresses that meet the problem limitations, you are allowed to print any of them.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya is an active Internet user. One day he came across an Internet resource he liked, so he wrote its address in the notebook. We know that the address of the written resource has format: &lt;protocol&gt;:\/\/&lt;domain&gt;.ru[\/&lt;context&gt;] where:  &lt;protocol&gt; can equal either \"http\" (without the quotes) or \"ftp\" (without the quotes),  &lt;domain&gt; is a non-empty string, consisting of lowercase English letters,  the \/&lt;context&gt; part may not be present. If it is present, then &lt;context&gt; is a non-empty string, consisting of lowercase English letters. If string &lt;context&gt; isn't present in the address, then the additional character \"\/\" isn't written. Thus, the address has either two characters \"\/\" (the ones that go before the domain), or three (an extra one in front of the context).When the boy came home, he found out that the address he wrote in his notebook had no punctuation marks. Vasya must have been in a lot of hurry and didn't write characters \":\", \"\/\", \".\".Help Vasya to restore the possible address of the recorded Internet resource.","hidden_unit_tests":"[{\"input\": \"httpsunrux\\r\\n\", \"output\": [\"http:\/\/sun.ru\/x\"]}, {\"input\": \"ftphttprururu\\r\\n\", \"output\": [\"ftp:\/\/http.ru\/ruru\"]}, {\"input\": \"httpuururrururruruurururrrrrurrurrurruruuruuu\\r\\n\", \"output\": [\"http:\/\/uu.ru\/rrururruruurururrrrrurrurrurruruuruuu\"]}, {\"input\": \"httpabuaruauabbaruru\\r\\n\", \"output\": [\"http:\/\/abua.ru\/auabbaruru\"]}, {\"input\": \"httpuurrruurruuruuruuurrrurururuurruuuuuuruurr\\r\\n\", \"output\": [\"http:\/\/uurr.ru\/urruuruuruuurrrurururuurruuuuuuruurr\"]}, {\"input\": \"httpruhhphhhpuhruruhhpruhhphruhhru\\r\\n\", \"output\": [\"http:\/\/ruhhphhhpuh.ru\/ruhhpruhhphruhhru\"]}, {\"input\": \"httpftprftprutprururftruruftptp\\r\\n\", \"output\": [\"http:\/\/ftprftp.ru\/tprururftruruftptp\"]}, {\"input\": \"httpfttpftpfttftpftpftppfrurururu\\r\\n\", \"output\": [\"http:\/\/fttpftpfttftpftpftppf.ru\/rururu\"]}, {\"input\": \"httpruhttttpruhttprupruhttpruhtturuhttphtruuru\\r\\n\", \"output\": [\"http:\/\/ruhttttp.ru\/httprupruhttpruhtturuhttphtruuru\"]}, {\"input\": \"httpsjkazaaghasjkasjkabruru\\r\\n\", \"output\": [\"http:\/\/sjkazaaghasjkasjkab.ru\/ru\"]}, {\"input\": \"httpftphttptphttphrururuhpftphtpftphtpftphtptpft\\r\\n\", \"output\": [\"http:\/\/ftphttptphttph.ru\/ruruhpftphtpftphtpftphtptpft\"]}, {\"input\": \"httpppppru\\r\\n\", \"output\": [\"http:\/\/pppp.ru\"]}, {\"input\": \"ftprrurururrurururuurrururruuru\\r\\n\", \"output\": [\"ftp:\/\/r.ru\/rururrurururuurrururruuru\"]}, {\"input\": \"ftpabaruru\\r\\n\", \"output\": [\"ftp:\/\/aba.ru\/ru\"]}, {\"input\": \"ftpruurruurururururuuruuur\\r\\n\", \"output\": [\"ftp:\/\/ruur.ru\/urururururuuruuur\"]}, {\"input\": \"ftphhphruhhpruhhpuhhpuruhhphruhhruhhpuhhru\\r\\n\", \"output\": [\"ftp:\/\/hhph.ru\/hhpruhhpuhhpuruhhphruhhruhhpuhhru\"]}, {\"input\": \"ftparua\\r\\n\", \"output\": [\"ftp:\/\/a.ru\/a\"]}, {\"input\": \"httpzru\\r\\n\", \"output\": [\"http:\/\/z.ru\"]}, {\"input\": \"httprrur\\r\\n\", \"output\": [\"http:\/\/r.ru\/r\"]}, {\"input\": \"ftprru\\r\\n\", \"output\": [\"ftp:\/\/r.ru\"]}]","length":31,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2\\n1 2 3 4\", \"4\\n1 3 4 6 3 4 100 200\"]","prob_desc_input_spec":"The first line contains one number n (2\u2009\u2264\u2009n\u2009\u2264\u200950). The second line contains 2\u00b7n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1\u2009\u2264\u2009wi\u2009\u2264\u20091000).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"76659c0b7134416452585c391daadb16","prob_desc_created_at":"1506006300","source_code":"\nn = int(input())\na = list(map(int, input().split(' ')))\na.sort()\nmini = 100000000000\nfor i in range(len(a)):\n    for j in range(i+1, len(a)):\n        lmin = 0\n        x = 0\n        y = 1\n        while y < (len(a)):\n            if x == i or x == j:\n                x += 1\n                continue\n            if y == i or y == j or y == x:\n                y += 1\n                continue\n            lmin += abs(a[x] - a[y])\n            x += 2; y += 2\n\n        mini = min(lmin,mini)\n\n\nprint(mini)","prob_desc_sample_outputs":"[\"1\", \"5\"]","lang_cluster":"Python","code_uid":"917de73a8f890d5f09f530e2e0a67cdb","prob_desc_notes":null,"prob_desc_output_spec":"Print minimum possible total instability.","prob_desc_output_to":"standard output","prob_desc_description":"Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2\u00b7n people in the group (including Vadim), and they have exactly n\u2009-\u20091 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is wi, and weight is an important matter in kayaking \u2014 if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.Help the party to determine minimum possible total instability! ","hidden_unit_tests":"[{\"input\": \"2\\r\\n1 2 3 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n1 3 4 6 3 4 100 200\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3\\r\\n305 139 205 406 530 206\\r\\n\", \"output\": [\"102\"]}, {\"input\": \"3\\r\\n610 750 778 6 361 407\\r\\n\", \"output\": [\"74\"]}, {\"input\": \"5\\r\\n97 166 126 164 154 98 221 7 51 47\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"50\\r\\n1 1 2 2 1 3 2 2 1 1 1 1 2 3 3 1 2 1 3 3 2 1 2 3 1 1 2 1 3 1 3 1 3 3 3 1 1 1 3 3 2 2 2 2 3 2 2 2 2 3 1 3 3 3 3 1 3 3 1 3 3 3 3 2 3 1 3 3 1 1 1 3 1 2 2 2 1 1 1 3 1 2 3 2 1 3 3 2 2 1 3 1 3 1 2 2 1 2 3 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50\\r\\n5 5 5 5 4 2 2 3 2 2 4 1 5 5 1 2 4 2 4 2 5 2 2 2 2 3 2 4 2 5 5 4 3 1 2 3 3 5 4 2 2 5 2 4 5 5 4 4 1 5 5 3 2 2 5 1 3 3 2 4 4 5 1 2 3 4 4 1 3 3 3 5 1 2 4 4 4 4 2 5 2 5 3 2 4 5 5 2 1 1 2 4 5 3 2 1 2 4 4 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50\\r\\n499 780 837 984 481 526 944 482 862 136 265 605 5 631 974 967 574 293 969 467 573 845 102 224 17 873 648 120 694 996 244 313 404 129 899 583 541 314 525 496 443 857 297 78 575 2 430 137 387 319 382 651 594 411 845 746 18 232 6 289 889 81 174 175 805 1000 799 950 475 713 951 685 729 925 262 447 139 217 788 514 658 572 784 185 112 636 10 251 621 218 210 89 597 553 430 532 264 11 160 476\\r\\n\", \"output\": [\"368\"]}, {\"input\": \"50\\r\\n873 838 288 87 889 364 720 410 565 651 577 356 740 99 549 592 994 385 777 435 486 118 887 440 749 533 356 790 413 681 267 496 475 317 88 660 374 186 61 437 729 860 880 538 277 301 667 180 60 393 955 540 896 241 362 146 74 680 734 767 851 337 751 860 542 735 444 793 340 259 495 903 743 961 964 966 87 275 22 776 368 701 835 732 810 735 267 988 352 647 924 183 1 924 217 944 322 252 758 597\\r\\n\", \"output\": [\"393\"]}, {\"input\": \"50\\r\\n297 787 34 268 439 629 600 398 425 833 721 908 830 636 64 509 420 647 499 675 427 599 396 119 798 742 577 355 22 847 389 574 766 453 196 772 808 261 106 844 726 975 173 992 874 89 775 616 678 52 69 591 181 573 258 381 665 301 589 379 362 146 790 842 765 100 229 916 938 97 340 793 758 177 736 396 247 562 571 92 923 861 165 748 345 703 431 930 101 761 862 595 505 393 126 846 431 103 596 21\\r\\n\", \"output\": [\"387\"]}, {\"input\": \"50\\r\\n721 631 587 746 692 406 583 90 388 16 161 948 921 70 387 426 39 398 517 724 879 377 906 502 359 950 798 408 846 718 911 845 57 886 9 668 537 632 344 762 19 193 658 447 870 173 98 156 592 519 183 539 274 393 962 615 551 626 148 183 769 763 829 120 796 761 14 744 537 231 696 284 581 688 611 826 703 145 224 600 965 613 791 275 984 375 402 281 851 580 992 8 816 454 35 532 347 250 242 637\\r\\n\", \"output\": [\"376\"]}, {\"input\": \"50\\r\\n849 475 37 120 754 183 758 374 543 198 896 691 11 607 198 343 761 660 239 669 628 259 223 182 216 158 20 565 454 884 137 923 156 22 310 77 267 707 582 169 120 308 439 309 59 152 206 696 210 177 296 887 559 22 154 553 142 247 491 692 473 572 461 206 532 319 503 164 328 365 541 366 300 392 486 257 863 432 877 404 520 69 418 99 519 239 374 927 601 103 226 316 423 219 240 26 455 101 184 61\\r\\n\", \"output\": [\"351\"]}, {\"input\": \"3\\r\\n1 2 10 11 100 100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"17\\r\\n814 744 145 886 751 1000 272 914 270 529 467 164 410 369 123 424 991 12 702 582 561 858 746 950 598 393 606 498 648 686 455 873 728 858\\r\\n\", \"output\": [\"318\"]}, {\"input\": \"45\\r\\n476 103 187 696 463 457 588 632 763 77 391 721 95 124 378 812 980 193 694 898 859 572 721 274 605 264 929 615 257 918 42 493 1 3 697 349 990 800 82 535 382 816 943 735 11 272 562 323 653 370 766 332 666 130 704 604 645 717 267 255 37 470 925 941 376 611 332 758 504 40 477 263 708 434 38 596 650 990 714 662 572 467 949 799 648 581 545 828 508 636\\r\\n\", \"output\": [\"355\"]}, {\"input\": \"2\\r\\n55 5 25 51\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"25\\r\\n89 50 640 463 858 301 522 241 923 378 892 822 550 17 42 66 706 779 657 840 273 222 444 459 94 925 437 159 182 727 92 851 742 215 653 891 782 533 29 128 133 883 317 475 165 994 802 434 744 973\\r\\n\", \"output\": [\"348\"]}, {\"input\": \"4\\r\\n35 48 71 44 78 79 57 48\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"3\\r\\n58 89 73 15 5 47\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"2\\r\\n1 20 99 100\\r\\n\", \"output\": [\"1\"]}]","length":24,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 3\", \"6 5\", \"1000000000 1\"]","prob_desc_input_spec":"The only line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 10^9$$$, $$$1 \\le m \\le 1000$$$)\u00a0\u2014 the size of the field and the number of parts to split the sets into.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"2ec9e7cddc634d7830575e14363a4657","prob_desc_created_at":"1543163700","source_code":"n, m = [int(i) for i in input().split()]\nans = 0\nar = [n \/\/ m] * m\nfor i in range(1, n % m + 1, 1):\n    ar[i] += 1\nfor i in range(m):\n    for j in range(m):\n        if ((i * i + j * j) % m == 0):\n            ans += ar[i] * ar[j]\nprint(ans)","prob_desc_sample_outputs":"[\"1\", \"13\", \"1000000000000000000\"]","lang_cluster":"Python","code_uid":"42950263fc19dbfeac9eed130f615dde","prob_desc_notes":"NoteIn the first example, only the set for cell $$$(3, 3)$$$ can be split equally ($$$3^2 + 3^2 = 18$$$, which is divisible by $$$m=3$$$).In the second example, the sets for the following cells can be divided equally:   $$$(1, 2)$$$ and $$$(2, 1)$$$, since $$$1^2 + 2^2 = 5$$$, which is divisible by $$$5$$$;  $$$(1, 3)$$$ and $$$(3, 1)$$$;  $$$(2, 4)$$$ and $$$(4, 2)$$$;  $$$(2, 6)$$$ and $$$(6, 2)$$$;  $$$(3, 4)$$$ and $$$(4, 3)$$$;  $$$(3, 6)$$$ and $$$(6, 3)$$$;  $$$(5, 5)$$$. In the third example, sets in all cells can be divided equally, since $$$m = 1$$$.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the number of sets that can be split equally.","prob_desc_output_to":"standard output","prob_desc_description":"Arkady and his friends love playing checkers on an $$$n \\times n$$$ field. The rows and the columns of the field are enumerated from $$$1$$$ to $$$n$$$.The friends have recently won a championship, so Arkady wants to please them with some candies. Remembering an old parable (but not its moral), Arkady wants to give to his friends one set of candies per each cell of the field: the set of candies for cell $$$(i, j)$$$ will have exactly $$$(i^2 + j^2)$$$ candies of unique type.There are $$$m$$$ friends who deserve the present. How many of these $$$n \\times n$$$ sets of candies can be split equally into $$$m$$$ parts without cutting a candy into pieces? Note that each set has to be split independently since the types of candies in different sets are different.","hidden_unit_tests":"[{\"input\": \"3 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"6 5\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"1000000000 1\\r\\n\", \"output\": [\"1000000000000000000\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 81\\r\\n\", \"output\": [\"12345678987654321\"]}, {\"input\": \"10000 1\\r\\n\", \"output\": [\"100000000\"]}, {\"input\": \"10000 2\\r\\n\", \"output\": [\"50000000\"]}, {\"input\": \"10000 3\\r\\n\", \"output\": [\"11108889\"]}, {\"input\": \"15 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 200\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 1000\\r\\n\", \"output\": [\"3400000000000000\"]}, {\"input\": \"999999998 229\\r\\n\", \"output\": [\"8714555372170630\"]}, {\"input\": \"999999999 228\\r\\n\", \"output\": [\"76946738381041\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000 5\\r\\n\", \"output\": [\"36000000\"]}, {\"input\": \"1 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"260\"]}, {\"input\": \"360 900\\r\\n\", \"output\": [\"374\"]}, {\"input\": \"1000 999\\r\\n\", \"output\": [\"657\"]}, {\"input\": \"12345 1\\r\\n\", \"output\": [\"152399025\"]}]","length":10,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n1 3 3 2\", \"3\\n1 1 1\", \"4\\n42 0 0 42\"]","prob_desc_input_spec":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of participants. The next line contains a sequence of n integers a1,\u2009a2,\u2009...,\u2009an (0\u2009\u2264\u2009ai\u2009\u2264\u2009600)\u00a0\u2014 participants' scores. It's guaranteed that at least one participant has non-zero score.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"3b520c15ea9a11b16129da30dcfb5161","prob_desc_created_at":"1519574700","source_code":"n = int(input())\npoints = list(map(int, input().split()))\n\nunique_points = []\nfor element in points:\n    if element not in unique_points and element != 0:\n        unique_points.append(element)\nprint (len(unique_points))","prob_desc_sample_outputs":"[\"3\", \"1\", \"1\"]","lang_cluster":"Python","code_uid":"f8f0ce8c5d6d865823c8105d2195c99e","prob_desc_notes":"NoteThere are three ways to choose a subset in sample case one.  Only participants with 3 points will get diplomas.  Participants with 2 or 3 points will get diplomas.  Everyone will get a diploma! The only option in sample case two is to award everyone.Note that in sample case three participants with zero scores cannot get anything.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the desired number of ways.","prob_desc_output_to":"standard output","prob_desc_description":"The recent All-Berland Olympiad in Informatics featured n participants with each scoring a certain amount of points.As the head of the programming committee, you are to determine the set of participants to be awarded with diplomas with respect to the following criteria:   At least one participant should get a diploma.  None of those with score equal to zero should get awarded.  When someone is awarded, all participants with score not less than his score should also be awarded. Determine the number of ways to choose a subset of participants that will receive the diplomas.","hidden_unit_tests":"[{\"input\": \"4\\r\\n1 3 3 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n42 0 0 42\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n1 0 1 0 1 0 0 0 0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n572 471 540 163 50 30 561 510 43 200\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"100\\r\\n122 575 426 445 172 81 247 429 97 202 175 325 382 384 417 356 132 502 328 537 57 339 518 211 479 306 140 168 268 16 140 263 593 249 391 310 555 468 231 180 157 18 334 328 276 155 21 280 322 545 111 267 467 274 291 304 235 34 365 180 21 95 501 552 325 331 302 353 296 22 289 399 7 466 32 302 568 333 75 192 284 10 94 128 154 512 9 480 243 521 551 492 420 197 207 125 367 117 438 600\\r\\n\", \"output\": [\"94\"]}, {\"input\": \"100\\r\\n600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"78\\r\\n5 4 13 2 5 6 2 10 10 1 2 6 7 9 6 3 5 7 1 10 2 2 7 0 2 11 11 3 1 13 3 10 6 2 0 3 0 5 0 1 4 11 1 1 7 0 12 7 5 12 0 2 12 9 8 3 4 3 4 11 4 10 2 3 10 12 5 6 1 11 2 0 8 7 9 1 3 12\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"34\\r\\n220 387 408 343 184 447 197 307 337 414 251 319 426 322 347 242 208 412 188 185 241 235 216 259 331 372 322 284 444 384 214 297 389 391\\r\\n\", \"output\": [\"33\"]}, {\"input\": \"100\\r\\n1 2 1 0 3 0 2 0 0 1 2 0 1 3 0 3 3 1 3 0 0 2 1 2 2 1 3 3 3 3 3 2 0 0 2 1 2 3 2 3 0 1 1 3 3 2 0 3 1 0 2 2 2 1 2 3 2 1 0 3 0 2 0 3 0 2 1 0 3 1 0 2 2 1 3 1 3 0 2 3 3 1 1 3 1 3 0 3 2 0 2 3 3 0 2 0 2 0 1 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n572 471 540 163 50 30 561 510 43 200 213 387 500 424 113 487 357 333 294 337 435 202 447 494 485 465 161 344 470 559 104 356 393 207 224 213 511 514 60 386 149 216 392 229 429 173 165 401 395 150 127 579 344 390 529 296 225 425 318 79 465 447 177 110 367 212 459 270 41 500 277 567 125 436 178 9 214 342 203 112 144 24 79 155 495 556 40 549 463 281 241 316 2 246 1 396 510 293 332 55\\r\\n\", \"output\": [\"93\"]}, {\"input\": \"99\\r\\n5 4 13 2 5 6 2 10 10 1 2 6 7 9 6 3 5 7 1 10 2 2 7 0 2 11 11 3 1 13 3 10 6 2 0 3 0 5 0 1 4 11 1 1 7 0 12 7 5 12 0 2 12 9 8 3 4 3 4 11 4 10 2 3 10 12 5 6 1 11 2 0 8 7 9 1 3 12 2 3 9 3 7 13 7 13 0 11 8 12 2 5 9 4 0 6 6 2 13\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"99\\r\\n1 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 1 1 0 0 0 0 0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"99\\r\\n21 74 25 44 71 80 46 28 96 1 74 24 81 83 16 55 31 1 27 36 56 38 17 10 78 5 39 67 67 15 39 62 92 48 90 9 54 67 30 79 56 17 33 27 75 54 20 79 21 44 10 66 66 73 90 3 34 33 64 79 20 94 0 51 24 30 1 52 95 21 88 98 6 65 31 1 67 32 74 91 83 9 93 27 53 11 8 79 42 20 50 91 19 96 6 24 66 16 37\\r\\n\", \"output\": [\"61\"]}, {\"input\": \"2\\r\\n0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n0 600\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n1 1 1 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\n0 0 1 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1\\r\\n5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n0 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n1 0 0 1 2\\r\\n\", \"output\": [\"2\"]}]","length":8,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"10 20 30\", \"1 1 5\"]","prob_desc_input_spec":"The first line of the input contains three integers d1, d2, d3 (1\u2009\u2264\u2009d1,\u2009d2,\u2009d3\u2009\u2264\u2009108)\u00a0\u2014 the lengths of the paths.    d1 is the length of the path connecting Patrick's house and the first shop;  d2 is the length of the path connecting Patrick's house and the second shop;  d3 is the length of the path connecting both shops. ","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"26cd7954a21866dbb2824d725473673e","prob_desc_created_at":"1448037300","source_code":"z,x,c=map(int,input().split())\nif (z+x)>c:\n\tif x>z and x>c:\n\t\td=2*(z+c)\n\telif z>x and z>c:\n\t\td=2*(x+c)\n\telse:\t\n\t\td=x+z+c\nif z+x<=c:\n\td=2*z+2*x\nprint(d)\t\t\n","prob_desc_sample_outputs":"[\"60\", \"4\"]","lang_cluster":"Python","code_uid":"e805b36813d71d7bb7cff9b22ff2cd6f","prob_desc_notes":"NoteThe first sample is shown on the picture in the problem statement. One of the optimal routes is: house  first shop  second shop  house.In the second sample one of the optimal routes is: house  first shop  house  second shop  house.","prob_desc_output_spec":"Print the minimum distance that Patrick will have to walk in order to visit both shops and return to his house.","prob_desc_output_to":"standard output","prob_desc_description":"Today Patrick waits for a visit from his friend Spongebob. To prepare for the visit, Patrick needs to buy some goodies in two stores located near his house. There is a d1 meter long road between his house and the first shop and a d2 meter long road between his house and the second shop. Also, there is a road of length d3 directly connecting these two shops to each other. Help Patrick calculate the minimum distance that he needs to walk in order to go to both shops and return to his house.  Patrick always starts at his house. He should visit both shops moving only along the three existing roads and return back to his house. He doesn't mind visiting the same shop or passing the same road multiple times. The only goal is to minimize the total distance traveled.","hidden_unit_tests":"[{\"input\": \"10 20 30\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"1 1 5\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100 33 34\\r\\n\", \"output\": [\"134\"]}, {\"input\": \"777 777 777\\r\\n\", \"output\": [\"2331\"]}, {\"input\": \"2 2 8\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"12 34 56\\r\\n\", \"output\": [\"92\"]}, {\"input\": \"789 101112 131415\\r\\n\", \"output\": [\"203802\"]}, {\"input\": \"27485716 99999999 35182\\r\\n\", \"output\": [\"55041796\"]}, {\"input\": \"1 293548 5\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"12059 259855 5874875\\r\\n\", \"output\": [\"543828\"]}, {\"input\": \"46981 105809 585858\\r\\n\", \"output\": [\"305580\"]}, {\"input\": \"9889 1221 2442\\r\\n\", \"output\": [\"7326\"]}, {\"input\": \"100500 200600 300700\\r\\n\", \"output\": [\"601800\"]}, {\"input\": \"318476 318476 318476\\r\\n\", \"output\": [\"955428\"]}, {\"input\": \"23985 3353 75633\\r\\n\", \"output\": [\"54676\"]}, {\"input\": \"120 1298 2222\\r\\n\", \"output\": [\"2836\"]}, {\"input\": \"98437 23487 666672\\r\\n\", \"output\": [\"243848\"]}, {\"input\": \"100000000 100000000 100000000\\r\\n\", \"output\": [\"300000000\"]}, {\"input\": \"2 5 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 1000 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 100000000 1\\r\\n\", \"output\": [\"4\"]}]","length":11,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n10 2 3 5 4 2\", \"4\\n100 100 100 100\", \"8\\n7 6 5 4 3 2 2 3\"]","prob_desc_input_spec":"The first line contains an integer $$$n$$$ ($$$1 \\le n \\le 100$$$), where $$$n$$$ is the length of the given sequence. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 100$$$). These numbers can contain duplicates.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"63d9b7416aa96129c57d20ec6145e0cd","prob_desc_created_at":"1568466300","source_code":"n=int(input())\nl=set(map(int ,input().split()))\nc=0\nm=min(l)\nwhile l:\n    c+=1\n    m=min(l)\n    for i in range(m,101,m):\n        l-={i}\nprint(c)\n        ","prob_desc_sample_outputs":"[\"3\", \"1\", \"4\"]","lang_cluster":"Python","code_uid":"b80f2340567b87ce410f832c6c42ddba","prob_desc_notes":"NoteIn the first example, one possible way to paint the elements in $$$3$$$ colors is:  paint in the first color the elements: $$$a_1=10$$$ and $$$a_4=5$$$,  paint in the second color the element $$$a_3=3$$$,  paint in the third color the elements: $$$a_2=2$$$, $$$a_5=4$$$ and $$$a_6=2$$$. In the second example, you can use one color to paint all the elements.In the third example, one possible way to paint the elements in $$$4$$$ colors is:  paint in the first color the elements: $$$a_4=4$$$, $$$a_6=2$$$ and $$$a_7=2$$$,  paint in the second color the elements: $$$a_2=6$$$, $$$a_5=3$$$ and $$$a_8=3$$$,  paint in the third color the element $$$a_3=5$$$,  paint in the fourth color the element $$$a_1=7$$$. ","prob_desc_output_spec":"Print the minimal number of colors to paint all the given numbers in a valid way.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a sequence of integers $$$a_1, a_2, \\dots, a_n$$$. You need to paint elements in colors, so that:   If we consider any color, all elements of this color must be divisible by the minimal element of this color.  The number of used colors must be minimized. For example, it's fine to paint elements $$$[40, 10, 60]$$$ in a single color, because they are all divisible by $$$10$$$. You can use any color an arbitrary amount of times (in particular, it is allowed to use a color only once). The elements painted in one color do not need to be consecutive.For example, if $$$a=[6, 2, 3, 4, 12]$$$ then two colors are required: let's paint $$$6$$$, $$$3$$$ and $$$12$$$ in the first color ($$$6$$$, $$$3$$$ and $$$12$$$ are divisible by $$$3$$$) and paint $$$2$$$ and $$$4$$$ in the second color ($$$2$$$ and $$$4$$$ are divisible by $$$2$$$). For example, if $$$a=[10, 7, 15]$$$ then $$$3$$$ colors are required (we can simply paint each element in an unique color).","hidden_unit_tests":"[{\"input\": \"6\\r\\n10 2 3 5 4 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\n100 100 100 100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8\\r\\n7 6 5 4 3 2 2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"100\\r\\n17 23 71 25 50 71 85 46 78 72 89 26 23 70 40 59 23 43 86 81 70 89 92 98 85 88 16 10 26 91 61 58 23 13 75 39 48 15 73 79 59 29 48 32 45 44 25 37 58 54 45 67 27 77 20 64 95 41 80 53 69 24 38 97 59 94 50 88 92 47 95 31 66 48 48 56 37 76 42 74 55 34 43 79 65 82 70 52 48 56 36 17 14 65 77 81 88 18 33 40\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"100\\r\\n89 38 63 73 77 4 99 74 30 5 69 57 97 37 88 71 36 59 19 63 46 20 33 58 61 98 100 31 33 53 99 96 34 17 44 95 54 52 22 77 67 88 20 88 26 43 12 23 96 94 14 7 57 86 56 54 32 8 3 43 97 56 74 22 5 100 12 60 93 12 44 68 31 63 7 71 21 29 19 38 50 47 97 43 50 59 88 40 51 61 20 68 32 66 70 48 19 55 91 53\\r\\n\", \"output\": [\"22\"]}, {\"input\": \"100\\r\\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 18 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\\r\\n\", \"output\": [\"22\"]}, {\"input\": \"100\\r\\n83 74 53 90 85 65 55 74 86 64 69 70 66 57 93 90 97 66 62 52 76 80 70 65 79 59 88 65 76 70 94 57 53 83 91 69 59 80 82 53 97 91 75 74 77 70 51 58 56 79 72 79 60 91 60 84 75 92 88 93 96 100 56 77 55 56 69 80 100 78 68 69 90 99 97 62 85 97 71 52 60 83 85 89 96 98 59 96 85 98 51 90 90 71 97 91 94 64 57 52\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"100\\r\\n94 83 55 57 63 89 73 59 75 97 77 54 77 81 70 81 99 52 88 76 98 88 79 67 76 80 89 50 60 60 53 83 96 87 75 99 61 91 75 85 88 80 90 54 84 88 98 93 69 97 93 54 83 59 57 92 88 78 53 55 99 63 60 70 61 52 60 55 100 85 80 58 53 97 59 61 50 90 75 85 86 63 91 96 67 68 86 96 79 98 51 83 82 92 65 100 76 83 57 100\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"100\\r\\n70 89 84 63 91 63 75 56 87 98 93 58 95 67 57 90 56 100 84 82 80 64 71 58 67 62 52 81 92 74 79 83 100 72 70 61 97 86 91 93 62 86 88 66 55 59 65 59 72 80 68 95 53 82 54 85 81 85 52 65 96 94 66 74 68 64 73 99 97 99 78 69 79 90 54 51 87 96 77 78 77 76 98 53 71 76 55 61 89 94 88 57 83 51 69 60 75 60 92 73\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"10\\r\\n7 70 8 9 8 9 35 1 99 27\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n40 80 40 40 40\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"17\\r\\n13 63 82 53 83 30 7 8 21 61 74 41 11 54 71 53 66\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"10\\r\\n8 5 5 10 8 10 8 9 7 9\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"20\\r\\n6 8 14 8 9 4 7 9 7 6 9 10 14 14 11 7 12 6 11 6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"15\\r\\n5 4 2 6 9 8 2 8 6 4 4 6 5 10 6\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"26\\r\\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n1 2\\r\\n\", \"output\": [\"1\"]}]","length":11,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 1 2 1\", \"2 2 1 2\"]","prob_desc_input_spec":"Four lines contain integers $$$w_1, h_1, w_2$$$ and $$$h_2$$$ ($$$1 \\leq w_1, h_1, w_2, h_2 \\leq 10^8$$$, $$$w_1 \\ge w_2$$$)\u00a0\u2014 the width of the first rectangle, the height of the first rectangle, the width of the second rectangle and the height of the second rectangle. You can't rotate the rectangles.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"b5d44e0041053c996938aadd1b3865f6","prob_desc_created_at":"1550917200","source_code":"def main():\n    [w1, h1, w2, h2] = [int(_) for _ in input().split()]\n    marked = (w1 + 2) + (h1 * 2) + (h2 * 2) + (w2 + 2) + (w1 - w2)\n\n    print(marked)\n\n\nif __name__ == '__main__':\n    main()\n","prob_desc_sample_outputs":"[\"12\", \"16\"]","lang_cluster":"Python","code_uid":"06887143c901796fe0c069c17613e786","prob_desc_notes":"NoteIn the first example the field looks as follows (the first rectangle is red, the second rectangle is blue, green shows the marked squares):  In the second example the field looks as:  ","prob_desc_output_spec":"Print exactly one integer\u00a0\u2014 the number of cells, which should be marked after the ship is destroyed.","prob_desc_output_to":"standard output","prob_desc_description":"In order to make the \"Sea Battle\" game more interesting, Boris decided to add a new ship type to it. The ship consists of two rectangles. The first rectangle has a width of $$$w_1$$$ and a height of $$$h_1$$$, while the second rectangle has a width of $$$w_2$$$ and a height of $$$h_2$$$, where $$$w_1 \\ge w_2$$$. In this game, exactly one ship is used, made up of two rectangles. There are no other ships on the field.The rectangles are placed on field in the following way:  the second rectangle is on top the first rectangle;  they are aligned to the left, i.e. their left sides are on the same line;  the rectangles are adjacent to each other without a gap. See the pictures in the notes: the first rectangle is colored red, the second rectangle is colored blue.Formally, let's introduce a coordinate system. Then, the leftmost bottom cell of the first rectangle has coordinates $$$(1, 1)$$$, the rightmost top cell of the first rectangle has coordinates $$$(w_1, h_1)$$$, the leftmost bottom cell of the second rectangle has coordinates $$$(1, h_1 + 1)$$$ and the rightmost top cell of the second rectangle has coordinates $$$(w_2, h_1 + h_2)$$$.After the ship is completely destroyed, all cells neighboring by side or a corner with the ship are marked. Of course, only cells, which don't belong to the ship are marked. On the pictures in the notes such cells are colored green.Find out how many cells should be marked after the ship is destroyed. The field of the game is infinite in any direction.","hidden_unit_tests":"[{\"input\": \"2 1 2 1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"2 2 1 2\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"1 1 1 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1 50 1 50\\r\\n\", \"output\": [\"206\"]}, {\"input\": \"6 4 2 7\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"100000000 100000000 99999999 100000000\\r\\n\", \"output\": [\"600000004\"]}, {\"input\": \"100000000 1 100000000 1\\r\\n\", \"output\": [\"200000008\"]}, {\"input\": \"19661988 30021918 8795449 27534575\\r\\n\", \"output\": [\"154436966\"]}, {\"input\": \"98948781 84140283 95485812 84557929\\r\\n\", \"output\": [\"535293990\"]}, {\"input\": \"47 40 42 49\\r\\n\", \"output\": [\"276\"]}, {\"input\": \"18 3 8 15\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"49 45 49 46\\r\\n\", \"output\": [\"284\"]}, {\"input\": \"50 50 50 50\\r\\n\", \"output\": [\"304\"]}, {\"input\": \"24 25 16 38\\r\\n\", \"output\": [\"178\"]}, {\"input\": \"23 1 12 2\\r\\n\", \"output\": [\"56\"]}, {\"input\": \"1000000 1000000 1000000 1000000\\r\\n\", \"output\": [\"6000004\"]}, {\"input\": \"1000000 1000000 999999 1000000\\r\\n\", \"output\": [\"6000004\"]}, {\"input\": \"1000000 1 1000000 1\\r\\n\", \"output\": [\"2000008\"]}, {\"input\": \"672810 797124 51792 404095\\r\\n\", \"output\": [\"3748062\"]}, {\"input\": \"960051 866743 887923 926936\\r\\n\", \"output\": [\"5507464\"]}, {\"input\": \"100000000 100000000 100000000 100000000\\r\\n\", \"output\": [\"600000004\"]}, {\"input\": \"1000 1000 700 20000\\r\\n\", \"output\": [\"44004\"]}]","length":9,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"7\\nABACABA\", \"5\\nZZZAA\"]","prob_desc_input_spec":"The first line of the input contains integer number $$$n$$$ ($$$2 \\le n \\le 100$$$) \u2014 the length of string $$$s$$$. The second line of the input contains the string $$$s$$$ consisting of $$$n$$$ capital Latin letters.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"e78005d4be93dbaa518f3b40cca84ab1","prob_desc_created_at":"1567258500","source_code":"n, dic = int(input()), {}\ns = input()\nfor i in range(1, n):\n    try:dic[s[i-1:i+1]]+=1\n    except:dic[s[i-1:i+1]]=1\nprint(max(dic.keys(), key=dic.get))","prob_desc_sample_outputs":"[\"AB\", \"ZZ\"]","lang_cluster":"Python","code_uid":"4f41b1b0eee48f1412343bd50c45ed2d","prob_desc_notes":"NoteIn the first example \"BA\" is also valid answer.In the second example the only two-gram \"ZZ\" can be printed because it contained in the string \"ZZZAA\" two times.","prob_desc_output_spec":"Print the only line containing exactly two capital Latin letters \u2014 any two-gram contained in the given string $$$s$$$ as a substring (i.e. two consecutive characters of the string) maximal number of times.","prob_desc_output_to":"standard output","prob_desc_description":"Two-gram is an ordered pair (i.e. string of length two) of capital Latin letters. For example, \"AZ\", \"AA\", \"ZA\" \u2014 three distinct two-grams.You are given a string $$$s$$$ consisting of $$$n$$$ capital Latin letters. Your task is to find any two-gram contained in the given string as a substring (i.e. two consecutive characters of the string) maximal number of times. For example, for string $$$s$$$ = \"BBAABBBA\" the answer is two-gram \"BB\", which contained in $$$s$$$ three times. In other words, find any most frequent two-gram.Note that occurrences of the two-gram can overlap with each other.","hidden_unit_tests":"[{\"input\": \"7\\r\\nABACABA\\r\\n\", \"output\": [\"BA\", \"AB\"]}, {\"input\": \"5\\r\\nZZZAA\\r\\n\", \"output\": [\"ZZ\"]}, {\"input\": \"26\\r\\nQWERTYUIOPASDFGHJKLZXCVBNM\\r\\n\", \"output\": [\"KL\", \"QW\", \"WE\", \"AS\"]}, {\"input\": \"2\\r\\nQA\\r\\n\", \"output\": [\"QA\"]}, {\"input\": \"2\\r\\nWW\\r\\n\", \"output\": [\"WW\"]}, {\"input\": \"11\\r\\nGGRRAATTZZZ\\r\\n\", \"output\": [\"ZZ\"]}, {\"input\": \"50\\r\\nNYQAHBYYOXLTRYQDMVENEMAQNBAKGLGQOLXNAIFNQTOCLNNQIA\\r\\n\", \"output\": [\"NQ\", \"YQ\"]}, {\"input\": \"100\\r\\nURXCAIZFIBNJTPCZHBQIBCILLPXZCFGMKKZMNPLCYGAVJVIBMCZEBSJWPSCPQDYCTTKPOKIJRSKIZPDGCHVOUTMPNECYORSFZFNC\\r\\n\", \"output\": [\"IB\"]}, {\"input\": \"100\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\", \"output\": [\"AA\"]}, {\"input\": \"10\\r\\nSQSQSQSQTG\\r\\n\", \"output\": [\"SQ\"]}, {\"input\": \"5\\r\\nAZAZA\\r\\n\", \"output\": [\"ZA\", \"AZ\"]}, {\"input\": \"15\\r\\nMIRZOYANOVECLOX\\r\\n\", \"output\": [\"AN\", \"IR\", \"MI\", \"NO\"]}, {\"input\": \"9\\r\\nEGORLETOV\\r\\n\", \"output\": [\"GO\", \"EG\", \"TO\"]}, {\"input\": \"8\\r\\nPUTINVOR\\r\\n\", \"output\": [\"PU\", \"IN\", \"UT\", \"NV\"]}, {\"input\": \"7\\r\\nKADUROV\\r\\n\", \"output\": [\"KA\", \"AD\"]}, {\"input\": \"6\\r\\nAZAZAZ\\r\\n\", \"output\": [\"AZ\"]}, {\"input\": \"3\\r\\nLOL\\r\\n\", \"output\": [\"OL\", \"LO\"]}, {\"input\": \"3\\r\\nKEK\\r\\n\", \"output\": [\"EK\", \"KE\"]}, {\"input\": \"5\\r\\nFUFEL\\r\\n\", \"output\": [\"UF\", \"EL\", \"FU\"]}, {\"input\": \"9\\r\\nMIKEPIDOR\\r\\n\", \"output\": [\"EP\", \"MI\", \"DO\", \"IK\"]}, {\"input\": \"9\\r\\nAAAAAAAAA\\r\\n\", \"output\": [\"AA\"]}, {\"input\": \"23\\r\\nAABBBAAACCCCCAAADDDDDDD\\r\\n\", \"output\": [\"DD\"]}]","length":6,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"42\", \"5\"]","prob_desc_input_spec":"The only line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u200910000).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"5d4f38ffd1849862623325fdbe06cd00","prob_desc_created_at":"1319893200","source_code":"n=int(input())\na=n\/\/3\nb=n%3\nif b==2:\n    a=a+1\np=a\/\/12\nq=a%12\nprint(p,q)","prob_desc_sample_outputs":"[\"1 2\", \"0 2\"]","lang_cluster":"Python","code_uid":"607cfc90cbbdd84013355718b776f850","prob_desc_notes":null,"prob_desc_output_spec":"Print two non-negative space-separated integers a and b, where a is the numbers of feet and b is the number of inches.","prob_desc_output_to":"standard output","prob_desc_description":"Lengths are measures in Baden in inches and feet. To a length from centimeters it is enough to know that an inch equals three centimeters in Baden and one foot contains 12 inches.You are given a length equal to n centimeters. Your task is to convert it to feet and inches so that the number of feet was maximum. The result should be an integer rounded to the closest value containing an integral number of inches.Note that when you round up, 1 cm rounds up to 0 inches and 2 cm round up to 1 inch.","hidden_unit_tests":"[{\"input\": \"42\\r\\n\", \"output\": [\"1 2\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"0 2\"]}, {\"input\": \"24\\r\\n\", \"output\": [\"0 8\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"0 3\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"0 3\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"0 4\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"0 4\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"2 9\"]}, {\"input\": \"120\\r\\n\", \"output\": [\"3 4\"]}, {\"input\": \"199\\r\\n\", \"output\": [\"5 6\"]}, {\"input\": \"501\\r\\n\", \"output\": [\"13 11\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"27 9\"]}, {\"input\": \"1233\\r\\n\", \"output\": [\"34 3\"]}, {\"input\": \"9876\\r\\n\", \"output\": [\"274 4\"]}, {\"input\": \"9999\\r\\n\", \"output\": [\"277 9\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"277 9\"]}, {\"input\": \"35\\r\\n\", \"output\": [\"1 0\"]}, {\"input\": \"71\\r\\n\", \"output\": [\"2 0\"]}]","length":8,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"128 megabytes","difficulty":1500.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\"]","prob_desc_input_spec":"The only line contains a single integer $$$N$$$ ($$$1 \\leq N \\leq 10^9$$$).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"d0a8604b78ba19ab769fd1ec90a72e4e","prob_desc_created_at":"1662298500","source_code":"n=int(input())\r\nif n==1:\r\n  print(3)\r\nelse:\r\n  n-=1\r\n  a,b=n\/\/3,n%3\r\n  ans=4*(a+1)\r\n  if b==1:\r\n    ans+=1\r\n  elif b==2:\r\n    ans+=3\r\n  print(ans)","prob_desc_sample_outputs":"[\"7\"]","lang_cluster":"Python","code_uid":"72fdc9eb1333479716dd2045bcabdd38","prob_desc_notes":"NoteThe $$$3$$$-rd smallest suitable number is $$$7$$$. A square area of $$$7$$$ can be obtained by assigning $$$a=3$$$ and $$$b=4$$$.","prob_desc_output_spec":"An integer that represents the $$$N$$$-th smallest suitable number.","prob_desc_output_to":"standard output","prob_desc_description":"Pak Chanek plans to build a garage. He wants the garage to consist of a square and a right triangle that are arranged like the following illustration.  Define $$$a$$$ and $$$b$$$ as the lengths of two of the sides in the right triangle as shown in the illustration. An integer $$$x$$$ is suitable if and only if we can construct a garage with assigning positive integer values for the lengths $$$a$$$ and $$$b$$$ ($$$a&lt;b$$$) so that the area of the square at the bottom is exactly $$$x$$$. As a good friend of Pak Chanek, you are asked to help him find the $$$N$$$-th smallest suitable number.","hidden_unit_tests":"[{\"input\": \"3\\n\", \"output\": [\"7\\n\\n\", \"7\", \"7\\n\", \" 7 \\n\", \"7 \", \"\\n7\", \"7\\n\"]}, {\"input\": \"6\\n\", \"output\": [\"11\\n\", \"11\\n\", \"11\", \"11\\n\\n\", \"\\n11\", \"11 \"]}, {\"input\": \"5\\n\", \"output\": [\"\\n9\", \"9\\n\\n\", \"9\\n\", \"9 \", \"9\", \"9\\n\"]}, {\"input\": \"8\\n\", \"output\": [\"13 \", \"13\\n\\n\", \"13\\n\", \"13\\n\", \"\\n13\", \"13\"]}, {\"input\": \"4\\n\", \"output\": [\"8\\n\\n\", \"\\n8\", \"8 \", \"8\\n\", \"8\", \"8\\n\"]}, {\"input\": \"10\\n\", \"output\": [\"16 \", \"\\n16\", \"16\", \"16\\n\", \"16\\n\\n\", \"16\\n\"]}, {\"input\": \"18\\n\", \"output\": [\"27\", \"27\\n\", \"27 \", \"\\n27\", \"27\\n\", \"27\\n\\n\"]}, {\"input\": \"589284012\\n\", \"output\": [\"785712019\\n\", \"785712019\\n\", \"785712019\\n\\n\", \"785712019\"]}, {\"input\": \"636562060\\n\", \"output\": [\"848749416\\n\", \"848749416\\n\\n\", \"848749416 \", \"848749416\", \"848749416\\n\"]}, {\"input\": \"200000\\n\", \"output\": [\"266669\\n\", \"266669\", \"266669\\n\", \"266669\\n\\n\"]}, {\"input\": \"1000000000\\n\", \"output\": [\"1333333336\\n\", \"1333333336\", \"1333333336\\n\\n\", \"1333333336\\n\", \"1333333336 \"]}, {\"input\": \"999999999\\n\", \"output\": [\"1333333335\\n\", \"1333333335\", \"1333333335\\n\", \"1333333335\\n\\n\"]}, {\"input\": \"999999998\\n\", \"output\": [\"1333333333\", \"1333333333\\n\", \"1333333333\\n\\n\", \"1333333333\\n\"]}, {\"input\": \"999999997\\n\", \"output\": [\"1333333332 \", \"1333333332\\n\", \"1333333332\\n\\n\", \"1333333332\", \"1333333332\\n\"]}, {\"input\": \"1000005\\n\", \"output\": [\"1333343\\n\", \"1333343\\n\", \"1333343\\n\\n\", \"1333343\"]}, {\"input\": \"1000\\n\", \"output\": [\"1336\\n\\n\", \"1336\", \"1336\\n\", \"1336\\n\", \"1336 \"]}, {\"input\": \"2\\n\", \"output\": [\"5\\n\", \"5\", \" 5 \\n\", \"5\\n\\n\", \"5\\n\"]}, {\"input\": \"1\\n\", \"output\": [\"3\\n\\n\", \"3\\n\", \"3\\n\", \"3\", \" 3 \\n\"]}, {\"input\": \"767928734\\n\", \"output\": [\"1023904981\", \"1023904981\\n\", \"1023904981\\n\", \"1023904981\\n\\n\"]}, {\"input\": \"20400000\\n\", \"output\": [\"27200003\\n\", \"27200003\", \"27200003\\n\\n\", \"27200003\\n\"]}, {\"input\": \"999993999\\n\", \"output\": [\"1333325335\\n\\n\", \"1333325335\", \"1333325335\\n\", \"1333325335\\n\"]}, {\"input\": \"383964368\\n\", \"output\": [\"511952493\\n\", \"511952493\", \"511952493\\n\", \"511952493\\n\\n\"]}]","length":12,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"0.4 seconds","prob_desc_sample_inputs":"[\"4 3\", \"5 5\", \"8 4\"]","prob_desc_input_spec":"The first line contains two space-separated integers n and k (1\u2009\u2264\u2009n\u2009\u2264\u20091018, 2\u2009\u2264\u2009k\u2009\u2264\u2009109). Please, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"83bcfe32db302fbae18e8a95d89cf411","prob_desc_created_at":"1364025600","source_code":"def reach_max(n, k):\n    return n * k + 1 - n * (n + 1) \/\/ 2\n\n\nn, k = map(int, input().split())\n\nif n == 1:\n    print(0)\n    exit()\n\nlo, hi = 1, k - 1\n\nif n > reach_max(hi, k):\n    print(-1)\n    exit()\n\n\nwhile lo < hi:\n    mid = (lo + hi) \/\/ 2\n    if reach_max(mid, k) < n:\n        lo = mid + 1\n    else:\n        hi = mid\n\nprint(lo)\n","prob_desc_sample_outputs":"[\"2\", \"1\", \"-1\"]","lang_cluster":"Python","code_uid":"d288840bc9e8c4692ed1b5713d587df0","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the minimum number of splitters needed to build the pipeline. If it is impossible to build a pipeline with the given splitters, print -1.","prob_desc_output_to":"standard output","prob_desc_description":"Vova, the Ultimate Thule new shaman, wants to build a pipeline. As there are exactly n houses in Ultimate Thule, Vova wants the city to have exactly n pipes, each such pipe should be connected to the water supply. A pipe can be connected to the water supply if there's water flowing out of it. Initially Vova has only one pipe with flowing water. Besides, Vova has several splitters.A splitter is a construction that consists of one input (it can be connected to a water pipe) and x output pipes. When a splitter is connected to a water pipe, water flows from each output pipe. You can assume that the output pipes are ordinary pipes. For example, you can connect water supply to such pipe if there's water flowing out from it. At most one splitter can be connected to any water pipe.  The figure shows a 4-output splitter Vova has one splitter of each kind: with 2, 3, 4, ..., k outputs. Help Vova use the minimum number of splitters to build the required pipeline or otherwise state that it's impossible.Vova needs the pipeline to have exactly n pipes with flowing out water. Note that some of those pipes can be the output pipes of the splitters.","hidden_unit_tests":"[{\"input\": \"4 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8 4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1000000000000000000 1000000000\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"499999998500000001 1000000000\\r\\n\", \"output\": [\"999955279\"]}, {\"input\": \"499999998500000000 1000000000\\r\\n\", \"output\": [\"999955279\"]}, {\"input\": \"499999999500000000 1000000000\\r\\n\", \"output\": [\"999999998\"]}, {\"input\": \"499999999500000001 1000000000\\r\\n\", \"output\": [\"999999999\"]}, {\"input\": \"525 34\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"223265034477 726990\\r\\n\", \"output\": [\"440662\"]}, {\"input\": \"15597035789572051 185473109\\r\\n\", \"output\": [\"128849771\"]}, {\"input\": \"499999999500000002 1000000000\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 1000000000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000000000 2\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"462498979 204468265\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2107921 542531\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"131 49\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"20171878992939541 200857557\\r\\n\", \"output\": [\"200853401\"]}, {\"input\": \"399812655947 894219\\r\\n\", \"output\": [\"893030\"]}, {\"input\": \"93 17\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1000000000 999999999\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100000000000000000 1000000000\\r\\n\", \"output\": [\"105572810\"]}]","length":25,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"5 1\", \"2 2\", \"3 2\", \"11 5\", \"37 63\"]","prob_desc_input_spec":"The first line contains two space-separated integers n and C, 1\u2009\u2264\u2009n\u2009\u2264\u2009500000, 1\u2009\u2264\u2009C\u2009\u2264\u2009200000.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"e63c70a9c96a94bce99618f2e695f83a","prob_desc_created_at":"1468137600","source_code":"n, c = map(int, input().split())\nmod = 10 ** 6 +3\ninv = [0, 1]\nfor i in range(2, max(n, c) + 1):\n    inv.append(inv[mod % i] * (mod - mod \/\/ i) % mod)\nans = 1\nfor i in range(1, n + c + 1):\n    ans = ans * i % mod\nfor i in range(1, c + 1):\n    ans = ans * inv[i] % mod\nfor i in range(1, n + 1):\n    ans = ans * inv[i] % mod\nans += mod - 1\nans %= mod\nprint(ans)\n\n","prob_desc_sample_outputs":"[\"5\", \"5\", \"9\", \"4367\", \"230574\"]","lang_cluster":"Python","code_uid":"b72886e9f716a7a369948ae8f9b5911d","prob_desc_notes":"NoteThe number 106\u2009+\u20093 is prime.In the second sample case, the five walls are:             B        BB., .B, BB, B., and .BIn the third sample case, the nine walls are the five as in the second sample case and in addition the following four: B    BB    B  B        BB., .B, BB, and BB","prob_desc_output_spec":"Print the number of different walls that Heidi could build, modulo 106\u2009+\u20093.","prob_desc_output_to":"standard output","prob_desc_description":"Heidi the Cow is aghast: cracks in the northern Wall? Zombies gathering outside, forming groups, preparing their assault? This must not happen! Quickly, she fetches her HC2 (Handbook of Crazy Constructions) and looks for the right chapter:How to build a wall:  Take a set of bricks.  Select one of the possible wall designs. Computing the number of possible designs is left as an exercise to the reader.  Place bricks on top of each other, according to the chosen design. This seems easy enough. But Heidi is a Coding Cow, not a Constructing Cow. Her mind keeps coming back to point 2b. Despite the imminent danger of a zombie onslaught, she wonders just how many possible walls she could build with up to n bricks.A wall is a set of wall segments as defined in the easy version. How many different walls can be constructed such that the wall consists of at least 1 and at most n bricks? Two walls are different if there exist a column c and a row r such that one wall has a brick in this spot, and the other does not.Along with n, you will be given C, the width of the wall (as defined in the easy version). Return the number of different walls modulo 106\u2009+\u20093.","hidden_unit_tests":"[{\"input\": \"5 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"11 5\\r\\n\", \"output\": [\"4367\"]}, {\"input\": \"37 63\\r\\n\", \"output\": [\"230574\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"350000 140000\\r\\n\", \"output\": [\"453366\"]}, {\"input\": \"350000 160000\\r\\n\", \"output\": [\"155549\"]}, {\"input\": \"350000 180000\\r\\n\", \"output\": [\"708073\"]}, {\"input\": \"350000 200000\\r\\n\", \"output\": [\"504934\"]}, {\"input\": \"400000 140000\\r\\n\", \"output\": [\"956370\"]}, {\"input\": \"400000 160000\\r\\n\", \"output\": [\"480365\"]}, {\"input\": \"400000 180000\\r\\n\", \"output\": [\"376155\"]}, {\"input\": \"400000 200000\\r\\n\", \"output\": [\"388234\"]}, {\"input\": \"450000 140000\\r\\n\", \"output\": [\"175993\"]}, {\"input\": \"450000 160000\\r\\n\", \"output\": [\"926957\"]}, {\"input\": \"450000 180000\\r\\n\", \"output\": [\"135727\"]}, {\"input\": \"450000 200000\\r\\n\", \"output\": [\"997315\"]}, {\"input\": \"500000 140000\\r\\n\", \"output\": [\"775486\"]}, {\"input\": \"500000 160000\\r\\n\", \"output\": [\"298591\"]}, {\"input\": \"500000 180000\\r\\n\", \"output\": [\"901135\"]}, {\"input\": \"500000 200000\\r\\n\", \"output\": [\"781209\"]}]","length":16,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4\", \"6\"]","prob_desc_input_spec":"The first line of the input contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091000).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"62db589bad3b7023418107de05b7a8ee","prob_desc_created_at":"1284130800","source_code":"P = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\ndef power(a, b):\n\tres = 1\n\twhile (b):\n\t\tif (b & 1): res *= a\n\t\ta *= a\n\t\tb >>= 1\n\treturn res\nans = []\nans.append(1e30)\ndef solve(pos, n, res):\n\tif (n == 1):\n\t\tans[0] = min(ans[0], res)\n\tfor i in range(2, 62):\n\t\tif (n % i == 0):\n\t\t\tsolve(pos + 1, n \/ i, res * power(P[pos], i - 1))\nn = int(input())\nsolve(0, n, 1)\nprint(ans[0])","prob_desc_sample_outputs":"[\"6\", \"12\"]","lang_cluster":"Python","code_uid":"1cea85e2f66b233a93c24d60fe669bbc","prob_desc_notes":null,"prob_desc_output_spec":"Output the smallest positive integer with exactly n divisors.","prob_desc_output_to":"standard output","prob_desc_description":"Given the number n, find the smallest positive integer which has exactly n divisors. It is guaranteed that for the given n the answer will not exceed 1018.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"144\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"240\"]}, {\"input\": \"47\\r\\n\", \"output\": [\"70368744177664\"]}, {\"input\": \"59\\r\\n\", \"output\": [\"288230376151711744\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"45360\"]}, {\"input\": \"159\\r\\n\", \"output\": [\"40532396646334464\"]}, {\"input\": \"265\\r\\n\", \"output\": [\"364791569817010176\"]}, {\"input\": \"312\\r\\n\", \"output\": [\"14192640\"]}, {\"input\": \"473\\r\\n\", \"output\": [\"259700248434180096\"]}, {\"input\": \"637\\r\\n\", \"output\": [\"46656000000\"]}, {\"input\": \"500\\r\\n\", \"output\": [\"62370000\"]}, {\"input\": \"720\\r\\n\", \"output\": [\"61261200\"]}, {\"input\": \"902\\r\\n\", \"output\": [\"324625310542725120\"]}, {\"input\": \"940\\r\\n\", \"output\": [\"199495389743677440\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"810810000\"]}, {\"input\": \"999\\r\\n\", \"output\": [\"757632231014400\"]}, {\"input\": \"118\\r\\n\", \"output\": [\"864691128455135232\"]}]","length":19,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"10\", \"21\"]","prob_desc_input_spec":"Input contains one integer number n (1\u2009\u2264\u2009n\u2009\u2264\u20093000).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"356666366625bc5358bc8b97c8d67bd5","prob_desc_created_at":"1281970800","source_code":"import math\nn = int(input().strip())\n\nis_prime = [False, False] + [True] * (n - 1)\nprime_list = list()\nalmost_prime = list()\n\nfor i in range(n + 1):\n    if is_prime[i]:\n        prime_list.append(i)\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n\ndef find_factors(n):\n    if n < 2:\n        return set()\n    elif n == 2:\n        return set([2]) \n    else:\n        for item in prime_list:\n            if n % item == 0:\n                return set([item]).union(find_factors(n\/item))\n    return set() \n\ncount = 0\nfor i in range(n + 1):\n    if not is_prime[i]:\n        num_factors = len(find_factors(i))\n        if num_factors == 2:\n            count += 1\n\nprint(count)\n\n\n","prob_desc_sample_outputs":"[\"2\", \"8\"]","lang_cluster":"Python","code_uid":"a69909dc18e9b2282781e1fc76efacef","prob_desc_notes":null,"prob_desc_output_spec":"Output the amount of almost prime numbers between 1 and n, inclusive.","prob_desc_output_to":"standard output","prob_desc_description":"A number is called almost prime if it has exactly two distinct prime divisors. For example, numbers 6, 18, 24 are almost prime, while 4, 8, 9, 42 are not. Find the amount of almost prime numbers which are between 1 and n, inclusive.","hidden_unit_tests":"[{\"input\": \"10\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"21\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"40\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"77\\r\\n\", \"output\": [\"41\"]}, {\"input\": \"222\\r\\n\", \"output\": [\"125\"]}, {\"input\": \"987\\r\\n\", \"output\": [\"501\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"508\"]}, {\"input\": \"2000\\r\\n\", \"output\": [\"958\"]}, {\"input\": \"3000\\r\\n\", \"output\": [\"1375\"]}, {\"input\": \"2999\\r\\n\", \"output\": [\"1375\"]}, {\"input\": \"2998\\r\\n\", \"output\": [\"1375\"]}, {\"input\": \"2997\\r\\n\", \"output\": [\"1374\"]}, {\"input\": \"1429\\r\\n\", \"output\": [\"706\"]}, {\"input\": \"1673\\r\\n\", \"output\": [\"808\"]}, {\"input\": \"1500\\r\\n\", \"output\": [\"732\"]}, {\"input\": \"500\\r\\n\", \"output\": [\"266\"]}, {\"input\": \"856\\r\\n\", \"output\": [\"439\"]}]","length":34,"num_hidden_unit_tests":23}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 2\", \"3 1\"]","prob_desc_input_spec":"The only line contains two integers $$$n$$$ and $$$m~(1 \\le n \\le 10^5, 0 \\le m \\le \\frac{n (n - 1)}{2})$$$. It is guaranteed that there exists a graph without any self-loops or multiple edges with such number of vertices and edges.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"daf0dd781bf403f7c1bb668925caa64d","prob_desc_created_at":"1539269400","source_code":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Oct 28 09:27:31 2018\n\n@author: czx\n\"\"\"\n\ndef main():\n    n,m = str.split(input())\n    n = int(n)\n    m = int(m)\n    if (2*m >= n):\n        Min = 0\n    else:\n        Min = n-2*m\n    \n    cnt = 0\n    if (m == 0):\n        Max = n\n    else:\n        for i in range(1,n):\n            cnt += i\n            if (cnt >= m):\n                Max = n-i-1\n                break\n    \n    print(Min,Max)\n\nif __name__ == \"__main__\":\n    main()","prob_desc_sample_outputs":"[\"0 1\", \"1 1\"]","lang_cluster":"Python","code_uid":"af0f2ffbe4d24ef70bec64880e1322c3","prob_desc_notes":"NoteIn the first example it is possible to construct a graph with $$$0$$$ isolated vertices: for example, it should contain edges $$$(1, 2)$$$ and $$$(3, 4)$$$. To get one isolated vertex, we may construct a graph with edges $$$(1, 2)$$$ and $$$(1, 3)$$$. In the second example the graph will always contain exactly one isolated vertex.","prob_desc_output_spec":"In the only line print two numbers $$$min$$$ and $$$max$$$ \u2014 the minimum and maximum number of isolated vertices, respectively.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya has got an undirected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. This graph doesn't contain any self-loops or multiple edges. Self-loop is an edge connecting a vertex to itself. Multiple edges are a pair of edges such that they connect the same pair of vertices. Since the graph is undirected, the pair of edges $$$(1, 2)$$$ and $$$(2, 1)$$$ is considered to be multiple edges. Isolated vertex of the graph is a vertex such that there is no edge connecting this vertex to any other vertex.Vasya wants to know the minimum and maximum possible number of isolated vertices in an undirected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. ","hidden_unit_tests":"[{\"input\": \"4 2\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"20 55\\r\\n\", \"output\": [\"0 9\"]}, {\"input\": \"20 54\\r\\n\", \"output\": [\"0 9\"]}, {\"input\": \"20 56\\r\\n\", \"output\": [\"0 8\"]}, {\"input\": \"100000 3950493829\\r\\n\", \"output\": [\"0 11111\"]}, {\"input\": \"100000 49997\\r\\n\", \"output\": [\"6 99683\"]}, {\"input\": \"100 0\\r\\n\", \"output\": [\"100 100\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"15 4\\r\\n\", \"output\": [\"7 11\"]}, {\"input\": \"100000 4999950000\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"18889 138011083\\r\\n\", \"output\": [\"0 2274\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"0 85\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"4 6\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"5 10\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"10 2\\r\\n\", \"output\": [\"6 7\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"6 15\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"2 0\\r\\n\", \"output\": [\"2 2\"]}, {\"input\": \"6740 22710430\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"10 45\\r\\n\", \"output\": [\"0 0\"]}]","length":30,"num_hidden_unit_tests":23}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 5\", \"3 6\"]","prob_desc_input_spec":"The first line contains two integers a and m (1\u2009\u2264\u2009a,\u2009m\u2009\u2264\u2009105).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"f726133018e2149ec57e113860ec498a","prob_desc_created_at":"1415205000","source_code":"\na,m=map(int,input().split())\n\nfor i in range(21):\n    a+=a%m\nif a%m:\n    print('No') \nelse:\n    print('Yes')","prob_desc_sample_outputs":"[\"No\", \"Yes\"]","lang_cluster":"Python","code_uid":"a948819cf4ebc977abc818089ca82865","prob_desc_notes":null,"prob_desc_output_spec":"Print \"Yes\" (without quotes) if the production will eventually stop, otherwise print \"No\".","prob_desc_output_to":"standard output","prob_desc_description":"One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce  (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. The board of directors are worried that the production by the given plan may eventually stop (that means that there will be \u0430 moment when the current number of details on the factory is divisible by m). Given the number of details a on the first day and number m check if the production stops at some moment.","hidden_unit_tests":"[{\"input\": \"1 5\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"3 6\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 8\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"3 24\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"100000 100000\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 99989\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"512 2\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"100 24\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"1 100000\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"100000 1\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"3 99929\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"99961 99971\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"1 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"4 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"3 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"32768 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"65535 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 65535\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"98812 100000\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"10 5\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"6 8\\r\\n\", \"output\": [\"Yes\"]}]","length":9,"num_hidden_unit_tests":23}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"e4\"]","prob_desc_input_spec":"The only line contains the king's position in the format \"cd\", where 'c' is the column from 'a' to 'h' and 'd' is the row from '1' to '8'.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"6994331ca6282669cbb7138eb7e55e01","prob_desc_created_at":"1471875000","source_code":"ch=input()\nl=list(ch)\nc,d=l[0],int(l[1])\nif c=='a' or c=='h' or d==1 or d==8:\n    if (c=='a' and d==8) or (c=='h' and d==1) or (d==1 and c=='a') or (d==8 and c=='h'):\n        print(3)\n    else:\n        print(5)\nelse:\n    print(8)\n    \n        \n","prob_desc_sample_outputs":"[\"8\"]","lang_cluster":"Python","code_uid":"38ba903f5b4749223cbfd8864ebfee70","prob_desc_notes":null,"prob_desc_output_spec":"Print the only integer x \u2014 the number of moves permitted for the king.","prob_desc_output_to":"standard output","prob_desc_description":"The only king stands on the standard chess board. You are given his position in format \"cd\", where c is the column from 'a' to 'h' and d is the row from '1' to '8'. Find the number of moves permitted for the king.Check the king's moves here https:\/\/en.wikipedia.org\/wiki\/King_(chess).  King moves from the position e4 ","hidden_unit_tests":"[{\"input\": \"e4\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"a1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"h8\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"a4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"g7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"e1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"b2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"c7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"h6\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"c8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"a8\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"f8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"f2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"e8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"b8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"g8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"d8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"b1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"a2\\r\\n\", \"output\": [\"5\"]}]","length":12,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6 2\\n2 1 2 2 2 1\", \"8 4\\n1 1 2 1 1 1 2 1\", \"9 3\\n2 1 1 1 2 1 1 1 2\"]","prob_desc_input_spec":"The first line of the input contains a pair of integers n, k (1\u2009\u2264\u2009k\u2009\u2264\u2009n\u2009\u2264\u2009100), where n is the length of the array and the value n is divisible by k. The second line contains the sequence of elements of the given array a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u20092), ai is the i-th element of the array.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"5f94c2ecf1cf8fdbb6117cab801ed281","prob_desc_created_at":"1386493200","source_code":"a=int(input().split()[1])\n*b,=map(int,input().split())\nc=0\nfor i in range(a):\n    d=b[i::a]\n    c+=min(d.count(1),d.count(2))\nprint(c)\n","prob_desc_sample_outputs":"[\"1\", \"0\", \"3\"]","lang_cluster":"Python","code_uid":"79f48e5b25e6338aeea56182a2dbaebc","prob_desc_notes":"NoteIn the first sample it is enough to change the fourth element from 2 to 1, then the array changes to [2,\u20091,\u20092,\u20091,\u20092,\u20091].In the second sample, the given array already is 4-periodic.In the third sample it is enough to replace each occurrence of number two by number one. In this case the array will look as [1,\u20091,\u20091,\u20091,\u20091,\u20091,\u20091,\u20091,\u20091] \u2014 this array is simultaneously 1-, 3- and 9-periodic.","prob_desc_output_spec":"Print the minimum number of array elements we need to change to make the array k-periodic. If the array already is k-periodic, then print 0.","prob_desc_output_to":"standard output","prob_desc_description":"This task will exclusively concentrate only on the arrays where all elements equal 1 and\/or 2.Array a is k-period if its length is divisible by k and there is such array b of length k, that a is represented by array b written exactly  times consecutively. In other words, array a is k-periodic, if it has period of length k.For example, any array is n-periodic, where n is the array length. Array [2,\u20091,\u20092,\u20091,\u20092,\u20091] is at the same time 2-periodic and 6-periodic and array [1,\u20092,\u20091,\u20091,\u20092,\u20091,\u20091,\u20092,\u20091] is at the same time 3-periodic and 9-periodic.For the given array a, consisting only of numbers one and two, find the minimum number of elements to change to make the array k-periodic. If the array already is k-periodic, then the required value equals 0.","hidden_unit_tests":"[{\"input\": \"6 2\\r\\n2 1 2 2 2 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8 4\\r\\n1 1 2 1 1 1 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"9 3\\r\\n2 1 1 1 2 1 1 1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 1\\r\\n2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1\\r\\n1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 2\\r\\n2 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 1\\r\\n1 2 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"2 1\\r\\n1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 1\\r\\n2 1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 3\\r\\n1 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 2\\r\\n2 1 2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 2\\r\\n2 2 2 1 1 2 2 2 2 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10 5\\r\\n2 2 1 2 1 1 2 1 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"20 4\\r\\n2 2 1 2 2 2 1 2 2 2 1 2 2 2 1 2 2 2 1 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 5\\r\\n2 2 1 1 1 2 1 1 1 1 2 2 1 1 2 2 2 1 1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"20 10\\r\\n1 2 2 2 2 1 1 1 2 1 1 2 2 2 2 1 2 2 2 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100 2\\r\\n2 2 1 2 1 2 1 2 1 2 1 2 1 2 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100 4\\r\\n1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 2 2 1 2 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 2 1 1 2 1 1 1 2 1 2 1 2 1 1 1 2 1 1 1 2 1 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"100 5\\r\\n2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 1 2 2 2 2 2 1 2 1 2 2 2 2 1 2 2 2 1 1 2 1 2 2 2 2 2 2 2 1 2 2 2\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"100 10\\r\\n2 1 1 1 1 2 2 2 1 1 2 1 1 2 1 2 1 2 1 1 2 1 1 1 1 2 1 2 1 1 2 1 1 1 1 2 2 2 1 1 2 1 1 1 1 2 1 2 1 1 2 1 1 1 1 2 1 2 2 1 2 1 1 1 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 1 2 1 1 1 1 2 1 2 1 1 2 1 1 1 2 2 1 2 1 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100 20\\r\\n2 2 2 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 2 2 2 1 2 1 2 1 1 1 1 2 2 2 2 1 2 1 1 2 2 2 2 1 2 1 2 1 2 1 1 2 1 2 2 2 1 2 2 2 2 2 2 2 2 1 2 1 1 1 1 2 2 2 2 2 1 1 2 2 1 2 2 1 2 1 2 1 2 1 1 2 2 1 2 2 1 1 1\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"100 25\\r\\n2 2 1 2 2 2 2 2 1 2 2 1 2 1 1 2 1 2 1 2 2 2 1 2 2 2 1 1 2 1 2 1 2 1 2 2 1 2 1 1 2 2 2 1 2 2 1 2 2 2 2 1 1 2 1 2 2 1 1 2 2 2 2 2 1 2 1 2 2 2 2 2 2 2 1 2 1 1 2 2 2 2 2 1 2 2 1 1 2 1 2 2 2 1 2 2 2 2 2 2\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"100 10\\r\\n2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1\\r\\n\", \"output\": [\"0\"]}]","length":7,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"6 3\\n1 1 1 0 1 0\", \"5 2\\n0 0 0 1 0\"]","prob_desc_input_spec":"The first line of the input contains two integers n and a (1\u2009\u2264\u2009a\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of cities and the index of city where Limak lives. The second line contains n integers t1,\u2009t2,\u2009...,\u2009tn (0\u2009\u2264\u2009ti\u2009\u2264\u20091). There are ti criminals in the i-th city.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"4840d571d4ce6e1096bb678b6c100ae5","prob_desc_created_at":"1465403700","source_code":"L = int(input().split()[1])-1\nc = [int(i) for i in input().split()]\nresult=0\n\nif c[L]==1:\n    result=1\nfor i in range(0,len(c)):\n    d = abs(L-i)\n    if c[i]==1:\n        if L<i:\n            if L-d<0 and d != 0:\n                result+=1\n            elif L-d >= 0:\n                if c[L-d]==1 and d != 0:\n                    result+=1\n        elif L>i:\n            if L+d>=len(c) and d != 0:\n                result+=1\n            elif L+d < len(c):\n                if c[L+d]==1 and d != 0:\n                    result+=1\nprint(result)","prob_desc_sample_outputs":"[\"3\", \"1\"]","lang_cluster":"Python","code_uid":"5d247d425ce64a9acd8c60dbde08ffb4","prob_desc_notes":"NoteIn the first sample, there are six cities and Limak lives in the third one (blue arrow below). Criminals are in cities marked red.  Using the BCD gives Limak the following information:  There is one criminal at distance 0 from the third city\u00a0\u2014 Limak is sure that this criminal is exactly in the third city.  There is one criminal at distance 1 from the third city\u00a0\u2014 Limak doesn't know if a criminal is in the second or fourth city.  There are two criminals at distance 2 from the third city\u00a0\u2014 Limak is sure that there is one criminal in the first city and one in the fifth city.  There are zero criminals for every greater distance. So, Limak will catch criminals in cities 1, 3 and 5, that is 3 criminals in total.In the second sample (drawing below), the BCD gives Limak the information that there is one criminal at distance 2 from Limak's city. There is only one city at distance 2 so Limak is sure where a criminal is.  ","prob_desc_output_spec":"Print the number of criminals Limak will catch.","prob_desc_output_to":"standard output","prob_desc_description":"There are n cities in Bearland, numbered 1 through n. Cities are arranged in one long row. The distance between cities i and j is equal to |i\u2009-\u2009j|.Limak is a police officer. He lives in a city a. His job is to catch criminals. It's hard because he doesn't know in which cities criminals are. Though, he knows that there is at most one criminal in each city.Limak is going to use a BCD (Bear Criminal Detector). The BCD will tell Limak how many criminals there are for every distance from a city a. After that, Limak can catch a criminal in each city for which he is sure that there must be a criminal.You know in which cities criminals are. Count the number of criminals Limak will catch, after he uses the BCD.","hidden_unit_tests":"[{\"input\": \"6 3\\r\\n1 1 1 0 1 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5 2\\r\\n0 0 0 1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"9 3\\r\\n1 1 1 1 1 1 1 1 0\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"9 5\\r\\n1 0 1 0 1 0 1 0 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"20 17\\r\\n1 1 0 1 1 1 1 0 1 0 1 1 1 0 1 1 0 0 0 0\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"100 60\\r\\n1 1 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 0 0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 1 0 1 0 1 1 0 0 0 0 0 1 1 1 0 1 1 0 0 0 1 0 0 0 1 1 1 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 1 0 0\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"8 1\\r\\n1 0 1 1 0 0 1 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"11 11\\r\\n0 1 0 0 1 1 1 0 0 0 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"19 10\\r\\n0 1 1 0 1 0 0 1 1 0 0 1 0 1 0 0 1 0 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100 38\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 38\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 38\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"99 38\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"99 38\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"99 38\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"98 70\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"41\"]}, {\"input\": \"99 70\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"99 60\\r\\n0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 0 1 1 0 0 0 0 0 1 0 0 1 0 1 1 1 1 1 0 1 0 1 1 0 0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"98 24\\r\\n0 0 0 1 1 0 1 1 0 0 0 0 1 0 0 1 0 0 1 1 1 0 0 1 0 0 1 0 1 0 0 1 1 0 1 1 1 0 1 0 0 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 0 1 0 0 0 1 1 0 0 1 1 1 1 1 1 0 1 0 1 0 0 1 1\\r\\n\", \"output\": [\"39\"]}, {\"input\": \"100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 1\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1\\r\\n0 1\\r\\n\", \"output\": [\"1\"]}]","length":22,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\", \"3\"]","prob_desc_input_spec":"The first and only line of the input contains a single integer n (3\u2009\u2264\u2009n\u2009\u2264\u200954321) - the number of vertices of the regular polygon drawn by Ari.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"efa8e7901a3084d34cfb1a6b18067f2b","prob_desc_created_at":"1446309000","source_code":"from sys import stdin\nn=int(stdin.readline().strip())\nx=n-2+n-3+n-3+(n-4)*(n-3)\nprint(x)\n","prob_desc_sample_outputs":"[\"9\", \"1\"]","lang_cluster":"Python","code_uid":"ae080d05dd0b569302560ad482e44c4e","prob_desc_notes":"NoteOne of the possible solutions for the first sample is shown on the picture above.","prob_desc_output_spec":"Print the minimum number of jumps Ada should make to collect all the walnuts. Note, that she doesn't need to leave the polygon after.","prob_desc_output_to":"standard output","prob_desc_description":"Ari the monster always wakes up very early with the first ray of the sun and the first thing she does is feeding her squirrel.Ari draws a regular convex polygon on the floor and numbers it's vertices 1,\u20092,\u2009...,\u2009n in clockwise order. Then starting from the vertex 1 she draws a ray in the direction of each other vertex. The ray stops when it reaches a vertex or intersects with another ray drawn before. Ari repeats this process for vertex 2,\u20093,\u2009...,\u2009n (in this particular order). And then she puts a walnut in each region inside the polygon.  Ada the squirrel wants to collect all the walnuts, but she is not allowed to step on the lines drawn by Ari. That means Ada have to perform a small jump if she wants to go from one region to another. Ada can jump from one region P to another region Q if and only if P and Q share a side or a corner.Assuming that Ada starts from outside of the picture, what is the minimum number of jumps she has to perform in order to collect all the walnuts?","hidden_unit_tests":"[{\"input\": \"5\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"54321\\r\\n\", \"output\": [\"2950553761\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"54320\\r\\n\", \"output\": [\"2950445124\"]}, {\"input\": \"54319\\r\\n\", \"output\": [\"2950336489\"]}, {\"input\": \"54318\\r\\n\", \"output\": [\"2950227856\"]}, {\"input\": \"54317\\r\\n\", \"output\": [\"2950119225\"]}, {\"input\": \"54316\\r\\n\", \"output\": [\"2950010596\"]}, {\"input\": \"54315\\r\\n\", \"output\": [\"2949901969\"]}, {\"input\": \"54314\\r\\n\", \"output\": [\"2949793344\"]}, {\"input\": \"8153\\r\\n\", \"output\": [\"66438801\"]}, {\"input\": \"51689\\r\\n\", \"output\": [\"2671545969\"]}, {\"input\": \"16659\\r\\n\", \"output\": [\"277455649\"]}, {\"input\": \"47389\\r\\n\", \"output\": [\"2245527769\"]}, {\"input\": \"314\\r\\n\", \"output\": [\"97344\"]}, {\"input\": \"23481\\r\\n\", \"output\": [\"551263441\"]}, {\"input\": \"20380\\r\\n\", \"output\": [\"415262884\"]}, {\"input\": \"1994\\r\\n\", \"output\": [\"3968064\"]}]","length":4,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 1\\n1 1 1\\n4\", \"1 1 3\\n2 3 4\\n2\", \"1 0 0\\n1 0 0\\n1\"]","prob_desc_input_spec":"The first line contains integers a1, a2 and a3 (0\u2009\u2264\u2009a1,\u2009a2,\u2009a3\u2009\u2264\u2009100). The second line contains integers b1, b2 and b3 (0\u2009\u2264\u2009b1,\u2009b2,\u2009b3\u2009\u2264\u2009100). The third line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100). The numbers in the lines are separated by single spaces.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"fe6301816dea7d9cea1c3a06a7d1ea7e","prob_desc_created_at":"1405605600","source_code":"a1,a2,a3=map(int,input().split())\nb1,b2,b3=map(int,input().split())\nn=int(input())\ntotal_medals=b1+b2+b3\ntotal_cups=a1+a2+a3\nif(total_medals%10==0):\n    x=total_medals\/10\n    n=n-x\nelse:\n    n-=(total_medals\/\/10+1)\nif(total_cups%5==0):\n    x=total_cups\/5\n    n=n-x\nelse:\n    n-=(total_cups\/\/5+1)\nif(n>=0):\n    print('YES')\nelse:\n    print('NO')\n\n    \n","prob_desc_sample_outputs":"[\"YES\", \"YES\", \"NO\"]","lang_cluster":"Python","code_uid":"ae2c9bddd99bade8b23c9b0d5b3d000b","prob_desc_notes":null,"prob_desc_output_spec":"Print \"YES\" (without the quotes) if all the rewards can be put on the shelves in the described manner. Otherwise, print \"NO\" (without the quotes).","prob_desc_output_to":"standard output","prob_desc_description":"Bizon the Champion is called the Champion for a reason. Bizon the Champion has recently got a present \u2014 a new glass cupboard with n shelves and he decided to put all his presents there. All the presents can be divided into two types: medals and cups. Bizon the Champion has a1 first prize cups, a2 second prize cups and a3 third prize cups. Besides, he has b1 first prize medals, b2 second prize medals and b3 third prize medals. Naturally, the rewards in the cupboard must look good, that's why Bizon the Champion decided to follow the rules:  any shelf cannot contain both cups and medals at the same time;  no shelf can contain more than five cups;  no shelf can have more than ten medals. Help Bizon the Champion find out if we can put all the rewards so that all the conditions are fulfilled.","hidden_unit_tests":"[{\"input\": \"1 1 1\\r\\n1 1 1\\r\\n4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1 1 3\\r\\n2 3 4\\r\\n2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1 0 0\\r\\n1 0 0\\r\\n1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 0 0\\r\\n0 0 0\\r\\n1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 100 100\\r\\n100 100 100\\r\\n100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 100 100\\r\\n100 100 100\\r\\n1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 10 100\\r\\n100 10 1\\r\\n20\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 1 1\\r\\n0 0 0\\r\\n1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 0 0\\r\\n1 1 1\\r\\n1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"5 5 5\\r\\n0 0 0\\r\\n2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 0 0\\r\\n10 10 10\\r\\n2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"21 61 39\\r\\n63 58 69\\r\\n44\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"18 95 4\\r\\n7 1 75\\r\\n46\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"64 27 81\\r\\n72 35 23\\r\\n48\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"6 6 6\\r\\n11 11 11\\r\\n7\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 2 3\\r\\n2 4 6\\r\\n3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 2 3\\r\\n2 4 6\\r\\n4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"99 99 99\\r\\n99 99 99\\r\\n89\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"5 0 0\\r\\n15 0 0\\r\\n2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"10 10 10\\r\\n0 0 0\\r\\n1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 1 1\\r\\n1 1 1\\r\\n15\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"2 3 5\\r\\n2 3 5\\r\\n2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2 2 2\\r\\n3 3 5\\r\\n3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 2 2\\r\\n2 4 4\\r\\n1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 2 3\\r\\n1 5 5\\r\\n2\\r\\n\", \"output\": [\"NO\"]}]","length":21,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"November\\n3\", \"May\\n24\"]","prob_desc_input_spec":"The first input line contains the name of the current month. It is guaranteed that it is a proper English name of one of twelve months. The first letter is uppercase, the rest are lowercase. The second line contains integer k (0\u2009\u2264\u2009k\u2009\u2264\u2009100) \u2014 the number of months left till the appearance of Codecraft III.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"a307b402b20554ce177a73db07170691","prob_desc_created_at":"1289646000","source_code":"ar=[\"December\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\ns=input()\nn=int(input())\nprint(ar[((ar.index(s)+n)%12)])\n\n","prob_desc_sample_outputs":"[\"February\", \"May\"]","lang_cluster":"Python","code_uid":"8bafcba65f02139277ebcb8d1957cbc0","prob_desc_notes":null,"prob_desc_output_spec":"Print starting from an uppercase letter the name of the month in which the continuation of Codeforces II will appear. The printed name must be contained in the list January, February, March, April, May, June, July, August, September, October, November, December.","prob_desc_output_to":"standard output","prob_desc_description":"Today Vasya visited a widely known site and learned that the continuation of his favourite game Codecraft II will appear after exactly k months. He looked at the calendar and learned that at the moment is the month number s. Vasya immediately got interested in what month Codecraft III will appear. Help him understand that.All the twelve months in Vasya's calendar are named using their usual English names: January, February, March, April, May, June, July, August, September, October, November, December.","hidden_unit_tests":"[{\"input\": \"November\\r\\n3\\r\\n\", \"output\": [\"February\"]}, {\"input\": \"May\\r\\n24\\r\\n\", \"output\": [\"May\"]}, {\"input\": \"April\\r\\n0\\r\\n\", \"output\": [\"April\"]}, {\"input\": \"September\\r\\n0\\r\\n\", \"output\": [\"September\"]}, {\"input\": \"August\\r\\n0\\r\\n\", \"output\": [\"August\"]}, {\"input\": \"June\\r\\n1\\r\\n\", \"output\": [\"July\"]}, {\"input\": \"July\\r\\n2\\r\\n\", \"output\": [\"September\"]}, {\"input\": \"September\\r\\n3\\r\\n\", \"output\": [\"December\"]}, {\"input\": \"July\\r\\n4\\r\\n\", \"output\": [\"November\"]}, {\"input\": \"August\\r\\n24\\r\\n\", \"output\": [\"August\"]}, {\"input\": \"May\\r\\n48\\r\\n\", \"output\": [\"May\"]}, {\"input\": \"November\\r\\n47\\r\\n\", \"output\": [\"October\"]}, {\"input\": \"December\\r\\n49\\r\\n\", \"output\": [\"January\"]}, {\"input\": \"June\\r\\n99\\r\\n\", \"output\": [\"September\"]}, {\"input\": \"March\\r\\n100\\r\\n\", \"output\": [\"July\"]}, {\"input\": \"December\\r\\n1\\r\\n\", \"output\": [\"January\"]}, {\"input\": \"January\\r\\n11\\r\\n\", \"output\": [\"December\"]}, {\"input\": \"December\\r\\n0\\r\\n\", \"output\": [\"December\"]}, {\"input\": \"January\\r\\n0\\r\\n\", \"output\": [\"January\"]}, {\"input\": \"July\\r\\n77\\r\\n\", \"output\": [\"December\"]}, {\"input\": \"February\\r\\n11\\r\\n\", \"output\": [\"January\"]}, {\"input\": \"February\\r\\n22\\r\\n\", \"output\": [\"December\"]}, {\"input\": \"July\\r\\n33\\r\\n\", \"output\": [\"April\"]}, {\"input\": \"May\\r\\n44\\r\\n\", \"output\": [\"January\"]}, {\"input\": \"June\\r\\n97\\r\\n\", \"output\": [\"July\"]}]","length":5,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"10 3\", \"7 7\"]","prob_desc_input_spec":"The only line of input contains integers n and k (1\u2009\u2264\u2009k\u2009\u2264\u2009n\u2009\u2264\u20091012). Please, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"1f8056884db00ad8294a7cc0be75fe97","prob_desc_created_at":"1371223800","source_code":"n,k=map(int,input().split())\nif n%2==0 :\n    if (k > n\/\/2) :\n        print((k-n\/\/2)*2)\n    else :\n        print(2*k - 1)\nelse :\n    if (k > ((n-1)\/\/2)+ 1) :\n        print((k-1-((n-1)\/\/2))*2)\n    else :\n        print(2*k - 1)","prob_desc_sample_outputs":"[\"5\", \"6\"]","lang_cluster":"Python","code_uid":"e30a8a57dd6baed05c58727c914bbf11","prob_desc_notes":"NoteIn the first sample Volodya's sequence will look like this: {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}. The third place in the sequence is therefore occupied by the number 5.","prob_desc_output_spec":"Print the number that will stand at the position number k after Volodya's manipulations.","prob_desc_output_to":"standard output","prob_desc_description":"Being a nonconformist, Volodya is displeased with the current state of things, particularly with the order of natural numbers (natural number is positive integer number). He is determined to rearrange them. But there are too many natural numbers, so Volodya decided to start with the first n. He writes down the following sequence of numbers: firstly all odd integers from 1 to n (in ascending order), then all even integers from 1 to n (also in ascending order). Help our hero to find out which number will stand at the position number k.","hidden_unit_tests":"[{\"input\": \"10 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"7 7\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"7 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"8 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"8 4\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1000000000000 500000000001\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"999999999997 499999999999\\r\\n\", \"output\": [\"999999999997\"]}, {\"input\": \"999999999999 999999999999\\r\\n\", \"output\": [\"999999999998\"]}, {\"input\": \"1000000000000 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"999999999999 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000 1000000000000\\r\\n\", \"output\": [\"1000000000000\"]}, {\"input\": \"1000000000000 500000000000\\r\\n\", \"output\": [\"999999999999\"]}, {\"input\": \"1000000000000 499999999999\\r\\n\", \"output\": [\"999999999997\"]}, {\"input\": \"999999999997 499999999998\\r\\n\", \"output\": [\"999999999995\"]}, {\"input\": \"619234238 556154835\\r\\n\", \"output\": [\"493075432\"]}, {\"input\": \"38151981 36650624\\r\\n\", \"output\": [\"35149266\"]}, {\"input\": \"680402465 442571217\\r\\n\", \"output\": [\"204739968\"]}, {\"input\": \"109135284 9408714\\r\\n\", \"output\": [\"18817427\"]}, {\"input\": \"603701841 56038951\\r\\n\", \"output\": [\"112077901\"]}, {\"input\": \"356764822 321510177\\r\\n\", \"output\": [\"286255532\"]}, {\"input\": \"284911189 142190783\\r\\n\", \"output\": [\"284381565\"]}, {\"input\": \"91028405 61435545\\r\\n\", \"output\": [\"31842684\"]}]","length":11,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 2\", \"9 3\"]","prob_desc_input_spec":"The single line contains two integers n and m (1\u2009\u2264\u2009n\u2009\u2264\u2009100;\u00a02\u2009\u2264\u2009m\u2009\u2264\u2009100), separated by a space.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"42b25b7335ec01794fbb1d4086aa9dd0","prob_desc_created_at":"1408548600","source_code":"def gogo(n, m): \n    return n + ((n-1)\/\/(m-1))\n\n\ndef main():\n    pairs, bought = map(int, input().split())\n    print(gogo(pairs, bought))\n\n\nmain()\n\n","prob_desc_sample_outputs":"[\"3\", \"13\"]","lang_cluster":"Python","code_uid":"bfa17fde86ca6c500cecdd3dab5415f2","prob_desc_notes":"NoteIn the first sample Vasya spends the first two days wearing the socks that he had initially. Then on day three he puts on the socks that were bought on day two.In the second sample Vasya spends the first nine days wearing the socks that he had initially. Then he spends three days wearing the socks that were bought on the third, sixth and ninth days. Than he spends another day wearing the socks that were bought on the twelfth day.","prob_desc_output_spec":"Print a single integer \u2014 the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya has n pairs of socks. In the morning of each day Vasya has to put on a pair of socks before he goes to school. When he comes home in the evening, Vasya takes off the used socks and throws them away. Every m-th day (at days with numbers m,\u20092m,\u20093m,\u2009...) mom buys a pair of socks to Vasya. She does it late in the evening, so that Vasya cannot put on a new pair of socks before the next day. How many consecutive days pass until Vasya runs out of socks?","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"9 3\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 99\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"10 2\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"10 9\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"101\"]}, {\"input\": \"2 27\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"99 100\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"99 2\\r\\n\", \"output\": [\"197\"]}, {\"input\": \"100 3\\r\\n\", \"output\": [\"149\"]}, {\"input\": \"98 3\\r\\n\", \"output\": [\"146\"]}, {\"input\": \"100 2\\r\\n\", \"output\": [\"199\"]}, {\"input\": \"62 4\\r\\n\", \"output\": [\"82\"]}, {\"input\": \"99 10\\r\\n\", \"output\": [\"109\"]}, {\"input\": \"100 5\\r\\n\", \"output\": [\"124\"]}, {\"input\": \"80 80\\r\\n\", \"output\": [\"81\"]}, {\"input\": \"95 16\\r\\n\", \"output\": [\"101\"]}, {\"input\": \"75 16\\r\\n\", \"output\": [\"79\"]}, {\"input\": \"99 74\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"20 21\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"52 96\\r\\n\", \"output\": [\"52\"]}, {\"input\": \"24 5\\r\\n\", \"output\": [\"29\"]}]","length":11,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4\\nLDUR\", \"5\\nRRRUU\", \"6\\nLLRRRR\"]","prob_desc_input_spec":"The first line contains one number n \u2014 the length of sequence of commands entered by Ivan (1\u2009\u2264\u2009n\u2009\u2264\u2009100). The second line contains the sequence itself \u2014 a string consisting of n characters. Each character can be U, D, L or R.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"b9fa2bb8001bd064ede531a5281cfd8a","prob_desc_created_at":"1510239900","source_code":"input()\na = [0]*4\ns = input()\n\nfor i in s:\n    if i == \"U\":\n        a[0] += 1\n    elif i == \"D\":\n        a[1] += 1\n    elif i == \"L\":\n        a[2] += 1\n    elif i == \"R\":\n        a[3] += 1\n\nprint (min(a[0], a[1])*2+min(a[2], a[3])*2)","prob_desc_sample_outputs":"[\"4\", \"0\", \"4\"]","lang_cluster":"Python","code_uid":"1954759869a4aa8c943b6fd08a60457a","prob_desc_notes":null,"prob_desc_output_spec":"Print the maximum possible number of commands from the sequence the robot could perform to end up in the starting cell.","prob_desc_output_to":"standard output","prob_desc_description":"Ivan has a robot which is situated on an infinite grid. Initially the robot is standing in the starting cell (0,\u20090). The robot can process commands. There are four types of commands it can perform:  U \u2014 move from the cell (x,\u2009y) to (x,\u2009y\u2009+\u20091);  D \u2014 move from (x,\u2009y) to (x,\u2009y\u2009-\u20091);  L \u2014 move from (x,\u2009y) to (x\u2009-\u20091,\u2009y);  R \u2014 move from (x,\u2009y) to (x\u2009+\u20091,\u2009y). Ivan entered a sequence of n commands, and the robot processed it. After this sequence the robot ended up in the starting cell (0,\u20090), but Ivan doubts that the sequence is such that after performing it correctly the robot ends up in the same cell. He thinks that some commands were ignored by robot. To acknowledge whether the robot is severely bugged, he needs to calculate the maximum possible number of commands that were performed correctly. Help Ivan to do the calculations!","hidden_unit_tests":"[{\"input\": \"4\\r\\nLDUR\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"5\\r\\nRRRUU\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6\\r\\nLLRRRR\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"88\\r\\nLLUUULRDRRURDDLURRLRDRLLRULRUUDDLLLLRRDDURDURRLDURRLDRRRUULDDLRRRDDRRLUULLURDURUDDDDDLDR\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"89\\r\\nLDLLLDRDUDURRRRRUDULDDDLLUDLRLRLRLDLDUULRDUDLRRDLUDLURRDDRRDLDUDUUURUUUDRLUDUDLURDLDLLDDU\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"90\\r\\nRRRDUULLLRDUUDDRLDLRLUDURDRDUUURUURDDRRRURLDDDUUDRLLLULURDRDRURLDRRRRUULDULDDLLLRRLRDLLLLR\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"91\\r\\nRLDRLRRLLDLULULLURULLRRULUDUULLUDULDUULURUDRUDUURDULDUDDUUUDRRUUDLLRULRULURLDRDLDRURLLLRDDD\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"92\\r\\nRLRDDLULRLLUURRDDDLDDDLDDUURRRULLRDULDULLLUUULDUDLRLRRDRDRDDULDRLUDRDULDRURUDUULLRDRRLLDRLRR\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"93\\r\\nRLLURLULRURDDLUURLUDDRDLUURLRDLRRRDUULLRDRRLRLDURRDLLRDDLLLDDDLDRRURLLDRUDULDDRRULRRULRLDRDLR\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"94\\r\\nRDULDDDLULRDRUDRUUDUUDRRRULDRRUDURUULRDUUDLULLLUDURRDRDLUDRULRRRULUURUDDDDDUDLLRDLDRLLRUUURLUL\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"95\\r\\nRDLUUULLUURDDRLDLLRRRULRLRDULULRULRUDURLULDDDRLURLDRULDUDUUULLRDDURUULULLDDLDRDRLLLURLRDLLDDDDU\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"96\\r\\nRDDRLRLLDDULRLRURUDLRLDUDRURLLUUDLLURDLRRUURDRRUDRURLLDLLRDURDURLRLUDURULLLRDUURULUUULRRURRDLURL\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"97\\r\\nRURDDLRLLRULUDURDLRLLUUDURRLLUDLLLDUDRUULDRUUURURULRDLDRRLLUUUDLLLDDLLLLRLLDUDRRDLLUDLRURUDULRLUR\\r\\n\", \"output\": [\"82\"]}, {\"input\": \"98\\r\\nRUDURLULLDDLLRDLLRDDLLLLRLDDDDRRRDDRRURLDRLLRUUUDLUUUDDDUDRUURLURUUDUUDRULRRULLRRLRULLULDLUURLULRD\\r\\n\", \"output\": [\"92\"]}, {\"input\": \"99\\r\\nRRULLDULRRDRULLDUDRUDDDRLLUUDRDDUDURLDDRUUDRRUUURRRURDDLDUURDLRLURRDDLUDDLUDURDRUDDURLURURLRUDRURLD\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"100\\r\\nUDRLRRLLRRLRRRDDLLDDDLULLDDLURUURUULUDDDRDDLLRDLLUURLRDRLRRLRLLLULDUDDUURRLRDULDRDURRRRRRULDRRDLDRRL\\r\\n\", \"output\": [\"88\"]}, {\"input\": \"1\\r\\nU\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5\\r\\nUUULD\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1\\r\\nD\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5\\r\\nURLUL\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\nDDDRU\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\nLR\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8\\r\\nDDRDLDUR\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"6\\r\\nLLLLUD\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"13\\r\\nRRRLLLLLLLLLL\\r\\n\", \"output\": [\"6\"]}]","length":15,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 1\", \"4 2\", \"5 3\", \"5 4\"]","prob_desc_input_spec":"The first line contains two integers n and k (4\u2009\u2264\u2009n\u2009\u2264\u20091000, 1\u2009\u2264\u2009k\u2009\u2264\u20094).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"96d839dc2d038f8ae95fc47c217b2e2f","prob_desc_created_at":"1510239900","source_code":"def C(n, m):\n    ans=1\n    for i in range(m):\n        ans*=n-i\n    for i in range(m):\n        ans\/\/=i+1\n    return ans\n\nn, m=map(int, input().split())\nans=1\n\nif m>=2:\n    ans+=C(n, 2)\n\nif m>=3:\n    ans+=C(n, 3)*2\n\nif m>=4:\n    ans+=C(n, 2)*C(n-2, 2)\/\/2\n    ans+=C(n, 4)*6\n\nprint(ans)\n","prob_desc_sample_outputs":"[\"1\", \"7\", \"31\", \"76\"]","lang_cluster":"Python","code_uid":"27fe74a13966a89314985d2c3b6c2dcd","prob_desc_notes":null,"prob_desc_output_spec":"Print the number of almost identity permutations for given n and k.","prob_desc_output_to":"standard output","prob_desc_description":"A permutation p of size n is an array such that every integer from 1 to n occurs exactly once in this array.Let's call a permutation an almost identity permutation iff there exist at least n\u2009-\u2009k indices i (1\u2009\u2264\u2009i\u2009\u2264\u2009n) such that pi\u2009=\u2009i.Your task is to count the number of almost identity permutations for given numbers n and k.","hidden_unit_tests":"[{\"input\": \"4 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"5 4\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"200 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200 2\\r\\n\", \"output\": [\"19901\"]}, {\"input\": \"200 3\\r\\n\", \"output\": [\"2646701\"]}, {\"input\": \"200 4\\r\\n\", \"output\": [\"584811251\"]}, {\"input\": \"400 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"400 2\\r\\n\", \"output\": [\"79801\"]}, {\"input\": \"400 3\\r\\n\", \"output\": [\"21253401\"]}, {\"input\": \"400 4\\r\\n\", \"output\": [\"9477912501\"]}, {\"input\": \"600 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"600 2\\r\\n\", \"output\": [\"179701\"]}, {\"input\": \"600 3\\r\\n\", \"output\": [\"71820101\"]}, {\"input\": \"600 4\\r\\n\", \"output\": [\"48187303751\"]}, {\"input\": \"800 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"800 2\\r\\n\", \"output\": [\"319601\"]}, {\"input\": \"800 3\\r\\n\", \"output\": [\"170346801\"]}, {\"input\": \"800 4\\r\\n\", \"output\": [\"152620985001\"]}, {\"input\": \"1000 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000 2\\r\\n\", \"output\": [\"499501\"]}, {\"input\": \"1000 3\\r\\n\", \"output\": [\"332833501\"]}, {\"input\": \"1000 4\\r\\n\", \"output\": [\"373086956251\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"24\"]}]","length":22,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4\"]","prob_desc_input_spec":"The only line contains an integer n (2\u2009\u2264\u2009n\u2009\u2264\u20091012), the number of vertices in the graph.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"a98f0d924ea52cafe0048f213f075891","prob_desc_created_at":"1522771500","source_code":"import atexit\nimport io\nimport sys\nimport math\n\n# Buffering IO\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n    \n\ndef main():\n    n = int(input())\n    ss = 0\n    \n    k = 1\n    while n>1:\n        ss += k * (n \/\/ 2)\n        n = math.ceil(n\/2)\n        k*=2\n    \n    print(ss)\n\n    \nif __name__ == '__main__':\n    main()\n        ","prob_desc_sample_outputs":"[\"4\"]","lang_cluster":"Python","code_uid":"1aa50eda0df1b1cad76b3406435402c6","prob_desc_notes":"NoteIn the first sample:  The weight of the minimum spanning tree is 1+2+1=4.","prob_desc_output_spec":"The only line contains an integer x, the weight of the graph's minimum spanning tree.","prob_desc_output_to":"standard output","prob_desc_description":"Ehab is interested in the bitwise-xor operation and the special graphs. Mahmoud gave him a problem that combines both. He has a complete graph consisting of n vertices numbered from 0 to n\u2009-\u20091. For all 0\u2009\u2264\u2009u\u2009&lt;\u2009v\u2009&lt;\u2009n, vertex u and vertex v are connected with an undirected edge that has weight  (where  is the bitwise-xor operation). Can you find the weight of the minimum spanning tree of that graph?You can read about complete graphs in https:\/\/en.wikipedia.org\/wiki\/Complete_graphYou can read about the minimum spanning tree in https:\/\/en.wikipedia.org\/wiki\/Minimum_spanning_treeThe weight of the minimum spanning tree is the sum of the weights on the edges included in it.","hidden_unit_tests":"[{\"input\": \"4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000\\r\\n\", \"output\": [\"20140978692096\"]}, {\"input\": \"999999999999\\r\\n\", \"output\": [\"20140978692095\"]}, {\"input\": \"23131234\\r\\n\", \"output\": [\"293058929\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"877968\"]}, {\"input\": \"1024\\r\\n\", \"output\": [\"5120\"]}, {\"input\": \"536870912\\r\\n\", \"output\": [\"7784628224\"]}, {\"input\": \"536870911\\r\\n\", \"output\": [\"7784628223\"]}, {\"input\": \"536870913\\r\\n\", \"output\": [\"8321499136\"]}, {\"input\": \"123456789\\r\\n\", \"output\": [\"1680249144\"]}, {\"input\": \"200\\r\\n\", \"output\": [\"844\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"5052\"]}, {\"input\": \"12000\\r\\n\", \"output\": [\"84624\"]}, {\"input\": \"65536\\r\\n\", \"output\": [\"524288\"]}, {\"input\": \"1048576\\r\\n\", \"output\": [\"10485760\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"549755813888\\r\\n\", \"output\": [\"10720238370816\"]}, {\"input\": \"549755813887\\r\\n\", \"output\": [\"10720238370815\"]}, {\"input\": \"549755813889\\r\\n\", \"output\": [\"11269994184704\"]}]","length":32,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"20 4 5 2\", \"30 9 4 1\"]","prob_desc_input_spec":"The only line contains four integers $$$n$$$, $$$k$$$, $$$M$$$ and $$$D$$$ ($$$2 \\le n \\le 10^{18}$$$, $$$2 \\le k \\le n$$$, $$$1 \\le M \\le n$$$, $$$1 \\le D \\le \\min{(n, 1000)}$$$, $$$M \\cdot D \\cdot k \\ge n$$$)\u00a0\u2014 the number of candies, the number of people, the maximum number of candies given to a person at once, the maximum number of times a person can receive candies.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"ac2e795cd44061db8da13e3947ba791b","prob_desc_created_at":"1524677700","source_code":"n,k,m,D= map(int, input().split())\nres = 0\nfor d in range(1, D+1):\n  x = m\n  x = min(x, n \/\/ ((d-1)*k+1))\n  if(x*k*(d-1)+x > n):\n    break\n  if(res==0 or res < x*d):\n    res = x*d\nprint(res)","prob_desc_sample_outputs":"[\"8\", \"4\"]","lang_cluster":"Python","code_uid":"46ce3d8d909575bbe18765f35b152b47","prob_desc_notes":"NoteIn the first example Arkady should choose $$$x = 4$$$. He will give $$$4$$$ candies to himself, $$$4$$$ candies to the second person, $$$4$$$ candies to the third person, then $$$4$$$ candies to the fourth person and then again $$$4$$$ candies to himself. No person is given candies more than $$$2$$$ times, and Arkady receives $$$8$$$ candies in total.Note that if Arkady chooses $$$x = 5$$$, he will receive only $$$5$$$ candies, and if he chooses $$$x = 3$$$, he will receive only $$$3 + 3 = 6$$$ candies as well as the second person, the third and the fourth persons will receive $$$3$$$ candies, and $$$2$$$ candies will be thrown away. He can't choose $$$x = 1$$$ nor $$$x = 2$$$ because in these cases he will receive candies more than $$$2$$$ times.In the second example Arkady has to choose $$$x = 4$$$, because any smaller value leads to him receiving candies more than $$$1$$$ time.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the maximum possible number of candies Arkady can give to himself. Note that it is always possible to choose some valid $$$x$$$.","prob_desc_output_to":"standard output","prob_desc_description":"$$$k$$$ people want to split $$$n$$$ candies between them. Each candy should be given to exactly one of them or be thrown away.The people are numbered from $$$1$$$ to $$$k$$$, and Arkady is the first of them. To split the candies, Arkady will choose an integer $$$x$$$ and then give the first $$$x$$$ candies to himself, the next $$$x$$$ candies to the second person, the next $$$x$$$ candies to the third person and so on in a cycle. The leftover (the remainder that is not divisible by $$$x$$$) will be thrown away.Arkady can't choose $$$x$$$ greater than $$$M$$$ as it is considered greedy. Also, he can't choose such a small $$$x$$$ that some person will receive candies more than $$$D$$$ times, as it is considered a slow splitting.Please find what is the maximum number of candies Arkady can receive by choosing some valid $$$x$$$.","hidden_unit_tests":"[{\"input\": \"20 4 5 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"30 9 4 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 2 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"42 20 5 29\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"1000000000000000000 135 1000000000000000 1000\\r\\n\", \"output\": [\"8325624421831635\"]}, {\"input\": \"100 33 100 100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"1000000000 1000000000 1000000000 1000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"1000000000 32428 1000000000 1000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"1000000000 324934 1000 1000\\r\\n\", \"output\": [\"4000\"]}, {\"input\": \"1000000000000000000 32400093004 10000000 1000\\r\\n\", \"output\": [\"40000000\"]}, {\"input\": \"885 2 160 842\\r\\n\", \"output\": [\"504\"]}, {\"input\": \"216 137 202 208\\r\\n\", \"output\": [\"202\"]}, {\"input\": \"72 66 28 9\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"294 4 13 8\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"9 2 2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"31 3 2 8\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"104 2 5 11\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1000000000000000000 1000000000000000000 1000 1000\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"1000000000000000000 100000000000000000 1 1000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"23925738098196565 23925738098196565 23925738098196565 1000\\r\\n\", \"output\": [\"23925738098196565\"]}, {\"input\": \"576460752303423488 576460752303423488 351082447248993993 1000\\r\\n\", \"output\": [\"351082447248993993\"]}, {\"input\": \"962768465676381898 72057594037927936 586039918340257175 256\\r\\n\", \"output\": [\"586039918340257175\"]}, {\"input\": \"1000000000000000000 1000000000000000000 10 1000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"23925738098196565 23925738098196565 1 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000000000 1000000000000000000 1 1000\\r\\n\", \"output\": [\"1\"]}]","length":10,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 9\", \"5 8\"]","prob_desc_input_spec":"The only line contains two positive integers x and y (1\u2009\u2264\u2009x,\u2009y\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"de7731ce03735b962ee033613192f7bc","prob_desc_created_at":"1513008300","source_code":"x, y = map(int, input().split())\nb = y \/\/ x\nif y % x != 0:\n    exit(print(0))\nds = set()\nM = 10**9 + 7\nfor i in range(1, int(pow(b,0.5)+1)):\n    if b % i == 0:\n        ds.add(i)\n        ds.add(b\/\/i)\nds = sorted(list(ds))\nans = pow(2, b-1, M)\nf = ds[::]\nfor i in range(len(ds)):\n    f[i] = pow(2, ds[i]-1, M)\n    for j in range(i):\n        if ds[i] % ds[j] == 0:\n            f[i] -= f[j]\nprint(f[-1]%M)","prob_desc_sample_outputs":"[\"3\", \"0\"]","lang_cluster":"Python","code_uid":"06522cd83fcd78569f3d18d9db2a9c76","prob_desc_notes":"NoteThere are three suitable sequences in the first test: (3,\u20093,\u20093), (3,\u20096), (6,\u20093).There are no suitable sequences in the second test.","prob_desc_output_spec":"Print the number of such sequences modulo 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"Count the number of distinct sequences a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai) consisting of positive integers such that gcd(a1,\u2009a2,\u2009...,\u2009an)\u2009=\u2009x and . As this number could be large, print the answer modulo 109\u2009+\u20097.gcd here means the greatest common divisor.","hidden_unit_tests":"[{\"input\": \"3 9\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5 8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 12\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"1 8\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"1 9\\r\\n\", \"output\": [\"252\"]}, {\"input\": \"1000000000 1000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 1000000000\\r\\n\", \"output\": [\"824916815\"]}, {\"input\": \"1 223092870\\r\\n\", \"output\": [\"521342052\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 994593600\\r\\n\", \"output\": [\"558135120\"]}, {\"input\": \"1 425613469\\r\\n\", \"output\": [\"455729363\"]}, {\"input\": \"495219 444706662\\r\\n\", \"output\": [\"115165527\"]}, {\"input\": \"9357 18255507\\r\\n\", \"output\": [\"745979764\"]}, {\"input\": \"741547455 471761895\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"225 315096300\\r\\n\", \"output\": [\"413133630\"]}, {\"input\": \"183612440 509579899\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"231096994 462193988\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"34601 35742833\\r\\n\", \"output\": [\"60054095\"]}, {\"input\": \"417485019 230941257\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"524 991033864\\r\\n\", \"output\": [\"172439543\"]}, {\"input\": \"859550004 563726557\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 282521795\\r\\n\", \"output\": [\"436596181\"]}, {\"input\": \"415879151 194713963\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"109936444 989427996\\r\\n\", \"output\": [\"252\"]}]","length":19,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 3 1\", \"7 9 1\", \"7 9 2\"]","prob_desc_input_spec":"The only line contains three integers $$$w$$$, $$$h$$$ and $$$k$$$ ($$$3 \\le w, h \\le 100$$$, $$$1 \\le k \\le \\left\\lfloor \\frac{min(n, m) + 1}{4}\\right\\rfloor$$$, where $$$\\lfloor x \\rfloor$$$ denotes the number $$$x$$$ rounded down) \u2014 the number of rows, columns and the number of rings, respectively.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"2c98d59917337cb321d76f72a1b3c057","prob_desc_created_at":"1540109400","source_code":"w,h,k=map(int,input().split())\ncount=0\nfor i in range(1,k+1):\n    count+=2*(w-4*(i-1))+2*(h-4*(i-1))-4\nprint(count)","prob_desc_sample_outputs":"[\"8\", \"28\", \"40\"]","lang_cluster":"Python","code_uid":"cec8a506bb0c780227c077db19da78de","prob_desc_notes":"NoteThe first example is shown on the picture below.  The second example is shown on the picture below.  The third example is shown in the problem description.","prob_desc_output_spec":"Print a single positive integer\u00a0\u2014 the number of cells to be gilded.","prob_desc_output_to":"standard output","prob_desc_description":"You have a plate and you want to add some gilding to it. The plate is a rectangle that we split into $$$w\\times h$$$ cells. There should be $$$k$$$ gilded rings, the first one should go along the edge of the plate, the second one\u00a0\u2014 $$$2$$$ cells away from the edge and so on. Each ring has a width of $$$1$$$ cell. Formally, the $$$i$$$-th of these rings should consist of all bordering cells on the inner rectangle of size $$$(w - 4(i - 1))\\times(h - 4(i - 1))$$$.  The picture corresponds to the third example. Your task is to compute the number of cells to be gilded.","hidden_unit_tests":"[{\"input\": \"3 3 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"7 9 1\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"7 9 2\\r\\n\", \"output\": [\"40\"]}, {\"input\": \"18 26 3\\r\\n\", \"output\": [\"204\"]}, {\"input\": \"63 34 8\\r\\n\", \"output\": [\"1072\"]}, {\"input\": \"100 100 25\\r\\n\", \"output\": [\"5100\"]}, {\"input\": \"4 3 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"3 4 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"3 10 1\\r\\n\", \"output\": [\"22\"]}, {\"input\": \"12 3 1\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"4 4 1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"10 4 1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"4 12 1\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"10 10 1\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"10 10 2\\r\\n\", \"output\": [\"56\"]}, {\"input\": \"12 10 1\\r\\n\", \"output\": [\"40\"]}, {\"input\": \"10 12 2\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"12 11 1\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"11 12 2\\r\\n\", \"output\": [\"68\"]}, {\"input\": \"12 11 3\\r\\n\", \"output\": [\"78\"]}, {\"input\": \"100 8 2\\r\\n\", \"output\": [\"408\"]}, {\"input\": \"8 100 2\\r\\n\", \"output\": [\"408\"]}, {\"input\": \"100 100 20\\r\\n\", \"output\": [\"4880\"]}, {\"input\": \"74 50 5\\r\\n\", \"output\": [\"1060\"]}, {\"input\": \"43 75 9\\r\\n\", \"output\": [\"1512\"]}, {\"input\": \"5 5 1\\r\\n\", \"output\": [\"16\"]}]","length":5,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1987\", \"2013\"]","prob_desc_input_spec":"The single line contains integer y (1000\u2009\u2264\u2009y\u2009\u2264\u20099000) \u2014 the year number.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"d62dabfbec52675b7ed7b582ad133acd","prob_desc_created_at":"1360596600","source_code":"def solve(year):\n    while(True):\n        year = str(int(year)+1)\n        if(len(set(year))==4):\n            return year\n\nif __name__ == \"__main__\":\n    print(solve(input()))","prob_desc_sample_outputs":"[\"2013\", \"2014\"]","lang_cluster":"Python","code_uid":"53d0e945cb3ab76762e54736e06dfa13","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the minimum year number that is strictly larger than y and all it's digits are distinct. It is guaranteed that the answer exists.","prob_desc_output_to":"standard output","prob_desc_description":"It seems like the year of 2013 came only yesterday. Do you know a curious fact? The year of 2013 is the first year after the old 1987 with only distinct digits.Now you are suggested to solve the following problem: given a year number, find the minimum year number which is strictly larger than the given one and has only distinct digits.","hidden_unit_tests":"[{\"input\": \"1987\\r\\n\", \"output\": [\"2013\"]}, {\"input\": \"2013\\r\\n\", \"output\": [\"2014\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"1023\"]}, {\"input\": \"1001\\r\\n\", \"output\": [\"1023\"]}, {\"input\": \"1234\\r\\n\", \"output\": [\"1235\"]}, {\"input\": \"5555\\r\\n\", \"output\": [\"5601\"]}, {\"input\": \"9000\\r\\n\", \"output\": [\"9012\"]}, {\"input\": \"1111\\r\\n\", \"output\": [\"1203\"]}, {\"input\": \"8999\\r\\n\", \"output\": [\"9012\"]}, {\"input\": \"4572\\r\\n\", \"output\": [\"4573\"]}, {\"input\": \"6666\\r\\n\", \"output\": [\"6701\"]}, {\"input\": \"2001\\r\\n\", \"output\": [\"2013\"]}, {\"input\": \"3000\\r\\n\", \"output\": [\"3012\"]}, {\"input\": \"7712\\r\\n\", \"output\": [\"7801\"]}, {\"input\": \"8088\\r\\n\", \"output\": [\"8091\"]}, {\"input\": \"1594\\r\\n\", \"output\": [\"1596\"]}, {\"input\": \"6016\\r\\n\", \"output\": [\"6017\"]}, {\"input\": \"8800\\r\\n\", \"output\": [\"8901\"]}, {\"input\": \"3331\\r\\n\", \"output\": [\"3401\"]}, {\"input\": \"5090\\r\\n\", \"output\": [\"5091\"]}, {\"input\": \"2342\\r\\n\", \"output\": [\"2345\"]}, {\"input\": \"2334\\r\\n\", \"output\": [\"2340\"]}, {\"input\": \"1123\\r\\n\", \"output\": [\"1203\"]}, {\"input\": \"8989\\r\\n\", \"output\": [\"9012\"]}, {\"input\": \"8977\\r\\n\", \"output\": [\"9012\"]}, {\"input\": \"6869\\r\\n\", \"output\": [\"6870\"]}]","length":8,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"512 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\", \"4\", \"12\"]","prob_desc_input_spec":"In the only line of input there is an integer n (3\u2009\u2264\u2009n\u2009\u2264\u20091000), the sum of numerator and denominator of the fraction.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"0af3515ed98d9d01ce00546333e98e77","prob_desc_created_at":"1504702500","source_code":"def red(m,n):\n    while n:\n        m,n = n, m%n\n    return m\n\ndef main():\n    x = int(input())\n    m = int((x-1)\/2)\n    n = int(x-m)\n    while red(m,n) != 1:\n        m = m-1\n        n = x-m\n    print(m,n)\n\nif __name__ == \"__main__\" : main()  \n","prob_desc_sample_outputs":"[\"1 2\", \"1 3\", \"5 7\"]","lang_cluster":"Python","code_uid":"3aa573c0034e48e387c47b36ec08459e","prob_desc_notes":null,"prob_desc_output_spec":"Output two space-separated positive integers a and b, numerator and denominator of the maximum possible proper irreducible fraction satisfying the given sum.","prob_desc_output_to":"standard output","prob_desc_description":"Petya is a big fan of mathematics, especially its part related to fractions. Recently he learned that a fraction  is called proper iff its numerator is smaller than its denominator (a\u2009&lt;\u2009b) and that the fraction is called irreducible if its numerator and its denominator are coprime (they do not have positive common divisors except 1).During his free time, Petya thinks about proper irreducible fractions and converts them to decimals using the calculator. One day he mistakenly pressed addition button (\u2009+\u2009) instead of division button (\u00f7) and got sum of numerator and denominator that was equal to n instead of the expected decimal notation. Petya wanted to restore the original fraction, but soon he realized that it might not be done uniquely. That's why he decided to determine maximum possible proper irreducible fraction  such that sum of its numerator and denominator equals n. Help Petya deal with this problem. ","hidden_unit_tests":"[{\"input\": \"3\\r\\n\", \"output\": [\"1 2\", \"1\\r\\n2\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"1 3\", \"1\\r\\n3\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"5 7\", \"5\\r\\n7\"]}, {\"input\": \"34\\r\\n\", \"output\": [\"15 19\", \"15\\r\\n19\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"6\\r\\n7\", \"6 7\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"5\\r\\n6\", \"5 6\"]}, {\"input\": \"24\\r\\n\", \"output\": [\"11\\r\\n13\", \"11 13\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"8 9\", \"8\\r\\n9\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"3 7\", \"3\\r\\n7\"]}, {\"input\": \"69\\r\\n\", \"output\": [\"34\\r\\n35\", \"34 35\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"49 51\", \"49\\r\\n51\"]}, {\"input\": \"57\\r\\n\", \"output\": [\"28 29\", \"28\\r\\n29\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"499\\r\\n501\", \"499 501\"]}, {\"input\": \"999\\r\\n\", \"output\": [\"499\\r\\n500\", \"499 500\"]}, {\"input\": \"998\\r\\n\", \"output\": [\"497\\r\\n501\", \"497 501\"]}, {\"input\": \"997\\r\\n\", \"output\": [\"498\\r\\n499\", \"498 499\"]}, {\"input\": \"996\\r\\n\", \"output\": [\"497 499\", \"497\\r\\n499\"]}, {\"input\": \"995\\r\\n\", \"output\": [\"497\\r\\n498\", \"497 498\"]}, {\"input\": \"994\\r\\n\", \"output\": [\"495 499\", \"495\\r\\n499\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"2 3\", \"2\\r\\n3\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"1\\r\\n5\", \"1 5\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"3 5\", \"3\\r\\n5\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"4\\r\\n5\", \"4 5\"]}, {\"input\": \"423\\r\\n\", \"output\": [\"211\\r\\n212\", \"211 212\"]}, {\"input\": \"876\\r\\n\", \"output\": [\"437\\r\\n439\", \"437 439\"]}, {\"input\": \"29\\r\\n\", \"output\": [\"14\\r\\n15\", \"14 15\"]}]","length":15,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 30\\n2 2 1\", \"3 20\\n2 1 1\"]","prob_desc_input_spec":"The first line contains two space separated integers n, d (1\u2009\u2264\u2009n\u2009\u2264\u2009100;\u00a01\u2009\u2264\u2009d\u2009\u2264\u200910000). The second line contains n space-separated integers: t1,\u2009t2,\u2009...,\u2009tn (1\u2009\u2264\u2009ti\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"b16f5f5c4eeed2a3700506003e8ea8ea","prob_desc_created_at":"1401895800","source_code":"__author__ = 'myduomilia'\n\nn, t = list(map(int, input().split()))\narr = list(map(int, input().split()))\ns = sum(arr)\nans = 0\n\nif s + (len(arr) - 1) * 10 > t:\n    print(-1)\nelse:\n    print((t - s) \/\/ 5)","prob_desc_sample_outputs":"[\"5\", \"-1\"]","lang_cluster":"Python","code_uid":"7839b462979f317f3f02850efbf73dbb","prob_desc_notes":"NoteConsider the first example. The duration of the event is 30 minutes. There could be maximum 5 jokes in the following way:  First Churu cracks a joke in 5 minutes.  Then Devu performs the first song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now Devu performs second song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now finally Devu will perform his last song in 1 minutes.  Total time spent is 5\u2009+\u20092\u2009+\u200910\u2009+\u20092\u2009+\u200910\u2009+\u20091\u2009=\u200930 minutes.Consider the second example. There is no way of organizing Devu's all songs. Hence the answer is -1. ","prob_desc_output_spec":"If there is no way to conduct all the songs of Devu, output -1. Otherwise output the maximum number of jokes that Churu can crack in the grand event.","prob_desc_output_to":"standard output","prob_desc_description":"Devu is a renowned classical singer. He is invited to many big functions\/festivals. Recently he was invited to \"All World Classical Singing Festival\". Other than Devu, comedian Churu was also invited.Devu has provided organizers a list of the songs and required time for singing them. He will sing n songs, ith song will take ti minutes exactly. The Comedian, Churu will crack jokes. All his jokes are of 5 minutes exactly.People have mainly come to listen Devu. But you know that he needs rest of 10 minutes after each song. On the other hand, Churu being a very active person, doesn't need any rest.You as one of the organizers should make an optimal s\u0441hedule for the event. For some reasons you must follow the conditions:  The duration of the event must be no more than d minutes;  Devu must complete all his songs;  With satisfying the two previous conditions the number of jokes cracked by Churu should be as many as possible. If it is not possible to find a way to conduct all the songs of the Devu, output -1. Otherwise find out maximum number of jokes that Churu can crack in the grand event.","hidden_unit_tests":"[{\"input\": \"3 30\\r\\n2 2 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3 20\\r\\n2 1 1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"50 10000\\r\\n5 4 10 9 9 6 7 7 7 3 3 7 7 4 7 4 10 10 1 7 10 3 1 4 5 7 2 10 10 10 2 3 4 7 6 1 8 4 7 3 8 8 4 10 1 1 9 2 6 1\\r\\n\", \"output\": [\"1943\"]}, {\"input\": \"50 10000\\r\\n4 7 15 9 11 12 20 9 14 14 10 13 6 13 14 17 6 8 20 12 10 15 13 17 5 12 13 11 7 5 5 2 3 15 13 7 14 14 19 2 13 14 5 15 3 19 15 16 4 1\\r\\n\", \"output\": [\"1891\"]}, {\"input\": \"100 9000\\r\\n5 2 3 1 1 3 4 9 9 6 7 10 10 10 2 10 6 8 8 6 7 9 9 5 6 2 1 10 10 9 4 5 9 2 4 3 8 5 6 1 1 5 3 6 2 6 6 6 5 8 3 6 7 3 1 10 9 1 8 3 10 9 5 6 3 4 1 1 10 10 2 3 4 8 10 10 5 1 5 3 6 8 10 6 10 2 1 8 10 1 7 6 9 10 5 2 3 5 3 2\\r\\n\", \"output\": [\"1688\"]}, {\"input\": \"100 8007\\r\\n5 19 14 18 9 6 15 8 1 14 11 20 3 17 7 12 2 6 3 17 7 20 1 14 20 17 2 10 13 7 18 18 9 10 16 8 1 11 11 9 13 18 9 20 12 12 7 15 12 17 11 5 11 15 9 2 15 1 18 3 18 16 15 4 10 5 18 13 13 12 3 8 17 2 12 2 13 3 1 13 2 4 9 10 18 10 14 4 4 17 12 19 2 9 6 5 5 20 18 12\\r\\n\", \"output\": [\"1391\"]}, {\"input\": \"39 2412\\r\\n1 1 1 1 1 1 26 1 1 1 99 1 1 1 1 1 1 1 1 1 1 88 7 1 1 1 1 76 1 1 1 93 40 1 13 1 68 1 32\\r\\n\", \"output\": [\"368\"]}, {\"input\": \"39 2617\\r\\n47 1 1 1 63 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 70 1 99 63 1 1 1 1 1 1 1 1 64 1 1\\r\\n\", \"output\": [\"435\"]}, {\"input\": \"39 3681\\r\\n83 77 1 94 85 47 1 98 29 16 1 1 1 71 96 85 31 97 96 93 40 50 98 1 60 51 1 96 100 72 1 1 1 89 1 93 1 92 100\\r\\n\", \"output\": [\"326\"]}, {\"input\": \"45 894\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 28 28 1 1 1 1 1 1 1 1 1 1 1 1 1 1 99 3 1 1\\r\\n\", \"output\": [\"139\"]}, {\"input\": \"45 4534\\r\\n1 99 65 99 4 46 54 80 51 30 96 1 28 30 44 70 78 1 1 100 1 62 1 1 1 85 1 1 1 61 1 46 75 1 61 77 97 26 67 1 1 63 81 85 86\\r\\n\", \"output\": [\"514\"]}, {\"input\": \"72 3538\\r\\n52 1 8 1 1 1 7 1 1 1 1 48 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 40 1 1 38 1 1 1 1 1 1 1 1 1 1 1 35 1 93 79 1 1 1 1 1 1 1 1 1 51 1 1 1 1 1 1 1 1 1 1 1 1 96 1\\r\\n\", \"output\": [\"586\"]}, {\"input\": \"81 2200\\r\\n1 59 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 93 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 50 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"384\"]}, {\"input\": \"81 2577\\r\\n85 91 1 1 2 1 1 100 1 80 1 1 17 86 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 37 1 66 24 1 1 96 49 1 66 1 44 1 1 1 1 98 1 1 1 1 35 1 37 3 35 1 1 87 64 1 24 1 58 1 1 42 83 5 1 1 1 1 1 95 1 94 1 50 1 1\\r\\n\", \"output\": [\"174\"]}, {\"input\": \"81 4131\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"807\"]}, {\"input\": \"81 6315\\r\\n1 1 67 100 1 99 36 1 92 5 1 96 42 12 1 57 91 1 1 66 41 30 74 95 1 37 1 39 91 69 1 52 77 47 65 1 1 93 96 74 90 35 85 76 71 92 92 1 1 67 92 74 1 1 86 76 35 1 56 16 27 57 37 95 1 40 20 100 51 1 80 60 45 79 95 1 46 1 25 100 96\\r\\n\", \"output\": [\"490\"]}, {\"input\": \"96 1688\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 45 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 25 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 71 1 1 1 30 1 1 1\\r\\n\", \"output\": [\"284\"]}, {\"input\": \"96 8889\\r\\n1 1 18 1 1 1 1 1 1 1 1 1 99 1 1 1 1 88 1 45 1 1 1 1 1 1 1 1 1 1 1 1 1 1 96 1 1 1 1 21 1 1 1 1 1 1 1 73 1 1 1 1 1 10 1 1 1 1 1 1 1 46 43 1 1 1 1 1 98 1 1 1 1 1 1 6 1 1 1 1 1 74 1 25 1 55 1 1 1 13 1 1 54 1 1 1\\r\\n\", \"output\": [\"1589\"]}, {\"input\": \"10 100\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"100 10000\\r\\n54 46 72 94 79 83 91 54 73 3 24 55 54 31 28 20 19 6 25 19 47 23 1 70 15 87 51 39 54 77 55 5 60 3 15 99 56 88 22 78 79 21 38 27 28 86 7 88 12 59 55 70 25 1 70 49 1 45 69 72 50 17 4 56 8 100 90 34 35 20 61 76 88 79 4 74 65 68 75 26 40 72 59 94 10 67 96 85 29 90 47 24 44 1 66 93 55 36 1 99\\r\\n\", \"output\": [\"1017\"]}, {\"input\": \"100 6000\\r\\n41 31 23 17 24 78 26 96 93 48 46 2 49 33 35 9 73 100 34 48 83 36 33 69 43 24 3 74 8 81 27 33 94 38 77 9 76 90 62 90 21 67 22 22 12 2 17 27 61 18 72 85 59 65 71 38 90 75 74 66 60 47 58 50 90 95 75 10 5 100 97 29 83 88 65 26 93 90 22 98 36 55 70 38 50 92 88 72 99 96 25 14 74 16 25 92 67 94 77 96\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 1\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 6\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 5\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 3\\r\\n4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"3 24\\r\\n2 1 2\\r\\n\", \"output\": [\"-1\"]}]","length":11,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 2\", \"7 6\"]","prob_desc_input_spec":"The first line contains two integers $$$n$$$ and $$$v$$$ ($$$2 \\le n \\le 100$$$, $$$1 \\le v \\le 100$$$) \u00a0\u2014 the number of cities in the country and the capacity of the tank.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"f8eb96deeb82d9f011f13d7dac1e1ab7","prob_desc_created_at":"1550334900","source_code":"c, v = map(int,input().split())\n\n\n\nc -= 1\n\nif c <= v:\n    print(c)\n    \nelse:\n    d = v\n    p = 2\n    an = v\n    while d < c:\n        d += 1\n        an += p\n        p += 1    \n    print(an)","prob_desc_sample_outputs":"[\"4\", \"6\"]","lang_cluster":"Python","code_uid":"c83c925cbfc90ad928f56b3b37f5890a","prob_desc_notes":"NoteIn the first example, Sasha can buy $$$2$$$ liters for $$$2$$$ dollars ($$$1$$$ dollar per liter) in the first city, drive to the second city, spend $$$1$$$ liter of fuel on it, then buy $$$1$$$ liter for $$$2$$$ dollars in the second city and then drive to the $$$4$$$-th city. Therefore, the answer is $$$1+1+2=4$$$.In the second example, the capacity of the tank allows to fill the tank completely in the first city, and drive to the last city without stops in other cities.","prob_desc_output_spec":"Print one integer\u00a0\u2014 the minimum amount of money that is needed to finish the trip.","prob_desc_output_to":"standard output","prob_desc_description":"Sasha is a very happy guy, that's why he is always on the move. There are $$$n$$$ cities in the country where Sasha lives. They are all located on one straight line, and for convenience, they are numbered from $$$1$$$ to $$$n$$$ in increasing order. The distance between any two adjacent cities is equal to $$$1$$$ kilometer. Since all roads in the country are directed, it's possible to reach the city $$$y$$$ from the city $$$x$$$ only if $$$x &lt; y$$$. Once Sasha decided to go on a trip around the country and to visit all $$$n$$$ cities. He will move with the help of his car, Cheetah-2677. The tank capacity of this model is $$$v$$$ liters, and it spends exactly $$$1$$$ liter of fuel for $$$1$$$ kilometer of the way. At the beginning of the journey, the tank is empty. Sasha is located in the city with the number $$$1$$$ and wants to get to the city with the number $$$n$$$. There is a gas station in each city. In the $$$i$$$-th city, the price of $$$1$$$ liter of fuel is $$$i$$$ dollars. It is obvious that at any moment of time, the tank can contain at most $$$v$$$ liters of fuel.Sasha doesn't like to waste money, that's why he wants to know what is the minimum amount of money is needed to finish the trip if he can buy fuel in any city he wants. Help him to figure it out!","hidden_unit_tests":"[{\"input\": \"4 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"7 6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"10 3\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"12 89\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"32 15\\r\\n\", \"output\": [\"167\"]}, {\"input\": \"77 1\\r\\n\", \"output\": [\"2926\"]}, {\"input\": \"2 56\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"91 14\\r\\n\", \"output\": [\"3016\"]}, {\"input\": \"92 84\\r\\n\", \"output\": [\"119\"]}, {\"input\": \"42 41\\r\\n\", \"output\": [\"41\"]}, {\"input\": \"20 1\\r\\n\", \"output\": [\"190\"]}, {\"input\": \"50 1\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"20 79\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"56 13\\r\\n\", \"output\": [\"958\"]}, {\"input\": \"84 15\\r\\n\", \"output\": [\"2429\"]}, {\"input\": \"7 100\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"99 97\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"97 99\\r\\n\", \"output\": [\"96\"]}, {\"input\": \"99 98\\r\\n\", \"output\": [\"98\"]}, {\"input\": \"100 1\\r\\n\", \"output\": [\"4950\"]}, {\"input\": \"100 3\\r\\n\", \"output\": [\"4755\"]}, {\"input\": \"100 98\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 97\\r\\n\", \"output\": [\"102\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"9 5\\r\\n\", \"output\": [\"14\"]}]","length":18,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\", \"5 1 1 1 1 0 0 0 0 0 0 0 0 0\"]","prob_desc_input_spec":"The only line contains 14 integers $$$a_1, a_2, \\ldots, a_{14}$$$ ($$$0 \\leq a_i \\leq 10^9$$$)\u00a0\u2014 the number of stones in each hole. It is guaranteed that for any $$$i$$$ ($$$1\\leq i \\leq 14$$$) $$$a_i$$$ is either zero or odd, and there is at least one stone in the board.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"1ac11153e35509e755ea15f1d57d156b","prob_desc_created_at":"1525183500","source_code":"A=list(map(int,input().split()))\nscore=0\nfor i in range(14):\n    score=max(score,sum([j for j in [(A[j] if i!=j else 0)+A[i]\/\/14+(1 if (j+13-i)%14<A[i]%14 else 0) for j in range(14)] if j%2==0]))\nprint(score)\n","prob_desc_sample_outputs":"[\"4\", \"8\"]","lang_cluster":"Python","code_uid":"485f76e306ca4f73720657504c0ad37f","prob_desc_notes":"NoteIn the first test case the board after the move from the hole with $$$7$$$ stones will look like 1 2 2 0 0 0 0 0 0 0 1 1 1 1. Then the player collects the even numbers and ends up with a score equal to $$$4$$$.","prob_desc_output_spec":"Output one integer, the maximum possible score after one move.","prob_desc_output_to":"standard output","prob_desc_description":"Mancala is a game famous in the Middle East. It is played on a board that consists of 14 holes.   Initially, each hole has $$$a_i$$$ stones. When a player makes a move, he chooses a hole which contains a positive number of stones. He takes all the stones inside it and then redistributes these stones one by one in the next holes in a counter-clockwise direction.Note that the counter-clockwise order means if the player takes the stones from hole $$$i$$$, he will put one stone in the $$$(i+1)$$$-th hole, then in the $$$(i+2)$$$-th, etc. If he puts a stone in the $$$14$$$-th hole, the next one will be put in the first hole.After the move, the player collects all the stones from holes that contain even number of stones. The number of stones collected by player is the score, according to Resli.Resli is a famous Mancala player. He wants to know the maximum score he can obtain after one move.","hidden_unit_tests":"[{\"input\": \"0 1 1 0 0 0 0 0 0 7 0 0 0 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"5 1 1 1 1 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 1\\r\\n\", \"output\": [\"54294\"]}, {\"input\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 15\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 0 0 0 0 1 0 0 0 0 1 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 5 1 1 1 3 3 3 5 7 5 3 7 5\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"787 393 649 463 803 365 81 961 989 531 303 407 579 915\\r\\n\", \"output\": [\"7588\"]}, {\"input\": \"8789651 4466447 1218733 6728667 1796977 6198853 8263135 6309291 8242907 7136751 3071237 5397369 6780785 9420869\\r\\n\", \"output\": [\"81063456\"]}, {\"input\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 29\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"282019717 109496191 150951267 609856495 953855615 569750143 6317733 255875779 645191029 572053369 290936613 338480779 879775193 177172893\\r\\n\", \"output\": [\"5841732816\"]}, {\"input\": \"105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505\\r\\n\", \"output\": [\"120472578\"]}, {\"input\": \"404418821 993626161 346204297 122439813 461187221 628048227 625919459 628611733 938993057 701270099 398043779 684205961 630975553 575964835\\r\\n\", \"output\": [\"8139909016\"]}, {\"input\": \"170651077 730658441 824213789 583764177 129437345 717005779 675398017 314979709 380861369 265878463 746564659 797260041 506575735 335169317\\r\\n\", \"output\": [\"6770880638\"]}, {\"input\": \"622585025 48249287 678950449 891575125 637411965 457739735 829353393 235216425 284006447 875591469 492839209 296444305 513776057 810057753\\r\\n\", \"output\": [\"7673796644\"]}, {\"input\": \"475989857 930834747 786217439 927967137 489188151 869354161 276693267 56154399 131055697 509249443 143116853 426254423 44465165 105798821\\r\\n\", \"output\": [\"6172339560\"]}, {\"input\": \"360122921 409370351 226220005 604004145 85173909 600403773 624052991 138163383 729239967 189036661 619842883 270087537 749500483 243727913\\r\\n\", \"output\": [\"5848946922\"]}, {\"input\": \"997102881 755715147 273805839 436713689 547411799 72470207 522269145 647688957 137422311 422612659 197751751 679663349 821420227 387967237\\r\\n\", \"output\": [\"6900015198\"]}, {\"input\": \"690518849 754551537 652949719 760695679 491633619 477564457 11669279 700467439 470069297 782338983 718169393 884421719 24619427 215745577\\r\\n\", \"output\": [\"7635414974\"]}, {\"input\": \"248332749 486342237 662201929 917696895 555278549 252122023 850296207 463343655 832574345 954281071 168282553 825538865 996753493 461254663\\r\\n\", \"output\": [\"6400166934\"]}, {\"input\": \"590789361 636464947 404477303 337309187 476703809 426863069 120608741 703406277 645444697 761482231 996635839 33459441 677458865 483861751\\r\\n\", \"output\": [\"7294965518\"]}, {\"input\": \"297857621 238127103 749085829 139033277 597985489 202617713 982184715 183932743 278551059 297781685 330124279 338959601 682874531 187519685\\r\\n\", \"output\": [\"5201808164\"]}, {\"input\": \"1 1 1 1 1 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 1 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 0 0 0 0 0 0 0 0 0 0 0 0 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0 0 0 0 0 0 0 0 1 1\\r\\n\", \"output\": [\"2\"]}]","length":5,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\\n0 1 0\", \"5\\n1 0 1 0 1\"]","prob_desc_input_spec":"The first line of the input contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of pieces in the chocolate bar. The second line contains n integers ai (0\u2009\u2264\u2009ai\u2009\u2264\u20091), where 0 represents a piece without the nut and 1 stands for a piece with the nut.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"58242665476f1c4fa723848ff0ecda98","prob_desc_created_at":"1453563300","source_code":"cp = int(input())\nc = [int(i) for i in input().split()]\n\nif c.count(1) == 1 or c.count(1) == 0:\n    print(c.count(1))    \nelse:\n    i = c.index(1)+1\n    count = 1\n    pr = 1\n    while i < cp:\n        if c[i] == 0:\n            count += 1\n            i += 1\n        else:\n            pr *= count\n            i += 1\n            count = 1\n    print(pr)","prob_desc_sample_outputs":"[\"1\", \"4\"]","lang_cluster":"Python","code_uid":"32281b243a021579112bef31a8b47133","prob_desc_notes":"NoteIn the first sample there is exactly one nut, so the number of ways equals 1\u00a0\u2014 Bob shouldn't make any breaks.In the second sample you can break the bar in four ways:10|10|11|010|110|1|011|01|01","prob_desc_output_spec":"Print the number of ways to break the chocolate into multiple parts so that each part would contain exactly one nut.","prob_desc_output_to":"standard output","prob_desc_description":"Bob loves everything sweet. His favorite chocolate bar consists of pieces, each piece may contain a nut. Bob wants to break the bar of chocolate into multiple pieces so that each part would contain exactly one nut and any break line goes between two adjacent pieces.You are asked to calculate the number of ways he can do it. Two ways to break chocolate are considered distinct if one of them contains a break between some two adjacent pieces and the other one doesn't. Please note, that if Bob doesn't make any breaks, all the bar will form one piece and it still has to have exactly one nut.","hidden_unit_tests":"[{\"input\": \"3\\r\\n0 1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n1 0 1 0 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10\\r\\n0 0 1 0 0 0 1 1 0 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"20\\r\\n0 0 0 0 1 1 1 0 1 0 0 1 0 1 1 0 1 1 1 0\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"50\\r\\n0 1 1 1 1 1 1 0 1 1 0 1 1 1 0 0 1 0 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0\\r\\n\", \"output\": [\"11520\"]}, {\"input\": \"99\\r\\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 1 1 0 0 0 1 0 1 0 0 0 0 1 1 1 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"17694720\"]}, {\"input\": \"1\\r\\n0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1\\r\\n\", \"output\": [\"5559060566555523\"]}, {\"input\": \"41\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"18\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n0 1 0 0 0 0 1 0 0 1\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10\\r\\n1 1 0 0 0 1 1 1 1 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"50\\r\\n1 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 0 1 0 1 0 0 1 0 1 0 0 1 0 1 1 1\\r\\n\", \"output\": [\"186624\"]}, {\"input\": \"50\\r\\n0 0 1 1 0 0 0 1 0 1 1 1 0 1 1 1 0 1 1 0 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 1 0 1 1 0 1 1 0 0 0 1 1 0 1\\r\\n\", \"output\": [\"122880\"]}, {\"input\": \"99\\r\\n1 1 1 1 0 1 0 1 0 0 0 1 1 0 0 1 0 1 0 1 1 0 0 1 0 1 1 0 1 1 1 1 1 1 0 1 0 0 0 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 0 0 1 1 1 1 1 0 1 0 0 1 1 1 0 0\\r\\n\", \"output\": [\"27869184000\"]}, {\"input\": \"99\\r\\n1 0 1 1 1 1 1 1 0 1 0 0 0 0 0 1 1 0 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0 1 1 0 0 1 0 1 1 1 0 1 0 0 0 1 0 1 1 0 1 0 1 1 0 0 1 0 0 1 1 1\\r\\n\", \"output\": [\"123834728448\"]}, {\"input\": \"100\\r\\n1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 1 0 0 1 0 0 1 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 1 0 0 1 1 1 0 1 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 1 0 1 0 1 0\\r\\n\", \"output\": [\"773967052800\"]}, {\"input\": \"100\\r\\n0 1 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 1 0 1 0 0 0 0 1 1 0 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 1 1 0 1 0 1 1 1 0 1 1 0 1\\r\\n\", \"output\": [\"38698352640\"]}, {\"input\": \"100\\r\\n1 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 1 1 1 0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 0 1 0 0 1 0 0 0 1 0 0 1 0\\r\\n\", \"output\": [\"72236924928\"]}, {\"input\": \"100\\r\\n1 1 0 0 1 0 1 1 0 0 0 1 0 1 0 0 1 1 0 1 1 0 0 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 1 1 1 0 1 1 0 1 0 0 0 0 1 0 0 1 0 0 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1\\r\\n\", \"output\": [\"58047528960\"]}, {\"input\": \"100\\r\\n0 1 0 1 1 0 1 0 1 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1 1 0 1 1 1 0 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 1 0 1 0 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 0 0 1 1 0 1 1 0 1 1 1 1 0\\r\\n\", \"output\": [\"73987522560\"]}, {\"input\": \"100\\r\\n1 1 0 1 1 0 0 1 0 1 0 1 0 1 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 1 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 1 1 0 0 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 1 0 1 1 1 0 1 1 0\\r\\n\", \"output\": [\"180592312320\"]}, {\"input\": \"100\\r\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1\\r\\n\", \"output\": [\"1900000000\"]}]","length":18,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2\", \"3\"]","prob_desc_input_spec":"The input contains a single number n (2\u2009\u2264\u2009n\u2009\u2264\u2009109) \u2014 the size of the board.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"52e07d176aa1d370788f94ee2e61df93","prob_desc_created_at":"1417618800","source_code":"#\/usr\/bin\/env python3\nimport sys\nn = int(sys.stdin.readline())\nif n % 2 == 1:\n    print('black')\nelse:\n    print('white')\n    print('1 2')","prob_desc_sample_outputs":"[\"white\\n1 2\", \"black\"]","lang_cluster":"Python","code_uid":"7c94e9df5c8e45974958e84a1fb48c93","prob_desc_notes":"NoteIn the first sample test the white queen can capture the black queen at the first move, so the white player wins.In the second test from the statement if the white queen captures the green pawn located on the central vertical line, then it will be captured by the black queen during the next move. So the only move for the white player is to capture the green pawn located at (2,\u20091). Similarly, the black queen doesn't have any other options but to capture the green pawn located at (2,\u20093), otherwise if it goes to the middle vertical line, it will be captured by the white queen.During the next move the same thing happens \u2014 neither the white, nor the black queen has other options rather than to capture green pawns situated above them. Thus, the white queen ends up on square (3,\u20091), and the black queen ends up on square (3,\u20093). In this situation the white queen has to capture any of the green pawns located on the middle vertical line, after that it will be captured by the black queen. Thus, the player who plays for the black queen wins.","prob_desc_output_spec":"On the first line print the answer to problem \u2014 string \"white\" or string \"black\", depending on who wins if the both players play optimally.  If the answer is \"white\", then you should also print two integers r and c representing the cell (r,\u2009c), where the first player should make his first move to win. If there are multiple such cells, print the one with the minimum r. If there are still multiple squares, print the one with the minimum c.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya decided to learn to play chess. Classic chess doesn't seem interesting to him, so he plays his own sort of chess.The queen is the piece that captures all squares on its vertical, horizontal and diagonal lines. If the cell is located on the same vertical, horizontal or diagonal line with queen, and the cell contains a piece of the enemy color, the queen is able to move to this square. After that the enemy's piece is removed from the board. The queen cannot move to a cell containing an enemy piece if there is some other piece between it and the queen. There is an n\u2009\u00d7\u2009n chessboard. We'll denote a cell on the intersection of the r-th row and c-th column as (r,\u2009c). The square (1,\u20091) contains the white queen and the square (1,\u2009n) contains the black queen. All other squares contain green pawns that don't belong to anyone.The players move in turns. The player that moves first plays for the white queen, his opponent plays for the black queen.On each move the player has to capture some piece with his queen (that is, move to a square that contains either a green pawn or the enemy queen). The player loses if either he cannot capture any piece during his move or the opponent took his queen during the previous move. Help Vasya determine who wins if both players play with an optimal strategy on the board n\u2009\u00d7\u2009n.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"16\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"10006\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"99966246\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"999999997\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"900001\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"775681\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"666666\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"12345\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"111111\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"346367\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"939698497\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"999999996\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}]","length":8,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":null,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"17 5 2\", \"6 5 2\", \"6 1 2\", \"6 2 2\", \"9 6 3\", \"10 6 3\", \"8 5 4\"]","prob_desc_input_spec":"The first and the only line contains three integers n, p, k (3\u2009\u2264\u2009n\u2009\u2264\u2009100; 1\u2009\u2264\u2009p\u2009\u2264\u2009n; 1\u2009\u2264\u2009k\u2009\u2264\u2009n)","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"526e2cce272e42a3220e33149b1c9c84","prob_desc_created_at":"1393687800","source_code":"n, p, k = map(int, input().split())\nans = \"\"\nfor num in range(p - k, p + k + 1):\n    if n >= num > 0:\n        if num == p:\n            ans += \"(\" + str(num) + \")\"\n        else:\n            ans += str(num)\n        if num != p + k:\n            ans += \" \"\n# print(ans)\nif p - k > 1:\n    ans = \"<< \" + ans\nif p + k < n:\n    ans += \" >>\"\nprint(ans)\n","prob_desc_sample_outputs":"[\"&lt;&lt; 3 4 (5) 6 7 &gt;&gt;\", \"&lt;&lt; 3 4 (5) 6\", \"(1) 2 3 &gt;&gt;\", \"1 (2) 3 4 &gt;&gt;\", \"&lt;&lt; 3 4 5 (6) 7 8 9\", \"&lt;&lt; 3 4 5 (6) 7 8 9 &gt;&gt;\", \"1 2 3 4 (5) 6 7 8\"]","lang_cluster":"Python","code_uid":"11776aaf5ff5dd915450cfbfe1cf7c19","prob_desc_notes":null,"prob_desc_output_spec":"Print the proper navigation. Follow the format of the output from the test samples.","prob_desc_output_to":"standard output","prob_desc_description":"User ainta is making a web site. This time he is going to make a navigation of the pages. In his site, there are n pages numbered by integers from 1 to n. Assume that somebody is on the p-th page now. The navigation will look like this: &lt;&lt; p\u2009-\u2009k p\u2009-\u2009k\u2009+\u20091 ... p\u2009-\u20091 (p) p\u2009+\u20091 ... p\u2009+\u2009k\u2009-\u20091 p\u2009+\u2009k &gt;&gt; When someone clicks the button \"&lt;&lt;\" he is redirected to page 1, and when someone clicks the button \"&gt;&gt;\" he is redirected to page n. Of course if someone clicks on a number, he is redirected to the corresponding page.There are some conditions in the navigation:  If page 1 is in the navigation, the button \"&lt;&lt;\" must not be printed.  If page n is in the navigation, the button \"&gt;&gt;\" must not be printed.  If the page number is smaller than 1 or greater than n, it must not be printed.  \u00a0You can see some examples of the navigations. Make a program that prints the navigation.","hidden_unit_tests":"[{\"input\": \"17 5 2\\r\\n\", \"output\": [\"<< 3 4 (5) 6 7 >>\", \"<< 3 4 (5) 6 7  >>\"]}, {\"input\": \"6 5 2\\r\\n\", \"output\": [\"<< 3 4 (5) 6\"]}, {\"input\": \"6 1 2\\r\\n\", \"output\": [\"(1) 2 3  >>\", \"(1) 2 3 >>\"]}, {\"input\": \"6 2 2\\r\\n\", \"output\": [\"1 (2) 3 4 >>\", \"1 (2) 3 4  >>\"]}, {\"input\": \"9 6 3\\r\\n\", \"output\": [\"<< 3 4 5 (6) 7 8 9\"]}, {\"input\": \"10 6 3\\r\\n\", \"output\": [\"<< 3 4 5 (6) 7 8 9  >>\", \"<< 3 4 5 (6) 7 8 9 >>\"]}, {\"input\": \"8 5 4\\r\\n\", \"output\": [\"1 2 3 4 (5) 6 7 8\"]}, {\"input\": \"100 10 20\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 (10) 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 >>\", \"1 2 3 4 5 6 7 8 9 (10) 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  >>\"]}, {\"input\": \"100 25 11\\r\\n\", \"output\": [\"<< 14 15 16 17 18 19 20 21 22 23 24 (25) 26 27 28 29 30 31 32 33 34 35 36 >>\", \"<< 14 15 16 17 18 19 20 21 22 23 24 (25) 26 27 28 29 30 31 32 33 34 35 36  >>\"]}, {\"input\": \"5 2 1\\r\\n\", \"output\": [\"1 (2) 3  >>\", \"1 (2) 3 >>\"]}, {\"input\": \"5 3 1\\r\\n\", \"output\": [\"<< 2 (3) 4 >>\", \"<< 2 (3) 4  >>\"]}, {\"input\": \"79 35 12\\r\\n\", \"output\": [\"<< 23 24 25 26 27 28 29 30 31 32 33 34 (35) 36 37 38 39 40 41 42 43 44 45 46 47 >>\", \"<< 23 24 25 26 27 28 29 30 31 32 33 34 (35) 36 37 38 39 40 41 42 43 44 45 46 47  >>\"]}, {\"input\": \"100 99 5\\r\\n\", \"output\": [\"<< 94 95 96 97 98 (99) 100\"]}, {\"input\": \"100 99 15\\r\\n\", \"output\": [\"<< 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 (99) 100\"]}, {\"input\": \"100 100 17\\r\\n\", \"output\": [\"<< 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 (100)\"]}, {\"input\": \"100 35 28\\r\\n\", \"output\": [\"<< 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 (35) 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 >>\", \"<< 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 (35) 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  >>\"]}, {\"input\": \"100 46 38\\r\\n\", \"output\": [\"<< 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 (46) 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 >>\", \"<< 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 (46) 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84  >>\"]}, {\"input\": \"100 46 48\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 (46) 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94  >>\", \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 (46) 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 >>\"]}, {\"input\": \"100 10 100\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 (10) 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"]}, {\"input\": \"3 1 1\\r\\n\", \"output\": [\"(1) 2 >>\", \"(1) 2  >>\"]}, {\"input\": \"3 2 1\\r\\n\", \"output\": [\"1 (2) 3\"]}, {\"input\": \"17 5 3\\r\\n\", \"output\": [\"<< 2 3 4 (5) 6 7 8  >>\", \"<< 2 3 4 (5) 6 7 8 >>\"]}, {\"input\": \"3 1 3\\r\\n\", \"output\": [\"(1) 2 3\"]}, {\"input\": \"7 5 1\\r\\n\", \"output\": [\"<< 4 (5) 6 >>\", \"<< 4 (5) 6  >>\"]}, {\"input\": \"5 5 5\\r\\n\", \"output\": [\"1 2 3 4 (5)\"]}, {\"input\": \"5 3 5\\r\\n\", \"output\": [\"1 2 (3) 4 5\"]}]","length":16,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\", \"2\", \"3\", \"8\"]","prob_desc_input_spec":"The first line of the input will contain a single integer, n (1\u2009\u2264\u2009n\u2009\u2264\u2009100\u2009000).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"757cd804aba01dc4bc108cb0722f68dc","prob_desc_created_at":"1454087400","source_code":"N = int(input())\n\nans = []\ncnt = 1\nwhile N != 0:\n    if N % 2 != 0:\n        ans.append(cnt)\n    N = N \/\/ 2\n    cnt += 1\nans.reverse()\nprint(\" \".join(map(str, ans)))\n","prob_desc_sample_outputs":"[\"1\", \"2\", \"2 1\", \"4\"]","lang_cluster":"Python","code_uid":"80ee1fd17f06b308bd81f2a76597b97b","prob_desc_notes":"NoteIn the first sample, we only have a single slime with value 1. The final state of the board is just a single slime with value 1.In the second sample, we perform the following steps:Initially we place a single slime in a row by itself. Thus, row is initially 1.Then, we will add another slime. The row is now 1 1. Since two rightmost slimes have the same values, we should replace these slimes with one with value 2. Thus, the final state of the board is 2.In the third sample, after adding the first two slimes, our row is 2. After adding one more slime, the row becomes 2 1.In the last sample, the steps look as follows:   1  2  2 1  3  3 1  3 2  3 2 1  4 ","prob_desc_output_spec":"Output a single line with k integers, where k is the number of slimes in the row after you've finished the procedure described in the problem statement. The i-th of these numbers should be the value of the i-th slime from the left.","prob_desc_output_to":"standard output","prob_desc_description":"Your friend recently gave you some slimes for your birthday. You have n slimes all initially with value 1.You are going to play a game with these slimes. Initially, you put a single slime by itself in a row. Then, you will add the other n\u2009-\u20091 slimes one by one. When you add a slime, you place it at the right of all already placed slimes. Then, while the last two slimes in the row have the same value v, you combine them together to create a slime with value v\u2009+\u20091.You would like to see what the final state of the row is after you've added all n slimes. Please print the values of the slimes in the row from left to right.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"2 1\", \"2  1\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"17  16  11  10  8  6\", \"17 16 11 10 8 6\"]}, {\"input\": \"12345\\r\\n\", \"output\": [\"14  13  6  5  4  1\", \"14 13 6 5 4 1\"]}, {\"input\": \"32\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"70958\\r\\n\", \"output\": [\"17  13  11  9  6  4  3  2\", \"17 13 11 9 6 4 3 2\"]}, {\"input\": \"97593\\r\\n\", \"output\": [\"17 15 14 13 12 11 9 6 5 4 1\", \"17  15  14  13  12  11  9  6  5  4  1\"]}, {\"input\": \"91706\\r\\n\", \"output\": [\"17  15  14  11  10  6  5  4  2\", \"17 15 14 11 10 6 5 4 2\"]}, {\"input\": \"85371\\r\\n\", \"output\": [\"17 15 12 11 9 7 6 5 4 2 1\", \"17  15  12  11  9  7  6  5  4  2  1\"]}, {\"input\": \"97205\\r\\n\", \"output\": [\"17  15  14  13  12  10  9  8  6  5  3  1\", \"17 15 14 13 12 10 9 8 6 5 3 1\"]}, {\"input\": \"34768\\r\\n\", \"output\": [\"16  11  10  9  8  7  5\", \"16 11 10 9 8 7 5\"]}, {\"input\": \"12705\\r\\n\", \"output\": [\"14 13 9 8 6 1\", \"14  13  9  8  6  1\"]}, {\"input\": \"30151\\r\\n\", \"output\": [\"15 14 13 11 9 8 7 3 2 1\", \"15  14  13  11  9  8  7  3  2  1\"]}, {\"input\": \"4974\\r\\n\", \"output\": [\"13  10  9  7  6  4  3  2\", \"13 10 9 7 6 4 3 2\"]}, {\"input\": \"32728\\r\\n\", \"output\": [\"15  14  13  12  11  10  9  8  7  5  4\", \"15 14 13 12 11 10 9 8 7 5 4\"]}, {\"input\": \"8192\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"65536\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"32\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"256\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"4096\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"33301\\r\\n\", \"output\": [\"16  10  5  3  1\", \"16 10 5 3 1\"]}, {\"input\": \"16725\\r\\n\", \"output\": [\"15 9 7 5 3 1\", \"15  9  7  5  3  1\"]}, {\"input\": \"149\\r\\n\", \"output\": [\"8 5 3 1\", \"8  5  3  1\"]}, {\"input\": \"16277\\r\\n\", \"output\": [\"14 13 12 11 10 9 8 5 3 1\", \"14  13  12  11  10  9  8  5  3  1\"]}, {\"input\": \"99701\\r\\n\", \"output\": [\"17 16 11 9 7 6 5 3 1\", \"17  16  11  9  7  6  5  3  1\"]}]","length":11,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"rock\\nrock\\nrock\", \"paper\\nrock\\nrock\", \"scissors\\nrock\\nrock\", \"scissors\\npaper\\nrock\"]","prob_desc_input_spec":"The first input line contains the name of the gesture that Uncle Fyodor showed, the second line shows which gesture Matroskin showed and the third line shows Sharic\u2019s gesture. ","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"072c7d29a1b338609a72ab6b73988282","prob_desc_created_at":"1292140800","source_code":"f = input()\nm = input()\ns = input()\nif (f == \"rock\" and m == \"scissors\" and s == \"scissors\") or (f == \"paper\" and m == \"rock\" and s == \"rock\") or (f == \"scissors\" and m == \"paper\" and s == \"paper\"):\n  print(\"F\")\nelif (m == \"rock\" and f == \"scissors\" and s == \"scissors\") or (m == \"paper\" and f == \"rock\" and s == \"rock\") or (m == \"scissors\" and f == \"paper\" and s == \"paper\"):\n  print(\"M\")\nelif (s == \"rock\" and m == \"scissors\" and f == \"scissors\") or (s == \"paper\" and m == \"rock\" and f == \"rock\") or (s == \"scissors\" and m == \"paper\" and f == \"paper\"):\n  print(\"S\")\nelse:\n  print(\"?\")","prob_desc_sample_outputs":"[\"?\", \"F\", \"?\", \"?\"]","lang_cluster":"Python","code_uid":"24a631fc931f2dffa740e04bfb9e01d5","prob_desc_notes":null,"prob_desc_output_spec":"Print \"F\" (without quotes) if Uncle Fyodor wins. Print \"M\" if Matroskin wins and \"S\" if Sharic wins. If it is impossible to find the winner, print \"?\".","prob_desc_output_to":"standard output","prob_desc_description":"Uncle Fyodor, Matroskin the Cat and Sharic the Dog live their simple but happy lives in Prostokvashino. Sometimes they receive parcels from Uncle Fyodor\u2019s parents and sometimes from anonymous benefactors, in which case it is hard to determine to which one of them the package has been sent. A photographic rifle is obviously for Sharic who loves hunting and fish is for Matroskin, but for whom was a new video game console meant? Every one of the three friends claimed that the present is for him and nearly quarreled. Uncle Fyodor had an idea how to solve the problem justly: they should suppose that the console was sent to all three of them and play it in turns. Everybody got relieved but then yet another burning problem popped up \u2014 who will play first? This time Matroskin came up with a brilliant solution, suggesting the most fair way to find it out: play rock-paper-scissors together. The rules of the game are very simple. On the count of three every player shows a combination with his hand (or paw). The combination corresponds to one of three things: a rock, scissors or paper. Some of the gestures win over some other ones according to well-known rules: the rock breaks the scissors, the scissors cut the paper, and the paper gets wrapped over the stone. Usually there are two players. Yet there are three friends, that\u2019s why they decided to choose the winner like that: If someone shows the gesture that wins over the other two players, then that player wins. Otherwise, another game round is required. Write a program that will determine the winner by the gestures they have shown.","hidden_unit_tests":"[{\"input\": \"rock\\r\\nrock\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\nrock\\r\\nrock\\r\\n\", \"output\": [\"F\"]}, {\"input\": \"scissors\\r\\nrock\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\npaper\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\npaper\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"rock\\r\\npaper\\r\\nrock\\r\\n\", \"output\": [\"M\"]}, {\"input\": \"rock\\r\\nscissors\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\nscissors\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\nscissors\\r\\nrock\\r\\n\", \"output\": [\"S\"]}, {\"input\": \"rock\\r\\nrock\\r\\npaper\\r\\n\", \"output\": [\"S\"]}, {\"input\": \"paper\\r\\nrock\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\nrock\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"rock\\r\\npaper\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\npaper\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\npaper\\r\\npaper\\r\\n\", \"output\": [\"F\"]}, {\"input\": \"rock\\r\\nscissors\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\nscissors\\r\\npaper\\r\\n\", \"output\": [\"M\"]}, {\"input\": \"scissors\\r\\nscissors\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"rock\\r\\nrock\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\nrock\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\nrock\\r\\nscissors\\r\\n\", \"output\": [\"M\"]}, {\"input\": \"rock\\r\\npaper\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\npaper\\r\\nscissors\\r\\n\", \"output\": [\"S\"]}, {\"input\": \"scissors\\r\\npaper\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"rock\\r\\nscissors\\r\\nscissors\\r\\n\", \"output\": [\"F\"]}, {\"input\": \"paper\\r\\nscissors\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\nscissors\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}]","length":11,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1 1 1\", \"4 6 6\"]","prob_desc_input_spec":"The first and the single line contains three space-separated integers \u2014 the areas of the parallelepiped's faces. The area's values are positive (\u2009&gt;\u20090) and do not exceed 104. It is guaranteed that there exists at least one parallelepiped that satisfies the problem statement.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"c0a3290be3b87f3a232ec19d4639fefc","prob_desc_created_at":"1347809400","source_code":"a, b, c = map(int, input().split())\nx = (a * c * b) ** .5\nprint(4 * int(x \/ a + x \/ b + x \/ c))","prob_desc_sample_outputs":"[\"12\", \"28\"]","lang_cluster":"Python","code_uid":"df69e1532ce13cf3008476293707cf80","prob_desc_notes":"NoteIn the first sample the parallelepiped has sizes 1\u2009\u00d7\u20091\u2009\u00d7\u20091, in the second one\u00a0\u2014 2\u2009\u00d7\u20092\u2009\u00d7\u20093.","prob_desc_output_spec":"Print a single number \u2014 the sum of all edges of the parallelepiped.","prob_desc_output_to":"standard output","prob_desc_description":"You've got a rectangular parallelepiped with integer edge lengths. You know the areas of its three faces that have a common vertex. Your task is to find the sum of lengths of all 12 edges of this parallelepiped.","hidden_unit_tests":"[{\"input\": \"1 1 1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"4 6 6\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"20 10 50\\r\\n\", \"output\": [\"68\"]}, {\"input\": \"9 4 36\\r\\n\", \"output\": [\"56\"]}, {\"input\": \"324 9 36\\r\\n\", \"output\": [\"184\"]}, {\"input\": \"1333 93 129\\r\\n\", \"output\": [\"308\"]}, {\"input\": \"1022 584 112\\r\\n\", \"output\": [\"380\"]}, {\"input\": \"66 174 319\\r\\n\", \"output\": [\"184\"]}, {\"input\": \"912 276 1748\\r\\n\", \"output\": [\"444\"]}, {\"input\": \"65 156 60\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"1 10000 10000\\r\\n\", \"output\": [\"40008\"]}, {\"input\": \"1485 55 27\\r\\n\", \"output\": [\"332\"]}, {\"input\": \"152 108 4104\\r\\n\", \"output\": [\"528\"]}, {\"input\": \"1656 6900 1350\\r\\n\", \"output\": [\"740\"]}, {\"input\": \"12 14 42\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"615 18 1230\\r\\n\", \"output\": [\"856\"]}, {\"input\": \"680 60 408\\r\\n\", \"output\": [\"336\"]}, {\"input\": \"644 966 6\\r\\n\", \"output\": [\"1308\"]}, {\"input\": \"1 432 432\\r\\n\", \"output\": [\"1736\"]}, {\"input\": \"2239 2239 1\\r\\n\", \"output\": [\"8964\"]}, {\"input\": \"4106 8212 2\\r\\n\", \"output\": [\"16436\"]}, {\"input\": \"10000 10000 10000\\r\\n\", \"output\": [\"1200\"]}, {\"input\": \"3623 3623 1\\r\\n\", \"output\": [\"14500\"]}, {\"input\": \"9801 9801 9801\\r\\n\", \"output\": [\"1188\"]}, {\"input\": \"10000 1 10000\\r\\n\", \"output\": [\"40008\"]}, {\"input\": \"9 9 9\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"9801 9702 9702\\r\\n\", \"output\": [\"1184\"]}]","length":3,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n1 2 6\", \"10\\n1 2 3 4 5\"]","prob_desc_input_spec":"The first line of the input contains one integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100, n is even) \u2014 the size of the chessboard.  The second line of the input contains  integer numbers  (1\u2009\u2264\u2009pi\u2009\u2264\u2009n) \u2014 initial positions of the pieces. It is guaranteed that all the positions are distinct.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"0efe9afd8e6be9e00f7949be93f0ca1a","prob_desc_created_at":"1526913900","source_code":"n = int(input())\npieces = list(map(int, input().split(' ')))\npieces.sort()\ndef even():\n    diffEven = 0\n    for i in range(len(pieces)):\n        diffEven += abs(pieces[i] - ((i+1)*2))\n        \n    return(diffEven)\n    \ndef odd():\n    diffOdd = 0\n    for j in range(len(pieces)):\n        diffOdd += abs(pieces[j] - ((j*2)+1))\n        \n    return(diffOdd)\n\nwhite = even()\nblack = odd()\n\nprint(min(black, white))\n        ","prob_desc_sample_outputs":"[\"2\", \"10\"]","lang_cluster":"Python","code_uid":"e567b9b9502a54ff54e9a6846087d2da","prob_desc_notes":"NoteIn the first example the only possible strategy is to move the piece at the position 6 to the position 5 and move the piece at the position 2 to the position 3. Notice that if you decide to place the pieces in the white cells the minimum number of moves will be 3.In the second example the possible strategy is to move  in 4 moves, then  in 3 moves,  in 2 moves and  in 1 move.","prob_desc_output_spec":"Print one integer \u2014 the minimum number of moves you have to make to place all the pieces in the cells of the same color.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a chessboard of size 1\u2009\u00d7\u2009n. It is guaranteed that n is even. The chessboard is painted like this: \"BWBW...BW\".Some cells of the board are occupied by the chess pieces. Each cell contains no more than one chess piece. It is known that the total number of pieces equals to .In one step you can move one of the pieces one cell to the left or to the right. You cannot move pieces beyond the borders of the board. You also cannot move pieces to the cells that are already occupied.Your task is to place all the pieces in the cells of the same color using the minimum number of moves (all the pieces must occupy only the black cells or only the white cells after all the moves are made).","hidden_unit_tests":"[{\"input\": \"6\\r\\n1 2 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n1 2 3 4 5\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"2\\r\\n2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n93 54 57 61 68 66 70 96 64 82 80 75 69 77 76 94 67 86 90 73 74 58 100 83 92 89 56 99 88 59 95 72 81 51 85 71 97 60 91 63 65 98 79 84 53 62 87 55 52 78\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"100\\r\\n41 13 29 11 25 15 6 23 28 50 48 17 3 9 44 24 5 19 34 22 33 32 20 16 35 37 4 10 46 2 39 40 47 49 36 42 1 30 43 21 14 7 18 45 31 8 12 26 27 38\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"96\\r\\n12 58 70 19 65 61 41 46 15 92 64 72 9 26 53 37 2 3 1 40 10 8 94 66 50 34 36 96 47 78 7 57 5 6 17 69 28 88 89 49 55 81 35 22 25 79 86 59\\r\\n\", \"output\": [\"152\"]}, {\"input\": \"10\\r\\n5 6 7 8 9\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"20\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"45\"]}, {\"input\": \"10\\r\\n6 7 8 9 10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"10\\r\\n9 8 7 6 5\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n1 5 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"12\\r\\n1 7 8 9 10 12\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n1 4 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"24\\r\\n10 21 15 3 11 4 18 24 16 22 14 9\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"20\\r\\n3 4 6 7 8 10 11 13 14 17\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10\\r\\n10 9 8 1 5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n84 10 26 79 58 93 67 85 7 2 99 4 47 45 75 22 32 82 65 53 63 49 42 52 12 69 86 46 25 76 40 15 13 78 8 81 62 28 60 21 27 80 98 56 3 36 54 16 50 43\\r\\n\", \"output\": [\"104\"]}, {\"input\": \"10\\r\\n1 7 8 9 10\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"10\\r\\n1 4 6 8 10\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"80\\r\\n41 70 18 53 32 79 51 49 21 27 47 65 50 15 62 60 5 40 14 25 64 9 19 58 38 76 66 52 17 34 13 2 80 43 3 42 33 36 6 72\\r\\n\", \"output\": [\"47\"]}, {\"input\": \"50\\r\\n27 42 41 4 10 45 44 26 49 50 17 28 2 36 18 39 23 12 21 24 19 29 22 40 37\\r\\n\", \"output\": [\"59\"]}, {\"input\": \"10\\r\\n2 3 4 5 6\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n3 5 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100\\r\\n9 63 62 88 3 67 54 33 79 51 71 80 37 46 43 57 69 17 34 6 18 40 59 83 76 86 8 55 90 89 45 42 28 98 30 38 77 91 73 58 23 61 41 65 64 93 14 44 16 24\\r\\n\", \"output\": [\"160\"]}, {\"input\": \"10\\r\\n1 6 7 8 9\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"6\\r\\n3 4 5\\r\\n\", \"output\": [\"2\"]}]","length":22,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n1 5 5 1 6 1\", \"5\\n2 4 2 4 4\", \"5\\n6 6 6 6 6\"]","prob_desc_input_spec":"The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 50$$$) \u2014 the number of elements in Petya's array. The following line contains a sequence $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 1\\,000$$$) \u2014 the Petya's array.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"1b9d3dfcc2353eac20b84c75c27fab5a","prob_desc_created_at":"1582202100","source_code":"input()\na = input().split()\nb = set(a)\nc = []\n\nfor i in a[::-1]:\n    if i in b:\n        c.insert(0, i)\n        b.remove(i)\n\nprint(len(c))\nprint(\" \".join(c))","prob_desc_sample_outputs":"[\"3\\n5 6 1\", \"2\\n2 4\", \"1\\n6\"]","lang_cluster":"Python","code_uid":"6559fef6639b6cbbd788d7363509e415","prob_desc_notes":"NoteIn the first example you should remove two integers $$$1$$$, which are in the positions $$$1$$$ and $$$4$$$. Also you should remove the integer $$$5$$$, which is in the position $$$2$$$.In the second example you should remove integer $$$2$$$, which is in the position $$$1$$$, and two integers $$$4$$$, which are in the positions $$$2$$$ and $$$4$$$.In the third example you should remove four integers $$$6$$$, which are in the positions $$$1$$$, $$$2$$$, $$$3$$$ and $$$4$$$.","prob_desc_output_spec":"In the first line print integer $$$x$$$ \u2014 the number of elements which will be left in Petya's array after he removed the duplicates. In the second line print $$$x$$$ integers separated with a space \u2014 Petya's array after he removed the duplicates. For each unique element only the rightmost entry should be left.","prob_desc_output_to":"standard output","prob_desc_description":"Petya has an array $$$a$$$ consisting of $$$n$$$ integers. He wants to remove duplicate (equal) elements.Petya wants to leave only the rightmost entry (occurrence) for each element of the array. The relative order of the remaining unique elements should not be changed.","hidden_unit_tests":"[{\"input\": \"6\\r\\n1 5 5 1 6 1\\r\\n\", \"output\": [\"3\\n5 6 1\\r\\n\", \"3\\r\\n5 6 1 \\r\\n\", \"3\\r\\n5\\r\\n6\\r\\n1\\r\\n\", \"3\\r\\n5 6 1\", \"3\\r\\n5  6  1  \", \"3\\r\\n5 6 1 \", \"3\\r\\n 5 6 1\", \"3\\r\\n5 6 1\\r\\n\", \"3\\r\\n5 6 1 \\n\", \"3\\n5 6 1\", \"3\\n5 6 1 \"]}, {\"input\": \"5\\r\\n2 4 2 4 4\\r\\n\", \"output\": [\"2\\r\\n2 4\\r\\n\", \"2\\r\\n2 4 \", \"2\\r\\n2 4\", \"2\\r\\n2\\r\\n4\\r\\n\", \"2\\n2 4\", \"2\\r\\n2  4  \", \"2\\r\\n2 4 \\n\", \"2\\n2 4\\r\\n\", \"2\\r\\n2 4 \\r\\n\", \"2\\n2 4 \", \"2\\r\\n 2 4\"]}, {\"input\": \"5\\r\\n6 6 6 6 6\\r\\n\", \"output\": [\"1\\r\\n6 \", \"1\\r\\n6\", \"1\\r\\n6 \\r\\n\", \"1\\n6\\r\\n\", \"1\\r\\n6\\r\\n\", \"1\\r\\n 6\", \"1\\r\\n6  \", \"1\\r\\n6 \\n\", \"1\\n6\", \"1\\n6 \"]}, {\"input\": \"7\\r\\n1 2 3 4 2 2 3\\r\\n\", \"output\": [\"4\\r\\n1 4 2 3 \\n\", \"4\\r\\n1 4 2 3\\r\\n\", \"4\\r\\n1 4 2 3 \", \"4\\n1 4 2 3\\r\\n\", \"4\\r\\n1\\r\\n4\\r\\n2\\r\\n3\\r\\n\", \"4\\r\\n1 4 2 3 \\r\\n\", \"4\\r\\n1  4  2  3  \", \"4\\n1 4 2 3 \", \"4\\r\\n1 4 2 3\", \"4\\r\\n 1 4 2 3\", \"4\\n1 4 2 3\"]}, {\"input\": \"9\\r\\n100 100 100 99 99 99 100 100 100\\r\\n\", \"output\": [\"2\\n99 100\", \"2\\r\\n99 100 \\r\\n\", \"2\\r\\n99 100 \", \"2\\r\\n99 100\", \"2\\r\\n99\\r\\n100\\r\\n\", \"2\\r\\n99 100\\r\\n\", \"2\\r\\n99 100 \\n\", \"2\\n99 100\\r\\n\", \"2\\n99 100 \", \"2\\r\\n 99 100\", \"2\\r\\n99  100  \"]}, {\"input\": \"27\\r\\n489 489 487 488 750 230 43 645 42 42 489 42 973 42 973 750 645 355 868 112 868 489 750 489 887 489 868\\r\\n\", \"output\": [\"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868\", \"13\\r\\n487  488  230  43  42  973  645  355  112  750  887  489  868  \", \"13\\r\\n487\\r\\n488\\r\\n230\\r\\n43\\r\\n42\\r\\n973\\r\\n645\\r\\n355\\r\\n112\\r\\n750\\r\\n887\\r\\n489\\r\\n868\\r\\n\", \"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868 \", \"13\\r\\n 487 488 230 43 42 973 645 355 112 750 887 489 868\", \"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868 \\n\", \"13\\n487 488 230 43 42 973 645 355 112 750 887 489 868\", \"13\\n487 488 230 43 42 973 645 355 112 750 887 489 868\\r\\n\", \"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868\\r\\n\", \"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868 \\r\\n\", \"13\\n487 488 230 43 42 973 645 355 112 750 887 489 868 \"]}, {\"input\": \"40\\r\\n151 421 421 909 117 222 909 954 227 421 227 954 954 222 421 227 421 421 421 151 421 227 222 222 222 222 421 183 421 227 421 954 222 421 954 421 222 421 909 421\\r\\n\", \"output\": [\"8\\r\\n117\\r\\n151\\r\\n183\\r\\n227\\r\\n954\\r\\n222\\r\\n909\\r\\n421\\r\\n\", \"8\\r\\n117 151 183 227 954 222 909 421 \\r\\n\", \"8\\r\\n117 151 183 227 954 222 909 421\", \"8\\n117 151 183 227 954 222 909 421\\r\\n\", \"8\\r\\n117 151 183 227 954 222 909 421 \\n\", \"8\\n117 151 183 227 954 222 909 421 \", \"8\\r\\n117 151 183 227 954 222 909 421 \", \"8\\r\\n 117 151 183 227 954 222 909 421\", \"8\\r\\n117  151  183  227  954  222  909  421  \", \"8\\r\\n117 151 183 227 954 222 909 421\\r\\n\", \"8\\n117 151 183 227 954 222 909 421\"]}, {\"input\": \"48\\r\\n2 2 2 903 903 2 726 2 2 2 2 2 2 2 2 2 2 726 2 2 2 2 2 2 2 726 2 2 2 2 62 2 2 2 2 2 2 2 2 726 62 726 2 2 2 903 903 2\\r\\n\", \"output\": [\"4\\n62 726 903 2 \", \"4\\r\\n62 726 903 2\", \"4\\r\\n62 726 903 2 \\r\\n\", \"4\\r\\n 62 726 903 2\", \"4\\r\\n62 726 903 2\\r\\n\", \"4\\n62 726 903 2\", \"4\\n62 726 903 2\\r\\n\", \"4\\r\\n62 726 903 2 \", \"4\\r\\n62\\r\\n726\\r\\n903\\r\\n2\\r\\n\", \"4\\r\\n62 726 903 2 \\n\", \"4\\r\\n62  726  903  2  \"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\\r\\n1\", \"1\\r\\n 1\", \"1\\r\\n1 \\r\\n\", \"1\\r\\n1\\r\\n\", \"1\\n1 \", \"1\\r\\n1 \\n\", \"1\\r\\n1  \", \"1\\n1\\r\\n\", \"1\\n1\", \"1\\r\\n1 \"]}, {\"input\": \"13\\r\\n5 37 375 5 37 33 37 375 37 2 3 3 2\\r\\n\", \"output\": [\"6\\n5 33 375 37 3 2\", \"6\\r\\n5 33 375 37 3 2\\r\\n\", \"6\\r\\n5 33 375 37 3 2\", \"6\\n5 33 375 37 3 2 \", \"6\\r\\n5 33 375 37 3 2 \\r\\n\", \"6\\r\\n5 33 375 37 3 2 \", \"6\\r\\n5 33 375 37 3 2 \\n\", \"6\\r\\n5  33  375  37  3  2  \", \"6\\r\\n 5 33 375 37 3 2\", \"6\\n5 33 375 37 3 2\\r\\n\", \"6\\r\\n5\\r\\n33\\r\\n375\\r\\n37\\r\\n3\\r\\n2\\r\\n\"]}, {\"input\": \"50\\r\\n1 2 3 4 5 4 3 2 1 2 3 2 1 4 5 5 4 3 2 1 1 2 3 4 5 4 3 2 1 2 3 2 1 4 5 5 4 3 2 1 4 3 2 5 1 6 6 6 6 6\\r\\n\", \"output\": [\"6\\r\\n4\\r\\n3\\r\\n2\\r\\n5\\r\\n1\\r\\n6\\r\\n\", \"6\\n4 3 2 5 1 6\", \"6\\r\\n4 3 2 5 1 6 \", \"6\\r\\n4 3 2 5 1 6\\r\\n\", \"6\\r\\n 4 3 2 5 1 6\", \"6\\r\\n4 3 2 5 1 6 \\n\", \"6\\r\\n4 3 2 5 1 6 \\r\\n\", \"6\\r\\n4 3 2 5 1 6\", \"6\\n4 3 2 5 1 6 \", \"6\\r\\n4  3  2  5  1  6  \", \"6\\n4 3 2 5 1 6\\r\\n\"]}, {\"input\": \"47\\r\\n233 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"2\\n233 1\\r\\n\", \"2\\r\\n233 1\", \"2\\n233 1\", \"2\\r\\n233\\r\\n1\\r\\n\", \"2\\r\\n233 1 \", \"2\\r\\n233 1\\r\\n\", \"2\\r\\n233  1  \", \"2\\r\\n 233 1\", \"2\\r\\n233 1 \\r\\n\", \"2\\r\\n233 1 \\n\", \"2\\n233 1 \"]}, {\"input\": \"47\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1\\r\\n1\", \"1\\r\\n 1\", \"1\\r\\n1 \\r\\n\", \"1\\r\\n1\\r\\n\", \"1\\n1 \", \"1\\r\\n1 \\n\", \"1\\r\\n1  \", \"1\\n1\\r\\n\", \"1\\n1\", \"1\\r\\n1 \"]}, {\"input\": \"2\\r\\n964 964\\r\\n\", \"output\": [\"1\\n964\\r\\n\", \"1\\n964 \", \"1\\r\\n964 \\r\\n\", \"1\\r\\n964\\r\\n\", \"1\\r\\n964  \", \"1\\r\\n964 \\n\", \"1\\r\\n964 \", \"1\\r\\n964\", \"1\\n964\", \"1\\r\\n 964\"]}, {\"input\": \"2\\r\\n1000 1000\\r\\n\", \"output\": [\"1\\r\\n 1000\", \"1\\n1000\", \"1\\r\\n1000 \\n\", \"1\\n1000 \", \"1\\r\\n1000\", \"1\\r\\n1000\\r\\n\", \"1\\r\\n1000 \", \"1\\r\\n1000  \", \"1\\r\\n1000 \\r\\n\", \"1\\n1000\\r\\n\"]}, {\"input\": \"1\\r\\n1000\\r\\n\", \"output\": [\"1\\r\\n 1000\", \"1\\n1000\", \"1\\r\\n1000 \\n\", \"1\\n1000 \", \"1\\r\\n1000\", \"1\\r\\n1000\\r\\n\", \"1\\r\\n1000 \", \"1\\r\\n1000  \", \"1\\r\\n1000 \\r\\n\", \"1\\n1000\\r\\n\"]}, {\"input\": \"45\\r\\n991 991 996 996 992 992 999 1000 998 1000 992 999 996 999 991 991 999 993 992 999 1000 997 992 999 996 991 994 996 991 999 1000 993 999 997 999 992 991 997 991 998 998 995 998 994 993\\r\\n\", \"output\": [\"10\\r\\n996\\r\\n1000\\r\\n999\\r\\n992\\r\\n997\\r\\n991\\r\\n995\\r\\n998\\r\\n994\\r\\n993\\r\\n\", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993 \\r\\n\", \"10\\n996 1000 999 992 997 991 995 998 994 993 \", \"10\\r\\n 996 1000 999 992 997 991 995 998 994 993\", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993 \\n\", \"10\\n996 1000 999 992 997 991 995 998 994 993\\r\\n\", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993 \", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993\\r\\n\", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993\", \"10\\n996 1000 999 992 997 991 995 998 994 993\", \"10\\r\\n996  1000  999  992  997  991  995  998  994  993  \"]}, {\"input\": \"6\\r\\n994 993 1000 998 991 994\\r\\n\", \"output\": [\"5\\r\\n993  1000  998  991  994  \", \"5\\n993 1000 998 991 994\", \"5\\r\\n993\\r\\n1000\\r\\n998\\r\\n991\\r\\n994\\r\\n\", \"5\\r\\n993 1000 998 991 994 \\r\\n\", \"5\\r\\n993 1000 998 991 994 \", \"5\\r\\n993 1000 998 991 994\\r\\n\", \"5\\r\\n993 1000 998 991 994 \\n\", \"5\\r\\n 993 1000 998 991 994\", \"5\\r\\n993 1000 998 991 994\", \"5\\n993 1000 998 991 994 \", \"5\\n993 1000 998 991 994\\r\\n\"]}, {\"input\": \"48\\r\\n992 995 992 991 994 992 995 999 996 993 999 995 993 992 1000 992 997 996 991 993 992 998 998 998 999 995 992 992 993 992 992 995 996 995 997 991 997 991 999 994 994 997 1000 998 1000 992 1000 999\\r\\n\", \"output\": [\"10\\r\\n993\\r\\n996\\r\\n995\\r\\n991\\r\\n994\\r\\n997\\r\\n998\\r\\n992\\r\\n1000\\r\\n999\\r\\n\", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999\", \"10\\n993 996 995 991 994 997 998 992 1000 999\\r\\n\", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999 \\n\", \"10\\n993 996 995 991 994 997 998 992 1000 999\", \"10\\r\\n993  996  995  991  994  997  998  992  1000  999  \", \"10\\r\\n 993 996 995 991 994 997 998 992 1000 999\", \"10\\n993 996 995 991 994 997 998 992 1000 999 \", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999\\r\\n\", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999 \", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999 \\r\\n\"]}, {\"input\": \"3\\r\\n6 6 3\\r\\n\", \"output\": [\"2\\n6 3\", \"2\\n6 3 \", \"2\\r\\n6 3\", \"2\\r\\n6 3 \\n\", \"2\\r\\n6 3 \", \"2\\r\\n6\\r\\n3\\r\\n\", \"2\\r\\n6 3 \\r\\n\", \"2\\n6 3\\r\\n\", \"2\\r\\n6  3  \", \"2\\r\\n6 3\\r\\n\", \"2\\r\\n 6 3\"]}, {\"input\": \"36\\r\\n999 1000 993 993 1000 999 996 997 998 995 995 997 999 995 1000 998 998 994 993 998 994 999 1000 995 996 994 991 991 999 996 993 999 996 998 991 997\\r\\n\", \"output\": [\"9\\n1000 995 994 993 999 996 998 991 997\\r\\n\", \"9\\n1000 995 994 993 999 996 998 991 997\", \"9\\r\\n1000 995 994 993 999 996 998 991 997 \\r\\n\", \"9\\r\\n1000 995 994 993 999 996 998 991 997 \", \"9\\n1000 995 994 993 999 996 998 991 997 \", \"9\\r\\n1000 995 994 993 999 996 998 991 997\\r\\n\", \"9\\r\\n1000\\r\\n995\\r\\n994\\r\\n993\\r\\n999\\r\\n996\\r\\n998\\r\\n991\\r\\n997\\r\\n\", \"9\\r\\n1000  995  994  993  999  996  998  991  997  \", \"9\\r\\n1000 995 994 993 999 996 998 991 997 \\n\", \"9\\r\\n 1000 995 994 993 999 996 998 991 997\", \"9\\r\\n1000 995 994 993 999 996 998 991 997\"]}, {\"input\": \"49\\r\\n991 997 995 991 995 998 994 996 997 991 998 993 992 999 996 995 991 991 999 997 995 993 997 1000 997 993 993 994 999 994 992 991 1000 996 994 996 996 999 992 992 1000 991 997 993 991 994 997 991 996\\r\\n\", \"output\": [\"10\\r\\n998 995 999 992 1000 993 994 997 991 996 \\r\\n\", \"10\\r\\n998 995 999 992 1000 993 994 997 991 996 \\n\", \"10\\r\\n 998 995 999 992 1000 993 994 997 991 996\", \"10\\r\\n998\\r\\n995\\r\\n999\\r\\n992\\r\\n1000\\r\\n993\\r\\n994\\r\\n997\\r\\n991\\r\\n996\\r\\n\", \"10\\n998 995 999 992 1000 993 994 997 991 996 \", \"10\\r\\n998  995  999  992  1000  993  994  997  991  996  \", \"10\\n998 995 999 992 1000 993 994 997 991 996\", \"10\\r\\n998 995 999 992 1000 993 994 997 991 996 \", \"10\\r\\n998 995 999 992 1000 993 994 997 991 996\\r\\n\", \"10\\n998 995 999 992 1000 993 994 997 991 996\\r\\n\", \"10\\r\\n998 995 999 992 1000 993 994 997 991 996\"]}, {\"input\": \"2\\r\\n1000 999\\r\\n\", \"output\": [\"2\\n1000 999\\r\\n\", \"2\\n1000 999 \", \"2\\r\\n1000\\r\\n999\\r\\n\", \"2\\r\\n1000 999 \", \"2\\r\\n1000  999  \", \"2\\r\\n 1000 999\", \"2\\r\\n1000 999 \\r\\n\", \"2\\r\\n1000 999\", \"2\\r\\n1000 999 \\n\", \"2\\n1000 999\", \"2\\r\\n1000 999\\r\\n\"]}, {\"input\": \"28\\r\\n997 994 991 994 994 995 1000 992 995 994 994 995 991 996 991 996 991 999 999 993 994 997 995 992 991 992 998 1000\\r\\n\", \"output\": [\"10\\n996 999 993 994 997 995 991 992 998 1000\\r\\n\", \"10\\r\\n 996 999 993 994 997 995 991 992 998 1000\", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000\\r\\n\", \"10\\n996 999 993 994 997 995 991 992 998 1000\", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000 \", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000\", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000 \\n\", \"10\\r\\n996\\r\\n999\\r\\n993\\r\\n994\\r\\n997\\r\\n995\\r\\n991\\r\\n992\\r\\n998\\r\\n1000\\r\\n\", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000 \\r\\n\", \"10\\n996 999 993 994 997 995 991 992 998 1000 \", \"10\\r\\n996  999  993  994  997  995  991  992  998  1000  \"]}, {\"input\": \"15\\r\\n991 995 995 1000 991 993 997 998 1000 994 1000 992 991 995 992\\r\\n\", \"output\": [\"8\\r\\n993 997 998 994 1000 991 995 992\\r\\n\", \"8\\r\\n993  997  998  994  1000  991  995  992  \", \"8\\r\\n993 997 998 994 1000 991 995 992 \\r\\n\", \"8\\n993 997 998 994 1000 991 995 992\", \"8\\r\\n993\\r\\n997\\r\\n998\\r\\n994\\r\\n1000\\r\\n991\\r\\n995\\r\\n992\\r\\n\", \"8\\r\\n993 997 998 994 1000 991 995 992 \", \"8\\n993 997 998 994 1000 991 995 992\\r\\n\", \"8\\r\\n993 997 998 994 1000 991 995 992\", \"8\\n993 997 998 994 1000 991 995 992 \", \"8\\r\\n993 997 998 994 1000 991 995 992 \\n\", \"8\\r\\n 993 997 998 994 1000 991 995 992\"]}, {\"input\": \"6\\r\\n1000 1 1000 2 1000 1\\r\\n\", \"output\": [\"3\\r\\n2 1000 1 \", \"3\\n2 1000 1\\r\\n\", \"3\\r\\n 2 1000 1\", \"3\\r\\n2\\r\\n1000\\r\\n1\\r\\n\", \"3\\r\\n2  1000  1  \", \"3\\r\\n2 1000 1\", \"3\\n2 1000 1 \", \"3\\r\\n2 1000 1 \\r\\n\", \"3\\n2 1000 1\", \"3\\r\\n2 1000 1\\r\\n\", \"3\\r\\n2 1000 1 \\n\"]}, {\"input\": \"6\\r\\n1000 1 1000 2 1 1000\\r\\n\", \"output\": [\"3\\n2 1 1000\", \"3\\r\\n2 1 1000 \\r\\n\", \"3\\r\\n2  1  1000  \", \"3\\r\\n2\\r\\n1\\r\\n1000\\r\\n\", \"3\\n2 1 1000\\r\\n\", \"3\\r\\n2 1 1000\", \"3\\r\\n2 1 1000\\r\\n\", \"3\\r\\n 2 1 1000\", \"3\\r\\n2 1 1000 \\n\", \"3\\r\\n2 1 1000 \", \"3\\n2 1 1000 \"]}, {\"input\": \"7\\r\\n1 1000 1 999 1000 1 2\\r\\n\", \"output\": [\"4\\r\\n999 1000 1 2 \\r\\n\", \"4\\n999 1000 1 2\", \"4\\r\\n 999 1000 1 2\", \"4\\r\\n999 1000 1 2 \", \"4\\n999 1000 1 2\\r\\n\", \"4\\n999 1000 1 2 \", \"4\\r\\n999\\r\\n1000\\r\\n1\\r\\n2\\r\\n\", \"4\\r\\n999 1000 1 2\", \"4\\r\\n999 1000 1 2 \\n\", \"4\\r\\n999  1000  1  2  \", \"4\\r\\n999 1000 1 2\\r\\n\"]}]","length":12,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"abcd\", \"bbb\", \"yzyz\"]","prob_desc_input_spec":"The first line of input will be a single string s (1\u2009\u2264\u2009|s|\u2009\u2264\u200950), the word Hongcow initially learns how to spell. The string s consists only of lowercase English letters ('a'\u2013'z').","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"8909ac99ed4ab2ee4d681ec864c7831e","prob_desc_created_at":"1481992500","source_code":"s, v = input(), set()\nwhile s not in v:\n    v.add(s)\n    s = s[-1] + s[:-1]\nprint(len(v))","prob_desc_sample_outputs":"[\"4\", \"1\", \"2\"]","lang_cluster":"Python","code_uid":"afdee83119fbbfcedecabc7e35206cbf","prob_desc_notes":"NoteFor the first sample, the strings Hongcow can generate are \"abcd\", \"dabc\", \"cdab\", and \"bcda\".For the second sample, no matter how many times Hongcow does the cyclic shift, Hongcow can only generate \"bbb\".For the third sample, the two strings Hongcow can generate are \"yzyz\" and \"zyzy\".","prob_desc_output_spec":"Output a single integer equal to the number of distinct strings that Hongcow can obtain by applying the cyclic shift arbitrarily many times to the given string.","prob_desc_output_to":"standard output","prob_desc_description":"Hongcow is learning to spell! One day, his teacher gives him a word that he needs to learn to spell. Being a dutiful student, he immediately learns how to spell the word.Hongcow has decided to try to make new words from this one. He starts by taking the word he just learned how to spell, and moves the last character of the word to the beginning of the word. He calls this a cyclic shift. He can apply cyclic shift many times. For example, consecutively applying cyclic shift operation to the word \"abracadabra\" Hongcow will get words \"aabracadabr\", \"raabracadab\" and so on.Hongcow is now wondering how many distinct words he can generate by doing the cyclic shift arbitrarily many times. The initial string is also counted.","hidden_unit_tests":"[{\"input\": \"abcd\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"bbb\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"yzyz\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxy\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"zclkjadoprqronzclkjadoprqronzclkjadoprqron\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"y\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"ervbfotfedpozygoumbmxeaqegouaqqzqerlykhmvxvvlcaos\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"zyzzzyyzyyyzyyzyzyzyzyzzzyyyzzyzyyzzzzzyyyzzzzyzyy\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"zzfyftdezzfyftdezzfyftdezzfyftdezzfyftdezzfyftde\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"yehcqdlllqpuxdsaicyjjxiylahgxbygmsopjbxhtimzkashs\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"yyyyzzzyzzzyzyzyzyyyyyzzyzyzyyyyyzyzyyyzyzzyyzzzz\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"zkqcrhzlzsnwzkqcrhzlzsnwzkqcrhzlzsnwzkqcrhzlzsnw\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"xxyxxyxxyxxyxxyxxyxxyxxyxxyxxyxxyxxyxxyxxyxxyxxy\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"aaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaab\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"aabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaaba\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"pqqpqqpqqpqqpqqpqqpqqpqqpqqpqqpqqppqppqppqppqppq\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"zxkljaqzxkljaqzxkljaqzxkljaqzxrljaqzxkljaqzxkljaq\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"abcddcba\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"aabaabaabaacaabaabaabaacaabaabaabaacaabaabaabaac\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"aabaabcaabaabcdaabaabcaabaabcd\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"ababaababaaababaababaaaababaababaaababaababaaaa\\r\\n\", \"output\": [\"47\"]}, {\"input\": \"ababaababaaababaababaaaababaababaaababaababaaa\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"aaababaab\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"aba\\r\\n\", \"output\": [\"3\"]}]","length":5,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6 3\", \"1 2\", \"4 6\"]","prob_desc_input_spec":"The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq n \\leq 10^6$$$, $$$2 \\leq k \\leq 1000$$$).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"ed0ebc1e484fcaea875355b5b7944c57","prob_desc_created_at":"1545572100","source_code":"n,k=map(int,input().split())\nd=k-1\nwhile(d>=1):\n    z=n\/d\n    \n    if(z-n\/\/d==0):\n        \n        print(n\/\/d*k+d)\n        break\n    d-=1","prob_desc_sample_outputs":"[\"11\", \"3\", \"10\"]","lang_cluster":"Python","code_uid":"1fa22f897643fb90559c0eda1b3ebf8a","prob_desc_notes":"NoteThe result of integer division $$$a~\\mathrm{div}~b$$$ is equal to the largest integer $$$c$$$ such that $$$b \\cdot c \\leq a$$$. $$$a$$$ modulo $$$b$$$ (shortened $$$a \\bmod b$$$) is the only integer $$$c$$$ such that $$$0 \\leq c &lt; b$$$, and $$$a - c$$$ is divisible by $$$b$$$.In the first sample, $$$11~\\mathrm{div}~3 = 3$$$ and $$$11 \\bmod 3 = 2$$$. Since $$$3 \\cdot 2 = 6$$$, then $$$x = 11$$$ is a solution to $$$(x~\\mathrm{div}~3) \\cdot (x \\bmod 3) = 6$$$. One can see that $$$19$$$ is the only other positive integer solution, hence $$$11$$$ is the smallest one.","prob_desc_output_spec":"Print a single integer $$$x$$$\u00a0\u2014 the smallest positive integer solution to $$$(x~\\mathrm{div}~k) \\cdot (x \\bmod k) = n$$$. It is guaranteed that this equation has at least one positive integer solution.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya likes to solve equations. Today he wants to solve $$$(x~\\mathrm{div}~k) \\cdot (x \\bmod k) = n$$$, where $$$\\mathrm{div}$$$ and $$$\\mathrm{mod}$$$ stand for integer division and modulo operations (refer to the Notes below for exact definition). In this equation, $$$k$$$ and $$$n$$$ are positive integer parameters, and $$$x$$$ is a positive integer unknown. If there are several solutions, Vasya wants to find the smallest possible $$$x$$$. Can you help him?","hidden_unit_tests":"[{\"input\": \"6 3\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 6\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1000000 1000\\r\\n\", \"output\": [\"1250800\"]}, {\"input\": \"999983 1000\\r\\n\", \"output\": [\"999983001\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"100 2\\r\\n\", \"output\": [\"201\"]}, {\"input\": \"101 10\\r\\n\", \"output\": [\"1011\"]}, {\"input\": \"1 1000\\r\\n\", \"output\": [\"1001\"]}, {\"input\": \"2 997\\r\\n\", \"output\": [\"999\"]}, {\"input\": \"1000000 2\\r\\n\", \"output\": [\"2000001\"]}, {\"input\": \"524288 2\\r\\n\", \"output\": [\"1048577\"]}, {\"input\": \"720720 1000\\r\\n\", \"output\": [\"728990\"]}, {\"input\": \"810000 901\\r\\n\", \"output\": [\"811800\"]}, {\"input\": \"123456 789\\r\\n\", \"output\": [\"152131\"]}, {\"input\": \"666666 666\\r\\n\", \"output\": [\"813732\"]}, {\"input\": \"808201 900\\r\\n\", \"output\": [\"809999\"]}, {\"input\": \"996004 999\\r\\n\", \"output\": [\"998000\"]}, {\"input\": \"994009 997\\r\\n\", \"output\": [\"991026974\"]}, {\"input\": \"9 8\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"999883 200\\r\\n\", \"output\": [\"199976601\"]}, {\"input\": \"23 36\\r\\n\", \"output\": [\"59\"]}, {\"input\": \"199942 1000\\r\\n\", \"output\": [\"99971002\"]}, {\"input\": \"999002 457\\r\\n\", \"output\": [\"228271959\"]}, {\"input\": \"999995 1000\\r\\n\", \"output\": [\"199999005\"]}, {\"input\": \"1593 66\\r\\n\", \"output\": [\"1841\"]}, {\"input\": \"22248 608\\r\\n\", \"output\": [\"33244\"]}]","length":10,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\\n4\\n6\\n9\"]","prob_desc_input_spec":"Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\leq t \\leq 10$$$). Description of the test cases follows. Each test case consists of a single integer $$$n$$$ ($$$2 \\leq n \\leq 10^{9}$$$).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"3fd60db24b1873e906d6dee9c2508ac5","prob_desc_created_at":"1594479900","source_code":"import math\nfor _ in range(int(input())):\n    n=int(input())\n    if n%2==0:\n        print(n\/\/2,n\/\/2)\n    else:\n        flag=0\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                temp=i \n                flag=1\n                break\n        if flag==0:\n            print(1,n-1)\n            \n        else:\n            x=n\/\/temp\n            print(x,(temp-1)*x)\n            ","prob_desc_sample_outputs":"[\"2 2\\n3 3\\n3 6\"]","lang_cluster":"Python","code_uid":"a6f54e5f0645274bd6662aa9405f5ab1","prob_desc_notes":"NoteFor the first test case, the numbers we can choose are $$$1, 3$$$ or $$$2, 2$$$. $$$LCM(1, 3) = 3$$$ and $$$LCM(2, 2) = 2$$$, so we output $$$2 \\ 2$$$.For the second test case, the numbers we can choose are $$$1, 5$$$, $$$2, 4$$$, or $$$3, 3$$$. $$$LCM(1, 5) = 5$$$, $$$LCM(2, 4) = 4$$$, and $$$LCM(3, 3) = 3$$$, so we output $$$3 \\ 3$$$.For the third test case, $$$LCM(3, 6) = 6$$$. It can be shown that there are no other pairs of numbers which sum to $$$9$$$ that have a lower $$$LCM$$$.","prob_desc_output_spec":"For each test case, output two positive integers $$$a$$$ and $$$b$$$, such that $$$a + b = n$$$ and $$$LCM(a, b)$$$ is the minimum possible.","prob_desc_output_to":"standard output","prob_desc_description":"In Omkar's last class of math, he learned about the least common multiple, or $$$LCM$$$. $$$LCM(a, b)$$$ is the smallest positive integer $$$x$$$ which is divisible by both $$$a$$$ and $$$b$$$.Omkar, having a laudably curious mind, immediately thought of a problem involving the $$$LCM$$$ operation: given an integer $$$n$$$, find positive integers $$$a$$$ and $$$b$$$ such that $$$a + b = n$$$ and $$$LCM(a, b)$$$ is the minimum value possible.Can you help Omkar solve his ludicrously challenging math problem?","hidden_unit_tests":"[{\"input\": \"3\\r\\n4\\r\\n6\\r\\n9\\r\\n\", \"output\": [\"2 2\\r\\n3 3\\r\\n3 6\"]}, {\"input\": \"3\\r\\n4\\r\\n5\\r\\n2\\r\\n\", \"output\": [\"2 2\\r\\n1 4\\r\\n1 1\"]}, {\"input\": \"8\\r\\n527\\r\\n622\\r\\n63\\r\\n423\\r\\n147\\r\\n791\\r\\n838\\r\\n903\\r\\n\", \"output\": [\"31 496\\r\\n311 311\\r\\n21 42\\r\\n141 282\\r\\n49 98\\r\\n113 678\\r\\n419 419\\r\\n301 602\"]}, {\"input\": \"6\\r\\n861605021\\r\\n68328580\\r\\n877214985\\r\\n692261986\\r\\n3399371\\r\\n684035729\\r\\n\", \"output\": [\"1 861605020\\r\\n34164290 34164290\\r\\n292404995 584809990\\r\\n346130993 346130993\\r\\n199963 3199408\\r\\n52618133 631417596\"]}, {\"input\": \"10\\r\\n201963219\\r\\n303973760\\r\\n54544086\\r\\n751923241\\r\\n687055210\\r\\n1649300\\r\\n203977471\\r\\n402504158\\r\\n14556710\\r\\n207186606\\r\\n\", \"output\": [\"67321073 134642146\\r\\n151986880 151986880\\r\\n27272043 27272043\\r\\n17486587 734436654\\r\\n343527605 343527605\\r\\n824650 824650\\r\\n1 203977470\\r\\n201252079 201252079\\r\\n7278355 7278355\\r\\n103593303 103593303\"]}, {\"input\": \"8\\r\\n4\\r\\n10\\r\\n9\\r\\n2\\r\\n6\\r\\n2\\r\\n6\\r\\n6\\r\\n\", \"output\": [\"2 2\\r\\n5 5\\r\\n3 6\\r\\n1 1\\r\\n3 3\\r\\n1 1\\r\\n3 3\\r\\n3 3\"]}, {\"input\": \"2\\r\\n7\\r\\n8\\r\\n\", \"output\": [\"1 6\\r\\n4 4\"]}, {\"input\": \"6\\r\\n294048\\r\\n763985\\r\\n486901\\r\\n359327\\r\\n977269\\r\\n431116\\r\\n\", \"output\": [\"147024 147024\\r\\n152797 611188\\r\\n1471 485430\\r\\n1 359326\\r\\n1 977268\\r\\n215558 215558\"]}, {\"input\": \"2\\r\\n328547178\\r\\n28450577\\r\\n\", \"output\": [\"164273589 164273589\\r\\n1 28450576\"]}, {\"input\": \"1\\r\\n42443736\\r\\n\", \"output\": [\"21221868 21221868\"]}, {\"input\": \"1\\r\\n646185419\\r\\n\", \"output\": [\"58744129 587441290\"]}, {\"input\": \"1\\r\\n784975562\\r\\n\", \"output\": [\"392487781 392487781\"]}, {\"input\": \"1\\r\\n142930164\\r\\n\", \"output\": [\"71465082 71465082\"]}, {\"input\": \"10\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n\", \"output\": [\"500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\"]}, {\"input\": \"1\\r\\n1000000000\\r\\n\", \"output\": [\"500000000 500000000\"]}, {\"input\": \"1\\r\\n2\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"10\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n\", \"output\": [\"1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\"]}, {\"input\": \"10\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n\", \"output\": [\"31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\"]}, {\"input\": \"6\\r\\n988945538\\r\\n826161801\\r\\n753987902\\r\\n90107430\\r\\n303400713\\r\\n958438508\\r\\n\", \"output\": [\"494472769 494472769\\r\\n275387267 550774534\\r\\n376993951 376993951\\r\\n45053715 45053715\\r\\n101133571 202267142\\r\\n479219254 479219254\"]}, {\"input\": \"7\\r\\n13881727\\r\\n399705329\\r\\n4040273\\r\\n562529221\\r\\n51453229\\r\\n165146341\\r\\n104085043\\r\\n\", \"output\": [\"21589 13860138\\r\\n25933 399679396\\r\\n20509 4019764\\r\\n28111 562501110\\r\\n10211 51443018\\r\\n17291 165129050\\r\\n16363 104068680\"]}, {\"input\": \"3\\r\\n312736423\\r\\n170982179\\r\\n270186827\\r\\n\", \"output\": [\"19031 312717392\\r\\n21701 170960478\\r\\n16979 270169848\"]}, {\"input\": \"7\\r\\n21103739\\r\\n157343101\\r\\n218561743\\r\\n285460211\\r\\n3775711\\r\\n806739229\\r\\n255032251\\r\\n\", \"output\": [\"19853 21083886\\r\\n16673 157326428\\r\\n15139 218546604\\r\\n25309 285434902\\r\\n7753 3767958\\r\\n30781 806708448\\r\\n16063 255016188\"]}, {\"input\": \"2\\r\\n30849937\\r\\n619420033\\r\\n\", \"output\": [\"22469 30827468\\r\\n27961 619392072\"]}, {\"input\": \"1\\r\\n792717909\\r\\n\", \"output\": [\"264239303 528478606\"]}, {\"input\": \"6\\r\\n682299640\\r\\n402232729\\r\\n615880174\\r\\n837345547\\r\\n139232179\\r\\n210082106\\r\\n\", \"output\": [\"341149820 341149820\\r\\n1 402232728\\r\\n307940087 307940087\\r\\n156601 837188946\\r\\n6053573 133178606\\r\\n105041053 105041053\"]}, {\"input\": \"9\\r\\n203197635\\r\\n675378503\\r\\n971363026\\r\\n746226358\\r\\n441100327\\r\\n941328384\\r\\n321242664\\r\\n890263904\\r\\n284574795\\r\\n\", \"output\": [\"67732545 135465090\\r\\n35546237 639832266\\r\\n485681513 485681513\\r\\n373113179 373113179\\r\\n35257 441065070\\r\\n470664192 470664192\\r\\n160621332 160621332\\r\\n445131952 445131952\\r\\n94858265 189716530\"]}, {\"input\": \"2\\r\\n565258040\\r\\n932782779\\r\\n\", \"output\": [\"282629020 282629020\\r\\n310927593 621855186\"]}, {\"input\": \"10\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n\", \"output\": [\"1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\"]}]","length":19,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\", \"4\"]","prob_desc_input_spec":"The single line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091017). Please, do not use the %lld specifier to read or write 64 bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"7e7b59f2112fd200ee03255c0c230ebd","prob_desc_created_at":"1374913800","source_code":"n = int(input())\n\nm = 3\nwhile n % m == 0:\n    m *= 3\n\nprint(int(n \/\/ m + 1))\n","prob_desc_sample_outputs":"[\"1\", \"2\"]","lang_cluster":"Python","code_uid":"f08aa882a8bbc4cf8720de52de683d73","prob_desc_notes":"NoteIn the first test case, if a buyer has exactly one coin of at least 3 marks, then, to give Gerald one mark, he will have to give this coin. In this sample, the customer can not have a coin of one mark, as in this case, he will be able to give the money to Gerald without any change.In the second test case, if the buyer had exactly three coins of 3 marks, then, to give Gerald 4 marks, he will have to give two of these coins. The buyer cannot give three coins as he wants to minimize the number of coins that he gives.","prob_desc_output_spec":"In a single line print an integer: the maximum number of coins the unlucky buyer could have paid with.","prob_desc_output_to":"standard output","prob_desc_description":"Gerald has been selling state secrets at leisure. All the secrets cost the same: n marks. The state which secrets Gerald is selling, has no paper money, only coins. But there are coins of all positive integer denominations that are powers of three: 1 mark, 3 marks, 9 marks, 27 marks and so on. There are no coins of other denominations. Of course, Gerald likes it when he gets money without the change. And all buyers respect him and try to give the desired sum without change, if possible. But this does not always happen.One day an unlucky buyer came. He did not have the desired sum without change. Then he took out all his coins and tried to give Gerald a larger than necessary sum with as few coins as possible. What is the maximum number of coins he could get?The formal explanation of the previous paragraph: we consider all the possible combinations of coins for which the buyer can not give Gerald the sum of n marks without change. For each such combination calculate the minimum number of coins that can bring the buyer at least n marks. Among all combinations choose the maximum of the minimum number of coins. This is the number we want.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100000000000000000\\r\\n\", \"output\": [\"33333333333333334\"]}, {\"input\": \"99999999999999999\\r\\n\", \"output\": [\"3703703703703704\"]}, {\"input\": \"50031545098999707\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"16677181699666569\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"72900000000000\\r\\n\", \"output\": [\"33333333334\"]}, {\"input\": \"99999999999999997\\r\\n\", \"output\": [\"33333333333333333\"]}, {\"input\": \"58061299250691018\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"49664023559436051\\r\\n\", \"output\": [\"128191526\"]}, {\"input\": \"66708726798666276\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"29442431889534807\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"70414767176369958\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"93886356235159944\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"97626528902553453\\r\\n\", \"output\": [\"551104613133\"]}, {\"input\": \"52013157885656046\\r\\n\", \"output\": [\"880847395988\"]}, {\"input\": \"37586570003500923\\r\\n\", \"output\": [\"548\"]}, {\"input\": \"34391854792828422\\r\\n\", \"output\": [\"582429080812\"]}, {\"input\": \"205891132094649\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"243\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5559060566555523\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"81\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"108\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1129718145924\\r\\n\", \"output\": [\"2\"]}]","length":7,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"512 megabytes","difficulty":1700.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 3\"]","prob_desc_input_spec":"The only line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 100\\,000$$$), the number of rows and the number of columns of the field.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"0f1ab296cbe0952faa904f2bebe0567b","prob_desc_created_at":"1571562300","source_code":"import sys\n\ninput = sys.stdin.readline\n\n\ndef read_i():\n    return list(map(int, input().split()))\n\n\nclass Combinations:\n    def __init__(self, max_num, mod):\n        self.mod = mod\n        self.factorials = [1]\n        for i in range(1, max_num + 1):\n            self.factorials.append((self.factorials[-1] * i) % mod)\n        self.invs = [pow(self.factorials[-1], mod - 2, mod)]\n        for i in reversed(range(1, max_num + 1)):\n            self.invs.append(self.invs[-1] * i % mod)\n        self.invs = self.invs[::-1]\n\n    def __call__(self, n, k):\n        return self.factorials[n] * self.invs[k] * self.invs[n - k] % self.mod\n\n\nn, m = read_i()\nMOD = 10**9 + 7\ncombinations = Combinations(max(n, m), MOD)\nres = 0\nfor i in range(n \/\/ 2 + 1):\n    res += combinations(n - i, i)\n    res %= MOD\nfor i in range(m \/\/ 2 + 1):\n    res += combinations(m - i, i)\n    res %= MOD\nres = 2 * (res - 1 + MOD) % MOD\nprint(res)","prob_desc_sample_outputs":"[\"8\"]","lang_cluster":"Python","code_uid":"da150b86890ad71c84f4cb66f7173b3b","prob_desc_notes":"NoteThe picture below shows all possible random pictures of size $$$2$$$ by $$$3$$$.   ","prob_desc_output_spec":"Print one integer, the number of random pictures modulo $$$10^9 + 7$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Recently Ivan the Fool decided to become smarter and study the probability theory. He thinks that he understands the subject fairly well, and so he began to behave like he already got PhD in that area.To prove his skills, Ivan decided to demonstrate his friends a concept of random picture. A picture is a field of $$$n$$$ rows and $$$m$$$ columns, where each cell is either black or white. Ivan calls the picture random if for every cell it has at most one adjacent cell of the same color. Two cells are considered adjacent if they share a side.Ivan's brothers spent some time trying to explain that it's not how the randomness usually works. Trying to convince Ivan, they want to count the number of different random (according to Ivan) pictures. Two pictures are considered different if at least one cell on those two picture is colored differently. Since the number of such pictures may be quite large, print it modulo $$$10^9 + 7$$$.","hidden_unit_tests":"[{\"input\": \"2 3\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2 5\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"3 6\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 100000\\r\\n\", \"output\": [\"935236457\"]}, {\"input\": \"100000 1\\r\\n\", \"output\": [\"935236457\"]}, {\"input\": \"91697 91697\\r\\n\", \"output\": [\"999949469\"]}, {\"input\": \"86821 24538\\r\\n\", \"output\": [\"1000000005\"]}, {\"input\": \"100000 100000\\r\\n\", \"output\": [\"870472905\"]}, {\"input\": \"99999 1\\r\\n\", \"output\": [\"822870997\"]}, {\"input\": \"1 99999\\r\\n\", \"output\": [\"822870997\"]}, {\"input\": \"1 99998\\r\\n\", \"output\": [\"112365460\"]}, {\"input\": \"99998 1\\r\\n\", \"output\": [\"112365460\"]}, {\"input\": \"1 88588\\r\\n\", \"output\": [\"153641669\"]}, {\"input\": \"68869 1\\r\\n\", \"output\": [\"840775285\"]}, {\"input\": \"91248 82914\\r\\n\", \"output\": [\"542035391\"]}, {\"input\": \"99999 100000\\r\\n\", \"output\": [\"758107445\"]}, {\"input\": \"100000 99999\\r\\n\", \"output\": [\"758107445\"]}, {\"input\": \"99999 99999\\r\\n\", \"output\": [\"645741985\"]}, {\"input\": \"13771 94814\\r\\n\", \"output\": [\"581579207\"]}, {\"input\": \"99411 90913\\r\\n\", \"output\": [\"189215541\"]}, {\"input\": \"52702 64157\\r\\n\", \"output\": [\"1000000005\"]}, {\"input\": \"24538 86821\\r\\n\", \"output\": [\"1000000005\"]}]","length":36,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"7\\nNonZERO\", \"24\\nthis is zero answer text\", \"24\\nHarbour Space University\"]","prob_desc_input_spec":"The first line contains one integer number n (1\u2009\u2264\u2009n\u2009\u2264\u2009200) \u2014 length of the text. The second line contains text of single-space separated words s1,\u2009s2,\u2009...,\u2009si, consisting only of small and capital Latin letters.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"d3929a9acf1633475ab16f5dfbead13c","prob_desc_created_at":"1501773300","source_code":"a=int(input())\ns=input().split()\nm=0\nfor i in s:\n\tv=0\n\tfor j in i:\n\t\tif ord(j)>64 and ord(j)<91:\n\t\t\tv=v+1\n\tif v>m:\n\t\t\tm=v\nprint(m)","prob_desc_sample_outputs":"[\"5\", \"0\", \"1\"]","lang_cluster":"Python","code_uid":"2fb10196245ac0c0b8030c0cd869c5a9","prob_desc_notes":"NoteIn the first example there is only one word, there are 5 capital letters in it.In the second example all of the words contain 0 capital letters.","prob_desc_output_spec":"Print one integer number \u2014 volume of text.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a text of single-space separated words, consisting of small and capital Latin letters.Volume of the word is number of capital letters in the word. Volume of the text is maximum volume of all words in the text.Calculate the volume of the given text.","hidden_unit_tests":"[{\"input\": \"7\\r\\nNonZERO\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"24\\r\\nthis is zero answer text\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"24\\r\\nHarbour Space University\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\nWM\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"200\\r\\nLBmJKQLCKUgtTxMoDsEerwvLOXsxASSydOqWyULsRcjMYDWdDCgaDvBfATIWPVSXlbcCLHPYahhxMEYUiaxoCebghJqvmRnaNHYTKLeOiaLDnATPZAOgSNfBzaxLymTGjfzvTegbXsAthTxyDTcmBUkqyGlVGZhoazQzVSoKbTFcCRvYsgSCwjGMxBfWEwMHuagTBxkz\\r\\n\", \"output\": [\"105\"]}, {\"input\": \"199\\r\\no A r v H e J q k J k v w Q F p O R y R Z o a K R L Z E H t X y X N y y p b x B m r R S q i A x V S u i c L y M n N X c C W Z m S j e w C w T r I S X T D F l w o k f t X u n W w p Z r A k I Y E h s g\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200\\r\\nhCyIdivIiISmmYIsCLbpKcTyHaOgTUQEwnQACXnrLdHAVFLtvliTEMlzBVzTesQbhXmcqvwPDeojglBMIjOXANfyQxCSjOJyO SIqOTnRzVzseGIDDYNtrwIusScWSuEhPyEmgQIVEzXofRptjeMzzhtUQxJgcUWILUhEaaRmYRBVsjoqgmyPIKwSajdlNPccOOtWrez\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1\\r\\ne\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\nA\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200\\r\\nABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ KLMNOPRSTU KLMNOPRSTU KLMNOPRSTU VWXYZABCDE KLMNOPRSTU KLMNOPRSTU KLMNOPRSTU KLMNOPRSTU KZ\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"200\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\", \"output\": [\"200\"]}, {\"input\": \"200\\r\\nffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"24\\r\\nHarbour Space UniversitY\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\naA AA\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\nas AS ASDA\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10\\r\\nas AS ASDZ\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3\\r\\na A\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"24\\r\\nHarbour space UniversitY\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\nas AS ASAa\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"15\\r\\naAb ABCDFGRHTJS\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"53\\r\\nsdfAZEZR AZE dfdf dsdRFGSDF ZZDZSD dfsd ERBGF dsfsdfR\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"10\\r\\nABC ABc AB\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10\\r\\nA c de CDE\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\nA AB\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"18\\r\\nHARbour Space UNIV\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"13\\r\\na b c d e f A\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"6\\r\\nA B CA\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\naa A\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\nA a\\r\\n\", \"output\": [\"1\"]}]","length":11,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\", \"4 10 2\\n2 3 8\\n3 4 7\"]","prob_desc_input_spec":"The first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$)\u00a0\u2014 the number of spots, the maximum height, and the number of restrictions. Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$)\u00a0\u2014 left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"f22b6dab443f63fb8d2d288b702f20ad","prob_desc_created_at":"1556989500","source_code":"(n,h,m) = [int(x) for x in input().split()]\nhouses= [h]*n\nfor i in range(m):\n    (l,r,x) = [int(x) for x in input().split()]\n    for j in range(l-1,r):\n        houses[j] = min(houses[j],x)\n\nmx = 0\nfor j in range(n):\n    mx += houses[j]*houses[j]\n\nprint(mx)\n    ","prob_desc_sample_outputs":"[\"14\", \"262\"]","lang_cluster":"Python","code_uid":"7b509396aeaeb6bb60154fd40d60ccae","prob_desc_notes":"NoteIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).","prob_desc_output_spec":"Print a single integer, the maximum profit you can make.","prob_desc_output_to":"standard output","prob_desc_description":"You are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.","hidden_unit_tests":"[{\"input\": \"3 3 3\\r\\n1 1 1\\r\\n2 2 3\\r\\n3 3 2\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"4 10 2\\r\\n2 3 8\\r\\n3 4 7\\r\\n\", \"output\": [\"262\"]}, {\"input\": \"50 50 1\\r\\n1 50 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50 50 50\\r\\n17 40 12\\r\\n33 36 47\\r\\n8 43 35\\r\\n25 29 42\\r\\n18 36 6\\r\\n25 35 18\\r\\n36 48 47\\r\\n17 40 13\\r\\n20 27 37\\r\\n32 32 28\\r\\n17 20 13\\r\\n4 14 6\\r\\n13 18 47\\r\\n18 45 28\\r\\n3 50 45\\r\\n6 6 6\\r\\n3 25 36\\r\\n28 48 42\\r\\n14 34 32\\r\\n28 41 35\\r\\n29 35 25\\r\\n25 48 24\\r\\n32 40 40\\r\\n18 38 44\\r\\n6 16 2\\r\\n1 36 7\\r\\n14 48 2\\r\\n18 29 40\\r\\n11 16 37\\r\\n8 40 19\\r\\n12 16 44\\r\\n44 46 21\\r\\n19 24 26\\r\\n24 45 44\\r\\n22 22 15\\r\\n6 15 32\\r\\n19 42 7\\r\\n21 33 20\\r\\n1 13 26\\r\\n16 27 40\\r\\n46 48 30\\r\\n21 39 1\\r\\n1 9 32\\r\\n14 34 20\\r\\n35 38 11\\r\\n19 47 23\\r\\n13 38 15\\r\\n28 29 28\\r\\n7 20 40\\r\\n2 21 46\\r\\n\", \"output\": [\"4384\"]}, {\"input\": \"50 50 50\\r\\n20 34 50\\r\\n10 36 27\\r\\n46 49 19\\r\\n15 22 21\\r\\n5 10 21\\r\\n40 47 0\\r\\n26 43 48\\r\\n15 34 5\\r\\n29 48 49\\r\\n2 45 25\\r\\n5 40 42\\r\\n1 27 0\\r\\n43 50 47\\r\\n5 19 23\\r\\n1 42 20\\r\\n18 50 16\\r\\n13 38 14\\r\\n14 30 22\\r\\n5 26 2\\r\\n32 46 15\\r\\n10 49 37\\r\\n33 37 24\\r\\n10 31 45\\r\\n16 45 37\\r\\n22 41 7\\r\\n23 49 29\\r\\n22 44 49\\r\\n3 44 22\\r\\n26 32 4\\r\\n30 40 19\\r\\n19 28 5\\r\\n6 34 14\\r\\n16 21 40\\r\\n12 43 46\\r\\n9 36 42\\r\\n2 19 39\\r\\n13 45 12\\r\\n2 30 6\\r\\n5 28 35\\r\\n18 45 7\\r\\n39 46 29\\r\\n29 43 33\\r\\n3 16 24\\r\\n20 40 24\\r\\n35 36 8\\r\\n2 14 8\\r\\n3 29 47\\r\\n31 32 0\\r\\n27 49 16\\r\\n1 37 45\\r\\n\", \"output\": [\"1111\"]}, {\"input\": \"50 50 50\\r\\n28 29 9\\r\\n33 43 30\\r\\n12 34 3\\r\\n9 12 26\\r\\n24 39 10\\r\\n12 47 35\\r\\n29 41 47\\r\\n43 44 49\\r\\n19 37 36\\r\\n11 18 46\\r\\n19 42 20\\r\\n9 40 47\\r\\n18 34 22\\r\\n11 20 44\\r\\n5 31 44\\r\\n29 40 0\\r\\n1 26 19\\r\\n7 50 4\\r\\n14 34 48\\r\\n43 48 21\\r\\n12 49 23\\r\\n6 40 47\\r\\n22 37 50\\r\\n39 48 29\\r\\n12 34 13\\r\\n5 10 25\\r\\n30 45 46\\r\\n26 32 29\\r\\n2 4 23\\r\\n7 39 19\\r\\n22 49 42\\r\\n11 29 31\\r\\n23 50 29\\r\\n12 32 47\\r\\n4 13 18\\r\\n24 46 20\\r\\n33 34 44\\r\\n24 35 41\\r\\n39 50 47\\r\\n14 24 49\\r\\n25 44 28\\r\\n23 23 42\\r\\n32 44 40\\r\\n25 42 3\\r\\n25 31 6\\r\\n35 47 18\\r\\n22 49 2\\r\\n38 43 23\\r\\n1 27 16\\r\\n19 23 43\\r\\n\", \"output\": [\"1786\"]}, {\"input\": \"50 50 50\\r\\n24 31 47\\r\\n2 5 10\\r\\n18 22 39\\r\\n6 48 29\\r\\n30 43 25\\r\\n9 26 19\\r\\n20 40 23\\r\\n27 49 42\\r\\n41 49 50\\r\\n28 39 42\\r\\n35 37 49\\r\\n17 40 40\\r\\n26 38 21\\r\\n8 38 40\\r\\n10 28 19\\r\\n30 41 9\\r\\n2 13 24\\r\\n29 42 36\\r\\n20 49 17\\r\\n3 48 1\\r\\n33 38 10\\r\\n5 37 20\\r\\n7 21 30\\r\\n35 38 22\\r\\n37 38 19\\r\\n16 43 47\\r\\n46 50 16\\r\\n4 13 36\\r\\n18 20 41\\r\\n26 31 19\\r\\n11 34 30\\r\\n20 23 23\\r\\n20 46 19\\r\\n10 43 49\\r\\n27 33 45\\r\\n37 45 27\\r\\n6 12 0\\r\\n38 47 27\\r\\n3 50 6\\r\\n25 41 41\\r\\n2 37 27\\r\\n25 49 24\\r\\n38 44 31\\r\\n31 36 7\\r\\n18 31 3\\r\\n6 33 2\\r\\n19 36 33\\r\\n45 50 48\\r\\n10 21 17\\r\\n8 41 42\\r\\n\", \"output\": [\"2711\"]}, {\"input\": \"50 50 50\\r\\n26 27 33\\r\\n8 29 15\\r\\n10 31 23\\r\\n7 38 33\\r\\n9 12 39\\r\\n3 18 2\\r\\n11 35 25\\r\\n8 10 33\\r\\n12 19 11\\r\\n9 44 39\\r\\n17 32 27\\r\\n17 49 9\\r\\n13 13 20\\r\\n3 9 36\\r\\n18 20 43\\r\\n24 48 19\\r\\n12 26 1\\r\\n39 49 18\\r\\n11 33 38\\r\\n7 49 7\\r\\n23 38 48\\r\\n20 22 46\\r\\n12 31 34\\r\\n21 41 15\\r\\n3 13 26\\r\\n26 30 18\\r\\n50 50 12\\r\\n20 39 18\\r\\n34 40 10\\r\\n35 45 21\\r\\n28 41 17\\r\\n17 29 40\\r\\n21 30 34\\r\\n16 34 0\\r\\n28 45 21\\r\\n4 36 8\\r\\n31 50 6\\r\\n10 48 12\\r\\n18 42 43\\r\\n43 47 32\\r\\n35 38 27\\r\\n19 26 5\\r\\n5 36 22\\r\\n33 38 38\\r\\n7 24 50\\r\\n20 23 12\\r\\n5 35 40\\r\\n2 7 19\\r\\n38 49 45\\r\\n17 39 40\\r\\n\", \"output\": [\"3477\"]}, {\"input\": \"50 50 50\\r\\n7 47 45\\r\\n22 24 8\\r\\n31 48 31\\r\\n36 47 13\\r\\n7 25 19\\r\\n2 2 17\\r\\n34 40 14\\r\\n27 33 50\\r\\n31 45 35\\r\\n4 7 4\\r\\n27 30 27\\r\\n4 41 27\\r\\n34 41 15\\r\\n2 12 17\\r\\n2 3 19\\r\\n25 47 47\\r\\n6 43 50\\r\\n4 47 23\\r\\n5 38 30\\r\\n12 43 18\\r\\n8 38 28\\r\\n6 11 13\\r\\n23 35 41\\r\\n2 39 41\\r\\n27 30 1\\r\\n28 49 46\\r\\n15 39 29\\r\\n18 29 22\\r\\n37 39 33\\r\\n7 45 40\\r\\n23 49 19\\r\\n8 12 46\\r\\n21 48 26\\r\\n22 45 27\\r\\n9 35 50\\r\\n10 43 5\\r\\n13 29 22\\r\\n7 36 12\\r\\n18 37 34\\r\\n17 18 3\\r\\n17 27 4\\r\\n44 47 39\\r\\n6 10 34\\r\\n31 48 1\\r\\n32 45 33\\r\\n39 41 43\\r\\n5 40 4\\r\\n8 50 11\\r\\n1 45 42\\r\\n30 35 31\\r\\n\", \"output\": [\"2960\"]}, {\"input\": \"50 50 50\\r\\n14 41 31\\r\\n28 49 13\\r\\n4 19 15\\r\\n34 41 16\\r\\n37 40 34\\r\\n10 25 1\\r\\n28 35 15\\r\\n2 42 43\\r\\n2 12 47\\r\\n16 25 26\\r\\n21 48 4\\r\\n13 37 22\\r\\n16 26 15\\r\\n30 49 12\\r\\n8 40 45\\r\\n32 33 6\\r\\n6 27 2\\r\\n25 35 5\\r\\n22 42 24\\r\\n6 13 49\\r\\n23 26 14\\r\\n27 42 38\\r\\n9 34 45\\r\\n1 33 35\\r\\n42 44 7\\r\\n5 7 42\\r\\n12 43 25\\r\\n5 42 4\\r\\n7 47 2\\r\\n7 10 40\\r\\n20 34 6\\r\\n2 21 12\\r\\n9 45 15\\r\\n19 45 29\\r\\n4 50 0\\r\\n1 2 12\\r\\n1 47 26\\r\\n8 16 23\\r\\n9 48 45\\r\\n23 28 20\\r\\n12 19 4\\r\\n27 37 46\\r\\n21 47 25\\r\\n33 49 5\\r\\n21 49 6\\r\\n14 32 1\\r\\n5 13 36\\r\\n7 23 34\\r\\n15 34 43\\r\\n2 24 29\\r\\n\", \"output\": [\"432\"]}, {\"input\": \"50 50 50\\r\\n14 39 43\\r\\n22 27 43\\r\\n9 11 0\\r\\n23 38 21\\r\\n13 32 23\\r\\n19 43 35\\r\\n27 29 15\\r\\n6 31 8\\r\\n19 20 35\\r\\n36 45 22\\r\\n20 26 34\\r\\n13 49 42\\r\\n13 37 40\\r\\n37 45 7\\r\\n16 41 19\\r\\n27 48 15\\r\\n15 41 8\\r\\n33 45 37\\r\\n6 33 45\\r\\n10 18 4\\r\\n12 35 27\\r\\n15 42 37\\r\\n25 28 50\\r\\n19 46 28\\r\\n7 19 12\\r\\n12 44 13\\r\\n1 12 21\\r\\n7 36 11\\r\\n19 29 21\\r\\n6 33 14\\r\\n32 41 44\\r\\n30 46 30\\r\\n1 47 30\\r\\n14 43 31\\r\\n18 37 27\\r\\n11 50 44\\r\\n26 26 7\\r\\n24 31 9\\r\\n9 13 5\\r\\n29 47 12\\r\\n6 17 3\\r\\n3 35 29\\r\\n29 41 42\\r\\n5 27 35\\r\\n14 45 3\\r\\n27 31 37\\r\\n20 33 43\\r\\n18 22 7\\r\\n12 35 44\\r\\n10 24 28\\r\\n\", \"output\": [\"6751\"]}, {\"input\": \"50 50 50\\r\\n18 30 29\\r\\n39 40 46\\r\\n19 45 35\\r\\n13 32 26\\r\\n11 28 38\\r\\n15 19 18\\r\\n25 32 15\\r\\n15 15 1\\r\\n36 40 48\\r\\n15 48 18\\r\\n7 47 12\\r\\n26 49 37\\r\\n1 8 40\\r\\n5 38 4\\r\\n13 30 18\\r\\n5 21 0\\r\\n9 32 37\\r\\n14 16 44\\r\\n24 45 15\\r\\n18 19 36\\r\\n1 48 14\\r\\n46 49 11\\r\\n2 28 4\\r\\n2 6 21\\r\\n11 49 20\\r\\n22 27 34\\r\\n17 17 43\\r\\n12 35 19\\r\\n33 46 38\\r\\n1 6 15\\r\\n44 45 31\\r\\n37 47 22\\r\\n35 44 20\\r\\n22 45 33\\r\\n28 41 3\\r\\n28 45 0\\r\\n2 47 13\\r\\n25 41 45\\r\\n1 28 14\\r\\n3 47 3\\r\\n15 41 2\\r\\n33 37 37\\r\\n39 45 33\\r\\n11 33 38\\r\\n3 42 50\\r\\n10 48 47\\r\\n3 38 49\\r\\n21 33 31\\r\\n9 41 19\\r\\n33 50 27\\r\\n\", \"output\": [\"1243\"]}, {\"input\": \"50 50 50\\r\\n13 24 16\\r\\n13 46 26\\r\\n28 37 19\\r\\n2 22 29\\r\\n1 2 2\\r\\n30 31 3\\r\\n16 23 42\\r\\n32 44 45\\r\\n11 44 9\\r\\n19 35 39\\r\\n25 44 41\\r\\n4 35 31\\r\\n33 38 39\\r\\n28 35 25\\r\\n17 26 43\\r\\n17 49 9\\r\\n22 40 42\\r\\n11 44 26\\r\\n29 48 36\\r\\n20 30 41\\r\\n11 32 0\\r\\n15 31 35\\r\\n27 30 34\\r\\n38 47 39\\r\\n23 24 25\\r\\n14 20 30\\r\\n10 25 40\\r\\n5 39 0\\r\\n5 10 7\\r\\n5 20 15\\r\\n3 10 18\\r\\n10 35 39\\r\\n27 45 9\\r\\n18 34 35\\r\\n5 15 30\\r\\n35 41 32\\r\\n23 35 20\\r\\n9 37 30\\r\\n4 39 1\\r\\n2 26 46\\r\\n9 27 1\\r\\n13 31 18\\r\\n10 26 24\\r\\n17 28 17\\r\\n4 42 48\\r\\n24 50 32\\r\\n3 19 29\\r\\n28 35 2\\r\\n20 29 20\\r\\n22 23 24\\r\\n\", \"output\": [\"2167\"]}, {\"input\": \"50 50 50\\r\\n15 21 1\\r\\n8 40 30\\r\\n25 34 4\\r\\n19 46 8\\r\\n24 32 16\\r\\n2 31 37\\r\\n18 18 43\\r\\n27 42 37\\r\\n7 28 48\\r\\n2 31 36\\r\\n43 45 19\\r\\n8 48 25\\r\\n4 26 13\\r\\n36 42 20\\r\\n15 26 18\\r\\n28 43 18\\r\\n7 32 47\\r\\n18 46 7\\r\\n9 39 5\\r\\n17 35 21\\r\\n21 24 38\\r\\n12 30 34\\r\\n18 49 38\\r\\n28 46 32\\r\\n39 41 31\\r\\n1 26 1\\r\\n14 29 35\\r\\n23 33 7\\r\\n23 32 25\\r\\n1 13 15\\r\\n17 20 5\\r\\n20 21 31\\r\\n11 43 24\\r\\n8 33 37\\r\\n6 19 6\\r\\n34 46 39\\r\\n15 44 25\\r\\n31 50 15\\r\\n11 46 11\\r\\n16 40 12\\r\\n6 8 1\\r\\n25 44 0\\r\\n22 28 15\\r\\n22 30 21\\r\\n30 44 45\\r\\n41 45 41\\r\\n22 35 36\\r\\n39 46 25\\r\\n2 12 21\\r\\n7 41 23\\r\\n\", \"output\": [\"1022\"]}, {\"input\": \"50 50 50\\r\\n17 17 39\\r\\n11 13 9\\r\\n9 43 39\\r\\n9 35 13\\r\\n23 39 31\\r\\n21 43 21\\r\\n16 17 43\\r\\n2 47 30\\r\\n23 49 9\\r\\n22 47 7\\r\\n20 34 48\\r\\n12 49 20\\r\\n13 29 12\\r\\n3 29 17\\r\\n4 30 42\\r\\n37 40 28\\r\\n16 50 24\\r\\n31 43 40\\r\\n6 26 26\\r\\n22 43 28\\r\\n7 41 24\\r\\n33 35 8\\r\\n17 23 43\\r\\n11 49 25\\r\\n21 42 37\\r\\n34 36 23\\r\\n15 44 31\\r\\n7 7 14\\r\\n4 41 44\\r\\n13 16 16\\r\\n28 36 17\\r\\n19 29 48\\r\\n7 40 14\\r\\n7 32 39\\r\\n1 42 33\\r\\n9 25 21\\r\\n15 48 30\\r\\n1 45 1\\r\\n22 45 21\\r\\n1 22 4\\r\\n47 50 0\\r\\n16 19 8\\r\\n22 38 32\\r\\n24 32 1\\r\\n31 37 43\\r\\n16 36 25\\r\\n5 41 17\\r\\n42 45 49\\r\\n23 32 48\\r\\n21 43 21\\r\\n\", \"output\": [\"94\"]}, {\"input\": \"50 50 50\\r\\n15 20 50\\r\\n11 36 39\\r\\n1 7 23\\r\\n11 25 16\\r\\n2 8 46\\r\\n44 47 5\\r\\n7 15 20\\r\\n6 35 23\\r\\n21 31 47\\r\\n14 42 3\\r\\n22 44 25\\r\\n7 12 15\\r\\n5 50 13\\r\\n29 29 38\\r\\n4 35 17\\r\\n1 23 37\\r\\n22 32 30\\r\\n17 25 21\\r\\n17 40 47\\r\\n5 31 8\\r\\n46 50 10\\r\\n21 45 32\\r\\n7 47 48\\r\\n9 48 17\\r\\n4 46 43\\r\\n20 42 19\\r\\n2 15 28\\r\\n31 34 48\\r\\n9 22 11\\r\\n4 38 16\\r\\n31 49 4\\r\\n14 34 14\\r\\n41 49 28\\r\\n6 38 41\\r\\n10 38 8\\r\\n16 26 26\\r\\n24 36 37\\r\\n9 17 37\\r\\n37 41 32\\r\\n19 39 47\\r\\n10 33 0\\r\\n20 46 41\\r\\n12 45 22\\r\\n26 34 5\\r\\n27 34 40\\r\\n23 33 10\\r\\n6 17 23\\r\\n3 9 20\\r\\n1 2 49\\r\\n20 39 19\\r\\n\", \"output\": [\"2327\"]}, {\"input\": \"50 50 50\\r\\n6 28 36\\r\\n12 22 44\\r\\n12 39 7\\r\\n19 50 20\\r\\n27 43 35\\r\\n6 12 38\\r\\n2 6 20\\r\\n15 24 15\\r\\n38 43 8\\r\\n21 22 49\\r\\n15 21 4\\r\\n20 20 8\\r\\n25 42 37\\r\\n22 40 34\\r\\n43 43 17\\r\\n17 21 22\\r\\n35 41 34\\r\\n10 41 2\\r\\n8 29 17\\r\\n9 24 38\\r\\n14 31 24\\r\\n2 10 32\\r\\n6 20 2\\r\\n41 42 11\\r\\n20 22 49\\r\\n2 7 40\\r\\n16 18 48\\r\\n8 10 4\\r\\n31 40 30\\r\\n4 7 16\\r\\n19 39 42\\r\\n1 8 6\\r\\n37 42 17\\r\\n11 34 43\\r\\n25 29 36\\r\\n6 35 8\\r\\n12 15 42\\r\\n14 35 48\\r\\n33 48 43\\r\\n34 41 38\\r\\n4 18 50\\r\\n10 22 23\\r\\n7 15 13\\r\\n24 40 35\\r\\n23 27 36\\r\\n9 50 19\\r\\n24 30 29\\r\\n8 10 44\\r\\n26 30 50\\r\\n5 23 19\\r\\n\", \"output\": [\"2979\"]}, {\"input\": \"50 50 50\\r\\n24 50 22\\r\\n26 27 22\\r\\n22 27 43\\r\\n16 48 24\\r\\n27 46 50\\r\\n2 34 22\\r\\n1 4 21\\r\\n33 48 7\\r\\n5 14 21\\r\\n37 43 19\\r\\n8 39 32\\r\\n20 21 4\\r\\n4 34 36\\r\\n12 23 29\\r\\n32 47 42\\r\\n11 32 31\\r\\n4 49 13\\r\\n3 16 35\\r\\n13 44 37\\r\\n17 29 45\\r\\n16 23 10\\r\\n25 33 5\\r\\n1 44 6\\r\\n28 49 30\\r\\n31 47 4\\r\\n13 44 11\\r\\n17 22 45\\r\\n24 40 37\\r\\n11 45 48\\r\\n4 26 17\\r\\n32 50 30\\r\\n2 10 23\\r\\n29 48 31\\r\\n30 50 19\\r\\n16 47 11\\r\\n5 48 14\\r\\n33 41 48\\r\\n8 27 34\\r\\n9 32 27\\r\\n45 47 5\\r\\n2 50 49\\r\\n8 48 31\\r\\n27 47 29\\r\\n27 46 39\\r\\n12 28 34\\r\\n4 25 5\\r\\n43 50 10\\r\\n13 19 16\\r\\n9 46 0\\r\\n41 45 16\\r\\n\", \"output\": [\"498\"]}, {\"input\": \"50 50 50\\r\\n28 33 44\\r\\n15 17 1\\r\\n25 40 10\\r\\n7 43 38\\r\\n13 23 9\\r\\n4 4 43\\r\\n25 26 43\\r\\n5 41 14\\r\\n1 49 40\\r\\n4 31 18\\r\\n41 45 22\\r\\n38 43 48\\r\\n23 30 45\\r\\n5 13 3\\r\\n1 47 13\\r\\n14 25 33\\r\\n27 32 40\\r\\n23 50 26\\r\\n2 25 20\\r\\n7 41 41\\r\\n31 41 47\\r\\n34 37 7\\r\\n6 37 14\\r\\n23 43 20\\r\\n14 49 31\\r\\n22 25 22\\r\\n12 30 36\\r\\n44 46 32\\r\\n5 48 34\\r\\n17 22 31\\r\\n39 48 14\\r\\n27 34 25\\r\\n20 41 24\\r\\n31 48 9\\r\\n19 30 11\\r\\n45 49 48\\r\\n1 28 35\\r\\n10 16 10\\r\\n36 37 46\\r\\n5 42 48\\r\\n15 50 24\\r\\n12 44 27\\r\\n14 27 9\\r\\n5 37 46\\r\\n33 48 3\\r\\n12 45 8\\r\\n5 15 37\\r\\n1 5 43\\r\\n46 47 4\\r\\n8 49 33\\r\\n\", \"output\": [\"3080\"]}, {\"input\": \"20 50 20\\r\\n4 5 18\\r\\n14 15 32\\r\\n6 13 46\\r\\n13 19 39\\r\\n2 8 18\\r\\n15 16 29\\r\\n2 8 9\\r\\n1 2 23\\r\\n1 8 8\\r\\n18 18 11\\r\\n10 16 3\\r\\n9 18 44\\r\\n9 19 31\\r\\n2 3 19\\r\\n4 19 12\\r\\n10 17 24\\r\\n9 13 20\\r\\n4 7 10\\r\\n12 20 24\\r\\n3 19 19\\r\\n\", \"output\": [\"1704\"]}, {\"input\": \"50 20 20\\r\\n4 15 1\\r\\n26 31 15\\r\\n28 40 5\\r\\n16 42 1\\r\\n10 26 10\\r\\n42 42 1\\r\\n21 49 4\\r\\n24 50 10\\r\\n7 32 12\\r\\n5 38 18\\r\\n36 41 14\\r\\n16 44 2\\r\\n23 33 4\\r\\n18 19 15\\r\\n14 21 14\\r\\n18 28 16\\r\\n29 38 13\\r\\n6 17 10\\r\\n6 44 2\\r\\n17 45 1\\r\\n\", \"output\": [\"1406\"]}, {\"input\": \"20 20 50\\r\\n10 17 9\\r\\n5 10 5\\r\\n9 18 5\\r\\n4 19 8\\r\\n10 18 4\\r\\n5 19 2\\r\\n9 11 0\\r\\n3 9 9\\r\\n11 12 6\\r\\n7 9 7\\r\\n6 19 15\\r\\n7 12 10\\r\\n5 17 18\\r\\n4 9 14\\r\\n11 11 9\\r\\n2 20 8\\r\\n2 16 9\\r\\n5 16 1\\r\\n1 2 5\\r\\n6 9 1\\r\\n8 13 15\\r\\n6 15 18\\r\\n7 13 7\\r\\n13 18 11\\r\\n1 16 17\\r\\n16 20 17\\r\\n2 19 10\\r\\n15 18 0\\r\\n2 14 11\\r\\n1 3 11\\r\\n2 3 3\\r\\n2 16 10\\r\\n6 20 7\\r\\n3 17 2\\r\\n8 13 11\\r\\n7 11 13\\r\\n1 13 14\\r\\n5 16 4\\r\\n2 3 14\\r\\n2 5 4\\r\\n4 10 6\\r\\n10 17 20\\r\\n9 13 4\\r\\n1 5 20\\r\\n7 13 6\\r\\n16 20 9\\r\\n9 16 16\\r\\n5 12 7\\r\\n2 18 14\\r\\n9 13 19\\r\\n\", \"output\": [\"102\"]}, {\"input\": \"20 50 20\\r\\n3 9 4\\r\\n4 7 11\\r\\n9 14 31\\r\\n1 6 17\\r\\n5 13 33\\r\\n17 19 11\\r\\n13 14 10\\r\\n4 12 16\\r\\n8 19 46\\r\\n8 19 7\\r\\n11 20 32\\r\\n3 18 39\\r\\n1 12 31\\r\\n4 16 15\\r\\n2 15 38\\r\\n1 2 33\\r\\n2 11 25\\r\\n7 14 17\\r\\n3 14 45\\r\\n15 18 50\\r\\n\", \"output\": [\"2204\"]}, {\"input\": \"50 20 20\\r\\n19 49 15\\r\\n8 29 12\\r\\n28 33 20\\r\\n5 40 14\\r\\n1 45 14\\r\\n15 50 17\\r\\n20 44 17\\r\\n11 18 15\\r\\n20 40 6\\r\\n16 21 6\\r\\n12 31 10\\r\\n29 49 5\\r\\n20 44 17\\r\\n16 41 10\\r\\n3 30 9\\r\\n8 36 10\\r\\n45 48 5\\r\\n6 27 12\\r\\n35 44 8\\r\\n21 42 16\\r\\n\", \"output\": [\"2727\"]}, {\"input\": \"20 20 50\\r\\n1 3 9\\r\\n2 20 19\\r\\n2 5 3\\r\\n2 8 17\\r\\n1 19 16\\r\\n1 19 1\\r\\n17 19 13\\r\\n2 6 6\\r\\n9 12 14\\r\\n15 15 3\\r\\n6 13 7\\r\\n11 17 6\\r\\n12 15 15\\r\\n4 16 5\\r\\n8 13 4\\r\\n6 12 6\\r\\n10 13 1\\r\\n2 20 15\\r\\n9 16 11\\r\\n1 13 16\\r\\n2 12 17\\r\\n13 17 13\\r\\n17 18 9\\r\\n5 6 11\\r\\n5 16 6\\r\\n3 16 0\\r\\n2 10 3\\r\\n2 17 6\\r\\n6 9 4\\r\\n4 11 2\\r\\n5 20 17\\r\\n5 20 9\\r\\n7 20 15\\r\\n5 11 20\\r\\n11 15 12\\r\\n6 18 8\\r\\n9 16 4\\r\\n2 17 14\\r\\n4 8 11\\r\\n8 15 8\\r\\n15 18 20\\r\\n7 14 15\\r\\n5 8 14\\r\\n11 13 20\\r\\n16 17 15\\r\\n1 14 13\\r\\n6 10 11\\r\\n8 19 19\\r\\n8 20 17\\r\\n3 19 2\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"20 50 20\\r\\n5 9 16\\r\\n17 17 15\\r\\n2 4 15\\r\\n6 20 22\\r\\n3 16 48\\r\\n11 13 46\\r\\n2 3 37\\r\\n7 9 8\\r\\n16 20 7\\r\\n11 19 3\\r\\n6 19 11\\r\\n3 18 34\\r\\n7 19 5\\r\\n7 17 37\\r\\n4 16 12\\r\\n13 16 42\\r\\n18 20 4\\r\\n3 8 50\\r\\n9 14 15\\r\\n17 19 5\\r\\n\", \"output\": [\"3556\"]}, {\"input\": \"50 20 20\\r\\n22 39 19\\r\\n23 37 18\\r\\n16 38 9\\r\\n30 49 15\\r\\n14 31 5\\r\\n1 29 16\\r\\n10 46 9\\r\\n27 40 16\\r\\n3 42 1\\r\\n33 38 6\\r\\n18 40 6\\r\\n3 34 5\\r\\n8 23 14\\r\\n5 9 14\\r\\n4 34 8\\r\\n1 48 16\\r\\n4 15 18\\r\\n9 46 18\\r\\n18 29 14\\r\\n25 47 20\\r\\n\", \"output\": [\"1951\"]}, {\"input\": \"20 20 50\\r\\n1 13 18\\r\\n1 18 9\\r\\n4 6 13\\r\\n2 7 17\\r\\n8 8 7\\r\\n5 11 17\\r\\n8 18 5\\r\\n8 18 11\\r\\n1 9 9\\r\\n6 15 12\\r\\n15 17 3\\r\\n2 15 10\\r\\n11 16 19\\r\\n2 17 13\\r\\n8 16 15\\r\\n6 7 0\\r\\n4 8 14\\r\\n5 8 0\\r\\n10 20 13\\r\\n6 12 3\\r\\n11 16 19\\r\\n4 14 20\\r\\n1 17 11\\r\\n7 15 7\\r\\n11 17 8\\r\\n6 17 7\\r\\n6 16 17\\r\\n5 16 3\\r\\n17 18 2\\r\\n6 14 14\\r\\n12 16 2\\r\\n2 11 16\\r\\n2 7 11\\r\\n1 14 4\\r\\n6 13 1\\r\\n1 17 10\\r\\n8 16 19\\r\\n9 13 16\\r\\n13 14 3\\r\\n8 19 12\\r\\n9 16 16\\r\\n5 10 17\\r\\n5 18 12\\r\\n1 17 15\\r\\n3 7 0\\r\\n17 18 4\\r\\n4 19 16\\r\\n6 18 9\\r\\n2 19 11\\r\\n1 4 11\\r\\n\", \"output\": [\"347\"]}, {\"input\": \"3 3 4\\r\\n1 3 1\\r\\n1 1 3\\r\\n2 2 3\\r\\n3 3 3\\r\\n\", \"output\": [\"3\"]}]","length":13,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3 2\\n50 85 250\\n10 15 25\", \"3 6\\n50 85 250\\n10 15 25\", \"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\"]","prob_desc_input_spec":"The first line contains two integers n and c (1\u2009\u2264\u2009n\u2009\u2264\u200950,\u20091\u2009\u2264\u2009c\u2009\u2264\u20091000)\u00a0\u2014 the number of problems and the constant representing the speed of loosing points. The second line contains n integers p1,\u2009p2,\u2009...,\u2009pn (1\u2009\u2264\u2009pi\u2009\u2264\u20091000,\u2009pi\u2009&lt;\u2009pi\u2009+\u20091)\u00a0\u2014 initial scores. The third line contains n integers t1,\u2009t2,\u2009...,\u2009tn (1\u2009\u2264\u2009ti\u2009\u2264\u20091000,\u2009ti\u2009&lt;\u2009ti\u2009+\u20091) where ti denotes the number of minutes one needs to solve the i-th problem.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"8c704de75ab85f9e2c04a926143c8b4a","prob_desc_created_at":"1459182900","source_code":"import math\nn, c = list(map(int,input().split()))\np = list(map(int,input().split()))\nt = list(map(int,input().split()))\nsum1 = []\nsum2 = []\nsum = 0\nt2 = []\nfor i in range(n):\n    sum = sum + t[i]\n    t2.append(sum)\nsum = 0\nfor i in range(n):\n    sum = sum + p[i] - c*t2[i]\n    if sum>=0:\n        sum1.append(sum)\n    sum = 0\nt2 = []\np.reverse()\nt.reverse()\nfor i in range(n):\n    sum = sum + t[i]\n    t2.append(sum)\nsum = 0\nfor i in range(n):\n    sum = sum + p[i] - c*t2[i]\n    if sum>=0:\n        sum2.append(sum)\n    sum = 0\nsum = 0\nfor i in range(len(sum1)):\n    sum = sum + sum1[i]\nmm = sum\nsum = 0\nfor i in range(len(sum2)):\n    sum = sum + sum2[i]\nmm2=sum\nsum = 0\nif mm>mm2:\n    print(\"Limak\")\nelif mm<mm2:\n    print(\"Radewoosh\")\nelif mm==mm2:\n    print(\"Tie\")\n\n\n\n","prob_desc_sample_outputs":"[\"Limak\", \"Radewoosh\", \"Tie\"]","lang_cluster":"Python","code_uid":"a878227e7435c7b00734b2086456ce6e","prob_desc_notes":"NoteIn the first sample, there are 3 problems. Limak solves them as follows:  Limak spends 10 minutes on the 1-st problem and he gets 50\u2009-\u2009c\u00b710\u2009=\u200950\u2009-\u20092\u00b710\u2009=\u200930 points.  Limak spends 15 minutes on the 2-nd problem so he submits it 10\u2009+\u200915\u2009=\u200925 minutes after the start of the contest. For the 2-nd problem he gets 85\u2009-\u20092\u00b725\u2009=\u200935 points.  He spends 25 minutes on the 3-rd problem so he submits it 10\u2009+\u200915\u2009+\u200925\u2009=\u200950 minutes after the start. For this problem he gets 250\u2009-\u20092\u00b750\u2009=\u2009150 points. So, Limak got 30\u2009+\u200935\u2009+\u2009150\u2009=\u2009215 points.Radewoosh solves problem in the reversed order:  Radewoosh solves 3-rd problem after 25 minutes so he gets 250\u2009-\u20092\u00b725\u2009=\u2009200 points.  He spends 15 minutes on the 2-nd problem so he submits it 25\u2009+\u200915\u2009=\u200940 minutes after the start. He gets 85\u2009-\u20092\u00b740\u2009=\u20095 points for this problem.  He spends 10 minutes on the 1-st problem so he submits it 25\u2009+\u200915\u2009+\u200910\u2009=\u200950 minutes after the start. He gets max(0,\u200950\u2009-\u20092\u00b750)\u2009=\u2009max(0,\u2009\u2009-\u200950)\u2009=\u20090 points. Radewoosh got 200\u2009+\u20095\u2009+\u20090\u2009=\u2009205 points in total. Limak has 215 points so Limak wins.In the second sample, Limak will get 0 points for each problem and Radewoosh will first solve the hardest problem and he will get 250\u2009-\u20096\u00b725\u2009=\u2009100 points for that. Radewoosh will get 0 points for other two problems but he is the winner anyway.In the third sample, Limak will get 2 points for the 1-st problem and 2 points for the 2-nd problem. Radewoosh will get 4 points for the 8-th problem. They won't get points for other problems and thus there is a tie because 2\u2009+\u20092\u2009=\u20094.","prob_desc_output_spec":"Print \"Limak\" (without quotes) if Limak will get more points in total. Print \"Radewoosh\" (without quotes) if Radewoosh will get more points in total. Print \"Tie\" (without quotes) if Limak and Radewoosh will get the same total number of points.","prob_desc_output_to":"standard output","prob_desc_description":"Limak and Radewoosh are going to compete against each other in the upcoming algorithmic contest. They are equally skilled but they won't solve problems in the same order.There will be n problems. The i-th problem has initial score pi and it takes exactly ti minutes to solve it. Problems are sorted by difficulty\u00a0\u2014 it's guaranteed that pi\u2009&lt;\u2009pi\u2009+\u20091 and ti\u2009&lt;\u2009ti\u2009+\u20091.A constant c is given too, representing the speed of loosing points. Then, submitting the i-th problem at time x (x minutes after the start of the contest) gives max(0,\u2009 pi\u2009-\u2009c\u00b7x) points.Limak is going to solve problems in order 1,\u20092,\u2009...,\u2009n (sorted increasingly by pi). Radewoosh is going to solve them in order n,\u2009n\u2009-\u20091,\u2009...,\u20091 (sorted decreasingly by pi). Your task is to predict the outcome\u00a0\u2014 print the name of the winner (person who gets more points at the end) or a word \"Tie\" in case of a tie.You may assume that the duration of the competition is greater or equal than the sum of all ti. That means both Limak and Radewoosh will accept all n problems.","hidden_unit_tests":"[{\"input\": \"3 2\\r\\n50 85 250\\r\\n10 15 25\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"3 6\\r\\n50 85 250\\r\\n10 15 25\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"8 1\\r\\n10 20 30 40 50 60 70 80\\r\\n8 10 58 63 71 72 75 76\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"4 1\\r\\n3 5 6 9\\r\\n1 2 4 8\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"4 1\\r\\n1 3 6 10\\r\\n1 5 7 8\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"4 1\\r\\n2 4 5 10\\r\\n2 3 9 10\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"18 4\\r\\n68 97 121 132 146 277 312 395 407 431 458 461 595 634 751 855 871 994\\r\\n1 2 3 4 9 10 13 21 22 29 31 34 37 38 39 41 48 49\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"50 1\\r\\n5 14 18 73 137 187 195 197 212 226 235 251 262 278 287 304 310 322 342 379 393 420 442 444 448 472 483 485 508 515 517 523 559 585 618 627 636 646 666 682 703 707 780 853 937 951 959 989 991 992\\r\\n30 84 113 173 199 220 235 261 266 277 300 306 310 312 347 356 394 396 397 409 414 424 446 462 468 487 507 517 537 566 594 643 656 660 662 668 706 708 773 774 779 805 820 827 868 896 929 942 961 995\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"4 1\\r\\n4 6 9 10\\r\\n2 3 4 5\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"4 1\\r\\n4 6 9 10\\r\\n3 4 5 7\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"4 1\\r\\n1 6 7 10\\r\\n2 7 8 10\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"4 1\\r\\n4 5 7 9\\r\\n1 4 5 8\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"50 1\\r\\n6 17 44 82 94 127 134 156 187 211 212 252 256 292 294 303 352 355 379 380 398 409 424 434 480 524 584 594 631 714 745 756 777 778 789 793 799 821 841 849 859 878 879 895 925 932 944 952 958 990\\r\\n15 16 40 42 45 71 99 100 117 120 174 181 186 204 221 268 289 332 376 394 403 409 411 444 471 487 499 539 541 551 567 589 619 623 639 669 689 722 735 776 794 822 830 840 847 907 917 927 936 988\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"50 10\\r\\n25 49 52 73 104 117 127 136 149 164 171 184 226 251 257 258 286 324 337 341 386 390 428 453 464 470 492 517 543 565 609 634 636 660 678 693 710 714 729 736 739 749 781 836 866 875 956 960 977 979\\r\\n2 4 7 10 11 22 24 26 27 28 31 35 37 38 42 44 45 46 52 53 55 56 57 59 60 61 64 66 67 68 69 71 75 76 77 78 79 81 83 85 86 87 89 90 92 93 94 98 99 100\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"50 10\\r\\n11 15 25 71 77 83 95 108 143 150 182 183 198 203 213 223 279 280 346 348 350 355 375 376 412 413 415 432 470 545 553 562 589 595 607 633 635 637 688 719 747 767 771 799 842 883 905 924 942 944\\r\\n1 3 5 6 7 10 11 12 13 14 15 16 19 20 21 23 25 32 35 36 37 38 40 41 42 43 47 50 51 54 55 56 57 58 59 60 62 63 64 65 66 68 69 70 71 72 73 75 78 80\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"32 6\\r\\n25 77 141 148 157 159 192 196 198 244 245 255 332 392 414 457 466 524 575 603 629 700 738 782 838 841 845 847 870 945 984 985\\r\\n1 2 4 5 8 9 10 12 13 14 15 16 17 18 20 21 22 23 24 26 28 31 38 39 40 41 42 43 45 47 48 49\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"5 1\\r\\n256 275 469 671 842\\r\\n7 9 14 17 26\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"2 1000\\r\\n1 2\\r\\n1 2\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"3 1\\r\\n1 50 809\\r\\n2 8 800\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"1 13\\r\\n866\\r\\n10\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"15 1\\r\\n9 11 66 128 199 323 376 386 393 555 585 718 935 960 971\\r\\n3 11 14 19 20 21 24 26 32 38 40 42 44 47 50\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"1 10\\r\\n546\\r\\n45\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"50 20\\r\\n21 43 51 99 117 119 158 167 175 190 196 244 250 316 335 375 391 403 423 428 451 457 460 480 487 522 539 559 566 584 598 602 604 616 626 666 675 730 771 787 828 841 861 867 886 889 898 970 986 991\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"50 21\\r\\n13 20 22 38 62 84 118 135 141 152 170 175 194 218 227 229 232 253 260 263 278 313 329 357 396 402 422 452 454 533 575 576 580 594 624 644 653 671 676 759 789 811 816 823 831 833 856 924 933 987\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"1 36\\r\\n312\\r\\n42\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"1 1000\\r\\n1\\r\\n1000\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"1 1\\r\\n1000\\r\\n1\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"50 35\\r\\n9 17 28 107 136 152 169 174 186 188 201 262 291 312 324 330 341 358 385 386 393 397 425 431 479 498 502 523 530 540 542 554 578 588 622 623 684 696 709 722 784 819 836 845 850 932 945 969 983 984\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"50 20\\r\\n12 113 116 120 138 156 167 183 185 194 211 228 234 261 278 287 310 317 346 361 364 397 424 470 496 522 527 536 611 648 668 704 707 712 717 752 761 766 815 828 832 864 872 885 889 901 904 929 982 993\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n\", \"output\": [\"Limak\"]}]","length":47,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 3\\nxyabd\", \"7 4\\nproblem\", \"2 2\\nab\", \"12 1\\nabaabbaaabbb\"]","prob_desc_input_spec":"The first line of input contains two integers\u00a0\u2014 $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 50$$$)\u00a0\u2013 the number of available stages and the number of stages to use in the rocket. The second line contains string $$$s$$$, which consists of exactly $$$n$$$ lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"56b13d313afef9dc6c6ba2758b5ea313","prob_desc_created_at":"1532617500","source_code":"\"\"\".\"\"\"\nstor_size, steps_nr = (int(x) for x in input().split())\nstorage = sorted(list(input()))\n\nbest_weight = 1e+9\nfor start_idx in range(stor_size):\n    curr_weight = 0\n    curr_last = 'A'\n    length = 0\n    for letter in storage[start_idx:]:\n        if ord(letter) - ord(curr_last) >= 2:\n            curr_weight += ord(letter) - ord('a') + 1\n            curr_last = letter\n            length += 1\n        if length == steps_nr:\n            break\n    if length == steps_nr:\n        best_weight = min(curr_weight, best_weight)\nif best_weight == 1e+9:\n    best_weight = -1\nprint(best_weight)\n","prob_desc_sample_outputs":"[\"29\", \"34\", \"-1\", \"1\"]","lang_cluster":"Python","code_uid":"dd225bab20e5302d0ee3673127b4c3bc","prob_desc_notes":"NoteIn the first example, the following rockets satisfy the condition: \"adx\" (weight is $$$1+4+24=29$$$); \"ady\" (weight is $$$1+4+25=30$$$); \"bdx\" (weight is $$$2+4+24=30$$$); \"bdy\" (weight is $$$2+4+25=31$$$).Rocket \"adx\" has the minimal weight, so the answer is $$$29$$$.In the second example, target rocket is \"belo\". Its weight is $$$2+5+12+15=34$$$.In the third example, $$$n=k=2$$$, so the rocket must have both stages: 'a' and 'b'. This rocket doesn't satisfy the condition, because these letters are adjacent in the alphabet. Answer is -1.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the minimal total weight of the rocket or -1, if it is impossible to build the rocket at all.","prob_desc_output_to":"standard output","prob_desc_description":"Natasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string\u00a0\u2014 concatenation of letters, which correspond to the stages.There are $$$n$$$ stages available. The rocket must contain exactly $$$k$$$ of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet (skipping one letter in between, or even more). For example, after letter 'c' can't go letters 'a', 'b', 'c' and 'd', but can go letters 'e', 'f', ..., 'z'.For the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage 'a 'weighs one ton,' b 'weighs two tons, and' z'\u00a0\u2014 $$$26$$$ tons.Build the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.","hidden_unit_tests":"[{\"input\": \"5 3\\r\\nxyabd\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"7 4\\r\\nproblem\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"2 2\\r\\nab\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"12 1\\r\\nabaabbaaabbb\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 13\\r\\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"169\"]}, {\"input\": \"50 14\\r\\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 1\\r\\na\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 1\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 2\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"13 13\\r\\nuwgmkyqeiaocs\\r\\n\", \"output\": [\"169\"]}, {\"input\": \"13 13\\r\\nhzdxpbfvrltnj\\r\\n\", \"output\": [\"182\"]}, {\"input\": \"1 1\\r\\nn\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"10 8\\r\\nsmzeblyjqw\\r\\n\", \"output\": [\"113\"]}, {\"input\": \"20 20\\r\\ntzmvhskkyugkuuxpvtbh\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"30 15\\r\\nwjzolzzkfulwgioksfxmcxmnnjtoav\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"40 30\\r\\nxumfrflllrrgswehqtsskefixhcxjrxbjmrpsshv\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"50 31\\r\\nahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiabpz\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"10 7\\r\\niuiukrxcml\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"38 2\\r\\nvjzarfykmrsrvwbwfwldsulhxtykmjbnwmdufa\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"12 6\\r\\nfwseyrarkwcd\\r\\n\", \"output\": [\"61\"]}, {\"input\": \"2 2\\r\\nac\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 1\\r\\nc\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 2\\r\\nad\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 1\\r\\nac\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 3\\r\\nadjz\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"3 3\\r\\naoz\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"3 1\\r\\nzzz\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"2 1\\r\\nxz\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"5 1\\r\\naaddd\\r\\n\", \"output\": [\"1\"]}]","length":21,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\\n2\\n3\", \"2\\n10\\n3\"]","prob_desc_input_spec":"The input contains three integers a, b and c, each on a single line (1\u2009\u2264\u2009a,\u2009b,\u2009c\u2009\u2264\u200910).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"1cad9e4797ca2d80a12276b5a790ef27","prob_desc_created_at":"1413709200","source_code":"def solve(a, b, c):\n    ans = 0\n    ans = max(ans, a+b+c)\n    ans = max(ans, (a+b)*c)\n    ans = max(ans, a*b*c)\n    ans = max(ans, a*(b+c))\n    return ans\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(solve(a, b, c))","prob_desc_sample_outputs":"[\"9\", \"60\"]","lang_cluster":"Python","code_uid":"26d41a5dba3408e4f6325104117abdc7","prob_desc_notes":null,"prob_desc_output_spec":"Print the maximum value of the expression that you can obtain.","prob_desc_output_to":"standard output","prob_desc_description":"Petya studies in a school and he adores Maths. His class has been studying arithmetic expressions. On the last class the teacher wrote three positive integers a, b, c on the blackboard. The task was to insert signs of operations '+' and '*', and probably brackets between the numbers so that the value of the resulting expression is as large as possible. Let's consider an example: assume that the teacher wrote numbers 1, 2 and 3 on the blackboard. Here are some ways of placing signs and brackets:  1+2*3=7  1*(2+3)=5  1*2*3=6  (1+2)*3=9 Note that you can insert operation signs only between a and b, and between b and c, that is, you cannot swap integers. For instance, in the given sample you cannot get expression (1+3)*2.It's easy to see that the maximum value that you can obtain is 9.Your task is: given a, b and c print the maximum value that you can get.","hidden_unit_tests":"[{\"input\": \"1\\r\\n2\\r\\n3\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"2\\r\\n10\\r\\n3\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"1\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1\\r\\n2\\r\\n1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10\\r\\n10\\r\\n10\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"5\\r\\n1\\r\\n3\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"3\\r\\n1\\r\\n5\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"6\\r\\n7\\r\\n1\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"1\\r\\n8\\r\\n3\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"9\\r\\n7\\r\\n2\\r\\n\", \"output\": [\"126\"]}, {\"input\": \"1\\r\\n1\\r\\n10\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"9\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"10\\r\\n5\\r\\n6\\r\\n\", \"output\": [\"300\"]}, {\"input\": \"8\\r\\n9\\r\\n7\\r\\n\", \"output\": [\"504\"]}, {\"input\": \"4\\r\\n2\\r\\n10\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"2\\r\\n8\\r\\n3\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"3\\r\\n5\\r\\n7\\r\\n\", \"output\": [\"105\"]}, {\"input\": \"1\\r\\n10\\r\\n1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"2\\r\\n2\\r\\n2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"5\\r\\n6\\r\\n1\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"10\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"1\\r\\n6\\r\\n1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1\\r\\n9\\r\\n1\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"2\\r\\n1\\r\\n2\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2\\r\\n6\\r\\n1\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"9\\r\\n2\\r\\n1\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"1\\r\\n9\\r\\n2\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"1\\r\\n3\\r\\n1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"4\"]}]","length":12,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\\n1\", \"1\\n2\", \"2\\n3 5\"]","prob_desc_input_spec":"The first line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of Dima's friends. Dima himself isn't considered to be his own friend. The second line contains n positive integers, not exceeding 5, representing, how many fingers the Dima's friends will show.  The numbers in the lines are separated by a single space.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"ff6b3fd358c758324c19a26283ab96a4","prob_desc_created_at":"1360769400","source_code":"#!\/usr\/bin\/env python3\n\nif __name__ == \"__main__\":\n\tn = int(input())\n\tfingers = list(map(int, input().split()))\n\ttotal_fingers = 0\n\tfor finger in fingers:\n\t\ttotal_fingers = (total_fingers + finger)\n\tm = 0\n\tunwanted_sums = list(range(1,5*n+6,n+1))\n\t#print(unwanted_sums)\n\tfor i in range(1, 6):\n\t\tif (total_fingers + i) not in unwanted_sums:\n\t\t\t#print(i)\n\t\t\tm += 1\t\t\n\t#print(\"----------\" + str(m) + \"-------------\")\n\tprint(m)\n","prob_desc_sample_outputs":"[\"3\", \"2\", \"3\"]","lang_cluster":"Python","code_uid":"6d959e8368e7fcab0d0d2962f2f531e4","prob_desc_notes":"NoteIn the first sample Dima can show 1, 3 or 5 fingers. If Dima shows 3 fingers, then the counting-out will go like that: Dima, his friend, Dima, his friend.In the second sample Dima can show 2 or 4 fingers.","prob_desc_output_spec":"In a single line print the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"Dima and his friends have been playing hide and seek at Dima's place all night. As a result, Dima's place got messy. In the morning they decided that they need to clean the place.To decide who exactly would clean the apartment, the friends want to play a counting-out game. First, all the guys stand in a circle, and then each of them shows some number of fingers on one hand (one to five), and then the boys count in a circle, starting from Dima, the number of people, respective to the total number of fingers shown. The person on who the countdown stops will clean the apartment.For example, if Dima and one of his friends played hide and seek, and 7 fingers were shown during the counting-out, then Dima would clean the place. If there were 2 or say, 8 fingers shown, then his friend would clean the place.Dima knows how many fingers each of his friends will show during the counting-out. Now he is interested in the number of ways to show some number of fingers on one hand (one to five), so that he did not have to clean the place. Help Dima.","hidden_unit_tests":"[{\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n3 5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1\\r\\n5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5\\r\\n4 4 3 5 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"6\\r\\n2 3 2 2 1 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"8\\r\\n2 2 5 3 4 3 3 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"7\\r\\n4 1 3 2 2 4 5\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3\\r\\n3 5 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"95\\r\\n4 2 3 4 4 5 2 2 4 4 3 5 3 3 3 5 4 2 5 4 2 1 1 3 4 2 1 3 5 4 2 1 1 5 1 1 2 2 4 4 5 4 5 5 2 1 2 2 2 4 5 5 2 4 3 4 4 3 5 2 4 1 5 4 5 1 3 2 4 2 2 1 5 3 1 5 3 4 3 3 2 1 2 2 1 3 1 5 2 3 1 1 2 5 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"31\\r\\n3 2 3 3 3 3 4 4 1 5 5 4 2 4 3 2 2 1 4 4 1 2 3 1 1 5 5 3 4 4 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"42\\r\\n3 1 2 2 5 1 2 2 4 5 4 5 2 5 4 5 4 4 1 4 3 3 4 4 4 4 3 2 1 3 4 5 5 2 1 2 1 5 5 2 4 4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"25\\r\\n4 5 5 5 3 1 1 4 4 4 3 5 4 4 1 4 4 1 2 4 2 5 4 5 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"73\\r\\n3 4 3 4 5 1 3 4 2 1 4 2 2 3 5 3 1 4 2 3 2 1 4 5 3 5 2 2 4 3 2 2 5 3 2 3 5 1 3 1 1 4 5 2 4 2 5 1 4 3 1 3 1 4 2 3 3 3 3 5 5 2 5 2 5 4 3 1 1 5 5 2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"46\\r\\n1 4 4 5 4 5 2 3 5 5 3 2 5 4 1 3 2 2 1 4 3 1 5 5 2 2 2 2 4 4 1 1 4 3 4 3 1 4 2 2 4 2 3 2 5 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"23\\r\\n5 2 1 1 4 2 5 5 3 5 4 5 5 1 1 5 2 4 5 3 4 4 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"6\\r\\n4 2 3 1 3 5\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"15\\r\\n5 5 5 3 5 4 1 3 3 4 3 4 1 4 4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"93\\r\\n1 3 1 4 3 3 5 3 1 4 5 4 3 2 2 4 3 1 4 1 2 3 3 3 2 5 1 3 1 4 5 1 1 1 4 2 1 2 3 1 1 1 5 1 5 5 1 2 5 4 3 2 2 4 4 2 5 4 5 5 3 1 3 1 2 1 3 1 1 2 3 4 4 5 5 3 2 1 3 3 5 1 3 5 4 4 1 3 3 4 2 3 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"96\\r\\n1 5 1 3 2 1 2 2 2 2 3 4 1 1 5 4 4 1 2 3 5 1 4 4 4 1 3 3 1 4 5 4 1 3 5 3 4 4 3 2 1 1 4 4 5 1 1 2 5 1 2 3 1 4 1 2 2 2 3 2 3 3 2 5 2 2 3 3 3 3 2 1 2 4 5 5 1 5 3 2 1 4 3 5 5 5 3 3 5 3 4 3 4 2 1 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"49\\r\\n1 4 4 3 5 2 2 1 5 1 2 1 2 5 1 4 1 4 5 2 4 5 3 5 2 4 2 1 3 4 2 1 4 2 1 1 3 3 2 3 5 4 3 4 2 4 1 4 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"73\\r\\n4 1 3 3 3 1 5 2 1 4 1 1 3 5 1 1 4 5 2 1 5 4 1 5 3 1 5 2 4 5 1 4 3 3 5 2 2 3 3 2 5 1 4 5 2 3 1 4 4 3 5 2 3 5 1 4 3 5 1 2 4 1 3 3 5 4 2 4 2 4 1 2 5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"41\\r\\n5 3 5 4 2 5 4 3 1 1 1 5 4 3 4 3 5 4 2 5 4 1 1 3 2 4 5 3 5 1 5 5 1 1 1 4 4 1 2 4 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n3 3 1 4 2 4 4 3 1 5 1 1 4 4 3 4 4 3 5 4 5 2 4 3 4 1 2 4 5 4 2 1 5 4 1 1 4 3 2 4 1 2 1 4 4 5 5 4 4 5 3 2 5 1 4 2 2 1 1 2 5 2 5 1 5 3 1 4 3 2 4 3 2 2 4 5 5 1 2 3 1 4 1 2 2 2 5 5 2 3 2 4 3 1 1 2 1 2 1 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n2 1 1 3 5 4 4 2 3 4 3 4 5 4 5 4 2 4 5 3 4 5 4 1 1 4 4 1 1 2 5 4 2 4 5 3 2 5 4 3 4 5 1 3 4 2 5 4 5 4 5 2 4 1 2 5 3 1 4 4 5 3 4 3 1 2 5 4 2 5 4 1 5 3 5 4 1 2 5 3 1 1 1 1 5 3 4 3 5 1 1 5 5 1 1 2 2 1 5 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n4 4 3 3 2 5 4 4 2 1 4 4 4 5 4 1 2 1 5 2 4 3 4 1 4 1 2 5 1 4 5 4 2 1 2 5 3 4 5 5 2 1 2 2 2 2 2 3 2 5 1 2 2 3 2 5 5 1 3 4 5 2 1 3 4 2 2 4 4 3 3 3 2 3 2 1 5 5 5 2 1 4 2 3 5 1 4 4 2 3 2 5 5 4 3 5 1 3 5 5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n4 4 2 5 4 2 2 3 4 4 3 2 3 3 1 3 4 3 3 4 1 3 1 4 5 3 4 3 1 1 1 3 3 2 3 4 3 4 2 2 1 5 1 4 5 1 1 1 3 3 1 1 3 2 5 4 2 5 2 4 5 4 4 1 1 2 1 1 4 5 1 1 5 3 3 2 5 5 5 1 4 1 4 1 1 3 2 3 4 4 2 5 5 2 5 1 1 3 5 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100\\r\\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\r\\n\", \"output\": [\"5\"]}]","length":17,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 -1\", \"1 3 1\", \"3 3 -1\"]","prob_desc_input_spec":"The only line contains three integers n, m and k (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u20091018, k is either 1 or -1).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"6b9eff690fae14725885cbc891ff7243","prob_desc_created_at":"1511099700","source_code":"mod=1000000007\nn,m,k=list(map(int,input().split()))\nif k==-1:\n    co=n+m\n    if co%2!=0:\n      print(\"0\")\n    else:\n      n=n-1\n      m=m-1\n      n=n*m\n      co=pow(2,n,mod)\n      co%=1000000007\n      print(co)\nelse:\n    n=n-1\n    m=m-1\n    n=n*m\n    co=pow(2,n,mod)\n    co%=1000000007\n    print(co)","prob_desc_sample_outputs":"[\"1\", \"1\", \"16\"]","lang_cluster":"Python","code_uid":"ca16485ad2473309ec7f95e5ea164aa4","prob_desc_notes":"NoteIn the first example the only way is to put -1 into the only block.In the second example the only way is to put 1 into every block.","prob_desc_output_spec":"Print a single number denoting the answer modulo 1000000007.","prob_desc_output_to":"standard output","prob_desc_description":"Ralph has a magic field which is divided into n\u2009\u00d7\u2009m blocks. That is to say, there are n rows and m columns on the field. Ralph can put an integer in each block. However, the magic field doesn't always work properly. It works only if the product of integers in each row and each column equals to k, where k is either 1 or -1.Now Ralph wants you to figure out the number of ways to put numbers in each block in such a way that the magic field works properly. Two ways are considered different if and only if there exists at least one block where the numbers in the first way and in the second way are different. You are asked to output the answer modulo 1000000007\u2009=\u2009109\u2009+\u20097.Note that there is no range of the numbers to put in the blocks, but we can prove that the answer is not infinity.","hidden_unit_tests":"[{\"input\": \"1 1 -1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 3 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 3 -1\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"2 7 1\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 4 -1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"173 69 -1\\r\\n\", \"output\": [\"814271739\"]}, {\"input\": \"110 142 1\\r\\n\", \"output\": [\"537040244\"]}, {\"input\": \"162 162 -1\\r\\n\", \"output\": [\"394042552\"]}, {\"input\": \"49 153 -1\\r\\n\", \"output\": [\"412796600\"]}, {\"input\": \"94 182 1\\r\\n\", \"output\": [\"33590706\"]}, {\"input\": \"106666666 233333333 1\\r\\n\", \"output\": [\"121241754\"]}, {\"input\": \"2 2 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"146 34 -1\\r\\n\", \"output\": [\"742752757\"]}, {\"input\": \"94 86 -1\\r\\n\", \"output\": [\"476913727\"]}, {\"input\": \"2529756051797760 2682355969139391 -1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3126690179932000 2474382898739836 -1\\r\\n\", \"output\": [\"917305624\"]}, {\"input\": \"3551499873841921 2512677762780671 -1\\r\\n\", \"output\": [\"350058339\"]}, {\"input\": \"3613456196418270 2872267429531501 1\\r\\n\", \"output\": [\"223552863\"]}, {\"input\": \"2886684369091916 3509787933422130 1\\r\\n\", \"output\": [\"341476979\"]}, {\"input\": \"3536041043537343 2416093514489183 1\\r\\n\", \"output\": [\"394974516\"]}, {\"input\": \"2273134852621270 2798005122439669 1\\r\\n\", \"output\": [\"901406364\"]}, {\"input\": \"2870150496178092 3171485931753811 -1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999999999999999999 1000000000000000000 1\\r\\n\", \"output\": [\"102810659\"]}, {\"input\": \"987654321987654321 666666666666666666 1\\r\\n\", \"output\": [\"279028602\"]}, {\"input\": \"1 2 -1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1 -1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000000000000000000 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000006 100000000000000000 1\\r\\n\", \"output\": [\"123624987\"]}]","length":20,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 1\", \"2 3\", \"7 3\"]","prob_desc_input_spec":"The single line of the input contains two positive integers a and b (1\u2009\u2264\u2009a,\u2009b\u2009\u2264\u2009100) \u2014 the number of red and blue socks that Vasya's got.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"775766790e91e539c1cfaa5030e5b955","prob_desc_created_at":"1443430800","source_code":"a, b = map(int, input().split())\nk = 0\nk2 = 0\nwhile a > 0 and b > 0:\n    a -= 1\n    b -= 1\n    k += 1\nif a > 0:\n        k2 = int(a\/\/2)\nelif b > 0:\n        k2 = int(b\/\/2)\nprint(k, k2)","prob_desc_sample_outputs":"[\"1 1\", \"2 0\", \"3 2\"]","lang_cluster":"Python","code_uid":"1238f451970ae68c785036cde7ad10a5","prob_desc_notes":"NoteIn the first sample Vasya can first put on one pair of different socks, after that he has two red socks left to wear on the second day.","prob_desc_output_spec":"Print two space-separated integers \u2014 the maximum number of days when Vasya can wear different socks and the number of days when he can wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got. Keep in mind that at the end of the day Vasya throws away the socks that he's been wearing on that day.","prob_desc_output_to":"standard output","prob_desc_description":"One day Vasya the Hipster decided to count how many socks he had. It turned out that he had a red socks and b blue socks.According to the latest fashion, hipsters should wear the socks of different colors: a red one on the left foot, a blue one on the right foot.Every day Vasya puts on new socks in the morning and throws them away before going to bed as he doesn't want to wash them.Vasya wonders, what is the maximum number of days when he can dress fashionable and wear different socks, and after that, for how many days he can then wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got.Can you help him?","hidden_unit_tests":"[{\"input\": \"3 1\\r\\n\", \"output\": [\"1 1\", \"1  1\", \"1\\r\\n1\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"2  0\", \"2 0\", \"2\\r\\n0\"]}, {\"input\": \"7 3\\r\\n\", \"output\": [\"3\\r\\n2\", \"3  2\", \"3 2\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"100 0\", \"100  0\", \"100\\r\\n0\"]}, {\"input\": \"4 10\\r\\n\", \"output\": [\"4\\r\\n3\", \"4  3\", \"4 3\"]}, {\"input\": \"6 10\\r\\n\", \"output\": [\"6\\r\\n2\", \"6 2\", \"6  2\"]}, {\"input\": \"6 11\\r\\n\", \"output\": [\"6\\r\\n2\", \"6 2\", \"6  2\"]}, {\"input\": \"10 40\\r\\n\", \"output\": [\"10\\r\\n15\", \"10 15\", \"10  15\"]}, {\"input\": \"11 56\\r\\n\", \"output\": [\"11 22\", \"11\\r\\n22\", \"11  22\"]}, {\"input\": \"34 30\\r\\n\", \"output\": [\"30\\r\\n2\", \"30 2\", \"30  2\"]}, {\"input\": \"33 33\\r\\n\", \"output\": [\"33  0\", \"33\\r\\n0\", \"33 0\"]}, {\"input\": \"100 45\\r\\n\", \"output\": [\"45\\r\\n27\", \"45  27\", \"45 27\"]}, {\"input\": \"100 23\\r\\n\", \"output\": [\"23  38\", \"23\\r\\n38\", \"23 38\"]}, {\"input\": \"45 12\\r\\n\", \"output\": [\"12  16\", \"12 16\", \"12\\r\\n16\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1  0\", \"1\\r\\n0\", \"1 0\"]}, {\"input\": \"1 100\\r\\n\", \"output\": [\"1  49\", \"1 49\", \"1\\r\\n49\"]}, {\"input\": \"100 1\\r\\n\", \"output\": [\"1  49\", \"1 49\", \"1\\r\\n49\"]}, {\"input\": \"68 59\\r\\n\", \"output\": [\"59  4\", \"59\\r\\n4\", \"59 4\"]}, {\"input\": \"45 99\\r\\n\", \"output\": [\"45\\r\\n27\", \"45  27\", \"45 27\"]}, {\"input\": \"99 100\\r\\n\", \"output\": [\"99  0\", \"99 0\", \"99\\r\\n0\"]}, {\"input\": \"100 98\\r\\n\", \"output\": [\"98 1\", \"98\\r\\n1\", \"98  1\"]}, {\"input\": \"59 12\\r\\n\", \"output\": [\"12 23\", \"12  23\", \"12\\r\\n23\"]}, {\"input\": \"86 4\\r\\n\", \"output\": [\"4  41\", \"4\\r\\n41\", \"4 41\"]}, {\"input\": \"68 21\\r\\n\", \"output\": [\"21 23\", \"21  23\", \"21\\r\\n23\"]}, {\"input\": \"100 11\\r\\n\", \"output\": [\"11  44\", \"11\\r\\n44\", \"11 44\"]}, {\"input\": \"100 10\\r\\n\", \"output\": [\"10 45\", \"10\\r\\n45\", \"10  45\"]}, {\"input\": \"15 45\\r\\n\", \"output\": [\"15\\r\\n15\", \"15  15\", \"15 15\"]}, {\"input\": \"11 32\\r\\n\", \"output\": [\"11\\r\\n10\", \"11 10\", \"11  10\"]}, {\"input\": \"34 96\\r\\n\", \"output\": [\"34\\r\\n31\", \"34  31\", \"34 31\"]}, {\"input\": \"89 89\\r\\n\", \"output\": [\"89  0\", \"89 0\", \"89\\r\\n0\"]}]","length":12,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"10 5\", \"-10 5\"]","prob_desc_input_spec":"The first line contains two integers x,\u2009y (\u2009-\u2009109\u2009\u2264\u2009x,\u2009y\u2009\u2264\u2009109,\u2009x\u2009\u2260\u20090,\u2009y\u2009\u2260\u20090).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"e2f15a9d9593eec2e19be3140a847712","prob_desc_created_at":"1376062200","source_code":"x,y = map(int,input().split())\n\nif  x > 0 and y > 0:\n    print(0, x + y, x + y, 0)\nelif x < 0 and y > 0:\n    print(-y + x, 0, 0,-x + y)\nelif x > 0 and y < 0:\n    print(0, y - x, x - y, 0)\nelse:\n    print(x + y, 0,0, x + y)\n","prob_desc_sample_outputs":"[\"0 15 15 0\", \"-15 0 0 15\"]","lang_cluster":"Python","code_uid":"e8f624d23e36b837e350d21df82c289f","prob_desc_notes":"NoteFigure to the first sample","prob_desc_output_spec":"Print in the single line four integers x1,\u2009y1,\u2009x2,\u2009y2 \u2014 the coordinates of the required points.","prob_desc_output_to":"standard output","prob_desc_description":"Vasily the bear has a favorite rectangle, it has one vertex at point (0,\u20090), and the opposite vertex at point (x,\u2009y). Of course, the sides of Vasya's favorite rectangle are parallel to the coordinate axes. Vasya also loves triangles, if the triangles have one vertex at point B\u2009=\u2009(0,\u20090). That's why today he asks you to find two points A\u2009=\u2009(x1,\u2009y1) and C\u2009=\u2009(x2,\u2009y2), such that the following conditions hold:  the coordinates of points: x1, x2, y1, y2 are integers. Besides, the following inequation holds: x1\u2009&lt;\u2009x2;  the triangle formed by point A, B and C is rectangular and isosceles ( is right);  all points of the favorite rectangle are located inside or on the border of triangle ABC;  the area of triangle ABC is as small as possible. Help the bear, find the required points. It is not so hard to proof that these points are unique.","hidden_unit_tests":"[{\"input\": \"10 5\\r\\n\", \"output\": [\"0 15 15 0\"]}, {\"input\": \"-10 5\\r\\n\", \"output\": [\"-15 0 0 15\"]}, {\"input\": \"20 -10\\r\\n\", \"output\": [\"0 -30 30 0\"]}, {\"input\": \"-10 -1000000000\\r\\n\", \"output\": [\"-1000000010 0 0 -1000000010\"]}, {\"input\": \"-1000000000 -1000000000\\r\\n\", \"output\": [\"-2000000000 0 0 -2000000000\"]}, {\"input\": \"1000000000 1000000000\\r\\n\", \"output\": [\"0 2000000000 2000000000 0\"]}, {\"input\": \"-123131 3123141\\r\\n\", \"output\": [\"-3246272 0 0 3246272\"]}, {\"input\": \"-23423 -243242423\\r\\n\", \"output\": [\"-243265846 0 0 -243265846\"]}, {\"input\": \"123112 4560954\\r\\n\", \"output\": [\"0 4684066 4684066 0\"]}, {\"input\": \"1321 -23131\\r\\n\", \"output\": [\"0 -24452 24452 0\"]}, {\"input\": \"1000000000 999999999\\r\\n\", \"output\": [\"0 1999999999 1999999999 0\"]}, {\"input\": \"54543 432423\\r\\n\", \"output\": [\"0 486966 486966 0\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"0 2 2 0\"]}, {\"input\": \"-1 -1\\r\\n\", \"output\": [\"-2 0 0 -2\"]}, {\"input\": \"-1 1\\r\\n\", \"output\": [\"-2 0 0 2\"]}, {\"input\": \"1 -1\\r\\n\", \"output\": [\"0 -2 2 0\"]}, {\"input\": \"42 -2\\r\\n\", \"output\": [\"0 -44 44 0\"]}, {\"input\": \"2 -435\\r\\n\", \"output\": [\"0 -437 437 0\"]}, {\"input\": \"76 -76\\r\\n\", \"output\": [\"0 -152 152 0\"]}, {\"input\": \"1000000000 1\\r\\n\", \"output\": [\"0 1000000001 1000000001 0\"]}, {\"input\": \"1000000000 -1\\r\\n\", \"output\": [\"0 -1000000001 1000000001 0\"]}, {\"input\": \"-1000000000 1\\r\\n\", \"output\": [\"-1000000001 0 0 1000000001\"]}, {\"input\": \"-1000000000 -1\\r\\n\", \"output\": [\"-1000000001 0 0 -1000000001\"]}, {\"input\": \"1000000000 -999999999\\r\\n\", \"output\": [\"0 -1999999999 1999999999 0\"]}, {\"input\": \"-1000000000 999999999\\r\\n\", \"output\": [\"-1999999999 0 0 1999999999\"]}, {\"input\": \"-1000000000 -999999999\\r\\n\", \"output\": [\"-1999999999 0 0 -1999999999\"]}, {\"input\": \"999999999 1000000000\\r\\n\", \"output\": [\"0 1999999999 1999999999 0\"]}, {\"input\": \"-999999999 1000000000\\r\\n\", \"output\": [\"-1999999999 0 0 1999999999\"]}, {\"input\": \"999999999 -1000000000\\r\\n\", \"output\": [\"0 -1999999999 1999999999 0\"]}, {\"input\": \"-999999999 -1000000000\\r\\n\", \"output\": [\"-1999999999 0 0 -1999999999\"]}]","length":10,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"####\\n.#..\\n####\\n....\", \"####\\n....\\n####\\n....\"]","prob_desc_input_spec":"Four lines contain four characters each: the j-th character of the i-th line equals \".\" if the cell in the i-th row and the j-th column of the square is painted white, and \"#\", if the cell is black.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"01b145e798bbdf0ca2ecc383676d79f3","prob_desc_created_at":"1364025600","source_code":"#!\/usr\/bin\/env python\n# coding: utf-8\n\n# In[14]:\n\n\n# # n = int(input())\n# # line = list(map(int, input().split()))\n# # line = list(str(input()))\n# from tqdm import trange\n\n\n# In[24]:\n\n\nfrom collections import Counter\n\n\n# In[13]:\n\n\nmatrix = []\n\nfor _ in range(4):\n    matrix.append(list(str(input())))\n\n\n# In[29]:\n\n\nans = \"NO\"\n\nfor i in range(3):\n    for j in range(3):\n        tmp_list = [matrix[i][j], matrix[i][j+1], matrix[i+1][j], matrix[i+1][j+1]]\n        tmp_dict = Counter(tmp_list)\n        if max(tmp_dict.values()) >= 3:\n            ans = \"YES\"\n            break\n\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"Python","code_uid":"08666196b2637004356f559eef4c2fdb","prob_desc_notes":"NoteIn the first test sample it is enough to repaint the first cell in the second row. After such repainting the required 2\u2009\u00d7\u20092 square is on the intersection of the 1-st and 2-nd row with the 1-st and 2-nd column.","prob_desc_output_spec":"Print \"YES\" (without the quotes), if the test can be passed and \"NO\" (without the quotes) otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"In the city of Ultima Thule job applicants are often offered an IQ test. The test is as follows: the person gets a piece of squared paper with a 4\u2009\u00d7\u20094 square painted on it. Some of the square's cells are painted black and others are painted white. Your task is to repaint at most one cell the other color so that the picture has a 2\u2009\u00d7\u20092 square, completely consisting of cells of the same color. If the initial picture already has such a square, the person should just say so and the test will be completed. Your task is to write a program that determines whether it is possible to pass the test. You cannot pass the test if either repainting any cell or no action doesn't result in a 2\u2009\u00d7\u20092 square, consisting of cells of the same color.","hidden_unit_tests":"[{\"input\": \"####\\r\\n.#..\\r\\n####\\r\\n....\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"####\\r\\n....\\r\\n####\\r\\n....\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"....\\r\\n....\\r\\n....\\r\\n....\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"###.\\r\\n...#\\r\\n###.\\r\\n...#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".##.\\r\\n#..#\\r\\n.##.\\r\\n#..#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".#.#\\r\\n#.#.\\r\\n.#.#\\r\\n#.#.\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"##..\\r\\n..##\\r\\n##..\\r\\n..##\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"#.#.\\r\\n#.#.\\r\\n.#.#\\r\\n.#.#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".#.#\\r\\n#.#.\\r\\n#.#.\\r\\n#.#.\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".#.#\\r\\n#.#.\\r\\n#.#.\\r\\n.#.#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"#.#.\\r\\n#.#.\\r\\n#.#.\\r\\n#.#.\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".#.#\\r\\n.#.#\\r\\n.#.#\\r\\n.#.#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"#..#\\r\\n.##.\\r\\n####\\r\\n####\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"#.#.\\r\\n.###\\r\\n#.#.\\r\\n.###\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"#..#\\r\\n.##.\\r\\n.##.\\r\\n#..#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".##.\\r\\n.#..\\r\\n##.#\\r\\n#..#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".##.\\r\\n##..\\r\\n#..#\\r\\n..##\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"##..\\r\\n##..\\r\\n..##\\r\\n..##\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".#..\\r\\n###.\\r\\n.#.#\\r\\n..#.\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"####\\r\\n#...\\r\\n#.#.\\r\\n#...\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"###.\\r\\n###.\\r\\n...#\\r\\n...#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"####\\r\\n#..#\\r\\n.##.\\r\\n....\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"#.##\\r\\n##.#\\r\\n#.##\\r\\n##.#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".#.#\\r\\n#.#.\\r\\n.#.#\\r\\n#.##\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"##..\\r\\n..##\\r\\n##..\\r\\n...#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".#..\\r\\n..##\\r\\n##..\\r\\n..##\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"##..\\r\\n...#\\r\\n##..\\r\\n...#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".#..\\r\\n..#.\\r\\n.#..\\r\\n..#.\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"....\\r\\n....\\r\\n....\\r\\n.#.#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"....\\r\\n....\\r\\n....\\r\\n...#\\r\\n\", \"output\": [\"YES\"]}]","length":54,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n4 1 7 8 3 8\\n1\"]","prob_desc_input_spec":"The first line of the input contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100), where n \u2014 the number of students shouted \"Fly, freebie, fly!\" The second line contains n positive integers ti (1\u2009\u2264\u2009ti\u2009\u2264\u20091000). The last line contains integer T (1\u2009\u2264\u2009T\u2009\u2264\u20091000) \u2014 the time interval during which the freebie was near the dormitory.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"086d07bd6f9031df09bd6a6e8fe8f25c","prob_desc_created_at":"1389906900","source_code":"n, t = input(), [0] * 1002\nfor i in map(int, input().split()): t[i] += 1\nT = int(input()) + 1\nfor i in range(1000): t[i + 1] += t[i]\nprint(max(t[i + T] - t[i] for i in range(-1, 1001 - T)))","prob_desc_sample_outputs":"[\"3\"]","lang_cluster":"Python","code_uid":"a71a01171806a337eb6b0f1c9f3268f4","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the largest number of people who will pass exam tomorrow because of the freebie visit.","prob_desc_output_to":"standard output","prob_desc_description":"Everyone loves a freebie. Especially students.It is well-known that if in the night before exam a student opens window, opens the student's record-book and shouts loudly three times \"Fly, freebie, fly!\" \u2014 then flown freebie helps him to pass the upcoming exam.In the night before the exam on mathematical analysis n students living in dormitory shouted treasured words. The i-th student made a sacrament at the time ti, where ti is the number of seconds elapsed since the beginning of the night.It is known that the freebie is a capricious and willful lady. That night the freebie was near dormitory only for T seconds. Therefore, if for two students their sacrament times differ for more than T, then the freebie didn't visit at least one of them.Since all students are optimists, they really want to know what is the maximal number of students visited by the freebie can be.","hidden_unit_tests":"[{\"input\": \"6\\r\\n4 1 7 8 3 8\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\n4 2 1 5\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n4 7 1 3 8 5 2 1 8 4\\r\\n3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"8\\r\\n39 49 37 28 40 17 50 2\\r\\n10\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2\\r\\n1 1\\r\\n1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 1\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 1\\r\\n1000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 2\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n450 826\\r\\n1000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n3 1 1\\r\\n1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n3 1 2\\r\\n2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n3 4 3\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n3 4 3\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n63 69 36 40 74 31 86 42 81 95 60 55 98 98 2 16 84 37 61 47 81 91 85 62 85 32 79 74 65 48 39 60 97 90 59 76 98 73 58 5 16 54 59 42 9 27 95 24 9 6 42 49 64 61 22 27 43 60 39 87 99 57 5 62 48 67 81 36 27 87 41 88 5 33 43 81 82 65 46 52 43 68 85 75 81 99 30 56 67 55 92 4 3 3 66 32 30 45 22 88\\r\\n5\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"100\\r\\n97 29 39 42 68 100 44 54 6 70 17 100 52 85 67 1 43 49 1 47 98 35 5 38 37 73 84 20 13 15 78 65 29 92 20 40 38 11 12 100 24 94 29 92 83 47 25 63 23 85 85 93 61 60 35 40 96 50 19 15 28 19 98 59 42 14 54 65 2 53 38 9 15 69 43 63 63 8 55 12 81 57 69 21 57 11 99 45 23 31 59 2 16 61 43 36 12 39 42 13\\r\\n50\\r\\n\", \"output\": [\"62\"]}, {\"input\": \"100\\r\\n31 1 56 82 96 98 25 41 74 73 8 66 95 50 89 77 98 12 69 45 6 10 48 59 1 77 15 77 9 52 66 8 6 71 39 3 58 73 66 45 8 22 67 83 58 6 96 79 46 43 44 90 13 67 56 32 83 96 93 22 49 10 100 79 99 41 13 71 42 96 89 10 84 95 89 7 18 49 16 54 61 35 25 71 26 68 22 40 68 19 30 51 18 20 12 61 11 23 86 72\\r\\n1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100\\r\\n30 74 20 6 3 63 48 45 36 26 33 24 60 71 45 5 19 37 74 100 98 82 67 76 37 46 68 48 56 29 33 19 15 84 76 92 50 53 42 19 5 91 23 38 93 50 39 45 89 17 57 14 86 81 31 6 16 5 80 6 86 49 18 75 30 30 85 94 38 33 50 76 72 32 73 96 28 3 18 20 96 84 89 48 71 64 6 59 87 31 94 24 9 64 15 86 66 11 32 40\\r\\n90\\r\\n\", \"output\": [\"94\"]}, {\"input\": \"100\\r\\n398 82 739 637 913 962 680 125 963 931 311 680 20 530 795 126 881 666 226 323 594 416 176 6 820 317 866 723 831 432 139 706 608 218 963 550 592 544 874 927 763 468 121 424 91 956 42 442 883 66 299 654 964 730 160 615 515 255 709 278 224 223 304 292 41 450 445 556 477 327 647 518 90 470 894 837 655 495 612 113 746 610 751 486 116 933 314 348 736 58 219 429 976 773 678 642 696 522 161 422\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n760 621 622 793 66 684 411 813 474 404 304 934 319 411 99 965 722 156 681 400 481 462 571 726 696 244 124 350 403 566 564 641 381 494 703 3 348 213 343 390 27 660 46 591 990 931 477 823 890 21 936 267 282 753 599 269 387 443 622 673 473 745 646 224 911 7 155 880 332 932 51 994 144 666 789 691 323 738 192 372 191 246 903 666 929 252 132 614 11 938 298 286 309 596 210 18 143 760 759 584\\r\\n10\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100\\r\\n923 357 749 109 685 126 961 437 859 91 985 488 644 777 950 144 479 667 1 535 475 38 843 606 672 333 798 42 595 854 410 914 934 586 329 595 861 321 603 924 434 636 475 395 619 449 336 790 279 931 605 898 276 47 537 935 508 576 168 465 115 884 960 593 883 581 468 426 848 289 525 309 589 106 924 238 829 975 897 373 650 41 952 621 817 46 366 488 924 561 960 449 311 32 517 737 20 765 799 3\\r\\n100\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"100\\r\\n98 63 672 100 254 218 623 415 426 986 920 915 736 795 407 541 382 213 935 743 961 59 660 512 134 935 248 378 739 356 543 714 28 667 602 596 759 791 103 564 225 520 159 542 966 332 983 655 517 273 95 242 593 940 286 236 41 318 941 727 384 225 319 627 982 359 232 769 854 172 643 598 215 231 305 30 347 469 929 919 90 294 739 641 368 270 932 452 234 741 309 234 357 392 707 873 808 398 417 483\\r\\n1000\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n2 1 1 1 2 2 2 2 2 2 1 1 1 1 2 2 1 1 1 2 2 1 1 1 1 2 1 2 1 2 1 2 1 2 2 2 1 1 2 1 2 2 1 1 2 2 2 2 2 1 1 2 1 1 1 2 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 1 2 2 1 2 2 1 1 1 2 2 2 1 1 2 2 1 2 2 2 1 2 2 1 2 2\\r\\n1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n3 3 1 2 3 3 1 3 3 2 2 2 2 1 2 3 2 1 2 2 2 2 3 2 1 3 3 3 2 1 3 1 2 1 1 2 2 3 2 2 3 1 1 3 1 2 1 3 3 1 1 3 1 3 2 3 3 2 2 2 2 1 1 1 2 1 1 2 1 1 1 1 1 3 2 2 1 3 1 1 3 1 2 2 1 3 1 1 1 1 2 2 2 3 2 2 3 1 1 3\\r\\n1\\r\\n\", \"output\": [\"72\"]}, {\"input\": \"100\\r\\n2 1 3 4 1 1 4 1 3 2 1 4 4 4 4 4 3 2 1 1 2 2 1 3 3 1 1 1 2 3 4 3 1 1 1 4 2 2 2 2 4 1 2 4 2 2 4 3 3 4 1 2 4 1 3 4 1 2 1 2 1 3 3 2 1 1 4 2 1 3 3 2 3 4 1 2 2 4 2 1 4 3 4 3 1 4 3 1 2 3 3 3 2 4 1 1 4 1 2 3\\r\\n1\\r\\n\", \"output\": [\"55\"]}, {\"input\": \"100\\r\\n5 1 3 1 2 3 2 5 5 2 5 1 1 4 1 1 3 5 3 3 3 3 4 4 3 5 4 1 1 3 1 4 2 5 2 5 4 2 3 5 1 3 5 5 5 2 2 5 1 4 1 5 1 5 1 3 3 2 2 4 3 2 1 4 2 5 4 1 2 1 4 3 3 5 4 3 5 5 1 2 4 1 4 2 1 1 2 5 3 3 4 1 3 3 3 5 4 1 1 1\\r\\n1\\r\\n\", \"output\": [\"41\"]}, {\"input\": \"100\\r\\n1 7 8 10 9 4 2 1 6 5 10 6 3 1 10 1 8 4 3 1 7 4 3 7 4 9 1 3 3 5 10 3 7 10 10 10 3 6 2 8 1 3 3 6 2 8 3 7 8 3 4 1 6 4 4 2 10 6 2 10 10 1 7 8 8 1 9 8 7 8 5 2 5 9 2 5 7 10 3 9 8 3 9 4 3 8 6 8 2 8 9 6 7 10 7 9 6 4 4 8\\r\\n1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"1\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n1\\r\\n1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n849\\r\\n1\\r\\n\", \"output\": [\"1\"]}]","length":5,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"512 megabytes","difficulty":1500.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\", \"3\"]","prob_desc_input_spec":"The only line contains a single integer $$$k$$$ ($$$1 \\leq k \\leq 10^{16})$$$.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"8001a7570766cadcc538217e941b3031","prob_desc_created_at":"1592491500","source_code":"import math\n\ndef res(arr):\n    diff = 0\n    for i in range(3):\n        diff =  diff ^arr[i]\n    if diff == 0:\n        return 1\n\n    for i in range(2):\n        if  brr[i]%arr[i] != 0: \n            continue\n        div = brr[i] \/\/ arr[i]\n        count = 0\n        for j in range(i+1,3):\n            if brr[j]%arr[j] != 0: \n                continue\n            if div == brr[j]\/\/arr[j]:\n                count +=1\n        if count > 1:\n            return 2\ndef solution():\n\n    n = int(input())\n    low = math.floor(n**(1\/10))\n    st = 'codeforces'\n    cal = low**(10)\n    lo = [low for i in range(10)]\n    for i in range(0,10):\n        if cal >= n:\n            break\n        lo[i] = low+1\n        cal = cal\/\/ low\n        cal *= (low+1)\n    # print(lo)\n    for i in range(10):\n        print(st[i]*lo[i],end= '')\n\n\nsolution()\n  \n","prob_desc_sample_outputs":"[\"codeforces\", \"codeforcesss\"]","lang_cluster":"Python","code_uid":"3ec77179286035bf8f5dca6c8e943524","prob_desc_notes":null,"prob_desc_output_spec":"Print a shortest string of lowercase English letters that contains at least $$$k$$$ codeforces subsequences. If there are several such strings, print any of them.","prob_desc_output_to":"standard output","prob_desc_description":"Karl likes Codeforces and subsequences. He wants to find a string of lowercase English letters that contains at least $$$k$$$ subsequences codeforces. Out of all possible strings, Karl wants to find a shortest one.Formally, a codeforces subsequence of a string $$$s$$$ is a subset of ten characters of $$$s$$$ that read codeforces from left to right. For example, codeforces contains codeforces a single time, while codeforcesisawesome contains codeforces four times: codeforcesisawesome, codeforcesisawesome, codeforcesisawesome, codeforcesisawesome.Help Karl find any shortest string that contains at least $$$k$$$ codeforces subsequences.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"codeforces\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"ccoodeforces\"]}, {\"input\": \"421654016\\r\\n\", \"output\": [\"ccccccccooooooooddddddddeeeeeeefffffffooooooorrrrrrrccccccceeeeeeesssssss\"]}, {\"input\": \"10000000000000000\\r\\n\", \"output\": [\"ccccccccccccccccccccccccccccccccccccccccooooooooooooooooooooooooooooooooooooooooddddddddddddddddddddddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffoooooooooooooooooooooooooooooooooooooooorrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrcccccccccccccccccccccccccccccccccccccccceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeesssssssssssssssssssssssssssssssssssssss\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"ccooddeforces\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"ccooddeforces\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"ccooddeforces\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"ccooddeforces\"]}, {\"input\": \"16\\r\\n\", \"output\": [\"ccooddeeforces\"]}, {\"input\": \"31\\r\\n\", \"output\": [\"ccooddeefforces\"]}, {\"input\": \"64\\r\\n\", \"output\": [\"ccooddeeffoorces\"]}, {\"input\": \"128\\r\\n\", \"output\": [\"ccooddeeffoorrces\"]}, {\"input\": \"256\\r\\n\", \"output\": [\"ccooddeeffoorrcces\"]}, {\"input\": \"512\\r\\n\", \"output\": [\"ccooddeeffoorrccees\"]}, {\"input\": \"513\\r\\n\", \"output\": [\"ccooddeeffoorrcceess\"]}, {\"input\": \"666666\\r\\n\", \"output\": [\"ccccooooddddeeeeffffoooorrrrcccceeeesss\"]}, {\"input\": \"1537\\r\\n\", \"output\": [\"cccoooddeeffoorrcceess\"]}, {\"input\": \"10000000000\\r\\n\", \"output\": [\"ccccccccccooooooooooddddddddddeeeeeeeeeeffffffffffoooooooooorrrrrrrrrrcccccccccceeeeeeeeeessssssssss\"]}, {\"input\": \"10000000001\\r\\n\", \"output\": [\"cccccccccccooooooooooddddddddddeeeeeeeeeeffffffffffoooooooooorrrrrrrrrrcccccccccceeeeeeeeeessssssssss\"]}, {\"input\": \"9728000000000\\r\\n\", \"output\": [\"ccccccccccccccccccccooooooooooooooooooooddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeffffffffffffffffffffoooooooooooooooooooorrrrrrrrrrrrrrrrrrrrcccccccccccccccccccceeeeeeeeeeeeeeeeeeeesssssssssssssssssss\"]}, {\"input\": \"9728000000001\\r\\n\", \"output\": [\"ccccccccccccccccccccooooooooooooooooooooddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeffffffffffffffffffffoooooooooooooooooooorrrrrrrrrrrrrrrrrrrrcccccccccccccccccccceeeeeeeeeeeeeeeeeeeessssssssssssssssssss\"]}, {\"input\": \"6131066257801\\r\\n\", \"output\": [\"cccccccccccccccccccooooooooooooooooooodddddddddddddddddddeeeeeeeeeeeeeeeeeeefffffffffffffffffffooooooooooooooooooorrrrrrrrrrrrrrrrrrrccccccccccccccccccceeeeeeeeeeeeeeeeeeesssssssssssssssssss\"]}, {\"input\": \"6131066257802\\r\\n\", \"output\": [\"ccccccccccccccccccccooooooooooooooooooodddddddddddddddddddeeeeeeeeeeeeeeeeeeefffffffffffffffffffooooooooooooooooooorrrrrrrrrrrrrrrrrrrccccccccccccccccccceeeeeeeeeeeeeeeeeeesssssssssssssssssss\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"ccodeforces\"]}, {\"input\": \"1024\\r\\n\", \"output\": [\"ccooddeeffoorrcceess\"]}, {\"input\": \"600\\r\\n\", \"output\": [\"ccooddeeffoorrcceess\"]}, {\"input\": \"8140406085191601\\r\\n\", \"output\": [\"cccccccccccccccccccccccccccccccccccccccooooooooooooooooooooooooooooooooooooooodddddddddddddddddddddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeefffffffffffffffffffffffffffffffffffffffooooooooooooooooooooooooooooooooooooooorrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrccccccccccccccccccccccccccccccccccccccceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeesssssssssssssssssssssssssssssssssssssss\"]}, {\"input\": \"59049\\r\\n\", \"output\": [\"cccooodddeeefffooorrrccceeesss\"]}, {\"input\": \"1354202317062145\\r\\n\", \"output\": [\"cccccccccccccccccccccccccccccccccooooooooooooooooooooooooooooooooodddddddddddddddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeefffffffffffffffffffffffffffffffffooooooooooooooooooooooooooooooooorrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrcccccccccccccccccccccccccccccccceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeessssssssssssssssssssssssssssssss\"]}, {\"input\": \"9238957977600001\\r\\n\", \"output\": [\"ccccccccccccccccccccccccccccccccccccccccooooooooooooooooooooooooooooooooooooooooddddddddddddddddddddddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffoooooooooooooooooooooooooooooooooooooooorrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrccccccccccccccccccccccccccccccccccccccceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeesssssssssssssssssssssssssssssssssssssss\"]}]","length":41,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 1\", \"1 2 2\", \"1 3 5\", \"6 2 9\"]","prob_desc_input_spec":"The first and only line of input contains three space-separated integers a, b and c (1\u2009\u2264\u2009a,\u2009b,\u2009c\u2009\u2264\u20095\u2009000)\u00a0\u2014 the number of islands in the red, blue and purple clusters, respectively.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"b6dc5533fbf285d5ef4cf60ef6300383","prob_desc_created_at":"1507296900","source_code":"a,b,c=map(int,input().split())\nM=998244353\ndef C(x, y):\n\tz,t=0, 1\n\tfor i in range(min(x,y)+1):\n\t\tz+=t\n\t\tt*=(x-i)*(y-i)*pow(i+1,M-2,M)%M\n\treturn z\nprint(C(a,b)*C(a,c)*C(b,c)%M)\n","prob_desc_sample_outputs":"[\"8\", \"63\", \"3264\", \"813023575\"]","lang_cluster":"Python","code_uid":"47aed50c65c63b3d6e7a19409308fac5","prob_desc_notes":"NoteIn the first example, there are 3 bridges that can possibly be built, and no setup of bridges violates the restrictions. Thus the answer is 23\u2009=\u20098.In the second example, the upper two structures in the figure below are instances of valid ones, while the lower two are invalid due to the blue and purple clusters, respectively.  ","prob_desc_output_spec":"Output one line containing an integer\u00a0\u2014 the number of different ways to build bridges, modulo 998\u2009244\u2009353.","prob_desc_output_to":"standard output","prob_desc_description":"\u2014 This is not playing but duty as allies of justice, Nii-chan!\u2014 Not allies but justice itself, Onii-chan!With hands joined, go everywhere at a speed faster than our thoughts! This time, the Fire Sisters\u00a0\u2014 Karen and Tsukihi\u00a0\u2014 is heading for somewhere they've never reached\u00a0\u2014 water-surrounded islands!There are three clusters of islands, conveniently coloured red, blue and purple. The clusters consist of a, b and c distinct islands respectively.Bridges have been built between some (possibly all or none) of the islands. A bridge bidirectionally connects two different islands and has length 1. For any two islands of the same colour, either they shouldn't be reached from each other through bridges, or the shortest distance between them is at least 3, apparently in order to prevent oddities from spreading quickly inside a cluster.The Fire Sisters are ready for the unknown, but they'd also like to test your courage. And you're here to figure out the number of different ways to build all bridges under the constraints, and give the answer modulo 998\u2009244\u2009353. Two ways are considered different if a pair of islands exist, such that there's a bridge between them in one of them, but not in the other.","hidden_unit_tests":"[{\"input\": \"1 1 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 2 2\\r\\n\", \"output\": [\"63\"]}, {\"input\": \"1 3 5\\r\\n\", \"output\": [\"3264\"]}, {\"input\": \"6 2 9\\r\\n\", \"output\": [\"813023575\"]}, {\"input\": \"7 3 7\\r\\n\", \"output\": [\"807577560\"]}, {\"input\": \"135 14 39\\r\\n\", \"output\": [\"414849507\"]}, {\"input\": \"5000 5000 5000\\r\\n\", \"output\": [\"986778560\"]}, {\"input\": \"2 1 1\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"1 1 3\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"1 2 3\\r\\n\", \"output\": [\"156\"]}, {\"input\": \"4 1 2\\r\\n\", \"output\": [\"315\"]}, {\"input\": \"5 9 4\\r\\n\", \"output\": [\"661093467\"]}, {\"input\": \"4 2 5\\r\\n\", \"output\": [\"326151\"]}, {\"input\": \"9 4 10\\r\\n\", \"output\": [\"391175867\"]}, {\"input\": \"16 8 29\\r\\n\", \"output\": [\"349763770\"]}, {\"input\": \"17 46 45\\r\\n\", \"output\": [\"518654435\"]}, {\"input\": \"28 47 1\\r\\n\", \"output\": [\"517406193\"]}, {\"input\": \"94 87 10\\r\\n\", \"output\": [\"846321893\"]}, {\"input\": \"84 29 61\\r\\n\", \"output\": [\"391253501\"]}, {\"input\": \"179 856 377\\r\\n\", \"output\": [\"518957210\"]}, {\"input\": \"1925 1009 273\\r\\n\", \"output\": [\"207866159\"]}, {\"input\": \"1171 2989 2853\\r\\n\", \"output\": [\"234725427\"]}, {\"input\": \"3238 2923 4661\\r\\n\", \"output\": [\"636587126\"]}, {\"input\": \"1158 506 4676\\r\\n\", \"output\": [\"6109065\"]}, {\"input\": \"4539 2805 2702\\r\\n\", \"output\": [\"356944655\"]}, {\"input\": \"4756 775 3187\\r\\n\", \"output\": [\"56242066\"]}, {\"input\": \"4998 4998 4998\\r\\n\", \"output\": [\"259368717\"]}, {\"input\": \"4996 1 5000\\r\\n\", \"output\": [\"196902859\"]}, {\"input\": \"2048 4096 1024\\r\\n\", \"output\": [\"445542375\"]}, {\"input\": \"5000 1 1\\r\\n\", \"output\": [\"50020002\"]}]","length":9,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"0 2 5\\n1 3 5\", \"0 1 3\\n2 3 6\"]","prob_desc_input_spec":"The first line contains three integers $$$l_a$$$, $$$r_a$$$, $$$t_a$$$ ($$$0 \\le l_a \\le r_a \\le t_a - 1, 2 \\le t_a \\le 10^9$$$) and describes Alice's lucky days. The second line contains three integers $$$l_b$$$, $$$r_b$$$, $$$t_b$$$ ($$$0 \\le l_b \\le r_b \\le t_b - 1, 2 \\le t_b \\le 10^9$$$) and describes Bob's lucky days. It is guaranteed that both Alice and Bob have some unlucky days.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"faa75751c05c3ff919ddd148c6784910","prob_desc_created_at":"1541860500","source_code":"import sys\nimport string\nfrom math import gcd\nimport getpass\nimport math\nfrom decimal import Decimal\nimport pprint\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\nif getpass.getuser() != 'frohenk':\n    filename = 'half'\n    # sys.stdin = open('input.txt')\n    # sys.stdout = open('output.txt', 'w')\nelse:\n    sys.stdin = open('input.txt')\n    # sys.stdin.close()\n# sys.stdout = open('output.txt', 'w')\n\n\nla, ra, ta = ria()\nlb, rb, tb = ria()\nif ta > tb:\n    la, ra, ta, lb, rb, tb = lb, rb, tb, la, ra, ta\n\ngc = gcd(tb, ta)\nif gc == 1:\n    print(min(ra - la + 1, rb - lb + 1))\n    exit(0)\n\n\ndef get(st):\n    global la, ra, ta, lb, rb, tb\n    lc = la + st\n    rc = ra + st\n    return max(min(rc, rb) - max(lc, lb) + 1, 0)\n\n\nsta = la \/\/ gc\nstb = lb \/\/ gc\nfna = ra \/\/ gc\nfnb = rb \/\/ gc\n\nmx = 0\n\nmx = max(mx, get((stb - sta) * gc))\nmx = max(mx, get((stb - sta + 1) * gc))\nmx = max(mx, get((stb - sta + 2) * gc))\nmx = max(mx, get((stb - sta - 1) * gc))\nmx = max(mx, get((stb - sta - 2) * gc))\n\nmx = max(mx, get((fnb - fna) * gc))\nmx = max(mx, get((fnb - fna + 1) * gc))\nmx = max(mx, get((fnb - fna + 2) * gc))\nmx = max(mx, get((fnb - fna - 1) * gc))\nmx = max(mx, get((fnb - fna - 2) * gc))\n\n#print(stb - sta)\nprint(mx)\n","prob_desc_sample_outputs":"[\"2\", \"1\"]","lang_cluster":"Python","code_uid":"fb8aaeec0753c3a2935e7a4646b26e93","prob_desc_notes":"NoteThe graphs below correspond to the two sample tests and show the lucky and unlucky days of Alice and Bob as well as the possible solutions for these tests.","prob_desc_output_spec":"Print one integer: the maximum number of days in the row that are lucky for both Alice and Bob.","prob_desc_output_to":"standard output","prob_desc_description":"Bob and Alice are often participating in various programming competitions. Like many competitive programmers, Alice and Bob have good and bad days. They noticed, that their lucky and unlucky days are repeating with some period. For example, for Alice days $$$[l_a; r_a]$$$ are lucky, then there are some unlucky days: $$$[r_a + 1; l_a + t_a - 1]$$$, and then there are lucky days again: $$$[l_a + t_a; r_a + t_a]$$$ and so on. In other words, the day is lucky for Alice if it lies in the segment $$$[l_a + k t_a; r_a + k t_a]$$$ for some non-negative integer $$$k$$$.The Bob's lucky day have similar structure, however the parameters of his sequence are different: $$$l_b$$$, $$$r_b$$$, $$$t_b$$$. So a day is a lucky for Bob if it lies in a segment $$$[l_b + k t_b; r_b + k t_b]$$$, for some non-negative integer $$$k$$$.Alice and Bob want to participate in team competitions together and so they want to find out what is the largest possible number of consecutive days, which are lucky for both Alice and Bob.","hidden_unit_tests":"[{\"input\": \"0 2 5\\r\\n1 3 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 1 3\\r\\n2 3 6\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 1 5\\r\\n2 4 5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 8 10\\r\\n0 7 9\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"11 13 18\\r\\n4 6 12\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"7 13 18\\r\\n2 6 12\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"372839920 992839201 1000000000\\r\\n100293021 773829394 999999993\\r\\n\", \"output\": [\"619999282\"]}, {\"input\": \"100293023 882738299 1000000000\\r\\n0 445483940 500000000\\r\\n\", \"output\": [\"382738300\"]}, {\"input\": \"339403920 743344311 1000000000\\r\\n1 403940389 403940390\\r\\n\", \"output\": [\"403940389\"]}, {\"input\": \"999999999 999999999 1000000000\\r\\n0 0 999999998\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 3 6\\r\\n1 1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 0 3\\r\\n1 7 8\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 3 20\\r\\n6 8 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 199999999 200000000\\r\\n57 777777777 1000000000\\r\\n\", \"output\": [\"199999999\"]}, {\"input\": \"199288399 887887887 900000000\\r\\n0 299999889 299999900\\r\\n\", \"output\": [\"299999890\"]}, {\"input\": \"0 445444445 999999998\\r\\n53 445444497 999999992\\r\\n\", \"output\": [\"445444445\"]}, {\"input\": \"1 666666661 998776554\\r\\n5 666666666 999999999\\r\\n\", \"output\": [\"666666660\"]}, {\"input\": \"14 882991007 999999990\\r\\n24 882991017 999999230\\r\\n\", \"output\": [\"882990994\"]}, {\"input\": \"111000111 111000119 999999994\\r\\n111000103 111000110 999999973\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"45 57 500000000\\r\\n10203 39920 700000000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 0 1000000000\\r\\n500000000 500000000 999999999\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 3 1000000000\\r\\n2 2 999999996\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"13 17 1000000000\\r\\n500000000 500000004 999999996\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"4 18 999999960\\r\\n24 36 999999920\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 799999998 800000000\\r\\n1 999999999 1000000000\\r\\n\", \"output\": [\"799999999\"]}, {\"input\": \"3 3 1000000000\\r\\n1 2 999999997\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 992993994 999999999\\r\\n553554555 998997996 999998997\\r\\n\", \"output\": [\"445443442\"]}, {\"input\": \"111111111 888888889 999999999\\r\\n998997996 999999999 1000000000\\r\\n\", \"output\": [\"1002004\"]}, {\"input\": \"14 16 20\\r\\n1 4 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 2 4\\r\\n0 0 6\\r\\n\", \"output\": [\"1\"]}]","length":62,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"R\\ns;;upimrrfod;pbr\"]","prob_desc_input_spec":"First line of the input contains one letter describing direction of shifting ('L' or 'R' respectively for left or right). Second line contains a sequence of characters written by Mole. The size of this sequence will be no more than 100. Sequence contains only symbols that appear on Mole's keyboard. It doesn't contain spaces as there is no space on Mole's keyboard. It is guaranteed that even though Mole hands are moved, he is still pressing buttons on keyboard and not hitting outside it.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"df49c0c257903516767fdb8ac9c2bfd6","prob_desc_created_at":"1412609400","source_code":"a = input()\ns = input()\nz = ''\nk1 = '\"\"qwertyuiop\"\"'\nk2 = '\"\"asdfghjkl;\"\"'\nk3 = '\"\"zxcvbnm,.\/\"\"'\nfor i in s:\n    if a == 'R':\n        if i in k1:\n            z += k1[k1.find(i)-1]\n        elif i in k2:\n            z += k2[k2.find(i)-1]\n        elif i in k3:\n            z += k3[k3.find(i)-1]\n    elif a == 'L':\n        if i in k1:\n            z += k1[k1.find(i)+1]\n        elif i in k2:\n            z += k2[k2.find(i)+1]\n        elif i in k3:\n            z += k3[k3.find(i)+1]\nprint(z)\n\n","prob_desc_sample_outputs":"[\"allyouneedislove\"]","lang_cluster":"Python","code_uid":"98ac9b6db421d70cea53de99f5ba75a1","prob_desc_notes":null,"prob_desc_output_spec":"Print a line that contains the original message.","prob_desc_output_to":"standard output","prob_desc_description":"Our good friend Mole is trying to code a big message. He is typing on an unusual keyboard with characters arranged in following way:qwertyuiopasdfghjkl;zxcvbnm,.\/Unfortunately Mole is blind, so sometimes it is problem for him to put his hands accurately. He accidentally moved both his hands with one position to the left or to the right. That means that now he presses not a button he wants, but one neighboring button (left or right, as specified in input).We have a sequence of characters he has typed and we want to find the original message.","hidden_unit_tests":"[{\"input\": \"R\\r\\ns;;upimrrfod;pbr\\r\\n\", \"output\": [\"allyouneedislove\"]}, {\"input\": \"R\\r\\nwertyuiop;lkjhgfdsxcvbnm,.\\r\\n\", \"output\": [\"qwertyuiolkjhgfdsazxcvbnm,\"]}, {\"input\": \"L\\r\\nzxcvbnm,kjhgfdsaqwertyuio\\r\\n\", \"output\": [\"xcvbnm,.lkjhgfdswertyuiop\"]}, {\"input\": \"R\\r\\nbubbuduppudup\\r\\n\", \"output\": [\"vyvvysyooysyo\"]}, {\"input\": \"L\\r\\ngggggggggggggggggggggggggggggggggggggggggg\\r\\n\", \"output\": [\"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\"]}, {\"input\": \"R\\r\\ngggggggggggggggggggggggggggggggggggggggggg\\r\\n\", \"output\": [\"ffffffffffffffffffffffffffffffffffffffffff\"]}, {\"input\": \"L\\r\\nggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\\r\\n\", \"output\": [\"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\"]}, {\"input\": \"R\\r\\nggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\\r\\n\", \"output\": [\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"]}, {\"input\": \"L\\r\\nxgwurenkxkiau,c,vonei.zltazmnkhqtwuogkgvgckvja,z.rhanuy.ybebmzcfwozkwvuuiolaqlgvvvewnbuinrncgjwjdsfw\\r\\n\", \"output\": [\"cheitrmlclosi.v.bpmro\/x;ysx,mljwyeiphlhbhvlbks.x\/tjsmiu\/unrn,xvgepxlebiiop;sw;hbbbremniomtmvhkekfdge\"]}, {\"input\": \"L\\r\\nuoz.vmks,wxrb,nwcvdzh.m,hwsios.lvu,ktes,,ythddhm.sh,d,c,cfj.wqam,bowofbyx,jathqayhreqvixvbmgdokofmym\\r\\n\", \"output\": [\"ipx\/b,ld.ectn.mevbfxj\/,.jedopd\/;bi.lyrd..uyjffj,\/dj.f.v.vgk\/ews,.npepgnuc.ksyjwsujtrwbocbn,hfplpg,u,\"]}, {\"input\": \"R\\r\\noedjyrvuw\/rn.v.hdwndbiposiewgsn.pnyf;\/tsdohp,hrtd\/mx,;coj.\/billd..mwbneohcikrdes\/ucjr,wspthleyp,..f,\\r\\n\", \"output\": [\"iwshtecyq.eb,c,gsqbsvuoiauwqfab,obtdl.rasigomgers.nzmlxih,.vukks,,nqvbwigxujeswa.yxhemqaorgkwtom,,dm\"]}, {\"input\": \"R\\r\\nvgj;o;ijrtfyck,dthccioltcx,crub;oceooognsuvfx\/kgo.fbsudv,yod.erdrxhbeiyltxhnrobbb;ydrgroefcr\/f;uvdjd\\r\\n\", \"output\": [\"cfhliluherdtxjmsrgxxuikrxzmxeyvlixwiiifbaycdz.jfi,dvayscmtis,wesezgvwutkrzgbeivvvltsefeiwdxe.dlycshs\"]}, {\"input\": \"L\\r\\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\\r\\n\", \"output\": [\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\"]}, {\"input\": \"L\\r\\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\r\\n\", \"output\": [\"pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp\"]}, {\"input\": \"L\\r\\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\\r\\n\", \"output\": [\"....................................................................................................\"]}, {\"input\": \"L\\r\\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\r\\n\", \"output\": [\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"]}, {\"input\": \"R\\r\\n....................................................................................................\\r\\n\", \"output\": [\",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\"]}, {\"input\": \"R\\r\\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\r\\n\", \"output\": [\"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"]}, {\"input\": \"R\\r\\nwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\r\\n\", \"output\": [\"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\"]}, {\"input\": \"R\\r\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\r\\n\", \"output\": [\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"]}, {\"input\": \"L\\r\\nq\\r\\n\", \"output\": [\"w\"]}, {\"input\": \"L\\r\\no\\r\\n\", \"output\": [\"p\"]}, {\"input\": \"L\\r\\n,\\r\\n\", \"output\": [\".\"]}, {\"input\": \"L\\r\\nz\\r\\n\", \"output\": [\"x\"]}, {\"input\": \"R\\r\\n.\\r\\n\", \"output\": [\",\"]}, {\"input\": \"R\\r\\no\\r\\n\", \"output\": [\"i\"]}, {\"input\": \"R\\r\\nw\\r\\n\", \"output\": [\"q\"]}, {\"input\": \"R\\r\\nx\\r\\n\", \"output\": [\"z\"]}, {\"input\": \"R\\r\\n,.\/\\r\\n\", \"output\": [\"m,.\"]}, {\"input\": \"R\\r\\nwertuk;;\/\\r\\n\", \"output\": [\"qweryjll.\"]}, {\"input\": \"L\\r\\n..\\r\\n\", \"output\": [\"\/\/\"]}]","length":23,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"255 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 10\", \"1 2 5\", \"2 3 9\"]","prob_desc_input_spec":"The only string contains three integers\u00a0\u2014 n, m and z (1\u2009\u2264\u2009n,\u2009m,\u2009z\u2009\u2264\u2009104).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"e7ad55ce26fc8610639323af1de36c2d","prob_desc_created_at":"1486042500","source_code":"n = list(map(int, input().split()))\na = set()\nb = set()\nfor i in range(n[2]\/\/n[0]):\n a.add((i+1)*n[0])\nfor i in range(n[2]\/\/n[1]):\n b.add((i+1)*n[1])\nprint(len(a & b))","prob_desc_sample_outputs":"[\"10\", \"2\", \"1\"]","lang_cluster":"Python","code_uid":"d62c78efb9dc6541e7ef583be9972947","prob_desc_notes":"NoteTaymyr is a place in the north of Russia.In the first test the artists come each minute, as well as the calls, so we need to kill all of them.In the second test we need to kill artists which come on the second and the fourth minutes.In the third test\u00a0\u2014 only the artist which comes on the sixth minute. ","prob_desc_output_spec":"Print single integer\u00a0\u2014 the minimum number of artists that should be killed so that there are no artists in the room when Ilia calls.","prob_desc_output_to":"standard output","prob_desc_description":"Comrade Dujikov is busy choosing artists for Timofey's birthday and is recieving calls from Taymyr from Ilia-alpinist.Ilia-alpinist calls every n minutes, i.e. in minutes n, 2n, 3n and so on. Artists come to the comrade every m minutes, i.e. in minutes m, 2m, 3m and so on. The day is z minutes long, i.e. the day consists of minutes 1,\u20092,\u2009...,\u2009z. How many artists should be killed so that there are no artists in the room when Ilia calls? Consider that a call and a talk with an artist take exactly one minute.","hidden_unit_tests":"[{\"input\": \"1 1 10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1 2 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2 3 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 8 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7 9 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10000 10000 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"24 22 9235\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"74 8 417\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"972 1 203\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"550 1 754\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"860 1 884\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"358 2 809\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"33 27 216\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2940 1 9311\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4624 1 1953\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2696 2 7345\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3443 2 6701\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 613 2275\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 10000 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000 1 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 10000\\r\\n\", \"output\": [\"10000\"]}, {\"input\": \"34 27 10000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"2 2 9999\\r\\n\", \"output\": [\"4999\"]}, {\"input\": \"2 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 4 36\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"33 6 3005\\r\\n\", \"output\": [\"45\"]}, {\"input\": \"5 1 20\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 2 10\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 1 100\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"10 20 10000\\r\\n\", \"output\": [\"500\"]}, {\"input\": \"8 12 12\\r\\n\", \"output\": [\"0\"]}]","length":8,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 1 2 1 2\", \"3 3 1 1 1\", \"4 5 3 1 5\"]","prob_desc_input_spec":"The first line contains five integers s, v1, v2, t1, t2 (1\u2009\u2264\u2009s,\u2009v1,\u2009v2,\u2009t1,\u2009t2\u2009\u2264\u20091000)\u00a0\u2014 the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"10226b8efe9e3c473239d747b911a1ef","prob_desc_created_at":"1501511700","source_code":"\ndef t(a,b,c,d,e):\n    #for i in range(5):\n      #  v.append (int(input(\"podaj liczbe\")))\n\n        \n    gr1=0\n    gr2=0\n\n    gr1=(b*a)+(d*2)\n    gr2=(c*a)+(e*2)\n    #print(gr1)\n    #print(gr2)\n    if gr1>gr2:\n        print(\"Second\")\n    if gr1<gr2:\n        print(\"First\")\n    if gr1==gr2:\n        print(\"Friendship\")\n\na,b,c,d,e = input().split(\" \")\nt(int(a),int(b),int(c),int(d),int(e))","prob_desc_sample_outputs":"[\"First\", \"Second\", \"Friendship\"]","lang_cluster":"Python","code_uid":"6f9436a329d5d3a638fb45e8375716e7","prob_desc_notes":"NoteIn the first example, information on the success of the first participant comes in 7 milliseconds, of the second participant\u00a0\u2014 in 14 milliseconds. So, the first wins.In the second example, information on the success of the first participant comes in 11 milliseconds, of the second participant\u00a0\u2014 in 5 milliseconds. So, the second wins.In the third example, information on the success of the first participant comes in 22 milliseconds, of the second participant\u00a0\u2014 in 22 milliseconds. So, it is be a draw.","prob_desc_output_spec":"If the first participant wins, print \"First\". If the second participant wins, print \"Second\". In case of a draw print \"Friendship\".","prob_desc_output_to":"standard output","prob_desc_description":"Two boys decided to compete in text typing on the site \"Key races\". During the competition, they have to type a text consisting of s characters. The first participant types one character in v1 milliseconds and has ping t1 milliseconds. The second participant types one character in v2 milliseconds and has ping t2 milliseconds.If connection ping (delay) is t milliseconds, the competition passes for a participant as follows:   Exactly after t milliseconds after the start of the competition the participant receives the text to be entered.  Right after that he starts to type it.  Exactly t milliseconds after he ends typing all the text, the site receives information about it. The winner is the participant whose information on the success comes earlier. If the information comes from both participants at the same time, it is considered that there is a draw.Given the length of the text and the information about participants, determine the result of the game.","hidden_unit_tests":"[{\"input\": \"5 1 2 1 2\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"3 3 1 1 1\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"4 5 3 1 5\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"1000 1000 1000 1000 1000\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"1 1 1 1 1\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"8 8 1 1 1\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"15 14 32 65 28\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"894 197 325 232 902\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"1 2 8 8 5\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"37 261 207 1 1000\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"29 344 406 900 1\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"1 2 8 9 8\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"2 9 8 8 9\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"213 480 811 134 745\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"2 313 856 964 421\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"1 10 2 6 10\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"2 7 6 2 3\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"637 324 69 612 998\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"13 849 819 723 918\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"9 5 7 8 7\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"6 5 7 10 4\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"61 464 623 89 548\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"641 31 29 161 802\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"3 3 1 6 9\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"2 3 9 8 2\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"485 117 368 567 609\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"4 202 512 995 375\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"424 41 41 909 909\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"884 913 263 641 265\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"12 462 8 311 327\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"436 306 266 493 580\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"69 1 2 1 2\\r\\n\", \"output\": [\"First\"]}]","length":22,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n3 2 1 2\", \"3\\n2 3 8\"]","prob_desc_input_spec":"The first line of input contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1\u2009\u2264\u2009ai\u2009\u2264\u2009100) denotes the number of cubes in the i-th column.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"ae20712265d4adf293e75d016b4b82d8","prob_desc_created_at":"1395502200","source_code":"number_of_columns = int(input())\nbox_p_column = [int(i) for i in input().split(' ')]\n\nbox_p_column = [str(i) for i in sorted(box_p_column)]\nprint(' '.join(box_p_column).strip())\n\n","prob_desc_sample_outputs":"[\"1 2 2 3\", \"2 3 8\"]","lang_cluster":"Python","code_uid":"d6f0a47d0c65c3153e295eb91252bcdd","prob_desc_notes":"NoteThe first example case is shown on the figure. The top cube of the first column falls to the top of the last column; the top cube of the second column falls to the top of the third column; the middle cube of the first column falls to the top of the second column.In the second example case the gravity switch does not change the heights of the columns.","prob_desc_output_spec":"Output n integer numbers separated by spaces, where the i-th number is the amount of cubes in the i-th column after the gravity switch.","prob_desc_output_to":"standard output","prob_desc_description":"Little Chris is bored during his physics lessons (too easy), so he has built a toy box to keep himself occupied. The box is special, since it has the ability to change gravity.There are n columns of toy cubes in the box arranged in a line. The i-th column contains ai cubes. At first, the gravity in the box is pulling the cubes downwards. When Chris switches the gravity, it begins to pull all the cubes to the right side of the box. The figure shows the initial and final configurations of the cubes in the box: the cubes that have changed their position are highlighted with orange.  Given the initial configuration of the toy cubes in the box, find the amounts of cubes in each of the n columns after the gravity switch!","hidden_unit_tests":"[{\"input\": \"4\\r\\n3 2 1 2\\r\\n\", \"output\": [\"1 2 2 3\"]}, {\"input\": \"3\\r\\n2 3 8\\r\\n\", \"output\": [\"2 3 8\"]}, {\"input\": \"5\\r\\n2 1 2 1 2\\r\\n\", \"output\": [\"1 1 2 2 2\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n4 3\\r\\n\", \"output\": [\"3 4\"]}, {\"input\": \"6\\r\\n100 40 60 20 1 80\\r\\n\", \"output\": [\"1 20 40 60 80 100\"]}, {\"input\": \"10\\r\\n10 8 6 7 5 3 4 2 9 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10\"]}, {\"input\": \"10\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10\"]}, {\"input\": \"100\\r\\n82 51 81 14 37 17 78 92 64 15 8 86 89 8 87 77 66 10 15 12 100 25 92 47 21 78 20 63 13 49 41 36 41 79 16 87 87 69 3 76 80 60 100 49 70 59 72 8 38 71 45 97 71 14 76 54 81 4 59 46 39 29 92 3 49 22 53 99 59 52 74 31 92 43 42 23 44 9 82 47 7 40 12 9 3 55 37 85 46 22 84 52 98 41 21 77 63 17 62 91\\r\\n\", \"output\": [\"3 3 3 4 7 8 8 8 9 9 10 12 12 13 14 14 15 15 16 17 17 20 21 21 22 22 23 25 29 31 36 37 37 38 39 40 41 41 41 42 43 44 45 46 46 47 47 49 49 49 51 52 52 53 54 55 59 59 59 60 62 63 63 64 66 69 70 71 71 72 74 76 76 77 77 78 78 79 80 81 81 82 82 84 85 86 87 87 87 89 91 92 92 92 92 97 98 99 100 100\"]}, {\"input\": \"100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\"]}, {\"input\": \"10\\r\\n1 9 7 6 2 4 7 8 1 3\\r\\n\", \"output\": [\"1 1 2 3 4 6 7 7 8 9\"]}, {\"input\": \"20\\r\\n53 32 64 20 41 97 50 20 66 68 22 60 74 61 97 54 80 30 72 59\\r\\n\", \"output\": [\"20 20 22 30 32 41 50 53 54 59 60 61 64 66 68 72 74 80 97 97\"]}, {\"input\": \"30\\r\\n7 17 4 18 16 12 14 10 1 13 2 16 13 17 8 16 13 14 9 17 17 5 13 5 1 7 6 20 18 12\\r\\n\", \"output\": [\"1 1 2 4 5 5 6 7 7 8 9 10 12 12 13 13 13 13 14 14 16 16 16 17 17 17 17 18 18 20\"]}, {\"input\": \"40\\r\\n22 58 68 58 48 53 52 1 16 78 75 17 63 15 36 32 78 75 49 14 42 46 66 54 49 82 40 43 46 55 12 73 5 45 61 60 1 11 31 84\\r\\n\", \"output\": [\"1 1 5 11 12 14 15 16 17 22 31 32 36 40 42 43 45 46 46 48 49 49 52 53 54 55 58 58 60 61 63 66 68 73 75 75 78 78 82 84\"]}, {\"input\": \"70\\r\\n1 3 3 1 3 3 1 1 1 3 3 2 3 3 1 1 1 2 3 1 3 2 3 3 3 2 2 3 1 3 3 2 1 1 2 1 2 1 2 2 1 1 1 3 3 2 3 2 3 2 3 3 2 2 2 3 2 3 3 3 1 1 3 3 1 1 1 1 3 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"]}, {\"input\": \"90\\r\\n17 75 51 30 100 5 50 95 51 73 66 5 7 76 43 49 23 55 3 24 95 79 10 11 44 93 17 99 53 66 82 66 63 76 19 4 51 71 75 43 27 5 24 19 48 7 91 15 55 21 7 6 27 10 2 91 64 58 18 21 16 71 90 88 21 20 6 6 95 85 11 7 40 65 52 49 92 98 46 88 17 48 85 96 77 46 100 34 67 52\\r\\n\", \"output\": [\"2 3 4 5 5 5 6 6 6 7 7 7 7 10 10 11 11 15 16 17 17 17 18 19 19 20 21 21 21 23 24 24 27 27 30 34 40 43 43 44 46 46 48 48 49 49 50 51 51 51 52 52 53 55 55 58 63 64 65 66 66 66 67 71 71 73 75 75 76 76 77 79 82 85 85 88 88 90 91 91 92 93 95 95 95 96 98 99 100 100\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"]}, {\"input\": \"100\\r\\n1 1 1 1 2 1 1 1 1 1 2 2 1 1 2 1 2 1 1 1 2 1 1 2 1 2 1 1 2 2 2 1 1 2 1 1 1 2 2 2 1 1 1 2 1 2 2 1 2 1 1 2 2 1 2 1 2 1 2 2 1 1 1 2 1 1 2 1 2 1 2 2 2 1 2 1 2 2 2 1 2 2 1 1 1 1 2 2 2 2 2 2 2 1 1 1 2 1 2 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"]}, {\"input\": \"100\\r\\n2 1 1 1 3 2 3 3 2 3 3 1 3 3 1 3 3 1 1 1 2 3 1 2 3 1 2 3 3 1 3 1 1 2 3 2 3 3 2 3 3 1 2 2 1 2 3 2 3 2 2 1 1 3 1 3 2 1 3 1 3 1 3 1 1 3 3 3 2 3 2 2 2 2 1 3 3 3 1 2 1 2 3 2 1 3 1 3 2 1 3 1 2 1 2 3 1 3 2 3\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"]}, {\"input\": \"100\\r\\n7 4 5 5 10 10 5 8 5 7 4 5 4 6 8 8 2 6 3 3 10 7 10 8 6 2 7 3 9 7 7 2 4 5 2 4 9 5 10 1 10 5 10 4 1 3 4 2 6 9 9 9 10 6 2 5 6 1 8 10 4 10 3 4 10 5 5 4 10 4 5 3 7 10 2 7 3 6 9 6 1 6 5 5 4 6 6 4 4 1 5 1 6 6 6 8 8 6 2 6\\r\\n\", \"output\": [\"1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10\"]}, {\"input\": \"100\\r\\n12 10 5 11 13 12 14 13 7 15 15 12 13 19 12 18 14 10 10 3 1 10 16 11 19 8 10 15 5 10 12 16 11 13 11 15 14 12 16 8 11 8 15 2 18 2 14 13 15 20 8 8 4 12 14 7 10 3 9 1 7 19 6 7 2 14 8 20 7 17 18 20 3 18 18 9 6 10 4 1 4 19 9 13 3 3 12 11 11 20 8 2 13 6 7 12 1 4 17 3\\r\\n\", \"output\": [\"1 1 1 1 2 2 2 2 3 3 3 3 3 3 4 4 4 4 5 5 6 6 6 7 7 7 7 7 7 8 8 8 8 8 8 8 9 9 9 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17 18 18 18 18 18 19 19 19 19 20 20 20 20\"]}, {\"input\": \"100\\r\\n5 13 1 40 30 10 23 32 33 12 6 4 15 29 31 17 23 5 36 31 32 38 24 11 34 39 19 21 6 19 31 35 1 15 6 29 22 15 17 15 1 17 2 34 20 8 27 2 29 26 13 9 22 27 27 3 20 40 4 40 33 29 36 30 35 16 19 28 26 11 36 24 29 5 40 10 38 34 33 23 34 39 31 7 10 31 22 6 36 24 14 31 34 23 2 4 26 16 2 32\\r\\n\", \"output\": [\"1 1 1 2 2 2 2 3 4 4 4 5 5 5 6 6 6 6 7 8 9 10 10 10 11 11 12 13 13 14 15 15 15 15 16 16 17 17 17 19 19 19 20 20 21 22 22 22 23 23 23 23 24 24 24 26 26 26 27 27 27 28 29 29 29 29 29 30 30 31 31 31 31 31 31 32 32 32 33 33 33 34 34 34 34 34 35 35 36 36 36 36 38 38 39 39 40 40 40 40\"]}, {\"input\": \"100\\r\\n72 44 34 74 9 60 26 37 55 77 74 69 28 66 54 55 8 36 57 31 31 48 32 66 40 70 77 43 64 28 37 10 21 58 51 32 60 28 51 52 28 35 7 33 1 68 38 70 57 71 8 20 42 57 59 4 58 10 17 47 22 48 16 3 76 67 32 37 64 47 33 41 75 69 2 76 39 9 27 75 20 21 52 25 71 21 11 29 38 10 3 1 45 55 63 36 27 7 59 41\\r\\n\", \"output\": [\"1 1 2 3 3 4 7 7 8 8 9 9 10 10 10 11 16 17 20 20 21 21 21 22 25 26 27 27 28 28 28 28 29 31 31 32 32 32 33 33 34 35 36 36 37 37 37 38 38 39 40 41 41 42 43 44 45 47 47 48 48 51 51 52 52 54 55 55 55 57 57 57 58 58 59 59 60 60 63 64 64 66 66 67 68 69 69 70 70 71 71 72 74 74 75 75 76 76 77 77\"]}, {\"input\": \"100\\r\\n75 18 61 10 56 53 42 57 79 80 31 2 50 45 54 99 84 52 71 21 86 3 19 98 14 37 40 62 63 68 5 10 87 8 81 85 52 52 57 94 2 7 56 96 19 76 1 13 81 6 80 47 22 59 99 32 9 5 36 88 98 91 70 70 12 93 12 22 85 1 97 48 94 16 84 84 51 34 62 7 68 51 30 2 37 82 4 7 27 1 80 9 61 16 59 55 12 96 94 82\\r\\n\", \"output\": [\"1 1 1 2 2 2 3 4 5 5 6 7 7 7 8 9 9 10 10 12 12 12 13 14 16 16 18 19 19 21 22 22 27 30 31 32 34 36 37 37 40 42 45 47 48 50 51 51 52 52 52 53 54 55 56 56 57 57 59 59 61 61 62 62 63 68 68 70 70 71 75 76 79 80 80 80 81 81 82 82 84 84 84 85 85 86 87 88 91 93 94 94 94 96 96 97 98 98 99 99\"]}, {\"input\": \"100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"]}, {\"input\": \"100\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"]}, {\"input\": \"100\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n\", \"output\": [\"50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\"]}, {\"input\": \"49\\r\\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97\\r\\n\", \"output\": [\"1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97\"]}, {\"input\": \"30\\r\\n1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88\\r\\n\", \"output\": [\"1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88\"]}, {\"input\": \"100\\r\\n100 51 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 51 100\"]}, {\"input\": \"10\\r\\n100 90 80 70 60 50 40 30 20 10\\r\\n\", \"output\": [\"10 20 30 40 50 60 70 80 90 100\"]}, {\"input\": \"1\\r\\n10\\r\\n\", \"output\": [\"10\"]}]","length":6,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 2\", \"3 4 5\", \"4 1 1\"]","prob_desc_input_spec":"The single line of the input contains three space-separated integers a, b and c (1\u2009\u2264\u2009a,\u2009b,\u2009c\u2009\u2264\u2009106) \u2014 the valence numbers of the given atoms.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"b3b986fddc3770fed64b878fa42ab1bc","prob_desc_created_at":"1379172600","source_code":"a,b,c=map(int,input().split())\ns=(a+b+c)\/\/2\nif (a+b+c)%2 or s-a<0 or s-b<0 or s-c<0:print(\"Impossible\")\nelse:print(s-c,s-a,s-b)\n","prob_desc_sample_outputs":"[\"0 1 1\", \"1 3 2\", \"Impossible\"]","lang_cluster":"Python","code_uid":"3541917765fa321d1522435a6d24fa36","prob_desc_notes":"NoteThe first sample corresponds to the first figure. There are no bonds between atoms 1 and 2 in this case.The second sample corresponds to the second figure. There is one or more bonds between each pair of atoms.The third sample corresponds to the third figure. There is no solution, because an atom cannot form bonds with itself.The configuration in the fourth figure is impossible as each atom must have at least one atomic bond.","prob_desc_output_spec":"If such a molecule can be built, print three space-separated integers \u2014 the number of bonds between the 1-st and the 2-nd, the 2-nd and the 3-rd, the 3-rd and the 1-st atoms, correspondingly. If there are multiple solutions, output any of them. If there is no solution, print \"Impossible\" (without the quotes).","prob_desc_output_to":"standard output","prob_desc_description":"Mad scientist Mike is busy carrying out experiments in chemistry. Today he will attempt to join three atoms into one molecule.A molecule consists of atoms, with some pairs of atoms connected by atomic bonds. Each atom has a valence number \u2014 the number of bonds the atom must form with other atoms. An atom can form one or multiple bonds with any other atom, but it cannot form a bond with itself. The number of bonds of an atom in the molecule must be equal to its valence number.  Mike knows valence numbers of the three atoms. Find a molecule that can be built from these atoms according to the stated rules, or determine that it is impossible.","hidden_unit_tests":"[{\"input\": \"1 1 2\\r\\n\", \"output\": [\"0 1 1\"]}, {\"input\": \"3 4 5\\r\\n\", \"output\": [\"1 3 2\"]}, {\"input\": \"4 1 1\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1000000 1000000 1000000\\r\\n\", \"output\": [\"500000 500000 500000\"]}, {\"input\": \"3 11 8\\r\\n\", \"output\": [\"3 8 0\"]}, {\"input\": \"8 5 12\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1000000 500000 1\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1000000 500000 2\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"2 2 2\\r\\n\", \"output\": [\"1 1 1\"]}, {\"input\": \"3 3 3\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"4 4 4\\r\\n\", \"output\": [\"2 2 2\"]}, {\"input\": \"2 4 2\\r\\n\", \"output\": [\"2 2 0\"]}, {\"input\": \"10 5 14\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"10 5 15\\r\\n\", \"output\": [\"0 5 10\"]}, {\"input\": \"10 4 16\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"3 3 6\\r\\n\", \"output\": [\"0 3 3\"]}, {\"input\": \"9 95 90\\r\\n\", \"output\": [\"7 88 2\"]}, {\"input\": \"3 5 8\\r\\n\", \"output\": [\"0 5 3\"]}, {\"input\": \"5 8 13\\r\\n\", \"output\": [\"0 8 5\"]}, {\"input\": \"6 1 5\\r\\n\", \"output\": [\"1 0 5\"]}, {\"input\": \"59 54 56\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"246 137 940\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"7357 3578 9123\\r\\n\", \"output\": [\"906 2672 6451\"]}, {\"input\": \"93952 49553 83405\\r\\n\", \"output\": [\"30050 19503 63902\"]}, {\"input\": \"688348 726472 442198\\r\\n\", \"output\": [\"486311 240161 202037\"]}, {\"input\": \"602752 645534 784262\\r\\n\", \"output\": [\"232012 413522 370740\"]}, {\"input\": \"741349 48244 642678\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"655754 418251 468390\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"310703 820961 326806\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1 1 3\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"5 1 4\\r\\n\", \"output\": [\"1 0 4\"]}]","length":4,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"5\", \"74\"]","prob_desc_input_spec":"The only line contains one integer n\u00a0(1\u2009\u2264\u2009n\u2009\u2264\u2009104) as we mentioned above.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"36a211f7814e77339eb81dc132e115e1","prob_desc_created_at":"1368363600","source_code":"def gcd(m, n):\n\treturn m if not n else gcd(n, m%n)\nn = int(input())\ncnt = 0\nfor i in range(2, int(n**0.5)+2):\n\tfor j in range(1+i%2, i, 2):\n\t\tif gcd(i,j)==1:\n\t\t\tcnt += n\/\/(i*i+j*j)\nprint(cnt)","prob_desc_sample_outputs":"[\"1\", \"35\"]","lang_cluster":"Python","code_uid":"deb61e795dc3b0d15fd7b9c893f3b57d","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"In mathematics, the Pythagorean theorem \u2014 is a relation in Euclidean geometry among the three sides of a right-angled triangle. In terms of areas, it states: In any right-angled triangle, the area of the square whose side is the hypotenuse (the side opposite the right angle) is equal to the sum of the areas of the squares whose sides are the two legs (the two sides that meet at a right angle). The theorem can be written as an equation relating the lengths of the sides a, b and c, often called the Pythagorean equation:a2\u2009+\u2009b2\u2009=\u2009c2where c represents the length of the hypotenuse, and a and b represent the lengths of the other two sides.  Given n, your task is to count how many right-angled triangles with side-lengths a, b and c that satisfied an inequality 1\u2009\u2264\u2009a\u2009\u2264\u2009b\u2009\u2264\u2009c\u2009\u2264\u2009n.","hidden_unit_tests":"[{\"input\": \"5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"74\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"881\"]}, {\"input\": \"586\\r\\n\", \"output\": [\"472\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"362\\r\\n\", \"output\": [\"258\"]}, {\"input\": \"778\\r\\n\", \"output\": [\"653\"]}, {\"input\": \"194\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"906\\r\\n\", \"output\": [\"786\"]}, {\"input\": \"659\\r\\n\", \"output\": [\"535\"]}, {\"input\": \"75\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"787\\r\\n\", \"output\": [\"664\"]}, {\"input\": \"851\\r\\n\", \"output\": [\"730\"]}, {\"input\": \"563\\r\\n\", \"output\": [\"446\"]}, {\"input\": \"979\\r\\n\", \"output\": [\"862\"]}, {\"input\": \"395\\r\\n\", \"output\": [\"291\"]}, {\"input\": \"755\\r\\n\", \"output\": [\"634\"]}, {\"input\": \"171\\r\\n\", \"output\": [\"103\"]}, {\"input\": \"883\\r\\n\", \"output\": [\"759\"]}, {\"input\": \"400\\r\\n\", \"output\": [\"294\"]}, {\"input\": \"817\\r\\n\", \"output\": [\"693\"]}, {\"input\": \"177\\r\\n\", \"output\": [\"107\"]}, {\"input\": \"593\\r\\n\", \"output\": [\"476\"]}, {\"input\": \"305\\r\\n\", \"output\": [\"214\"]}, {\"input\": \"721\\r\\n\", \"output\": [\"595\"]}, {\"input\": \"785\\r\\n\", \"output\": [\"664\"]}, {\"input\": \"497\\r\\n\", \"output\": [\"383\"]}, {\"input\": \"913\\r\\n\", \"output\": [\"791\"]}, {\"input\": \"625\\r\\n\", \"output\": [\"507\"]}, {\"input\": \"334\\r\\n\", \"output\": [\"236\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"12471\"]}, {\"input\": \"9999\\r\\n\", \"output\": [\"12467\"]}]","length":9,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"0 0\", \"1 0\", \"0 1\", \"-1 -1\"]","prob_desc_input_spec":"The first line contains two space-separated integers x and y (|x|,\u2009|y|\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"2fb2a129e01efc03cfc3ad91dac88382","prob_desc_created_at":"1362411000","source_code":"x = 0\ny = 0\nnx,ny = map(int,input().split())\nif ((nx == 0 or nx == 1) and ny == 0):\n    print(0)\nelse:\n    x = 1\n    turn = 0\n    flag = 0\n    while True:\n        turn = turn + 1\n        while y != x:\n            y = y + 1\n            if(x == nx and y == ny):\n                flag = 1    \n                break\n        if flag == 1:\n            break\n        k = x * -1\n        turn = turn + 1\n        while x != k:\n            x = x - 1\n            if(x == nx and y == ny):\n                flag = 1\n                break\n        if flag == 1:\n            break\n        turn  = turn + 1\n        while y != x:\n            y = y - 1 \n            if(x == nx and y == ny):\n                flag = 1\n                break\n        if flag == 1:\n            break\n        k = (x * -1) + 1\n        turn = turn  + 1\n        while x != k:\n            x = x + 1\n            if(x == nx and y == ny):\n                flag = 1\n                break\n        if flag == 1:\n            break\n    print(turn)","prob_desc_sample_outputs":"[\"0\", \"0\", \"2\", \"3\"]","lang_cluster":"Python","code_uid":"c1577d63964782d720f9d6b0b370dd4b","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer, showing how many times Valera has to turn.","prob_desc_output_to":"standard output","prob_desc_description":"Valera the horse lives on a plane. The Cartesian coordinate system is defined on this plane. Also an infinite spiral is painted on the plane. The spiral consists of segments: [(0,\u20090),\u2009(1,\u20090)], [(1,\u20090),\u2009(1,\u20091)], [(1,\u20091),\u2009(\u2009-\u20091,\u20091)], [(\u2009-\u20091,\u20091),\u2009(\u2009-\u20091,\u2009\u2009-\u20091)], [(\u2009-\u20091,\u2009\u2009-\u20091),\u2009(2,\u2009\u2009-\u20091)], [(2,\u2009\u2009-\u20091),\u2009(2,\u20092)] and so on. Thus, this infinite spiral passes through each integer point of the plane.Valera the horse lives on the plane at coordinates (0,\u20090). He wants to walk along the spiral to point (x,\u2009y). Valera the horse has four legs, so he finds turning very difficult. Count how many times he will have to turn if he goes along a spiral from point (0,\u20090) to point (x,\u2009y).","hidden_unit_tests":"[{\"input\": \"0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-1 -1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10 10\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"0 6\\r\\n\", \"output\": [\"22\"]}, {\"input\": \"-7 -13\\r\\n\", \"output\": [\"52\"]}, {\"input\": \"37 -100\\r\\n\", \"output\": [\"400\"]}, {\"input\": \"99 100\\r\\n\", \"output\": [\"398\"]}, {\"input\": \"16 -32\\r\\n\", \"output\": [\"128\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-1 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3 -5\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"0 -1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 -1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"397\"]}, {\"input\": \"0 99\\r\\n\", \"output\": [\"394\"]}, {\"input\": \"-98 98\\r\\n\", \"output\": [\"390\"]}, {\"input\": \"-97 0\\r\\n\", \"output\": [\"387\"]}, {\"input\": \"-96 -96\\r\\n\", \"output\": [\"383\"]}, {\"input\": \"0 -95\\r\\n\", \"output\": [\"380\"]}, {\"input\": \"94 -94\\r\\n\", \"output\": [\"376\"]}, {\"input\": \"93 0\\r\\n\", \"output\": [\"369\"]}, {\"input\": \"17 25\\r\\n\", \"output\": [\"98\"]}, {\"input\": \"1 -84\\r\\n\", \"output\": [\"336\"]}, {\"input\": \"-5 44\\r\\n\", \"output\": [\"174\"]}, {\"input\": \"11 -15\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"42 9\\r\\n\", \"output\": [\"165\"]}, {\"input\": \"-81 3\\r\\n\", \"output\": [\"323\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"397\"]}, {\"input\": \"2 -1\\r\\n\", \"output\": [\"4\"]}]","length":45,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 2\", \"3 2\"]","prob_desc_input_spec":"The single line of input contains two integers n and m (1\u2009\u2264\u2009m\u2009\u2264\u2009cntn), where cntn is the number of permutations of length n with maximum possible value of f(p). The problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.   In subproblem B1 (3 points), the constraint 1\u2009\u2264\u2009n\u2009\u2264\u20098 will hold.  In subproblem B2 (4 points), the constraint 1\u2009\u2264\u2009n\u2009\u2264\u200950 will hold. ","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"a8da7cbd9ddaec8e0468c6cce884e7a2","prob_desc_created_at":"1423328400","source_code":"import math\nn, m = tuple(int(x) for x in input().split())\nperm = list(range(1,n+1))\nchangeSeq = [m]\nwhile changeSeq[-1] > 1:\n    binLen = len(bin(changeSeq[-1])) - 2\n    power = 2**binLen if 2**(binLen - 1) != changeSeq[-1] else 2**(binLen - 1)\n    changeSeq.append(power - changeSeq[-1] + 1)\n    # print(changeSeq[-1])\n\nfor index in reversed(changeSeq):\n    power = int(math.ceil(math.log2(index))) + 1\n    perm[-power:] = reversed(perm[-power:])\n\nprint(\" \".join(str(x) for x in perm))\n","prob_desc_sample_outputs":"[\"2 1\", \"1 3 2\"]","lang_cluster":"Python","code_uid":"4902cc22843cc03da9249cf0acdcfa44","prob_desc_notes":"NoteIn the first example, both permutations of numbers {1, 2} yield maximum possible f(p) which is equal to 4. Among them, (2,\u20091) comes second in lexicographical order.","prob_desc_output_spec":"Output n number forming the required permutation.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a permutation p of numbers 1,\u20092,\u2009...,\u2009n. Let's define f(p) as the following sum:Find the lexicographically m-th permutation of length n in the set of permutations having the maximum possible value of f(p).","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"2 1\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"1 3 2\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"1 2 3\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"2 3 1\"]}, {\"input\": \"3 4\\r\\n\", \"output\": [\"3 2 1\"]}, {\"input\": \"4 1\\r\\n\", \"output\": [\"1 2 3 4\"]}, {\"input\": \"4 3\\r\\n\", \"output\": [\"1 3 4 2\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"1 4 3 2\"]}, {\"input\": \"4 8\\r\\n\", \"output\": [\"4 3 2 1\"]}, {\"input\": \"5 2\\r\\n\", \"output\": [\"1 2 3 5 4\"]}, {\"input\": \"5 7\\r\\n\", \"output\": [\"1 4 5 3 2\"]}, {\"input\": \"5 15\\r\\n\", \"output\": [\"4 5 3 2 1\"]}, {\"input\": \"6 23\\r\\n\", \"output\": [\"2 5 6 4 3 1\"]}, {\"input\": \"7 7\\r\\n\", \"output\": [\"1 2 3 6 7 5 4\"]}, {\"input\": \"7 44\\r\\n\", \"output\": [\"2 4 7 6 5 3 1\"]}, {\"input\": \"8 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8\"]}, {\"input\": \"8 127\\r\\n\", \"output\": [\"7 8 6 5 4 3 2 1\"]}, {\"input\": \"8 128\\r\\n\", \"output\": [\"8 7 6 5 4 3 2 1\"]}, {\"input\": \"49 120715613380345\\r\\n\", \"output\": [\"1 4 7 11 12 14 16 17 19 20 22 25 27 28 29 30 31 33 34 35 40 46 47 48 49 45 44 43 42 41 39 38 37 36 32 26 24 23 21 18 15 13 10 9 8 6 5 3 2\"]}, {\"input\": \"42 345287088783\\r\\n\", \"output\": [\"1 2 4 6 7 8 9 10 13 14 16 17 19 22 25 28 31 33 35 36 37 41 42 40 39 38 34 32 30 29 27 26 24 23 21 20 18 15 12 11 5 3\"]}, {\"input\": \"42 916944885285\\r\\n\", \"output\": [\"1 4 6 8 10 17 18 19 21 24 25 27 28 30 33 34 35 37 38 40 41 42 39 36 32 31 29 26 23 22 20 16 15 14 13 12 11 9 7 5 3 2\"]}, {\"input\": \"42 1490750165435\\r\\n\", \"output\": [\"2 4 7 10 11 12 14 19 21 22 23 25 26 28 30 31 32 35 39 41 42 40 38 37 36 34 33 29 27 24 20 18 17 16 15 13 9 8 6 5 3 1\"]}, {\"input\": \"48 114212593995090\\r\\n\", \"output\": [\"3 4 11 12 13 14 15 16 17 20 21 22 24 25 26 29 30 31 32 33 34 35 38 40 42 44 45 46 48 47 43 41 39 37 36 28 27 23 19 18 10 9 8 7 6 5 2 1\"]}, {\"input\": \"42 850453132167\\r\\n\", \"output\": [\"1 4 5 6 9 10 11 12 13 14 15 17 22 24 25 30 31 35 36 37 38 41 42 40 39 34 33 32 29 28 27 26 23 21 20 19 18 16 8 7 3 2\"]}, {\"input\": \"42 1422110928669\\r\\n\", \"output\": [\"2 4 5 7 10 11 12 16 17 18 21 23 25 27 29 34 35 36 40 41 42 39 38 37 33 32 31 30 28 26 24 22 20 19 15 14 13 9 8 6 3 1\"]}, {\"input\": \"50 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\"]}, {\"input\": \"50 7\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 49 50 48 47\"]}, {\"input\": \"50 562949953421312\\r\\n\", \"output\": [\"50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\"]}, {\"input\": \"50 562949953421311\\r\\n\", \"output\": [\"49 50 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\"]}, {\"input\": \"50 562949953421310\\r\\n\", \"output\": [\"48 50 49 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\"]}, {\"input\": \"50 500000000000007\\r\\n\", \"output\": [\"4 5 6 9 11 18 20 22 23 25 26 29 30 31 34 36 37 38 39 40 41 42 43 44 45 46 49 50 48 47 35 33 32 28 27 24 21 19 17 16 15 14 13 12 10 8 7 3 2 1\"]}]","length":15,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\\n0 2 1\", \"2\\n1 1\"]","prob_desc_input_spec":"The first line contains one integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$)\u00a0\u2014 the number of floors. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\leq a_i \\leq 100$$$)\u00a0\u2014 the number of people on each floor.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"a5002ddf9e792cb4b4685e630f1e1b8f","prob_desc_created_at":"1544459700","source_code":"def inint():\n    return int(input())\ndef inlist():\n    return list(map(int,input().split()))\n\ndef main():\n    n=inint()\n    a=inlist()\n    sol=999999999\n    for j in range(n):\n        sol1=0;x=j\n        for i in range(n):\n            sol1+=a[i]*(abs(i-x)+i+x+abs(x-0)+abs(i-0)+abs(x-i))\n        sol=min(sol,sol1)\n    print(sol)\n\n\nif __name__ == \"__main__\":\n    #import profile\n    #profile.run(\"main()\")\n    main()","prob_desc_sample_outputs":"[\"16\", \"4\"]","lang_cluster":"Python","code_uid":"17b9fa6ea526fb8a88bd01eca05609e9","prob_desc_notes":"NoteIn the first example, the answer can be achieved by choosing the second floor as the $$$x$$$-th floor. Each person from the second floor (there are two of them) would spend $$$4$$$ units of electricity per day ($$$2$$$ to get down and $$$2$$$ to get up), and one person from the third would spend $$$8$$$ units of electricity per day ($$$4$$$ to get down and $$$4$$$ to get up). $$$4 \\cdot 2 + 8 \\cdot 1 = 16$$$.In the second example, the answer can be achieved by choosing the first floor as the $$$x$$$-th floor.","prob_desc_output_spec":"In a single line, print the answer to the problem\u00a0\u2014 the minimum number of electricity units.","prob_desc_output_to":"standard output","prob_desc_description":"The Fair Nut lives in $$$n$$$ story house. $$$a_i$$$ people live on the $$$i$$$-th floor of the house. Every person uses elevator twice a day: to get from the floor where he\/she lives to the ground (first) floor and to get from the first floor to the floor where he\/she lives, when he\/she comes back home in the evening. It was decided that elevator, when it is not used, will stay on the $$$x$$$-th floor, but $$$x$$$ hasn't been chosen yet. When a person needs to get from floor $$$a$$$ to floor $$$b$$$, elevator follows the simple algorithm:   Moves from the $$$x$$$-th floor (initially it stays on the $$$x$$$-th floor) to the $$$a$$$-th and takes the passenger.  Moves from the $$$a$$$-th floor to the $$$b$$$-th floor and lets out the passenger (if $$$a$$$ equals $$$b$$$, elevator just opens and closes the doors, but still comes to the floor from the $$$x$$$-th floor).  Moves from the $$$b$$$-th floor back to the $$$x$$$-th.  The elevator never transposes more than one person and always goes back to the floor $$$x$$$ before transposing a next passenger. The elevator spends one unit of electricity to move between neighboring floors. So moving from the $$$a$$$-th floor to the $$$b$$$-th floor requires $$$|a - b|$$$ units of electricity.Your task is to help Nut to find the minimum number of electricity units, that it would be enough for one day, by choosing an optimal the $$$x$$$-th floor. Don't forget than elevator initially stays on the $$$x$$$-th floor. ","hidden_unit_tests":"[{\"input\": \"3\\r\\n0 2 1\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"2\\r\\n1 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n1 3 3\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"3\\r\\n3 2 3\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"5\\r\\n2 10 6 3 1\\r\\n\", \"output\": [\"140\"]}, {\"input\": \"5\\r\\n6 4 10 5 10\\r\\n\", \"output\": [\"316\"]}, {\"input\": \"100\\r\\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 13 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\\r\\n\", \"output\": [\"921748\"]}, {\"input\": \"100\\r\\n47 79 39 24 51 37 29 54 96 100 48 80 32 98 27 88 73 36 79 11 33 78 87 94 27 55 21 1 24 6 83 27 7 66 27 91 12 35 43 17 57 46 78 19 20 61 29 89 6 73 51 82 48 14 33 81 37 51 34 64 57 19 1 96 49 81 34 27 84 49 72 56 47 37 50 23 58 53 78 82 25 66 13 10 61 3 73 96 64 59 38 48 12 61 96 81 37 80 83 39\\r\\n\", \"output\": [\"1005500\"]}, {\"input\": \"3\\r\\n2 1 3\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"3\\r\\n1 1 2\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"3\\r\\n3 1 1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"3\\r\\n4 5 5\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"3\\r\\n2 1 4\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"3\\r\\n1 2 2\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"3\\r\\n5 2 2\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"3\\r\\n3 2 5\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"3\\r\\n10 1 8\\r\\n\", \"output\": [\"68\"]}, {\"input\": \"3\\r\\n4 2 5\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"3\\r\\n8 6 1\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"3\\r\\n2 7 4\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"3\\r\\n10 5 8\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"5\\r\\n4 9 4 2 6\\r\\n\", \"output\": [\"188\"]}, {\"input\": \"5\\r\\n8 1 3 4 9\\r\\n\", \"output\": [\"220\"]}, {\"input\": \"5\\r\\n6 1 1 8 3\\r\\n\", \"output\": [\"156\"]}, {\"input\": \"100\\r\\n71 23 84 98 8 14 4 42 56 83 87 28 22 32 50 5 96 90 1 59 74 56 96 77 88 71 38 62 36 85 1 97 98 98 32 99 42 6 81 20 49 57 71 66 9 45 41 29 28 32 68 38 29 35 29 19 27 76 85 68 68 41 32 78 72 38 19 55 83 83 25 46 62 48 26 53 14 39 31 94 84 22 39 34 96 63 37 42 6 78 76 64 16 26 6 79 53 24 29 63\\r\\n\", \"output\": [\"971496\"]}, {\"input\": \"100\\r\\n95 72 38 75 62 87 87 30 11 65 35 75 16 73 65 23 18 48 19 4 22 42 14 60 49 83 59 15 60 51 27 80 97 35 37 100 64 81 22 38 54 71 52 20 5 20 52 73 42 98 78 86 26 55 25 57 14 97 36 81 71 54 71 51 3 4 8 74 82 21 74 29 81 52 1 87 75 22 76 2 27 79 73 61 39 39 9 89 60 1 14 77 27 87 11 70 61 75 63 75\\r\\n\", \"output\": [\"997408\"]}, {\"input\": \"100\\r\\n23 20 87 49 15 59 70 18 67 47 79 19 7 6 88 40 33 7 37 45 75 16 19 43 6 96 77 79 69 21 54 46 84 67 49 4 97 52 60 45 47 90 33 79 94 4 64 13 56 57 96 33 7 83 17 92 5 18 83 93 87 63 10 33 38 65 85 98 73 47 19 15 92 64 72 18 23 9 33 18 81 35 100 85 70 7 85 35 9 19 44 89 34 48 20 64 70 26 5 95\\r\\n\", \"output\": [\"991208\"]}, {\"input\": \"100\\r\\n47 64 41 30 77 36 50 10 22 29 18 59 93 35 3 61 55 57 63 94 15 97 28 14 63 12 2 36 89 91 72 24 75 3 54 8 23 27 94 56 48 4 26 33 91 92 75 53 74 24 18 85 97 8 9 26 96 39 39 97 90 80 45 11 69 30 70 22 76 81 76 1 8 75 48 48 83 92 86 26 32 83 34 9 4 71 45 78 59 34 82 2 45 13 37 54 86 74 39 12\\r\\n\", \"output\": [\"981464\"]}, {\"input\": \"100\\r\\n71 5 95 8 30 9 29 94 82 12 62 2 87 76 22 70 82 19 82 38 64 83 38 98 24 20 23 89 97 62 98 95 70 32 63 16 57 1 35 70 40 15 11 88 79 75 83 97 100 78 27 37 90 32 13 64 83 64 94 9 93 89 84 89 92 88 58 53 67 15 21 96 35 87 23 78 39 75 31 30 86 43 60 29 47 42 16 28 9 57 19 14 49 74 46 52 94 21 81 36\\r\\n\", \"output\": [\"1066920\"]}, {\"input\": \"100\\r\\n95 49 40 82 80 78 4 86 37 94 1 46 85 6 41 87 100 69 100 87 12 61 55 81 81 32 40 54 22 32 24 73 61 68 76 16 83 76 73 77 41 37 88 46 72 63 2 37 14 49 45 81 75 56 10 99 73 85 41 17 5 2 16 75 28 53 35 77 66 53 69 82 50 95 2 12 95 62 84 46 29 95 91 49 78 14 88 75 58 83 49 31 56 43 55 39 10 72 23 60\\r\\n\", \"output\": [\"1063232\"]}, {\"input\": \"100\\r\\n23 94 2 59 41 51 92 74 92 76 37 98 76 47 60 4 22 32 22 32 57 39 68 60 38 41 61 7 34 98 42 44 52 100 81 24 16 51 10 84 34 52 73 100 69 38 14 77 32 4 59 37 68 81 6 37 52 6 96 22 12 23 63 57 59 18 20 1 57 87 22 68 65 7 70 39 55 49 41 54 84 51 17 73 13 78 52 10 4 6 87 47 67 8 65 41 19 24 65 76\\r\\n\", \"output\": [\"902296\"]}, {\"input\": \"100\\r\\n94 69 43 36 54 93 30 74 56 95 70 49 11 36 57 30 59 3 52 59 90 82 39 67 32 8 80 64 8 65 51 48 89 90 35 4 54 66 96 68 90 30 4 13 97 41 90 85 17 45 94 31 58 4 39 76 95 92 59 67 46 96 55 82 64 20 20 83 46 37 15 60 37 79 45 47 63 73 76 31 52 36 32 49 26 61 91 31 25 62 90 65 65 5 94 7 15 97 88 68\\r\\n\", \"output\": [\"1077508\"]}]","length":21,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\", \"WBWBWBWB\\nWBWBWBWB\\nBBWBWWWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWWW\\nBWBWBWBW\\nBWBWBWBW\"]","prob_desc_input_spec":"The input consists of exactly eight lines. Each line contains exactly eight characters \"W\" or \"B\" without any spaces: the j-th character in the i-th line stands for the color of the j-th cell of the i-th row of the elephants' board. Character \"W\" stands for the white color, character \"B\" stands for the black color. Consider the rows of the board numbered from 1 to 8 from top to bottom, and the columns \u2014 from 1 to 8 from left to right. The given board can initially be a proper chessboard.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"ca65e023be092b2ce25599f52acc1a67","prob_desc_created_at":"1356190200","source_code":"board = []\nb, w = 'B', 'W'\ncheck = False\nfor i in range(8):\n    board.append(str(input()))\nfor i in board:\n    a = w+b\n    if 'BB' in i or 'WW' in i:\n        print(\"NO\")\n        check = True\n        break\n\n    if i != a*4:\n        i = i[-1] + i[:7]\n        if i != a*4:\n            print(\"NO\")\n            check = True\n            break\n    b, w = w, b\nif check == False:\n    print(\"YES\")","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"Python","code_uid":"ba2a0eea1310e12733fc5de00836c934","prob_desc_notes":"NoteIn the first sample you should shift the following lines one position to the right: the 3-rd, the 6-th, the 7-th and the 8-th.In the second sample there is no way you can achieve the goal.","prob_desc_output_spec":"In a single line print \"YES\" (without the quotes), if we can make the board a proper chessboard and \"NO\" (without the quotes) otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"The Little Elephant loves chess very much. One day the Little Elephant and his friend decided to play chess. They've got the chess pieces but the board is a problem. They've got an 8\u2009\u00d7\u20098 checkered board, each square is painted either black or white. The Little Elephant and his friend know that a proper chessboard doesn't have any side-adjacent cells with the same color and the upper left cell is white. To play chess, they want to make the board they have a proper chessboard. For that the friends can choose any row of the board and cyclically shift the cells of the chosen row, that is, put the last (rightmost) square on the first place in the row and shift the others one position to the right. You can run the described operation multiple times (or not run it at all).For example, if the first line of the board looks like that \"BBBBBBWW\" (the white cells of the line are marked with character \"W\", the black cells are marked with character \"B\"), then after one cyclic shift it will look like that \"WBBBBBBW\".Help the Little Elephant and his friend to find out whether they can use any number of the described operations to turn the board they have into a proper chessboard.","hidden_unit_tests":"[{\"input\": \"WBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nBBWBWWWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWWW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"BWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWWWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBBBWWW\\r\\nWBBWBWWB\\r\\nWWWWWBWW\\r\\nBWBWWBWW\\r\\nBBBWWBWW\\r\\nBBBBBWBW\\r\\nWBBBWBWB\\r\\nWBWBWWWB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nBWWWWWBB\\r\\nBBWBWBWB\\r\\nWBWBWBWB\\r\\nWWBWWBWW\\r\\nBWBWBWBW\\r\\nWBWWBBBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWWBWBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WWWWBWWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWWBWBBBB\\r\\nBBWWBBBB\\r\\nBBBWWBBW\\r\\nBWWWWWWB\\r\\nBWWBBBWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBBWWBWB\\r\\nBBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBBW\\r\\nWBWBBBBW\\r\\nBWWWWBWB\\r\\nBBBBBBBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nBBWWWBBB\\r\\nWBBBBBWW\\r\\nWBBBBWBB\\r\\nWBWBWBWB\\r\\nWBWWBWWB\\r\\nWBBWBBWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBBBBBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBBBBBWBB\\r\\nWBBWWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBBWWBWB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWWWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"BWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WWBBWWBB\\r\\nBWWBBWWB\\r\\nBWBWBWBW\\r\\nWWBBWWWB\\r\\nWBWWWWBB\\r\\nWBWWBBWB\\r\\nBWBBWBWW\\r\\nBWBWWWWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nWWBBWBBB\\r\\nWBWBWBWB\\r\\nWWWWBWWB\\r\\nWBBBBWWW\\r\\nBWBWWWBW\\r\\nWWWBWBBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nBWWBWWWW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWWBBBBBW\\r\\nWWWBWWBW\\r\\nWWBBBBWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBBBWWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WWBWWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WWWWWWWW\\r\\nBBBBBBBB\\r\\nWWWWWWWW\\r\\nBBBBBBBB\\r\\nWWWWWWWW\\r\\nBBBBBBBB\\r\\nWWWWWWWW\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBBBBBB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBWWWWW\\r\\nWWWBBBBB\\r\\nBBBWWWWW\\r\\nWWWBBBBB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"NO\"]}]","length":21,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 1 1\", \"2 2 2\"]","prob_desc_input_spec":"The first line contains three space-separated integers 2n, x and y (2\u2009\u2264\u20092n\u2009\u2264\u2009100,\u20091\u2009\u2264\u2009x,\u2009y\u2009\u2264\u20092n), representing the length of a square's side and the coordinates of the marked cell. It is guaranteed that 2n is even. The coordinates of the marked cell are represented by a pair of numbers x y, where x represents the number of the row and y represents the number of the column. The rows and columns are numbered by consecutive integers from 1 to 2n. The rows are numbered from top to bottom and the columns are numbered from the left to the right.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"dc891d57bcdad3108dcb4ccf9c798789","prob_desc_created_at":"1315051200","source_code":"n,x,y=map(int,input().split())\nif ((x==n\/2 or  x==n\/2+1) and (y==((n\/2)) or y==((n\/2)+1))):\n    print(\"NO\")\nelse:\n    print(\"YES\")","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"Python","code_uid":"1d85771f485e1e6f0defa8769e237aa4","prob_desc_notes":"NoteA sample test from the statement and one of the possible ways of cutting the square are shown in the picture:   ","prob_desc_output_spec":"If the square is possible to cut, print \"YES\", otherwise print \"NO\" (without the quotes).","prob_desc_output_to":"standard output","prob_desc_description":"Little Petya loves playing with squares. Mum bought him a square 2n\u2009\u00d7\u20092n in size. Petya marked a cell inside the square and now he is solving the following task.The task is to draw a broken line that would go along the grid lines and that would cut the square into two equal parts. The cutting line should not have any common points with the marked cell and the resulting two parts should be equal up to rotation.Petya wants to determine whether it is possible to cut the square in the required manner given the sizes of the square side and the coordinates of the marked cell. Help him.","hidden_unit_tests":"[{\"input\": \"4 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"2 2 2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"8 2 5\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"6 1 6\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"2 1 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2 1 2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2 2 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"4 2 2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"4 2 3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"4 2 4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"60 30 30\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"60 34 30\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"60 31 29\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 61 30\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 52 50\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 51 51\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"100 1 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 1 8\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 19 99\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 18 82\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 100 50\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 51 100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 100 100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"6 3 3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"6 4 4\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"6 3 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"6 3 5\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"8 4 4\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"6 3 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"4 3 3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"20 10 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"8 4 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 50 50\\r\\n\", \"output\": [\"NO\"]}]","length":5,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"5 2 2\", \"5 4 7\", \"6 2 3\"]","prob_desc_input_spec":"The single line contains three integers T,\u2009S,\u2009q (2\u2009\u2264\u2009q\u2009\u2264\u2009104, 1\u2009\u2264\u2009S\u2009&lt;\u2009T\u2009\u2264\u2009105).","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"0d01bf286fb2c7950ce5d5fa59a17dd9","prob_desc_created_at":"1439224200","source_code":"t,s,q=map(int,input().split())\nres=0\nwhile s<t:s*=q;res+=1\nprint(res)","prob_desc_sample_outputs":"[\"2\", \"1\", \"1\"]","lang_cluster":"Python","code_uid":"075c28eaa1bdc66e9693240308b15533","prob_desc_notes":"NoteIn the first test, the song is played twice faster than it is downloaded, which means that during four first seconds Lesha reaches the moment that has not been downloaded, and starts the song again. After another two seconds, the song is downloaded completely, and thus, Lesha starts the song twice.In the second test, the song is almost downloaded, and Lesha will start it only once.In the third sample test the download finishes and Lesha finishes listening at the same moment. Note that song isn't restarted in this case.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the number of times the song will be restarted.","prob_desc_output_to":"standard output","prob_desc_description":"Little Lesha loves listening to music via his smartphone. But the smartphone doesn't have much memory, so Lesha listens to his favorite songs in a well-known social network InTalk.Unfortunately, internet is not that fast in the city of Ekaterinozavodsk and the song takes a lot of time to download. But Lesha is quite impatient. The song's duration is T seconds. Lesha downloads the first S seconds of the song and plays it. When the playback reaches the point that has not yet been downloaded, Lesha immediately plays the song from the start (the loaded part of the song stays in his phone, and the download is continued from the same place), and it happens until the song is downloaded completely and Lesha listens to it to the end. For q seconds of real time the Internet allows you to download q\u2009-\u20091 seconds of the track.Tell Lesha, for how many times he will start the song, including the very first start.","hidden_unit_tests":"[{\"input\": \"5 2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5 4 7\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"6 2 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 1 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 1 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"12326 6163 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000 2500 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100000 99999 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"12351 1223 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100000 1 10000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10028 13 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100000 99999 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100000 99999 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100000 1 2\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"100000 1 3\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"100000 1 4\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"100000 1 5\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"100000 3125 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"12628 1804 7\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100000 45 13\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100000 500 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"356 2 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"50 2 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"65465 12 3\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"10033 3 8\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100000 3 2\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"64 1 8\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10000 9 2\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"25 2 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"129 2 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6562 1 3\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"100000 1 10\\r\\n\", \"output\": [\"5\"]}]","length":4,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4\\nFSSF\", \"2\\nSF\", \"10\\nFFFFFFFFFF\", \"10\\nSSFFSFFSFF\"]","prob_desc_input_spec":"The first line of input contains single integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of days. The second line contains a string of length n consisting of only capital 'S' and 'F' letters. If the i-th letter is 'S', then you were in Seattle office on that day. Otherwise you were in San Francisco. The days are given in chronological order, i.e. today is the last day in this sequence.","prob_desc_input_from":"standard input","lang":"Python 3","exec_outcome":"PASSED","src_uid":"ab8a2070ea758d118b3c09ee165d9517","prob_desc_created_at":"1506791100","source_code":"input()\ns = input()\nprint(('NO', 'YES')[s.count('SF') > s.count('FS')])","prob_desc_sample_outputs":"[\"NO\", \"YES\", \"NO\", \"YES\"]","lang_cluster":"Python","code_uid":"37f3d9d8a137e7999ce23e1db37cb1e4","prob_desc_notes":"NoteIn the first example you were initially at San Francisco, then flew to Seattle, were there for two days and returned to San Francisco. You made one flight in each direction, so the answer is \"NO\".In the second example you just flew from Seattle to San Francisco, so the answer is \"YES\".In the third example you stayed the whole period in San Francisco, so the answer is \"NO\".In the fourth example if you replace 'S' with ones, and 'F' with zeros, you'll get the first few digits of \u03c0 in binary representation. Not very useful information though.","prob_desc_output_spec":"Print \"YES\" if you flew more times from Seattle to San Francisco, and \"NO\" otherwise. You can print each letter in any case (upper or lower).","prob_desc_output_to":"standard output","prob_desc_description":"As you may know, MemSQL has American offices in both San Francisco and Seattle. Being a manager in the company, you travel a lot between the two cities, always by plane.You prefer flying from Seattle to San Francisco than in the other direction, because it's warmer in San Francisco. You are so busy that you don't remember the number of flights you have made in either direction. However, for each of the last n days you know whether you were in San Francisco office or in Seattle office. You always fly at nights, so you never were at both offices on the same day. Given this information, determine if you flew more times from Seattle to San Francisco during the last n days, or not.","hidden_unit_tests":"[{\"input\": \"4\\r\\nFSSF\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"2\\r\\nSF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"10\\r\\nFFFFFFFFFF\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"10\\r\\nSSFFSFFSFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"20\\r\\nSFSFFFFSSFFFFSSSSFSS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"20\\r\\nSSFFFFFSFFFFFFFFFFFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"20\\r\\nSSFSFSFSFSFSFSFSSFSF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"20\\r\\nSSSSFSFSSFSFSSSSSSFS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nFFFSFSFSFSSFSFFSSFFFFFSSSSFSSFFFFSFFFFFSFFFSSFSSSFFFFSSFFSSFSFFSSFSSSFSFFSFSFFSFSFFSSFFSFSSSSFSFSFSS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nFFFFFFFFFFFFFFFFFFFFFFFFFFSFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFSFFFFFFFFFFFFFFFFFSS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nFFFFFFFFFFFFFSFFFFFFFFFSFSSFFFFFFFFFFFFFFFFFFFFFFSFFSFFFFFSFFFFFFFFSFFFFFFFFFFFFFSFFFFFFFFSFFFFFFFSF\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nSFFSSFFFFFFSSFFFSSFSFFFFFSSFFFSFFFFFFSFSSSFSFSFFFFSFSSFFFFFFFFSFFFFFSFFFFFSSFFFSFFSFSFFFFSFFSFFFFFFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nFFFFSSSSSFFSSSFFFSFFFFFSFSSFSFFSFFSSFFSSFSFFFFFSFSFSFSFFFFFFFFFSFSFFSFFFFSFSFFFFFFFFFFFFSFSSFFSSSSFF\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nFFFFFFFFFFFFSSFFFFSFSFFFSFSSSFSSSSSFSSSSFFSSFFFSFSFSSFFFSSSFFSFSFSSFSFSSFSFFFSFFFFFSSFSFFFSSSFSSSFFS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nFFFSSSFSFSSSSFSSFSFFSSSFFSSFSSFFSSFFSFSSSSFFFSFFFSFSFSSSFSSFSFSFSFFSSSSSFSSSFSFSFFSSFSFSSFFSSFSFFSFS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nFFSSSSFSSSFSSSSFSSSFFSFSSFFSSFSSSFSSSFFSFFSSSSSSSSSSSSFSSFSSSSFSFFFSSFFFFFFSFSFSSSSSSFSSSFSFSSFSSFSS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nSSSFFFSSSSFFSSSSSFSSSSFSSSFSSSSSFSSSSSSSSFSFFSSSFFSSFSSSSFFSSSSSSFFSSSSFSSSSSSFSSSFSSSSSSSFSSSSFSSSS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nFSSSSSSSSSSSFSSSSSSSSSSSSSSSSFSSSSSSFSSSSSSSSSSSSSFSSFSSSSSFSSFSSSSSSSSSFFSSSSSFSFSSSFFSSSSSSSSSSSSS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nSSSSSSSSSSSSSFSSSSSSSSSSSSFSSSFSSSSSSSSSSSSSSSSSSSSSSSSSSSSSFSSSSSSSSSSSSSSSSFSFSSSSSSSSSSSSSSSSSSFS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\\r\\n\", \"output\": [\"NO\", \"no\"]}, {\"input\": \"100\\r\\nSFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFSFSFFFFFFFFFFFSFSFFFFFFFFFFFFFSFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSFFFFFFFFFFFFSSFFFFSFFFFFFFFFFFFFFFFFFFSFFFSSFFFFSFSFFFSFFFFFFFFFFFFFFFSSFFFFFFFFSSFFFFFFFFFFFFFFSFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSFFSSSFFSFSFSFFFFSSFFFFSFFFFFFFFSFSFFFSFFFSFFFSFFFFSFSFFFFFFFSFFFFFFFFFFSFFSSSFFSSFFFFSFFFFSFFFFSFFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSFFFSFFFFSFFFSSFFFSFSFFFSFFFSSFSFFFFFSFFFFFFFFSFSFSFFSFFFSFSSFSFFFSFSFFSSFSFSSSFFFFFFSSFSFFSFFFFFFFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSSSSFFFFSFFFFFFFSFFFFSFSFFFFSSFFFFFFFFFSFFSSFFFFFFSFSFSSFSSSFFFFFFFSFSFFFSSSFFFFFFFSFFFSSFFFFSSFFFSF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSSSFSSFFFSFSSSSFSSFSSSSFSSFFFFFSFFSSSSFFSSSFSSSFSSSSFSSSSFSSSSSSSFSFSSFFFSSFFSFFSSSSFSSFFSFSSFSFFFSF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSFFSFSSSSSSSFFSSSFSSSSFSFSSFFFSSSSSSFSSSSFSSFSSSFSSSSSSSFSSFSFFFSSFSSFSFSFSSSSSSSSSSSSFFFFSSSSSFSFFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSSSFSFFSFSFFSSSSSFSSSFSSSFFFSSSSSSSSSFSFSFSSSSFSFSSFFFFFSSSSSSSSSSSSSSSSSSSFFSSSSSFSFSSSSFFSSSSFSSSF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSSSFSSSSSSSSSSFSSSSFSSSSSSFSSSSSSFSSSSSSSSSSSSSSFSSSFSSSFSSSSSSSSSSSFSSSSSSFSFSSSSFSSSSSSFSSSSSSSSFF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSSSSSSSSSSSSSSSFSFSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSFFSSSSSSSSSFSSSSSSSSSSSSSSSSSF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"100\\r\\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSF\\r\\n\", \"output\": [\"YES\", \"yes\"]}, {\"input\": \"2\\r\\nSS\\r\\n\", \"output\": [\"NO\", \"no\"]}]","length":3,"num_hidden_unit_tests":34}
{"prob_desc_memory_limit":"512 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2\\n3\\n1\"]","prob_desc_input_spec":"The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 30$$$) \u2014 the number of test cases. Each test case consists of one line containing one integer $$$n$$$ ($$$1 \\le n \\le 30$$$).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"d5e66e34601cad6d78c3f02898fa09f4","prob_desc_created_at":"1646922900","source_code":"import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.*;\r\n\r\npublic class CF1{\r\n    public static void main(String[] args) {\r\n        FastScanner sc=new FastScanner();\r\n        int T=sc.nextInt();\r\n\/\/        int T=1;\r\n        for (int tt=0; tt<T; tt++){\r\n            int n = sc.nextInt();\r\n            n=(int)power2(2,n);\r\n            System.out.println(n-1);\r\n        }\r\n    }\r\n    static long factorial (int x){\r\n        if (x==0) return 1;\r\n        long ans =x;\r\n        for (int i=x-1; i>=1; i--){\r\n            ans*=i;\r\n\/\/            ans%=mod;\r\n        }\r\n        return ans;\r\n    }\r\n    static int mod =1073741825;\r\n    static long power2 (long a, long b){\r\n        long res=1;\r\n        while (b>0){\r\n            if ((b&1)== 1){\r\n                res= (res * a % mod)%mod;\r\n            }\r\n            a=(a%mod * a%mod)%mod;\r\n            b=b>>1;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    boolean[] sieveOfEratosthenes(int n)\r\n    {\r\n\r\n        boolean prime[] = new boolean[n+1];\r\n        for(int i=0;i<=n;i++)\r\n            prime[i] = true;\r\n\r\n        for(int p = 2; p*p <=n; p++)\r\n        {\r\n            if(prime[p] == true)\r\n            {\r\n                for(int i = p*p; i <= n; i += p)\r\n                    prime[i] = false;\r\n            }\r\n        }\r\n        return prime;\r\n    }\r\n    static void sort(int[] a) {\r\n        ArrayList<Integer> l=new ArrayList<>();\r\n        for (int i:a) l.add(i);\r\n        Collections.sort(l);\r\n        for (int i=0; i<a.length; i++) a[i]=l.get(i);\r\n    }\r\n    static void sortLong(long[] a) {\r\n        ArrayList<Long> l=new ArrayList<>();\r\n        for (long i:a) l.add(i);\r\n        Collections.sort(l);\r\n        for (int i=0; i<a.length; i++) a[i]=l.get(i);\r\n    }\r\n    static long gcd (long n, long m){\r\n        if (m==0) return n;\r\n        else return gcd(m, n%m);\r\n    }\r\n\r\n    static class Pair implements Comparable<Pair>{\r\n        int x,y;\r\n        public Pair(int x, int y){\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        public int compareTo(Pair o){\r\n            return this.x-o.x;\r\n        }\r\n        \/\/ this.x-o.x is ascending\r\n    }\r\n    static class FastScanner {\r\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n        StringTokenizer st=new StringTokenizer(\"\");\r\n        String next() {\r\n            while (!st.hasMoreTokens())\r\n                try {\r\n                    st=new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n        int[] readArray(int n) {\r\n            int[] a=new int[n];\r\n            for (int i=0; i<n; i++) a[i]=nextInt();\r\n            return a;\r\n        }\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n    }\r\n}","prob_desc_sample_outputs":"[\"7\\n1\"]","lang_cluster":"Java","code_uid":"4d7f9ea40930069e1322a8b3e74c6a4f","prob_desc_notes":"NoteThe case $$$n = 3$$$ is shown in the picture from the statement.If $$$n = 1$$$, then there's only one match between athletes $$$1$$$ and $$$2$$$. Since $$$1 + 2 = 3$$$ is an odd number, the athlete with the lower index wins. So, the athlete $$$1$$$ is the winner.","prob_desc_output_spec":"For each test case, print one integer \u2014 the index of the winner of the tournament.","prob_desc_output_to":"standard output","prob_desc_description":"Consider a playoff tournament where $$$2^n$$$ athletes compete. The athletes are numbered from $$$1$$$ to $$$2^n$$$.The tournament is held in $$$n$$$ stages. In each stage, the athletes are split into pairs in such a way that each athlete belongs exactly to one pair. In each pair, the athletes compete against each other, and exactly one of them wins. The winner of each pair advances to the next stage, the athlete who was defeated gets eliminated from the tournament.The pairs are formed as follows:  in the first stage, athlete $$$1$$$ competes against athlete $$$2$$$; $$$3$$$ competes against $$$4$$$; $$$5$$$ competes against $$$6$$$, and so on;  in the second stage, the winner of the match \"$$$1$$$\u2013$$$2$$$\" competes against the winner of the match \"$$$3$$$\u2013$$$4$$$\"; the winner of the match \"$$$5$$$\u2013$$$6$$$\" competes against the winner of the match \"$$$7$$$\u2013$$$8$$$\", and so on;  the next stages are held according to the same rules. When athletes $$$x$$$ and $$$y$$$ compete, the winner is decided as follows:  if $$$x+y$$$ is odd, the athlete with the lower index wins (i.\u2009e. if $$$x &lt; y$$$, then $$$x$$$ wins, otherwise $$$y$$$ wins);  if $$$x+y$$$ is even, the athlete with the higher index wins. The following picture describes the way the tournament with $$$n = 3$$$ goes.  Your task is the following one: given the integer $$$n$$$, determine the index of the athlete who wins the tournament.","hidden_unit_tests":"[{\"input\": \"2\\n3\\n1\\n\", \"output\": [\"7\\n1\\n\", \"7\\n1\\n\\n\", \"7\\n\\n1\\n\", \"7\\n1\", \"7\\n1\\n\", \"7 \\n1 \\n\", \"\\n7\\n1\\n\", \"7\\t1\\t\", \"7\\n1\\n\", \"7\\n\\n1\\n\\n\", \"7 1 \", \"\\n7\\n1\", \"7\\n1\\n\\n\"]}, {\"input\": \"30\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n\", \"output\": [\"1 \\n3 \\n7 \\n15 \\n31 \\n63 \\n127 \\n255 \\n511 \\n1023 \\n2047 \\n4095 \\n8191 \\n16383 \\n32767 \\n65535 \\n131071 \\n262143 \\n524287 \\n1048575 \\n2097151 \\n4194303 \\n8388607 \\n16777215 \\n33554431 \\n67108863 \\n134217727 \\n268435455 \\n536870911 \\n1073741823 \\n\", \"\\n1\\n3\\n7\\n15\\n31\\n63\\n127\\n255\\n511\\n1023\\n2047\\n4095\\n8191\\n16383\\n32767\\n65535\\n131071\\n262143\\n524287\\n1048575\\n2097151\\n4194303\\n8388607\\n16777215\\n33554431\\n67108863\\n134217727\\n268435455\\n536870911\\n1073741823\", \"1\\n3\\n7\\n15\\n31\\n63\\n127\\n255\\n511\\n1023\\n2047\\n4095\\n8191\\n16383\\n32767\\n65535\\n131071\\n262143\\n524287\\n1048575\\n2097151\\n4194303\\n8388607\\n16777215\\n33554431\\n67108863\\n134217727\\n268435455\\n536870911\\n1073741823\", \"1\\n3\\n7\\n15\\n31\\n63\\n127\\n255\\n511\\n1023\\n2047\\n4095\\n8191\\n16383\\n32767\\n65535\\n131071\\n262143\\n524287\\n1048575\\n2097151\\n4194303\\n8388607\\n16777215\\n33554431\\n67108863\\n134217727\\n268435455\\n536870911\\n1073741823\\n\\n\", \"1\\n3\\n7\\n15\\n31\\n63\\n127\\n255\\n511\\n1023\\n2047\\n4095\\n8191\\n16383\\n32767\\n65535\\n131071\\n262143\\n524287\\n1048575\\n2097151\\n4194303\\n8388607\\n16777215\\n33554431\\n67108863\\n134217727\\n268435455\\n536870911\\n1073741823\\n\", \"1\\n3\\n7\\n15\\n31\\n63\\n127\\n255\\n511\\n1023\\n2047\\n4095\\n8191\\n16383\\n32767\\n65535\\n131071\\n262143\\n524287\\n1048575\\n2097151\\n4194303\\n8388607\\n16777215\\n33554431\\n67108863\\n134217727\\n268435455\\n536870911\\n1073741823\\n\", \"1\\n3\\n7\\n15\\n31\\n63\\n127\\n255\\n511\\n1023\\n2047\\n4095\\n8191\\n16383\\n32767\\n65535\\n131071\\n262143\\n524287\\n1048575\\n2097151\\n4194303\\n8388607\\n16777215\\n33554431\\n67108863\\n134217727\\n268435455\\n536870911\\n1073741823\\n\", \"\\n1\\n3\\n7\\n15\\n31\\n63\\n127\\n255\\n511\\n1023\\n2047\\n4095\\n8191\\n16383\\n32767\\n65535\\n131071\\n262143\\n524287\\n1048575\\n2097151\\n4194303\\n8388607\\n16777215\\n33554431\\n67108863\\n134217727\\n268435455\\n536870911\\n1073741823\\n\", \"1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 2097151 4194303 8388607 16777215 33554431 67108863 134217727 268435455 536870911 1073741823 \", \"1\\n3\\n7\\n15\\n31\\n63\\n127\\n255\\n511\\n1023\\n2047\\n4095\\n8191\\n16383\\n32767\\n65535\\n131071\\n262143\\n524287\\n1048575\\n2097151\\n4194303\\n8388607\\n16777215\\n33554431\\n67108863\\n134217727\\n268435455\\n536870911\\n1073741823\\n\\n\"]}, {\"input\": \"30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n30\\n\", \"output\": [\"1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n1073741823 \\n\", \"1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 1073741823 \", \"1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n\\n\", \"\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\", \"1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n\", \"1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n\", \"1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n\", \"\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n\", \"1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n\\n\", \"1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\\n1073741823\"]}, {\"input\": \"9\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n\", \"output\": [\"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\", \"\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\", \"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\", \"3 3 3 3 3 3 3 3 3 \", \"\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\", \"3 \\n3 \\n3 \\n3 \\n3 \\n3 \\n3 \\n3 \\n3 \\n\", \"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\", \"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\\n\", \"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\", \"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\\n\"]}]","length":109,"num_hidden_unit_tests":4}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n22\\n9999\\n1\\n777\"]","prob_desc_input_spec":"The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 36$$$) \u2014 the number of test cases. The only line of the test case contains one integer $$$x$$$ ($$$1 \\le x \\le 9999$$$) \u2014 the apartment number of the resident who answered the call. It is guaranteed that $$$x$$$ consists of the same digit.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"289a55128be89bb86a002d218d31b57f","prob_desc_created_at":"1603204500","source_code":"\/\/package CodeForces.Round677Div3;\n\nimport java.io.*;import java.util.*;import java.math.*;\npublic class A\n{\n    static long mod=1000000007l;\n    static int max=Integer.MAX_VALUE,min=Integer.MIN_VALUE;\n    static long maxl=Long.MAX_VALUE,minl=Long.MIN_VALUE;\n    static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n    static StringTokenizer st;\n    static StringBuilder sb;\n\n    static public void main(String[] args)throws Exception\n    {\n        st=new StringTokenizer(br.readLine());\n        int t=i();\n        sb=new StringBuilder(1000000);\n\n        while(t-->0) {\n            String s = s() ;\n            int ans = 0 ;\n            Character ch = s.charAt(0) ;\n            int n = s.length() ;\n            if(ch=='1'){\n                ans+=0 ;\n            } else if (ch == '2') {\n                ans+=10 ;\n            }\n            else if (ch == '3') {\n                ans+=20 ;\n            }\n            else if (ch == '4') {\n                ans+=30 ;\n            }\n            else if (ch == '5') {\n                ans+=40 ;\n            }\n            else if (ch == '6') {\n                ans+=50 ;\n            }\n            else if (ch == '7') {\n                ans+=60 ;\n            }\n            else if (ch == '8') {\n                ans+=70 ;\n            }\n            else if (ch == '9') {\n                ans+=80 ;\n            }\n            ans+= (n*(n+1))\/2 ;\n            sl(ans) ;\n        }\n        p(sb) ;\n    }\n\n    static void s(String s){sb.append(s);}\n    static void s(int s){sb.append(s);}\n    static void s(long s){sb.append(s);}\n    static void s(char s){sb.append(s);}\n    static void s(double s){sb.append(s);}\n    static void ss(){sb.append(' ');}\n    static void sl(String s){sb.append(s);sb.append(\"\\n\");}\n    static void sl(int s){sb.append(s);sb.append(\"\\n\");}\n    static void sl(long s){sb.append(s);sb.append(\"\\n\");}\n    static void sl(char s){sb.append(s);sb.append(\"\\n\");}\n    static void sl(double s){sb.append(s);sb.append(\"\\n\");}\n    static void sl(){sb.append(\"\\n\");}\n    static int max(int a,int b){return a>b?a:b;}\n    static int min(int a,int b){return a<b?a:b;}\n    static int abs(int a){return Math.abs(a);}\n    static long max(long a,long b){return a>b?a:b;}\n    static long min(long a,long b){return a<b?a:b;}\n    static long abs(long a){return Math.abs(a);}\n    static int sq(int a){return (int)Math.sqrt(a);}\n    static long sq(long a){return (long)Math.sqrt(a);}\n    static int gcd(int a,int b){return b==0?a:gcd(b,a%b);}\n    static boolean pa(String s,int i,int j)\n    {\n        while(i<j)if(s.charAt(i++)!=s.charAt(j--))return false;\n        return true;\n    }\n    static int ncr(int n,int c,long m)\n    {\n        long a=1l;\n        for(int x=n-c+1;x<=n;x++)a=((a*x)%m);\n        long b=1l;\n        for(int x=2;x<=c;x++)b=((b*x)%m);\n        return (int)((a*(mul((int)b,m-2,m)%m))%m);\n    }\n    static boolean[] sieve(int n)\n    {\n        boolean bo[]=new boolean[n+1];\n        bo[0]=true;bo[1]=true;\n        for(int x=4;x<=n;x+=2)bo[x]=true;\n        for(int x=3;x*x<=n;x+=2)if(!bo[x])for(int y=x*x;y<=n;y+=x)bo[y]=true;\n        return bo;\n    }\n    static int[] fac(int n)\n    {\n        int bo[]=new int[n+1];\n        for(int x=1;x<=n;x++)for(int y=x;y<=n;y+=x)bo[y]++;\n        return bo;\n    }\n    static long mul(long a,long b,long m)\n    {\n        long r=1l;\n        a%=m;\n        while(b>0)\n        {\n            if((b&1)==1)r=(r*a)%m;\n            b>>=1;\n            a=(a*a)%m;\n        }\n        return r;\n    }\n    static int i()throws IOException\n    {\n        if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n        return Integer.parseInt(st.nextToken());\n    }\n    static long l()throws IOException\n    {\n        if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n        return Long.parseLong(st.nextToken());\n    }\n    static String s()throws IOException\n    {\n        if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n        return st.nextToken();\n    }\n    static double d()throws IOException\n    {\n        if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n        return Double.parseDouble(st.nextToken());\n    }\n    static void p(Object p){System.out.print(p);}\n    static void p(String p){System.out.print(p);}\n    static void p(int p){System.out.print(p);}\n    static void p(double p){System.out.print(p);}\n    static void p(long p){System.out.print(p);}\n    static void p(char p){System.out.print(p);}\n    static void p(boolean p){System.out.print(p);}\n    static void pl(Object p){System.out.println(p);}\n    static void pl(String p){System.out.println(p);}\n    static void pl(int p){System.out.println(p);}\n    static void pl(char p){System.out.println(p);}\n    static void pl(double p){System.out.println(p);}\n    static void pl(long p){System.out.println(p);}\n    static void pl(boolean p){System.out.println(p);}\n    static void pl(){System.out.println();}\n    static int[] ari(int n)throws IOException\n    {\n        int ar[]=new int[n];\n        if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n        for(int x=0;x<n;x++)ar[x]=Integer.parseInt(st.nextToken());\n        return ar;\n    }\n    static int[][] ari(int n,int m)throws IOException\n    {\n        int ar[][]=new int[n][m];\n        for(int x=0;x<n;x++)\n        {\n            if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n            for(int y=0;y<m;y++)ar[x][y]=Integer.parseInt(st.nextToken());\n        }\n        return ar;\n    }\n    static long[] arl(int n)throws IOException\n    {\n        long ar[]=new long[n];\n        if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n        for(int x=0;x<n;x++) ar[x]=Long.parseLong(st.nextToken());\n        return ar;\n    }\n    static long[][] arl(int n,int m)throws IOException\n    {\n        long ar[][]=new long[n][m];\n        for(int x=0;x<n;x++)\n        {\n            if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n            for(int y=0;y<m;y++)ar[x][y]=Long.parseLong(st.nextToken());\n        }\n        return ar;\n    }\n    static String[] ars(int n)throws IOException\n    {\n        String ar[]=new String[n];\n        if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n        for(int x=0;x<n;x++) ar[x]=st.nextToken();\n        return ar;\n    }\n    static double[] ard(int n)throws IOException\n    {\n        double ar[]=new double[n];\n        if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n        for(int x=0;x<n;x++)ar[x]=Double.parseDouble(st.nextToken());\n        return ar;\n    }\n    static double[][] ard(int n,int m)throws IOException\n    {\n        double ar[][]=new double[n][m];\n        for(int x=0;x<n;x++)\n        {\n            if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n            for(int y=0;y<m;y++)ar[x][y]=Double.parseDouble(st.nextToken());\n        }\n        return ar;\n    }\n    static char[] arc(int n)throws IOException\n    {\n        char ar[]=new char[n];\n        if(!st.hasMoreTokens())st=new StringTokenizer(br.readLine());\n        for(int x=0;x<n;x++)ar[x]=st.nextToken().charAt(0);\n        return ar;\n    }\n    static char[][] arc(int n,int m)throws IOException\n    {\n        char ar[][]=new char[n][m];\n        for(int x=0;x<n;x++)\n        {\n            String s=br.readLine();\n            for(int y=0;y<m;y++)ar[x][y]=s.charAt(y);\n        }\n        return ar;\n    }\n    static void p(int ar[])\n    {\n        StringBuilder sb=new StringBuilder(2*ar.length);\n        for(int a:ar)\n        {\n            sb.append(a);\n            sb.append(' ');\n        }\n        System.out.println(sb);\n    }\n    static void p(int ar[][])\n    {\n        StringBuilder sb=new StringBuilder(2*ar.length*ar[0].length);\n        for(int a[]:ar)\n        {\n            for(int aa:a)\n            {\n                sb.append(aa);\n                sb.append(' ');\n            }\n            sb.append(\"\\n\");\n        }\n        p(sb);\n    }\n    static void p(long ar[])\n    {\n        StringBuilder sb=new StringBuilder(2*ar.length);\n        for(long a:ar)\n        {\n            sb.append(a);\n            sb.append(' ');\n        }\n        System.out.println(sb);\n    }\n    static void p(long ar[][])\n    {\n        StringBuilder sb=new StringBuilder(2*ar.length*ar[0].length);\n        for(long a[]:ar)\n        {\n            for(long aa:a)\n            {\n                sb.append(aa);\n                sb.append(' ');\n            }\n            sb.append(\"\\n\");\n        }\n        p(sb);\n    }\n    static void p(String ar[])\n    {\n        int c=0;\n        for(String s:ar)c+=s.length()+1;\n        StringBuilder sb=new StringBuilder(c);\n        for(String a:ar)\n        {\n            sb.append(a);\n            sb.append(' ');\n        }\n        System.out.println(sb);\n    }\n    static void p(double ar[])\n    {\n        StringBuilder sb=new StringBuilder(2*ar.length);\n        for(double a:ar)\n        {\n            sb.append(a);\n            sb.append(' ');\n        }\n        System.out.println(sb);\n    }\n    static void p(double ar[][])\n    {\n        StringBuilder sb=new StringBuilder(2*ar.length*ar[0].length);\n        for(double a[]:ar)\n        {\n            for(double aa:a)\n            {\n                sb.append(aa);\n                sb.append(' ');\n            }\n            sb.append(\"\\n\");\n        }\n        p(sb);\n    }\n    static void p(char ar[])\n    {\n        StringBuilder sb=new StringBuilder(2*ar.length);\n        for(char aa:ar)\n        {\n            sb.append(aa);\n            sb.append(' ');\n        }\n        System.out.println(sb);\n    }\n    static void p(char ar[][])\n    {\n        StringBuilder sb=new StringBuilder(2*ar.length*ar[0].length);\n        for(char a[]:ar)\n        {\n            for(char aa:a)\n            {\n                sb.append(aa);\n                sb.append(' ');\n            }\n            sb.append(\"\\n\");\n        }\n        p(sb);\n    }\n}\n","prob_desc_sample_outputs":"[\"13\\n90\\n1\\n66\"]","lang_cluster":"Java","code_uid":"c4b6aa5eb0d6a6d34ac34d4bd0b06131","prob_desc_notes":null,"prob_desc_output_spec":"For each test case, print the answer: how many digits our character pressed in total.","prob_desc_output_to":"standard output","prob_desc_description":"There is a building consisting of $$$10~000$$$ apartments numbered from $$$1$$$ to $$$10~000$$$, inclusive.Call an apartment boring, if its number consists of the same digit. Examples of boring apartments are $$$11, 2, 777, 9999$$$ and so on.Our character is a troublemaker, and he calls the intercoms of all boring apartments, till someone answers the call, in the following order:  First he calls all apartments consisting of digit $$$1$$$, in increasing order ($$$1, 11, 111, 1111$$$).  Next he calls all apartments consisting of digit $$$2$$$, in increasing order ($$$2, 22, 222, 2222$$$)  And so on. The resident of the boring apartment $$$x$$$ answers the call, and our character stops calling anyone further.Our character wants to know how many digits he pressed in total and your task is to help him to count the total number of keypresses.For example, if the resident of boring apartment $$$22$$$ answered, then our character called apartments with numbers $$$1, 11, 111, 1111, 2, 22$$$ and the total number of digits he pressed is $$$1 + 2 + 3 + 4 + 1 + 2 = 13$$$.You have to answer $$$t$$$ independent test cases.","hidden_unit_tests":"[{\"input\": \"4\\r\\n22\\r\\n9999\\r\\n1\\r\\n777\\r\\n\", \"output\": [\"13\\n90\\n1\\n66\", \"13\\r\\n90\\r\\n1\\r\\n66\"]}, {\"input\": \"36\\r\\n1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n11\\r\\n22\\r\\n33\\r\\n44\\r\\n55\\r\\n66\\r\\n77\\r\\n88\\r\\n99\\r\\n111\\r\\n222\\r\\n333\\r\\n444\\r\\n555\\r\\n666\\r\\n777\\r\\n888\\r\\n999\\r\\n1111\\r\\n2222\\r\\n3333\\r\\n4444\\r\\n5555\\r\\n6666\\r\\n7777\\r\\n8888\\r\\n9999\\r\\n\", \"output\": [\"1\\r\\n11\\r\\n21\\r\\n31\\r\\n41\\r\\n51\\r\\n61\\r\\n71\\r\\n81\\r\\n3\\r\\n13\\r\\n23\\r\\n33\\r\\n43\\r\\n53\\r\\n63\\r\\n73\\r\\n83\\r\\n6\\r\\n16\\r\\n26\\r\\n36\\r\\n46\\r\\n56\\r\\n66\\r\\n76\\r\\n86\\r\\n10\\r\\n20\\r\\n30\\r\\n40\\r\\n50\\r\\n60\\r\\n70\\r\\n80\\r\\n90\", \"1\\n11\\n21\\n31\\n41\\n51\\n61\\n71\\n81\\n3\\n13\\n23\\n33\\n43\\n53\\n63\\n73\\n83\\n6\\n16\\n26\\n36\\n46\\n56\\n66\\n76\\n86\\n10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\"]}, {\"input\": \"36\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n\", \"output\": [\"90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\\n90\", \"90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\\r\\n90\"]}, {\"input\": \"20\\r\\n999\\r\\n33\\r\\n2222\\r\\n22\\r\\n2222\\r\\n333\\r\\n4\\r\\n99\\r\\n11\\r\\n444\\r\\n8888\\r\\n444\\r\\n2222\\r\\n6666\\r\\n666\\r\\n7\\r\\n555\\r\\n5\\r\\n8\\r\\n9999\\r\\n\", \"output\": [\"86\\n23\\n20\\n13\\n20\\n26\\n31\\n83\\n3\\n36\\n80\\n36\\n20\\n60\\n56\\n61\\n46\\n41\\n71\\n90\", \"86\\r\\n23\\r\\n20\\r\\n13\\r\\n20\\r\\n26\\r\\n31\\r\\n83\\r\\n3\\r\\n36\\r\\n80\\r\\n36\\r\\n20\\r\\n60\\r\\n56\\r\\n61\\r\\n46\\r\\n41\\r\\n71\\r\\n90\"]}]","length":334,"num_hidden_unit_tests":4}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2300.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1 3\", \"2 2\", \"3 3\"]","prob_desc_input_spec":"The only line contains two integers n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009106) \u2014 the number of elements in arrays and the upper bound for elements.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"5b775f17b188c1d8a4da212ebb3a525c","prob_desc_created_at":"1460127600","source_code":"import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\t\n  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    solve(in,out);\n    out.close();\n  }\n  \n  \n  private static final int MOD = (int)1e9 + 7;\n  \n  private static long pow(long a, int b) {\n\t  long ans = 1;\n\t  while (b > 0) {\n\t\t  if ((b % 2) > 0) {\n\t\t\t  ans = ans * a %MOD;\n\t\t  }\n\t\t  a = a * a % MOD;\n\t\t  b >>= 1;\n\t  }\n\t  return ans;\n  }\n  \n  private static void solve(InputReader in, PrintWriter out) {\n\t  int n = in.nextInt();\n\t  long m = in.nextLong();\n\t  long ans = n + 1;\n\t  if (m != 1) {\n\t\t  ans = pow(2 * m - 1, n) * m % MOD - pow(m, n) + MOD;\n\t\t  ans = ans * pow(m - 1, MOD - 2) %MOD;\n\t  }\n\t  \/\/(2m-1)^n *m - m^n\n\t  \/\/(m-1)\n\t  out.print(ans);\n  }\n\n\n  static class InputReader {\n    public BufferedReader reader;\n    public StringTokenizer tokenizer;\n\n    public InputReader(InputStream stream) {\n        reader = new BufferedReader(new InputStreamReader(stream), 32768);\n        tokenizer = null;\n    }\n\n    public String next() {\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            try {\n                tokenizer = new StringTokenizer(reader.readLine());\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return tokenizer.nextToken();\n    }\n\n    public int nextInt() {\n        return Integer.parseInt(next());\n    }\n    \n    public long nextLong() {\n    \treturn Long.parseLong(next());\n    }\n\n  }\n}","prob_desc_sample_outputs":"[\"6\", \"14\", \"174\"]","lang_cluster":"Java","code_uid":"f1db1a40c77059f8293398765dd20bac","prob_desc_notes":null,"prob_desc_output_spec":"Print the only integer c \u2014 the desired sum modulo 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"For a sequence a of n integers between 1 and m, inclusive, denote f(a) as the number of distinct subsequences of a (including the empty subsequence).You are given two positive integers n and m. Let S be the set of all sequences of length n consisting of numbers from 1 to m. Compute the sum f(a) over all a in S modulo 109\u2009+\u20097.","hidden_unit_tests":"[{\"input\": \"1 3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"174\"]}, {\"input\": \"1 1000000\\r\\n\", \"output\": [\"2000000\"]}, {\"input\": \"1000000 1\\r\\n\", \"output\": [\"1000001\"]}, {\"input\": \"500 500\\r\\n\", \"output\": [\"383255233\"]}, {\"input\": \"1000000 1000000\\r\\n\", \"output\": [\"247171672\"]}]","length":78,"num_hidden_unit_tests":7}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\nbaabbb\", \"10\\nooopppssss\", \"1\\nz\"]","prob_desc_input_spec":"The first line contains integer $$$n$$$ ($$$1 \\le n \\le 55$$$) \u2014 the length of the encrypted string. The second line of the input contains $$$t$$$ \u2014 the result of encryption of some string $$$s$$$. It contains only lowercase Latin letters. The length of $$$t$$$ is exactly $$$n$$$. It is guaranteed that the answer to the test exists.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"08e8c0c37b223f6aae01d5609facdeaf","prob_desc_created_at":"1545921300","source_code":"\nimport java.util.Scanner;\n\npublic class A {\n\n\t\tpublic static void main(String args[])\n\t\t{\n\t\t\tScanner scan=new Scanner(System.in);\n\t\t\tint n=scan.nextInt();\n\t\t\tString g=scan.next();\n\t\t\tint counter=0;\n\t\t\t\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(i>=n){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tSystem.out.print(g.charAt(i));\n\t\t\t\ti+=counter;\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n}","prob_desc_sample_outputs":"[\"bab\", \"oops\", \"z\"]","lang_cluster":"Java","code_uid":"24e4d9c1913be4cc26dcad45d6df593b","prob_desc_notes":null,"prob_desc_output_spec":"Print such string $$$s$$$ that after encryption it equals $$$t$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Polycarp loves ciphers. He has invented his own cipher called repeating.Repeating cipher is used for strings. To encrypt the string $$$s=s_{1}s_{2} \\dots s_{m}$$$ ($$$1 \\le m \\le 10$$$), Polycarp uses the following algorithm:  he writes down $$$s_1$$$ ones,  he writes down $$$s_2$$$ twice,  he writes down $$$s_3$$$ three times,  ...  he writes down $$$s_m$$$ $$$m$$$ times. For example, if $$$s$$$=\"bab\" the process is: \"b\" $$$\\to$$$ \"baa\" $$$\\to$$$ \"baabbb\". So the encrypted $$$s$$$=\"bab\" is \"baabbb\".Given string $$$t$$$ \u2014 the result of encryption of some string $$$s$$$. Your task is to decrypt it, i.\u2009e. find the string $$$s$$$.","hidden_unit_tests":"[{\"input\": \"6\\r\\nbaabbb\\r\\n\", \"output\": [\"bab\\n\", \"bab\", \"bab\\r\\n\"]}, {\"input\": \"10\\r\\nooopppssss\\r\\n\", \"output\": [\"oops\\r\\n\", \"oops\\n\", \"oops\"]}, {\"input\": \"1\\r\\nz\\r\\n\", \"output\": [\"z\\n\", \"z\", \"z\\r\\n\"]}, {\"input\": \"3\\r\\nzww\\r\\n\", \"output\": [\"zw\", \"zw\\n\", \"zw\\r\\n\"]}, {\"input\": \"55\\r\\ncooooonnnnttttteeeeeeeeeeeeessssssssttttttttttttttttttt\\r\\n\", \"output\": [\"coonteestt\\r\\n\", \"coonteestt\", \"coonteestt\\n\"]}, {\"input\": \"21\\r\\ncoodddeeeecccccoooooo\\r\\n\", \"output\": [\"codeco\", \"codeco\\r\\n\", \"codeco\\n\"]}, {\"input\": \"55\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"aaaaaaaaaa\\r\\n\", \"aaaaaaaaaa\\n\", \"aaaaaaaaaa\"]}, {\"input\": \"36\\r\\nabbcccddddeeeeeffffffggggggghhhhhhhh\\r\\n\", \"output\": [\"abcdefgh\\n\", \"abcdefgh\\r\\n\", \"abcdefgh\"]}]","length":25,"num_hidden_unit_tests":8}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1200.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"1\", \"2\"]","prob_desc_input_spec":"The only line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091018) \u2014 the size of the field.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"816ec4cd9736f3113333ef05405b8e81","prob_desc_created_at":"1455807600","source_code":"import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\npublic class Template {\n\n\tstatic PrintWriter out = new PrintWriter(System.out);\n\n\tstatic void input() throws IOException {\n\t\tReader.init(System.in);\n\t}\n\n\t\/\/ Main Method....\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tinput();\n\t\tsolve();\n\t}\n\n\t\/\/ Solution goes here........\n\tstatic void solve() throws IOException {\n\n\t\tlong a = Reader.nextLong();\n\n\t\tif (a % 2 == 0)\n\t\t\tout.println(2);\n\t\telse\n\t\t\tout.println(1);\n\n\t\tout.flush();\n\t\tout.close();\n\t}\n\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ No Business TO DO HERE... Up Up ^^^\n\tstatic class Reader {\n\t\tstatic BufferedReader reader;\n\t\tstatic StringTokenizer tokenizer;\n\n\t\tstatic void init(InputStream input) {\n\t\t\treader = new BufferedReader(new InputStreamReader(input));\n\t\t\ttokenizer = new StringTokenizer(\"\");\n\t\t}\n\n\t\tstatic String next() throws IOException {\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\n\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\n\t\t\t}\n\t\t\treturn tokenizer.nextToken();\n\t\t}\n\n\t\tstatic String nextLine() throws IOException {\n\t\t\treturn reader.readLine();\n\t\t}\n\n\t\tstatic char nextChar() throws IOException {\n\t\t\treturn (char) reader.read();\n\t\t}\n\n\t\tstatic int nextInt() throws IOException {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tstatic double nextDouble() throws IOException {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\n\t\tstatic long nextLong() throws IOException {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tstatic long[] nextLongArray(int n) throws IOException {\n\t\t\tlong[] arr = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = nextLong();\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t}\n\n\t\tstatic int[] nextIntArray(int n) throws IOException {\n\t\t\tint[] arr = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = nextInt();\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\n\t}\n\n}\n","prob_desc_sample_outputs":"[\"1\", \"2\"]","lang_cluster":"Java","code_uid":"4d418722c0cb36eb162077054aa02322","prob_desc_notes":null,"prob_desc_output_spec":"Output number 1, if the player making the first turn wins when both players play optimally, otherwise print number 2.","prob_desc_output_to":"standard output","prob_desc_description":"There is a legend in the IT City college. A student that failed to answer all questions on the game theory exam is given one more chance by his professor. The student has to play a game with the professor.The game is played on a square field consisting of n\u2009\u00d7\u2009n cells. Initially all cells are empty. On each turn a player chooses and paint an empty cell that has no common sides with previously painted cells. Adjacent corner of painted cells is allowed. On the next turn another player does the same, then the first one and so on. The player with no cells to paint on his turn loses.The professor have chosen the field size n and allowed the student to choose to be the first or the second player in the game. What should the student choose to win the game? Both players play optimally.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"999999999999999999\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"321392715309062180\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"95451113283177888\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"25496382240130775\\r\\n\", \"output\": [\"1\"]}]","length":98,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1400.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"12345\"]","prob_desc_input_spec":"The only line of the input contains a positive integer five digit number for which the activation code should be found.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"51b1c216948663fff721c28d131bf18f","prob_desc_created_at":"1455807600","source_code":"import java.util.Scanner;\n\npublic class Problem_11 {\n    static long p = 100000;\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String s = input.nextLine();\n        \/\/13542\n        long n = Long.valueOf(s.substring(0, 1) + s.substring(2, 3) + s.substring(4, 5) + s.substring(3, 4) + s.substring\n                (1,2));\n\n        System.out.printf(\"%05d\", (((((n * n * n) % p) * n) % p) * n) % p);\n    }\n}\n","prob_desc_sample_outputs":"[\"71232\"]","lang_cluster":"Java","code_uid":"c3f00d09b4707b71ec10f761e41328ea","prob_desc_notes":null,"prob_desc_output_spec":"Output exactly 5 digits without spaces between them \u2014 the found activation code of the program.","prob_desc_output_to":"standard output","prob_desc_description":"The protection of a popular program developed by one of IT City companies is organized the following way. After installation it outputs a random five digit number which should be sent in SMS to a particular phone number. In response an SMS activation code arrives.A young hacker Vasya disassembled the program and found the algorithm that transforms the shown number into the activation code. Note: it is clear that Vasya is a law-abiding hacker, and made it for a noble purpose \u2014 to show the developer the imperfection of their protection.The found algorithm looks the following way. At first the digits of the number are shuffled in the following order &lt;first digit&gt;&lt;third digit&gt;&lt;fifth digit&gt;&lt;fourth digit&gt;&lt;second digit&gt;. For example the shuffle of 12345 should lead to 13542. On the second stage the number is raised to the fifth power. The result of the shuffle and exponentiation of the number 12345 is 455\u00a0422\u00a0043\u00a0125\u00a0550\u00a0171\u00a0232. The answer is the 5 last digits of this result. For the number 12345 the answer should be 71232.Vasya is going to write a keygen program implementing this algorithm. Can you do the same?","hidden_unit_tests":"[{\"input\": \"12345\\r\\n\", \"output\": [\"71232\"]}, {\"input\": \"13542\\r\\n\", \"output\": [\"84443\"]}, {\"input\": \"71232\\r\\n\", \"output\": [\"10151\"]}, {\"input\": \"11111\\r\\n\", \"output\": [\"36551\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"00000\"]}, {\"input\": \"99999\\r\\n\", \"output\": [\"99999\"]}, {\"input\": \"91537\\r\\n\", \"output\": [\"27651\"]}, {\"input\": \"70809\\r\\n\", \"output\": [\"00000\"]}, {\"input\": \"41675\\r\\n\", \"output\": [\"61851\"]}, {\"input\": \"32036\\r\\n\", \"output\": [\"82432\"]}]","length":15,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1400.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"5\"]","prob_desc_input_spec":"The only line of the input contains one integer n (5\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of east to west paths and north to south paths.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"92db14325cd8aee06b502c12d2e3dd81","prob_desc_created_at":"1455807600","source_code":"\n\/**\n *\n * @author sarthak\n *\/\n\nimport java.util.*;\nimport java.math.*;\nimport java.io.*;\n\n\n\npublic class ExpeEduRnd_H {\n\n    static class FastScanner {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public FastScanner(InputStream is) {\n            br = new BufferedReader(new InputStreamReader(is));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreTokens()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            st = null;\n            try {\n                return br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n                return \"\";\n            }\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n    }\nstatic class P {\n\n        private int x, y;\n\n        public P(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        public int hashCode() {\n            return (x * 31) ^ y;\n        }\n\n        public boolean equals(Object o) {\n            if (o instanceof P) {\n                P other = (P) o;\n                return (x == other.x && y == other.y);\n            }\n            return false;\n        }\n    }\n\n    public static void main(String[] args){\n         \n    FastScanner s = new FastScanner(System.in);\n    \n    long n=s.nextLong();\n    long an=n*(n-1)*(n-2)*(n-3)*(n-4);\/\/placing benches along north to south\n    BigInteger ans=BigInteger.valueOf(an);\/\/a bench from north to south alos has options\n    ans=ans.multiply(ans); \/\/all beches are identical\n    ans=ans.divide(BigInteger.valueOf(120));\n            \n    System.out.println(ans);\n    \n    \n    \n    \n    \n    }\n\n\n}\n","prob_desc_sample_outputs":"[\"120\"]","lang_cluster":"Java","code_uid":"2cdc869fe4e226af463e719fdb5ec3e4","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer \u2014 the number of ways to place the benches.","prob_desc_output_to":"standard output","prob_desc_description":"The city park of IT City contains n east to west paths and n north to south paths. Each east to west path crosses each north to south path, so there are n2 intersections.The city funded purchase of five benches. To make it seems that there are many benches it was decided to place them on as many paths as possible. Obviously this requirement is satisfied by the following scheme: each bench is placed on a cross of paths and each path contains not more than one bench.Help the park administration count the number of ways to place the benches.","hidden_unit_tests":"[{\"input\": \"5\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"4320\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"52920\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"1082161080\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"4594961280\"]}, {\"input\": \"72\\r\\n\", \"output\": [\"23491596420472320\"]}, {\"input\": \"83\\r\\n\", \"output\": [\"101159538130177920\"]}, {\"input\": \"95\\r\\n\", \"output\": [\"402852449038723320\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"613867215317368320\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"680185280130048000\"]}]","length":97,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1500.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"12\"]","prob_desc_input_spec":"The only line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091018) \u2014 the prediction on the number of people who will buy the game.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"e392be5411ffccc1df50e65ec1f5c589","prob_desc_created_at":"1455807600","source_code":"import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        long res = (n \/ 2) + (n \/ 3) - (n \/ 6) + (n \/ 42)\n                  +(n \/ 5) + (n \/ 7) + (n\/ 30) + (n \/ 70) + (n \/ 105)\n                  -(n \/ 10) - (n \/ 15) - (n \/ 14) - (n \/ 21) - (n \/ 35) - (n \/ 210);\n        System.out.println(n - res);\n    }\n}\n","prob_desc_sample_outputs":"[\"2\"]","lang_cluster":"Java","code_uid":"80db3d064f45537bd7563130c38d4494","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer showing how many numbers from 1 to n are not divisible by any number from 2 to 10.","prob_desc_output_to":"standard output","prob_desc_description":"IT City company developing computer games decided to upgrade its way to reward its employees. Now it looks the following way. After a new game release users start buying it actively, and the company tracks the number of sales with precision to each transaction. Every time when the next number of sales is not divisible by any number from 2 to 10 every developer of this game gets a small bonus.A game designer Petya knows that the company is just about to release a new game that was partly developed by him. On the basis of his experience he predicts that n people will buy the game during the first month. Now Petya wants to determine how many times he will get the bonus. Help him to know it.","hidden_unit_tests":"[{\"input\": \"12\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2519\\r\\n\", \"output\": [\"576\"]}, {\"input\": \"2521\\r\\n\", \"output\": [\"577\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"314159265\\r\\n\", \"output\": [\"71807832\"]}, {\"input\": \"718281828459045235\\r\\n\", \"output\": [\"164178703647781768\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"228571428571428571\"]}, {\"input\": \"987654321234567890\\r\\n\", \"output\": [\"225749559139329804\"]}, {\"input\": \"3628800\\r\\n\", \"output\": [\"829440\"]}, {\"input\": \"504000000000000000\\r\\n\", \"output\": [\"115200000000000000\"]}]","length":12,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 2 2\\n3 6 7 10\", \"5 2 1\\n100 100 100 100 100\"]","prob_desc_input_spec":"The first line contains three integers n,\u2009k,\u2009x\u00a0(1\u2009\u2264\u2009k\u2009\u2264\u2009n\u2009\u2264\u2009100,\u20091\u2009\u2264\u2009x\u2009\u2264\u200999) \u2014 the number of chores Luba has to do, the number of chores she can do in x units of time, and the number x itself. The second line contains n integer numbers ai\u00a0(2\u2009\u2264\u2009ai\u2009\u2264\u2009100) \u2014 the time Luba has to spend to do i-th chore. It is guaranteed that , and for each  ai\u2009\u2265\u2009ai\u2009-\u20091.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"92a233f8d9c73d9f33e4e6116b7d0a96","prob_desc_created_at":"1507817100","source_code":"import java.util.Scanner;\n\npublic class Chores\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int k = in.nextInt();\n        int A = Integer.MAX_VALUE, sum = 0, index = 0;\n        int x = in.nextInt();\n\n        for(int i = 0; i < n; i++)\n        {\n            int N = in.nextInt();\n\n            if(i == (n - k))\n            {\n                A = N;\n            }\n            if(N >= A)\n            {\n                index = i;\n                break;\n            }\n            else\n            {\n                sum = sum + N;\n            }\n        }\n        System.out.println(sum + ((n - index) * x));\n\n\n    }\n}\n","prob_desc_sample_outputs":"[\"13\", \"302\"]","lang_cluster":"Java","code_uid":"7fd1986a51c9fac4d34e464e8de42bd7","prob_desc_notes":"NoteIn the first example the best option would be to do the third and the fourth chore, spending x\u2009=\u20092 time on each instead of a3 and a4, respectively. Then the answer is 3\u2009+\u20096\u2009+\u20092\u2009+\u20092\u2009=\u200913.In the second example Luba can choose any two chores to spend x time on them instead of ai. So the answer is 100\u00b73\u2009+\u20092\u00b71\u2009=\u2009302.","prob_desc_output_spec":"Print one number \u2014 minimum time Luba needs to do all n chores.","prob_desc_output_to":"standard output","prob_desc_description":"Luba has to do n chores today. i-th chore takes ai units of time to complete. It is guaranteed that for every  the condition ai\u2009\u2265\u2009ai\u2009-\u20091 is met, so the sequence is sorted.Also Luba can work really hard on some chores. She can choose not more than k any chores and do each of them in x units of time instead of ai ().Luba is very responsible, so she has to do all n chores, and now she wants to know the minimum time she needs to do everything. Luba cannot do two chores simultaneously.","hidden_unit_tests":"[{\"input\": \"4 2 2\\r\\n3 6 7 10\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"5 2 1\\r\\n100 100 100 100 100\\r\\n\", \"output\": [\"302\"]}, {\"input\": \"1 1 1\\r\\n100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 1 99\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"9999\"]}, {\"input\": \"100 100 1\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 50 50\\r\\n51 51 52 53 55 55 55 55 56 56 56 57 57 58 58 59 59 59 60 60 61 61 62 62 63 64 64 64 64 65 65 65 65 66 66 66 67 68 68 68 69 69 70 70 70 70 71 71 71 71 71 71 72 72 76 76 76 76 77 79 79 81 81 81 81 82 82 82 82 83 84 85 86 87 87 88 88 88 89 89 89 90 90 90 91 91 91 92 92 93 95 95 96 96 96 97 97 98 99 100\\r\\n\", \"output\": [\"5618\"]}, {\"input\": \"100 100 1\\r\\n2 4 4 4 5 5 5 6 10 10 11 11 12 12 13 13 13 14 17 18 20 20 21 21 22 22 23 24 24 25 26 29 29 32 32 34 34 35 38 39 39 40 40 42 42 43 45 47 48 49 51 52 52 54 57 59 59 60 61 61 62 63 63 64 65 65 68 70 70 72 74 75 75 76 76 77 77 78 78 78 79 80 81 82 82 83 83 83 84 89 90 92 92 93 94 96 96 97 98 99\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 1 1\\r\\n3 3 5 7 8 8 8 9 9 9 11 13 14 15 18 18 19 20 21 22 22 25 27 27 29 31 32 33 33 34 36 37 37 38 40 42 44 44 46 47 47 48 48 48 50 50 51 51 54 54 54 55 55 56 56 56 60 61 62 62 63 64 65 65 68 70 70 71 71 71 71 75 75 76 76 79 79 79 79 81 81 82 82 86 86 86 86 88 90 90 92 96 97 97 98 98 98 98 100 100\\r\\n\", \"output\": [\"5202\"]}, {\"input\": \"100 50 49\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51\\r\\n\", \"output\": [\"4950\"]}, {\"input\": \"100 50 1\\r\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\r\\n\", \"output\": [\"151\"]}, {\"input\": \"100 1 1\\r\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"199\"]}]","length":35,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\\nRUURU\", \"17\\nUUURRRRRUUURURUUU\"]","prob_desc_input_spec":"The first line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the length of the sequence. The second line contains the sequence consisting of n characters U and R.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"986ae418ce82435badadb0bd5588f45b","prob_desc_created_at":"1521698700","source_code":"import java.util.*;\nimport java.io.*;\nimport java.math.*;\npublic class Main{\n    static FR in;\n    public static void main(String[] args)throws Exception{\n        in = new FR();\n        int n = ni();\n        String s = nln();\n        int ctr=0, ctr2=0;\n        for( int i=1;i<s.length();i++ ){\n        \tif(( s.charAt(i-1)=='R' && s.charAt(i)=='U' )||\n        \t\t\t( s.charAt(i-1)=='U' && s.charAt(i)=='R' )){\n        \t\tctr++;\n        \t\ti++;\n        \t}\n        }\n        pn((int)(s.length()-Math.ceil(ctr)));\n    }\n    \n    static long[]la( int N ){\n    \tlong[]a=new long[N];\n    \tfor( int i=0;i<N;i++ )a[i]=nl();\n    \treturn a;\n    }\n    \n    static int[] ia(int N){\n        int[] a = new int[N];\n        for(int i = 0; i<N; i++){\n        \ta[i] = ni();\n        }\n        return a;\n    }\n    \n    static class FR{\n        BufferedReader br;\n        StringTokenizer st;\n        public FR(){\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n \n        String next(){\n            while (st == null || !st.hasMoreElements()){\n                try{\n                    st = new StringTokenizer(br.readLine());\n                }catch (IOException  e){\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n \n        String nextLine(){\n            String str = \"\";\n            try{\n                str = br.readLine();\n            }catch (IOException e){\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n \n    static void p(Object o){\n        System.out.print(o);\n    }\n    \n    static void pn(Object o){\n        System.out.println(o);\n    }\n    \n    static String n(){\n        return in.next();\n    }\n    \n    static String nln(){\n        return in.nextLine();\n    }\n    \n    static int ni(){\n        return Integer.parseInt(in.next());\n    }\n    \n    static long nl(){\n        return Long.parseLong(in.next());\n    }\n} ","prob_desc_sample_outputs":"[\"3\", \"13\"]","lang_cluster":"Java","code_uid":"3697d61838f229827d7302889c5775e0","prob_desc_notes":"NoteIn the first test the shortened sequence of moves may be DUD (its length is 3).In the second test the shortened sequence of moves can be UUDRRRDUDDUUU (its length is 13).","prob_desc_output_spec":"Print the minimum possible length of the sequence of moves after all replacements are done.","prob_desc_output_to":"standard output","prob_desc_description":"Mikhail walks on a 2D plane. He can go either up or right. You are given a sequence of Mikhail's moves. He thinks that this sequence is too long and he wants to make it as short as possible.In the given sequence moving up is described by character U and moving right is described by character R. Mikhail can replace any pair of consecutive moves RU or UR with a diagonal move (described as character D). After that, he can go on and do some other replacements, until there is no pair of consecutive moves RU or UR left.Your problem is to print the minimum possible length of the sequence of moves after the replacements.","hidden_unit_tests":"[{\"input\": \"5\\r\\nRUURU\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"17\\r\\nUUURRRRRUUURURUUU\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"100\\r\\nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\nRRURRUUUURURRRURRRRURRRRRRURRUURRRUUURUURURRURUURUURRUURUURRURURUUUUURUUUUUURRUUURRRURRURRRUURRUUUUR\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"100\\r\\nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURUUUUUUUUUUUUUUUUUUUUU\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"3\\r\\nRUR\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1\\r\\nR\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\nRURUU\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1\\r\\nU\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\nUR\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"23\\r\\nUUUUUUUUUUUUUUUUUUUUUUU\\r\\n\", \"output\": [\"23\"]}]","length":87,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"512 4\", \"1000000000 9\"]","prob_desc_input_spec":"The first line of the input contains two integer numbers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 10^9$$$, $$$1 \\le k \\le 50$$$) \u2014 the number from which Tanya will subtract and the number of subtractions correspondingly.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"064162604284ce252b88050b4174ba55","prob_desc_created_at":"1567258500","source_code":"\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.DataInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\n\n\npublic class WrongSubtraction {\n\n  public static void main(String[] args) throws Exception {\n    new WrongSubtraction().go();\n  }\n\n\n  PrintWriter out;\n  Reader in;\n  BufferedReader br;\n\n  WrongSubtraction() throws Exception {\n\n    \/\/ in = new Reader(\"input.txt\");\n    \/\/ out = new PrintWriter( new BufferedWriter(new FileWriter(\"output.txt\")) );\n\n\n    br = new BufferedReader(new InputStreamReader(System.in));\n    in = new Reader();\n    out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n  }\n\n\n\n  void go() throws Exception {\n\n\n    int t = 1;\n    while (t > 0) {\n      solve();\n      t--;\n    }\n\n    \/\/System.err.println(System.currentTimeMillis() - time);\n\n    out.flush();\n    out.close();\n  }\n\n\n  int inf = 2000000000;\n  int mod = 1000000007;\n  double eps = 0.000000001;\n\n  int n;\n  int m;\n\n  void solve() throws Exception {\n\n    int n = in.nextInt();\n    int k = in.nextInt();\n\n    while (k > 0) {\n\n      if (n%10 == 0) n \/= 10; else n--;\n      k--;\n    }\n\n    out.println(n);\n  }\n\n\n\n  class Reader {\n\n    BufferedReader  br;\n    StringTokenizer tok;\n\n    public Reader(String file) throws Exception {\n      br = new BufferedReader( new FileReader(file) );\n    }\n\n    public Reader() throws Exception {\n      br = new BufferedReader( new InputStreamReader(System.in) );\n    }\n\n    public String next() throws Exception {\n\n      while (tok == null || !tok.hasMoreElements())\n        tok = new StringTokenizer(br.readLine());\n      return tok.nextToken();\n    }\n\n    public int nextInt() throws Exception {\n      return Integer.valueOf(next());\n    }\n\n    public long nextLong() throws Exception {\n      return Long.valueOf(next());\n    }\n\n    public double nextDouble() throws Exception {\n      return Double.valueOf(next());\n    }\n\n    public String nextLine() throws Exception {\n      return br.readLine();\n    }\n\n  }\n\n\n\n\n\n  static class InputReader {\n\n    final private int BUFFER_SIZE = 1 << 16;\n    private DataInputStream din;\n    private byte[] buffer;\n    private int bufferPointer, bytesRead;\n\n\n    public InputReader() {\n      din = new DataInputStream(System.in);\n      buffer = new byte[BUFFER_SIZE];\n      bufferPointer = bytesRead = 0;\n    }\n\n    public InputReader(String file_name) throws Exception {\n      din = new DataInputStream(new FileInputStream(file_name));\n      buffer = new byte[BUFFER_SIZE];\n      bufferPointer = bytesRead = 0;\n    }\n\n\n    public String readLine() throws Exception {\n      byte[] buf = new byte[64]; \/\/ line length\n      int cnt = 0, c;\n      while ((c = read()) != -1) {\n        if (c == '\\n') {\n          break;\n        }\n        buf[cnt++] = (byte) c;\n      }\n      return new String(buf, 0, cnt);\n    }\n\n\n    public int nextInt() throws Exception {\n      int ret = 0;\n      byte c = read();\n      while (c <= ' ') {\n        c = read();\n      }\n      boolean neg = (c == '-');\n      if (neg) {\n        c = read();\n      }\n      do {\n        ret = ret * 10 + c - '0';\n      }  while ((c = read()) >= '0' && c <= '9');\n\n      if (neg) {\n        return -ret;\n      }\n      return ret;\n    }\n\n\n    public long nextLong() throws Exception {\n      long ret = 0;\n      byte c = read();\n      while (c <= ' ') {\n        c = read();\n      }\n      boolean neg = (c == '-');\n      if (neg) {\n        c = read();\n      }\n      do {\n        ret = ret * 10 + c - '0';\n      }\n      while ((c = read()) >= '0' && c <= '9');\n      return neg ? -ret : ret;\n    }\n\n\n    public double nextDouble() throws Exception {\n      double ret = 0, div = 1;\n      byte c = read();\n      while (c <= ' ')\n        c = read();\n      boolean neg = (c == '-');\n      if (neg)\n        c = read();\n\n      do {\n        ret = ret * 10 + c - '0';\n      }\n      while ((c = read()) >= '0' && c <= '9');\n\n      if (c == '.') {\n        while ((c = read()) >= '0' && c <= '9') {\n          ret += (c - '0') \/ (div *= 10);\n        }\n      }\n\n      return neg ? -ret : ret;\n    }\n\n\n    private void fillBuffer() throws Exception {\n      bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n      if (bytesRead == -1) {\n        buffer[0] = -1;\n      }\n    }\n\n    private byte read() throws Exception {\n      if (bufferPointer == bytesRead) {\n        fillBuffer();\n      }\n      return buffer[bufferPointer++];\n    }\n\n    public void close() throws Exception {\n      if (din == null) {\n        return;\n      }\n      din.close();\n    }\n  }\n\n}\n\n\n\n\n\n","prob_desc_sample_outputs":"[\"50\", \"1\"]","lang_cluster":"Java","code_uid":"cfc25b84654bc8f77e371ff0d8f383de","prob_desc_notes":"NoteThe first example corresponds to the following sequence: $$$512 \\rightarrow 511 \\rightarrow 510 \\rightarrow 51 \\rightarrow 50$$$.","prob_desc_output_spec":"Print one integer number \u2014 the result of the decreasing $$$n$$$ by one $$$k$$$ times. It is guaranteed that the result will be positive integer number. ","prob_desc_output_to":"standard output","prob_desc_description":"Little girl Tanya is learning how to decrease a number by one, but she does it wrong with a number consisting of two or more digits. Tanya subtracts one from a number by the following algorithm:  if the last digit of the number is non-zero, she decreases the number by one;  if the last digit of the number is zero, she divides the number by 10 (i.e. removes the last digit). You are given an integer number $$$n$$$. Tanya will subtract one from it $$$k$$$ times. Your task is to print the result after all $$$k$$$ subtractions.It is guaranteed that the result will be positive integer number.","hidden_unit_tests":"[{\"input\": \"512 4\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1000000000 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"131203 11\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"999999999 50\\r\\n\", \"output\": [\"9999\"]}, {\"input\": \"999999999 49\\r\\n\", \"output\": [\"99990\"]}, {\"input\": \"131203 9\\r\\n\", \"output\": [\"130\"]}, {\"input\": \"900000000 16\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"909090909 50\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1001 2\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"5 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"1\"]}]","length":245,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 3\", \"10 15\"]","prob_desc_input_spec":"The only line contains two integers a,\u2009b (1\u2009\u2264\u2009a\u2009\u2264\u2009b\u2009\u2264\u2009106) \u2014 the first and the last number typed by Max.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"1193de6f80a9feee8522a404d16425b9","prob_desc_created_at":"1453388400","source_code":"\/*package whatever \/\/do not write package name here *\/\n\nimport java.io.*;\nimport java.util.*;\nimport java.math.*;\npublic class S {\n\tpublic static void main (String[] args) {\n\t    Scanner in=new Scanner(System.in);\n\t\tint a=in.nextInt();\n\t\tint b=in.nextInt();\n\t\tMap<Character,Integer> m= new HashMap<>();\n\t\tm.put('0',6);m.put('1',2);m.put('2',5);m.put('3',5);m.put('4',4);m.put('5',5);m.put('6',6);m.put('7',3);\n\t\tm.put('8',7);m.put('9',6);\n\t\tint r=0;\n\t\tfor(int i=a;i<=b;i++)\n\t\t{\n\t\t    String s=String.valueOf(i);\n\t\t    for(int j=0;j<s.length();j++)\n\t\t    {\n\t\t        r=r+m.get(s.charAt(j));\n\t\t    }\n\t\t}\n\t\tSystem.out.println(r);\n\t}\n}","prob_desc_sample_outputs":"[\"12\", \"39\"]","lang_cluster":"Java","code_uid":"7a75b9f867c3f1f974048c01133ed3e6","prob_desc_notes":null,"prob_desc_output_spec":"Print the only integer a \u2014 the total number of printed segments.","prob_desc_output_to":"standard output","prob_desc_description":"Once Max found an electronic calculator from his grandfather Dovlet's chest. He noticed that the numbers were written with seven-segment indicators (https:\/\/en.wikipedia.org\/wiki\/Seven-segment_display).  Max starts to type all the values from a to b. After typing each number Max resets the calculator. Find the total number of segments printed on the calculator.For example if a\u2009=\u20091 and b\u2009=\u20093 then at first the calculator will print 2 segments, then \u2014 5 segments and at last it will print 5 segments. So the total number of printed segments is 12.","hidden_unit_tests":"[{\"input\": \"1 3\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"10 15\\r\\n\", \"output\": [\"39\"]}, {\"input\": \"1 100\\r\\n\", \"output\": [\"928\"]}, {\"input\": \"100 10000\\r\\n\", \"output\": [\"188446\"]}, {\"input\": \"213 221442\\r\\n\", \"output\": [\"5645356\"]}, {\"input\": \"1 1000000\\r\\n\", \"output\": [\"28733372\"]}, {\"input\": \"1000000 1000000\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"222145 353252\\r\\n\", \"output\": [\"3860750\"]}, {\"input\": \"2 1000000\\r\\n\", \"output\": [\"28733370\"]}, {\"input\": \"1 999999\\r\\n\", \"output\": [\"28733334\"]}, {\"input\": \"192 200\\r\\n\", \"output\": [\"122\"]}]","length":25,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1100.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"3000\"]","prob_desc_input_spec":"The only line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091018) \u2014 the prediction on the number of people who will buy the game.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"8551308e5ff435e0fc507b89a912408a","prob_desc_created_at":"1455807600","source_code":"import java.util.Scanner;\n\npublic class Divisibility {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tdouble a = sc.nextDouble();\n\t\tdouble ans = Math.floor(a\/2520);\n\n\t\tSystem.out.printf(\"%.0f\",ans);\n\n\t}\n\n}","prob_desc_sample_outputs":"[\"1\"]","lang_cluster":"Java","code_uid":"aa8a180c0397e093163d1aaa66efa1fb","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer showing how many numbers from 1 to n are divisible by all numbers from 2 to 10.","prob_desc_output_to":"standard output","prob_desc_description":"IT City company developing computer games invented a new way to reward its employees. After a new game release users start buying it actively, and the company tracks the number of sales with precision to each transaction. Every time when the next number of sales is divisible by all numbers from 2 to 10 every developer of this game gets a small bonus.A game designer Petya knows that the company is just about to release a new game that was partly developed by him. On the basis of his experience he predicts that n people will buy the game during the first month. Now Petya wants to determine how many times he will get the bonus. Help him to know it.","hidden_unit_tests":"[{\"input\": \"3000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2520\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2519\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2521\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"314159265\\r\\n\", \"output\": [\"124666\"]}, {\"input\": \"718281828459045235\\r\\n\", \"output\": [\"285032471610732\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"396825396825396\"]}, {\"input\": \"987654321234567890\\r\\n\", \"output\": [\"391926317950225\"]}, {\"input\": \"3628800\\r\\n\", \"output\": [\"1440\"]}, {\"input\": \"504000000000000000\\r\\n\", \"output\": [\"200000000000000\"]}]","length":16,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\", \"583291\"]","prob_desc_input_spec":"The first and only line contains a single integer $$$n$$$ ($$$3 \\le n \\le 10^6$$$).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"3dc1ee09016a25421ae371fa8005fce1","prob_desc_created_at":"1596983700","source_code":"import java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.InputMismatchException;\nimport java.util.List;\nimport java.util.Set;\n\npublic class Codeforces {\n\n    long mod = 1000000007;\n\n    public void solve() {\n        InputReader in = new InputReader(System.in);\n        OutputWriter out = new OutputWriter(System.out);\n        int n = in.readInt();\n        long fact = 1;\n        long product = 1;\n        for (int i = 2; i <= n; i++) {\n            fact = (fact * i) % mod;\n            product = (product * 2) % mod;\n        }\n        if(fact>=product)\n            out.printLine(((fact - product)%mod));\n        else{\n            out.printLine(mod-(Math.abs(fact-product)%mod));\n        }\n        out.flush();\n    }\n\n    public static void main(String[] args) {\n        Codeforces solver = new Codeforces();\n        solver.solve();\n    }\n\n    static class InputReader {\n\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if ( numChars == -1 )\n                throw new InputMismatchException();\n            if ( curChar >= numChars ) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if ( numChars <= 0 )\n                    return -1;\n            }\n            return buf[curChar++];\n        }\n\n        public int readInt() {\n            int c = read();\n            while (isSpaceChar(c))\n                c = read();\n            int sgn = 1;\n            if ( c == '-' ) {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if ( c < '0' || c > '9' )\n                    throw new InputMismatchException();\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public long readLong() {\n            int c = read();\n            while (isSpaceChar(c))\n                c = read();\n            int sgn = 1;\n            if ( c == '-' ) {\n                sgn = -1;\n                c = read();\n            }\n            long res = 0;\n            do {\n                if ( c < '0' || c > '9' )\n                    throw new InputMismatchException();\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public String readString() {\n            int c = read();\n            while (isSpaceChar(c))\n                c = read();\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            if ( filter != null )\n                return filter.isSpaceChar(c);\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public String next() {\n            return readString();\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n        }\n    }\n\n    static class OutputWriter {\n        private final PrintWriter writer;\n\n        public OutputWriter(OutputStream outputStream) {\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n\n        public OutputWriter(Writer writer) {\n            this.writer = new PrintWriter(writer);\n        }\n\n        public void print(Object... objects) {\n            for (int i = 0; i < objects.length; i++) {\n                if ( i != 0 )\n                    writer.print(' ');\n                writer.print(objects[i]);\n            }\n        }\n\n        public void printLine(Object... objects) {\n            print(objects);\n            writer.println();\n        }\n\n        public void close() {\n            writer.close();\n        }\n\n        public void flush() {\n            writer.flush();\n        }\n\n    }\n\n    static class IOUtils {\n\n        public static int[] readIntegerArray(InputReader in, int size) {\n            int[] array = new int[size];\n            for (int i = 0; i < size; i++) {\n                array[i] = in.readInt();\n            }\n            return array;\n        }\n\n        public static long[] readLongArray(InputReader in, int size) {\n            long[] array = new long[size];\n            for (int i = 0; i < size; i++) {\n                array[i] = in.readLong();\n            }\n            return array;\n        }\n\n        public static List<Integer> readIntegerList(InputReader in, int size) {\n            List<Integer> set = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                set.add(in.readInt());\n            }\n            return set;\n        }\n\n        public static Set<Integer> readIntegerSet(InputReader in, int size) {\n            Set<Integer> set = new HashSet<Integer>();\n            for (int i = 0; i < size; i++) {\n                set.add(in.readInt());\n            }\n            return set;\n        }\n    }\n}","prob_desc_sample_outputs":"[\"16\", \"135712853\"]","lang_cluster":"Java","code_uid":"2c9e222ffc8dd2215c216a42c174309a","prob_desc_notes":"NoteThere are $$$16$$$ cyclic permutations for $$$n = 4$$$. $$$[4,2,1,3]$$$ is one such permutation, having a cycle of length four: $$$4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1 \\rightarrow 4$$$.Nodes $$$v_1$$$, $$$v_2$$$, $$$\\ldots$$$, $$$v_k$$$ form a simple cycle if the following conditions hold:   $$$k \\geq 3$$$.  $$$v_i \\neq v_j$$$ for any pair of indices $$$i$$$ and $$$j$$$. ($$$1 \\leq i &lt; j \\leq k$$$)  $$$v_i$$$ and $$$v_{i+1}$$$ share an edge for all $$$i$$$ ($$$1 \\leq i &lt; k$$$), and $$$v_1$$$ and $$$v_k$$$ share an edge. ","prob_desc_output_spec":"Output a single integer $$$0 \\leq x &lt; 10^9+7$$$, the number of cyclic permutations of length $$$n$$$ modulo $$$10^9+7$$$.","prob_desc_output_to":"standard output","prob_desc_description":"A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).Consider a permutation $$$p$$$ of length $$$n$$$, we build a graph of size $$$n$$$ using it as follows:   For every $$$1 \\leq i \\leq n$$$, find the largest $$$j$$$ such that $$$1 \\leq j &lt; i$$$ and $$$p_j &gt; p_i$$$, and add an undirected edge between node $$$i$$$ and node $$$j$$$  For every $$$1 \\leq i \\leq n$$$, find the smallest $$$j$$$ such that $$$i &lt; j \\leq n$$$ and $$$p_j &gt; p_i$$$, and add an undirected edge between node $$$i$$$ and node $$$j$$$ In cases where no such $$$j$$$ exists, we make no edges. Also, note that we make edges between the corresponding indices, not the values at those indices.For clarity, consider as an example $$$n = 4$$$, and $$$p = [3,1,4,2]$$$; here, the edges of the graph are $$$(1,3),(2,1),(2,3),(4,3)$$$.A permutation $$$p$$$ is cyclic if the graph built using $$$p$$$ has at least one simple cycle. Given $$$n$$$, find the number of cyclic permutations of length $$$n$$$. Since the number may be very large, output it modulo $$$10^9+7$$$.Please refer to the Notes section for the formal definition of a simple cycle","hidden_unit_tests":"[{\"input\": \"4\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"583291\\r\\n\", \"output\": [\"135712853\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"23581336\"]}, {\"input\": \"66\\r\\n\", \"output\": [\"257415584\"]}, {\"input\": \"33\\r\\n\", \"output\": [\"762187807\"]}, {\"input\": \"336161\\r\\n\", \"output\": [\"234634596\"]}, {\"input\": \"885131\\r\\n\", \"output\": [\"329995454\"]}, {\"input\": \"482331\\r\\n\", \"output\": [\"722928541\"]}, {\"input\": \"79531\\r\\n\", \"output\": [\"162141608\"]}, {\"input\": \"652615\\r\\n\", \"output\": [\"960319213\"]}, {\"input\": \"768208\\r\\n\", \"output\": [\"635322133\"]}]","length":204,"num_hidden_unit_tests":12}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\nxxxiii\", \"5\\nxxoxx\", \"10\\nxxxxxxxxxx\"]","prob_desc_input_spec":"The first line contains integer $$$n$$$ $$$(3 \\le n \\le 100)$$$ \u2014 the length of the file name. The second line contains a string of length $$$n$$$ consisting of lowercase Latin letters only \u2014 the file name.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"8de14db41d0acee116bd5d8079cb2b02","prob_desc_created_at":"1582202100","source_code":"import java.util.*;\nimport java.lang.*;\nimport java.io.*;\npublic class A\n{\n    public static void main(String args[])throws IOException\n    {\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        int n,i,j,count,k;\n        String t=br.readLine();\n        n=Integer.parseInt(t);\n        t=br.readLine();\n        char[] s=t.toCharArray();\n        k=0;\n        for(i=0;i<n;)\n        {\n            if(s[i]=='x')\n            {\n                count=1;\n                for(j=i+1;j<n;j++)\n                {\n                    if(s[j]=='x')\n                    count=count+1;\n                    else\n                    break;\n                }\n                i=i+count;\n                if(count!=1)\n                k=k+(count-2);\n            }\n            else\n            i=i+1;\n        }\n        System.out.println(k);\n    }\n}","prob_desc_sample_outputs":"[\"1\", \"0\", \"8\"]","lang_cluster":"Java","code_uid":"9e4a166a4c43230b9396b29751a94f0d","prob_desc_notes":"NoteIn the first example Polycarp tried to send a file with name contains number $$$33$$$, written in Roman numerals. But he can not just send the file, because it name contains three letters \"x\" in a row. To send the file he needs to remove any one of this letters.","prob_desc_output_spec":"Print the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. If initially the file name dost not contain a forbidden substring \"xxx\", print 0.","prob_desc_output_to":"standard output","prob_desc_description":"You can not just take the file and send it. When Polycarp trying to send a file in the social network \"Codehorses\", he encountered an unexpected problem. If the name of the file contains three or more \"x\" (lowercase Latin letters \"x\") in a row, the system considers that the file content does not correspond to the social network topic. In this case, the file is not sent and an error message is displayed.Determine the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. Print 0 if the file name does not initially contain a forbidden substring \"xxx\".You can delete characters in arbitrary positions (not necessarily consecutive). If you delete a character, then the length of a string is reduced by $$$1$$$. For example, if you delete the character in the position $$$2$$$ from the string \"exxxii\", then the resulting string is \"exxii\".","hidden_unit_tests":"[{\"input\": \"6\\r\\nxxxiii\\r\\n\", \"output\": [\"1\\r\\n\", \"1\", \"1\\n\"]}, {\"input\": \"5\\r\\nxxoxx\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"10\\r\\nxxxxxxxxxx\\r\\n\", \"output\": [\"8\\n\", \"8\", \"8\\r\\n\"]}, {\"input\": \"100\\r\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\r\\n\", \"output\": [\"98\", \"98\\n\", \"98\\r\\n\"]}, {\"input\": \"99\\r\\nxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxa\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"3\\r\\nxxx\\r\\n\", \"output\": [\"1\\r\\n\", \"1\", \"1\\n\"]}, {\"input\": \"77\\r\\naaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxyyyzzz\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"100\\r\\nuxxxxxlmexxxxxxxwnxxexxxxxcxxfydxxxxxxvmdxxxxxxisxxxxxxxxidkxxxpxxxxxxxxmnuxxxxjxxxqcxxwmxxxxxxxxmrx\\r\\n\", \"output\": [\"41\", \"41\\r\\n\", \"41\\n\"]}, {\"input\": \"100\\r\\nxxxxxxxxxxxjtxxxxxxxxcxxxxxxcfxxxxzxxxxxxgxxxxxbxxxxbxxxxxxxxdycxxxxokixxxkizxxgcxxxxxxxxexxxxxfxxxc\\r\\n\", \"output\": [\"49\", \"49\\n\", \"49\\r\\n\"]}, {\"input\": \"100\\r\\nuxxxxxlmexxxxxxxwnxxexxxxxcxxfydxxxxxxvmdxxxxxxisxxxxxxxxidkxxxpxxxxxxxxmnuxxxxjxxxqcxxwmxxxxxwxxxxx\\r\\n\", \"output\": [\"41\", \"41\\r\\n\", \"41\\n\"]}, {\"input\": \"34\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"5\\r\\nfcyju\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"100\\r\\nihygyvdvyeifomhxhkhdkimquvgallbqharcyriyqkidnwykozuhvkwdldlztpabgyuflikychqpdenwzgtlzotyumjgdsrbxxxx\\r\\n\", \"output\": [\"2\", \"2\\n\", \"2\\r\\n\"]}]","length":36,"num_hidden_unit_tests":13}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\\n111\", \"9\\n110011101\"]","prob_desc_input_spec":"The first line contains one integer number n (1\u2009\u2264\u2009n\u2009\u2264\u200989) \u2014 length of the string s. The second line contains string s \u2014 sequence of '0' and '1' characters, number in its encoded format. It is guaranteed that the number corresponding to the string is positive and doesn't exceed 109. The string always starts with '1'.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"a4b3da4cb9b6a7ed0a33a862e940cafa","prob_desc_created_at":"1500217500","source_code":"\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.Integer.parseInt;\nimport java.math.BigInteger;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer tk;\n\/\/        Scanner in=new Scanner(System.in);\n        \/\/ PrintWriter p = new PrintWriter(System.out);\n        StringBuilder out = new StringBuilder();\n        tk = new StringTokenizer(in.readLine());\n        int n = parseInt(tk.nextToken());\n        char[] a = in.readLine().toCharArray();\n        boolean f = true;\n        int cnt = 0;\n\n        for (int i = 0; i < a.length;) {\n            if (a[i] == '1') {\n                cnt++;\n                i++;\n\n            } else if (a[i] == '0') {\n                if (f) {\n                    out.append(cnt);\n                    f = false;\n                } else if (!f) {\n                    out.replace(out.length() - 1, out.length(), cnt + \"\");\n                }\n\n                while (i < a.length && a[i] == '0') {\n                    out.append(a[i]);\n                    i++;\n                }\n                cnt = 0;\n          \n            }\n        }\n        if(cnt>0&&out.length()>0)\n            out.replace(out.length()-1,out.length(),cnt+\"\");\n        else if(cnt>0)\n            out.append(cnt);\n        System.out.println(out);\n    }\n}\n","prob_desc_sample_outputs":"[\"3\", \"2031\"]","lang_cluster":"Java","code_uid":"c0734f14c96ba920126bd0f374669f3e","prob_desc_notes":null,"prob_desc_output_spec":"Print the decoded number.","prob_desc_output_to":"standard output","prob_desc_description":"Polycarp has just invented a new binary protocol for data transmission. He is encoding positive integer decimal number to binary string using following algorithm:  Each digit is represented with number of '1' characters equal to the value of that digit (for 0 it is zero ones).  Digits are written one by one in order corresponding to number and separated by single '0' character. Though Polycarp learnt how to encode the numbers, he has no idea how to decode them back. Help him calculate the decoded number.","hidden_unit_tests":"[{\"input\": \"3\\r\\n111\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"9\\r\\n110011101\\r\\n\", \"output\": [\"2031\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"5\\r\\n10001\\r\\n\", \"output\": [\"1001\"]}, {\"input\": \"14\\r\\n11001100011000\\r\\n\", \"output\": [\"202002000\"]}, {\"input\": \"31\\r\\n1000011111111100011110111111111\\r\\n\", \"output\": [\"100090049\"]}, {\"input\": \"53\\r\\n10110111011110111110111111011111110111111110111111111\\r\\n\", \"output\": [\"123456789\"]}, {\"input\": \"89\\r\\n11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111\\r\\n\", \"output\": [\"999999999\"]}, {\"input\": \"10\\r\\n1000000000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"2\\r\\n10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"4\\r\\n1110\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"8\\r\\n10101010\\r\\n\", \"output\": [\"11110\"]}]","length":48,"num_hidden_unit_tests":13}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2200.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"3 100000007\", \"4 100000007\", \"400 234567899\"]","prob_desc_input_spec":"The first line contains two integers $$$n$$$ and $$$M$$$ ($$$3 \\le n \\le 400$$$; $$$10^8 \\le M \\le 10^9$$$)\u00a0\u2014 the number of computers and the modulo. It is guaranteed that $$$M$$$ is prime.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"4f0e0d1deef0761a46b64de3eb98e774","prob_desc_created_at":"1619966100","source_code":"import java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n    public static void main(String args[]) {new Main().run();}\r\n\r\n    FastReader in = new FastReader();\r\n    PrintWriter out = new PrintWriter(System.out);\r\n    void run(){\r\n        work();\r\n        out.flush();\r\n    }\r\n    long mod=998244353;\r\n    long gcd(long a,long b) {\r\n        return a==0?b:gcd(b%a,a);\r\n    }\r\n\r\n    void work() {\r\n        int n=ni();\r\n        mod=nl();\r\n        long[] dp1=new long[401];\r\n        long[][] dp2=new long[n+1][n+1];\r\n        long[][] C=new long[401][401];\r\n        for(int j=0;j<=400;j++){\r\n            for(int i=0;i<=j;i++){\r\n                if(i==0||j==i){\r\n                    C[i][j]=1;\r\n                }else{\r\n                    C[i][j]=(C[i-1][j-1]+C[i][j-1])%mod;\r\n                }\r\n            }\r\n        }\r\n        for(int i=1;i<=400;i++){\r\n            for(int j=0;j<i;j++){\r\n                dp1[i]=(dp1[i]+C[j][i-1])%mod;\r\n            }\r\n        }\r\n        for(int i=1;i<=n;i++){\r\n            dp2[i][i]=dp1[i];\r\n        }\r\n        for(int i=1;i<=n;i++){\r\n            for(int j=1;j<i;j++){\r\n                for(int k=1;k<j;k++){\r\n                    dp2[i][j]=dp2[i][j]+((((dp2[i-k-1][j-k]*dp1[k])%mod)*C[k][j])%mod);\r\n                    dp2[i][j]%=mod;\r\n                }\r\n            }\r\n        }\r\n        long ret=0;\r\n        for(int j=1;j<=n;j++){\r\n            ret=(ret+dp2[n][j])%mod;\r\n        }\r\n        out.println(ret);\r\n    }\r\n\r\n\r\n    private ArrayList<long[]>[] ngw(int n, int m) {\r\n        ArrayList<long[]>[] graph=(ArrayList<long[]>[])new ArrayList[n];\r\n        for(int i=0;i<n;i++) {\r\n            graph[i]=new ArrayList<>();\r\n        }\r\n        for(int i=1;i<=m;i++) {\r\n            long s=in.nextLong()-1,e=in.nextLong()-1,w=in.nextLong();\r\n            graph[(int)s].add(new long[] {e,w});\r\n            graph[(int)e].add(new long[] {s,w});\r\n        }\r\n        return graph;\r\n    }\r\n\r\n    private int ni() {\r\n        return in.nextInt();\r\n    }\r\n\r\n    private long nl() {\r\n        return in.nextLong();\r\n    }\r\n\r\n    private String ns() {\r\n        return in.next();\r\n    }\r\n\r\n    private long[] na(int n) {\r\n        long[] A=new long[n];\r\n        for(int i=0;i<n;i++) {\r\n            A[i]=in.nextLong();\r\n        }\r\n        return A;\r\n    }\r\n    private int[] nia(int n) {\r\n        int[] A=new int[n];\r\n        for(int i=0;i<n;i++) {\r\n            A[i]=in.nextInt();\r\n        }\r\n        return A;\r\n    }\r\n}\r\n\r\nclass FastReader\r\n{\r\n    BufferedReader br;\r\n    StringTokenizer st;\r\n\r\n    public FastReader()\r\n    {\r\n        br=new BufferedReader(new InputStreamReader(System.in));\r\n    }\r\n\r\n\r\n    public String next()\r\n    {\r\n        while(st==null || !st.hasMoreElements())\/\/\u56de\u8f66\uff0c\u7a7a\u884c\u60c5\u51b5\r\n        {\r\n            try {\r\n                st = new StringTokenizer(br.readLine());\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return st.nextToken();\r\n    }\r\n\r\n    public int nextInt()\r\n    {\r\n        return Integer.parseInt(next());\r\n    }\r\n\r\n    public long nextLong()\r\n    {\r\n        return Long.parseLong(next());\r\n    }\r\n}","prob_desc_sample_outputs":"[\"6\", \"20\", \"20914007\"]","lang_cluster":"Java","code_uid":"cdc6c84950417ed0bffdc8cffc403509","prob_desc_notes":"NoteIn the first example, these are the $$$6$$$ orders in which Phoenix can turn on all computers:   $$$[1,3]$$$. Turn on computer $$$1$$$, then $$$3$$$. Note that computer $$$2$$$ turns on automatically after computer $$$3$$$ is turned on manually, but we only consider the sequence of computers that are turned on manually.  $$$[3,1]$$$. Turn on computer $$$3$$$, then $$$1$$$.  $$$[1,2,3]$$$. Turn on computer $$$1$$$, $$$2$$$, then $$$3$$$.  $$$[2,1,3]$$$  $$$[2,3,1]$$$  $$$[3,2,1]$$$ ","prob_desc_output_spec":"Print one integer\u00a0\u2014 the number of ways to turn on the computers modulo $$$M$$$.","prob_desc_output_to":"standard output","prob_desc_description":"There are $$$n$$$ computers in a row, all originally off, and Phoenix wants to turn all of them on. He will manually turn on computers one at a time. At any point, if computer $$$i-1$$$ and computer $$$i+1$$$ are both on, computer $$$i$$$ $$$(2 \\le i \\le n-1)$$$ will turn on automatically if it is not already on. Note that Phoenix cannot manually turn on a computer that already turned on automatically.If we only consider the sequence of computers that Phoenix turns on manually, how many ways can he turn on all the computers? Two sequences are distinct if either the set of computers turned on manually is distinct, or the order of computers turned on manually is distinct. Since this number may be large, please print it modulo $$$M$$$.","hidden_unit_tests":"[{\"input\": \"3 100000007\\n\", \"output\": [\"6\\n\", \"6\\n\", \"6\", \"6 \\n\", \"6 \"]}, {\"input\": \"4 100000007\\n\", \"output\": [\"20 \\n\", \"20 \", \"20\", \"20\\n\", \"20\\n\"]}, {\"input\": \"400 234567899\\n\", \"output\": [\"20914007\\n\", \"20914007\", \"20914007 \\n\", \"20914007 \", \"20914007\\n\"]}, {\"input\": \"5 999999937\\n\", \"output\": [\"78\\n\", \"78\\n\", \"78\", \"78 \", \"78 \\n\"]}, {\"input\": \"6 100000007\\n\", \"output\": [\"344 \\n\", \"344\\n\", \"344 \", \"344\", \"344\\n\"]}, {\"input\": \"7 100000007\\n\", \"output\": [\"1680 \", \"1680\", \"1680\\n\", \"1680\\n\", \"1680 \\n\"]}, {\"input\": \"100 999999733\\n\", \"output\": [\"499246611 \\n\", \"499246611\\n\", \"499246611\\n\", \"499246611 \", \"499246611\"]}, {\"input\": \"350 999999733\\n\", \"output\": [\"255248393\", \"255248393 \", \"255248393\\n\", \"255248393\\n\", \"255248393 \\n\"]}, {\"input\": \"400 100000007\\n\", \"output\": [\"29181726\\n\", \"29181726\\n\", \"29181726\", \"29181726 \\n\", \"29181726 \"]}, {\"input\": \"397 999999733\\n\", \"output\": [\"239189389 \", \"239189389\\n\", \"239189389\\n\", \"239189389\", \"239189389 \\n\"]}, {\"input\": \"398 999999733\\n\", \"output\": [\"875462745\\n\", \"875462745\", \"875462745\\n\", \"875462745 \", \"875462745 \\n\"]}, {\"input\": \"399 999999733\\n\", \"output\": [\"530105147 \\n\", \"530105147\", \"530105147 \", \"530105147\\n\", \"530105147\\n\"]}, {\"input\": \"400 999999733\\n\", \"output\": [\"564062758\\n\", \"564062758\\n\", \"564062758 \\n\", \"564062758 \", \"564062758\"]}]","length":131,"num_hidden_unit_tests":13}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n1001\", \"1\\n1\"]","prob_desc_input_spec":"The first line contains integer number n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the length of string s. The second line contains the string s consisting of characters \"0\" and \"1\". It is guaranteed that the string s is correct.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"ac244791f8b648d672ed3de32ce0074d","prob_desc_created_at":"1525099200","source_code":"\/\/package codeforces;\n\nimport java.util.Scanner;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\/\/ TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint len = sc.nextInt();\n\t\tString str = sc.next();\n\t\tif (len < 2) {\n\t\t\tSystem.out.println(str);\n\t\t} else {\n\t\t\tString[] str_char = str.split(\"\");\n\t\t\tStringBuffer sb = new StringBuffer(\"1\");\n\t\t\tfor (int i = 0; i < str_char.length; i++) {\n\t\t\t\tif(str_char[i].equals(\"0\")){\n\t\t\t\t\tsb.append(\"0\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(sb);\n\t\t}\n\t\t\n\t}\n\n}\n","prob_desc_sample_outputs":"[\"100\", \"1\"]","lang_cluster":"Java","code_uid":"135bec62ee09369bdbdfa6e2bd026117","prob_desc_notes":"NoteIn the first example you can obtain the answer by the following sequence of operations: \"1001\"  \"1010\"  \"1100\"  \"100\".In the second example you can't obtain smaller answer no matter what operations you use.","prob_desc_output_spec":"Print one string \u2014 the minimum correct string that you can obtain from the given one.","prob_desc_output_to":"standard output","prob_desc_description":"String can be called correct if it consists of characters \"0\" and \"1\" and there are no redundant leading zeroes. Here are some examples: \"0\", \"10\", \"1001\".You are given a correct string s.You can perform two different operations on this string:   swap any pair of adjacent characters (for example, \"101\"  \"110\");  replace \"11\" with \"1\" (for example, \"110\"  \"10\"). Let val(s) be such a number that s is its binary representation.Correct string a is less than some other correct string b iff val(a)\u2009&lt;\u2009val(b).Your task is to find the minimum correct string that you can obtain from the given one using the operations described above. You can use these operations any number of times in any order (or even use no operations at all).","hidden_unit_tests":"[{\"input\": \"4\\r\\n1001\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n1110111100001111011111111010110011111111011110000111101101011100110110001011000000101010110101011100\\r\\n\", \"output\": [\"1000000000000000000000000000000000000000\"]}, {\"input\": \"100\\r\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\r\\n\", \"output\": [\"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1\\r\\n0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8\\r\\n10101010\\r\\n\", \"output\": [\"10000\"]}, {\"input\": \"2\\r\\n10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"3\\r\\n111\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n11100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"2\\r\\n11\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n110\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"50\\r\\n10010010000000000000000000000000000000001000000000\\r\\n\", \"output\": [\"10000000000000000000000000000000000000000000000\"]}]","length":26,"num_hidden_unit_tests":14}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 2 2\", \"5 1 5\"]","prob_desc_input_spec":"The only input line contains three integers $$$n$$$, $$$l$$$ and $$$r$$$ ($$$1 \\leq n \\leq 1\\,000$$$, $$$1 \\leq l \\leq r \\leq \\min(n, 20)$$$)\u00a0\u2014 an array's size, the minimal number and the maximal number of distinct elements in an array.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"ce220726392fb0cacf0ec44a7490084a","prob_desc_created_at":"1566311700","source_code":"import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\/\/ TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNext()) {\n\t\t\tint n=sc.nextInt();\n\t\t\tint l=sc.nextInt();\n\t\t\tint r=sc.nextInt();\n\t\t\tint sumshu=2;\n\t\t\tint shu=2;\n\t\t\tif(l==1){\n\t\t\tSystem.out.print(n+\" \");\n\t\t\t}else {\n\t\t\tfor (int i = 1; i < l-1; i++) {\n\t\t\t\tshu*=2;\n\t\t\t\tsumshu+=shu;\n\t\t\t}\n\t\t\t\t\tint min=((n-l)+1)+sumshu;\n\t\t\t\t\tSystem.out.print(min+\" \");\n\t\t\t}\n\t\t\t\t\tsumshu=1;\n\t\t\t\t\tshu=1;\n\t\t\t\t\tfor (int i = 1; i < r; i++) {\n\t\t\t\t\t\tshu*=2;\n\t\t\t\t\t\tsumshu+=shu;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(sumshu+(n-r)*shu);\n\t\t}\n\t}\n\n}","prob_desc_sample_outputs":"[\"5 7\", \"5 31\"]","lang_cluster":"Java","code_uid":"afa8fef09216090a91f4bb4066cfc577","prob_desc_notes":"NoteIn the first example, an array could be the one of the following: $$$[1,1,1,2]$$$, $$$[1,1,2,2]$$$ or $$$[1,2,2,2]$$$. In the first case the minimal sum is reached and in the last case the maximal sum is reached.In the second example, the minimal sum is reached at the array $$$[1,1,1,1,1]$$$, and the maximal one is reached at the array $$$[1,2,4,8,16]$$$.","prob_desc_output_spec":"Output two numbers\u00a0\u2014 the minimal and the maximal possible sums of all elements in an array.","prob_desc_output_to":"standard output","prob_desc_description":"Mislove had an array $$$a_1$$$, $$$a_2$$$, $$$\\cdots$$$, $$$a_n$$$ of $$$n$$$ positive integers, but he has lost it. He only remembers the following facts about it: The number of different numbers in the array is not less than $$$l$$$ and is not greater than $$$r$$$; For each array's element $$$a_i$$$ either $$$a_i = 1$$$ or $$$a_i$$$ is even and there is a number $$$\\dfrac{a_i}{2}$$$ in the array.For example, if $$$n=5$$$, $$$l=2$$$, $$$r=3$$$ then an array could be $$$[1,2,2,4,4]$$$ or $$$[1,1,1,1,2]$$$; but it couldn't be $$$[1,2,2,4,8]$$$ because this array contains $$$4$$$ different numbers; it couldn't be $$$[1,2,2,3,3]$$$ because $$$3$$$ is odd and isn't equal to $$$1$$$; and it couldn't be $$$[1,1,2,2,16]$$$ because there is a number $$$16$$$ in the array but there isn't a number $$$\\frac{16}{2} = 8$$$.According to these facts, he is asking you to count the minimal and the maximal possible sums of all elements in an array. ","hidden_unit_tests":"[{\"input\": \"4 2 2\\r\\n\", \"output\": [\"5 7\"]}, {\"input\": \"5 1 5\\r\\n\", \"output\": [\"5 31\"]}, {\"input\": \"106 16 18\\r\\n\", \"output\": [\"65625 11796479\"]}, {\"input\": \"114 18 19\\r\\n\", \"output\": [\"262239 25427967\"]}, {\"input\": \"655 3 18\\r\\n\", \"output\": [\"659 83755007\"]}, {\"input\": \"1000 1 20\\r\\n\", \"output\": [\"1000 514850815\"]}, {\"input\": \"1000 20 20\\r\\n\", \"output\": [\"1049555 514850815\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"588 13 15\\r\\n\", \"output\": [\"8766 9420799\"]}, {\"input\": \"408 13 13\\r\\n\", \"output\": [\"8586 1626111\"]}, {\"input\": \"879 17 17\\r\\n\", \"output\": [\"131933 56623103\"]}, {\"input\": \"17 2 14\\r\\n\", \"output\": [\"18 40959\"]}, {\"input\": \"624 7 17\\r\\n\", \"output\": [\"744 39911423\"]}, {\"input\": \"1000 1 1\\r\\n\", \"output\": [\"1000 1000\"]}]","length":34,"num_hidden_unit_tests":14}
{"prob_desc_memory_limit":"512 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3 4\", \"3 5\", \"42 1337\", \"100000 200000\"]","prob_desc_input_spec":"The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le m \\le 2 \\cdot 10^5$$$).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"28d6fc8973a3e0076a21c2ea490dfdba","prob_desc_created_at":"1583764500","source_code":"import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n\/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\/\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskD {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            long n = in.nextLong();\n            long m = in.nextLong();\n            ModuloArithmetic moduloArithmetic = new ModuloArithmetic(998244353L);\n\n            long factm = moduloArithmetic.factorial(m);\n            long fact1 = moduloArithmetic.factorial(m - (n - 1));\n            long fact2 = moduloArithmetic.factorial(n - 1);\n            long pow2 = n >= 3 ? moduloArithmetic.powmod(2, n - 3) : 1;\n            long t = moduloArithmetic.mul(fact1, fact2);\n            long ans = moduloArithmetic.div(factm, t);\n            ans = moduloArithmetic.mul(ans, n - 2);\n            ans = moduloArithmetic.mul(ans, pow2);\n            out.println(ans);\n        }\n\n    }\n\n    static class InputReader {\n        final InputStream is;\n        final byte[] buffer = new byte[1024];\n        int curCharIdx;\n        int nChars;\n\n        public InputReader(InputStream is) {\n            this.is = is;\n        }\n\n        public int read() {\n            if (curCharIdx >= nChars) {\n                try {\n                    curCharIdx = 0;\n                    nChars = is.read(buffer);\n                    if (nChars == -1)\n                        return -1;\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return buffer[curCharIdx++];\n        }\n\n        public long nextLong() {\n            int sign = 1;\n            int c = skipDelims();\n            if (c == '-') {\n                sign = -1;\n                c = read();\n                if (isDelim(c))\n                    throw new RuntimeException(\"Incorrect format\");\n            }\n            long val = 0;\n            while (c != -1 && !isDelim(c)) {\n                if (!isDigit(c))\n                    throw new RuntimeException(\"Incorrect format\");\n                val = 10L * val + (c - '0');\n                c = read();\n            }\n            return val * sign;\n        }\n\n        private final int skipDelims() {\n            int c = read();\n            while (isDelim(c)) {\n                c = read();\n            }\n            return c;\n        }\n\n        private static boolean isDelim(final int c) {\n            return c == ' ' ||\n                    c == '\\n' ||\n                    c == '\\t' ||\n                    c == '\\r' ||\n                    c == '\\f';\n        }\n\n        private static boolean isDigit(final int c) {\n            return '0' <= c && c <= '9';\n        }\n\n    }\n\n    static class Algorithms {\n        public static long powmod(long a, long n, long mod) {\n            long res = 1;\n            while (n != 0) {\n                if ((n & 1) == 1)\n                    res = (res * a) % mod;\n                a = (a * a) % mod;\n                n >>= 1;\n            }\n            return res;\n        }\n\n        public static long inverseByModulo(long a, long n) {\n            long t = 0, newt = 1, r = n, newr = a;\n            while (newr != 0) {\n                long q = r \/ newr;\n\n                long temp = newt;\n                newt = t - q * newt;\n                t = temp;\n\n                temp = newr;\n                newr = r - q * newr;\n                r = temp;\n            }\n\n            if (r > 1)\n                return 0;\n            if (t < 0)\n                t += n;\n            return t;\n        }\n\n    }\n\n    static class ModuloArithmetic {\n        final long MODULO;\n\n        public ModuloArithmetic(long mod) {\n            this.MODULO = mod;\n        }\n\n        public long mul(long a, long b) {\n            return (a * b) % MODULO;\n        }\n\n        public long div(long a, long b) {\n            return (a * Algorithms.inverseByModulo(b, MODULO)) % MODULO;\n        }\n\n        public long factorial(long n) {\n            long ans = 1;\n            for (int i = 2; i <= n; i++) ans = mul(ans, i);\n            return ans;\n        }\n\n        public long powmod(long k, long n) {\n            return Algorithms.powmod(k, n, MODULO);\n        }\n\n    }\n}\n\n","prob_desc_sample_outputs":"[\"6\", \"10\", \"806066790\", \"707899035\"]","lang_cluster":"Java","code_uid":"cacd0f9f8f64e5a1d2ae0f04572a5883","prob_desc_notes":"NoteThe arrays in the first example are:  $$$[1, 2, 1]$$$;  $$$[1, 3, 1]$$$;  $$$[1, 4, 1]$$$;  $$$[2, 3, 2]$$$;  $$$[2, 4, 2]$$$;  $$$[3, 4, 3]$$$. ","prob_desc_output_spec":"Print one integer \u2014 the number of arrays that meet all of the aforementioned conditions, taken modulo $$$998244353$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Your task is to calculate the number of arrays such that:  each array contains $$$n$$$ elements;  each element is an integer from $$$1$$$ to $$$m$$$;  for each array, there is exactly one pair of equal elements;  for each array $$$a$$$, there exists an index $$$i$$$ such that the array is strictly ascending before the $$$i$$$-th element and strictly descending after it (formally, it means that $$$a_j &lt; a_{j + 1}$$$, if $$$j &lt; i$$$, and $$$a_j &gt; a_{j + 1}$$$, if $$$j \\ge i$$$). ","hidden_unit_tests":"[{\"input\": \"3 4\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"3 5\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"42 1337\\r\\n\", \"output\": [\"806066790\"]}, {\"input\": \"100000 200000\\r\\n\", \"output\": [\"707899035\"]}, {\"input\": \"150000 200000\\r\\n\", \"output\": [\"270223789\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3 200000\\r\\n\", \"output\": [\"35012940\"]}, {\"input\": \"200000 200000\\r\\n\", \"output\": [\"668956439\"]}, {\"input\": \"20 20\\r\\n\", \"output\": [\"47185920\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 200000\\r\\n\", \"output\": [\"664520775\"]}, {\"input\": \"2 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"7 14\\r\\n\", \"output\": [\"240240\"]}]","length":169,"num_hidden_unit_tests":14}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\", \"2\", \"3\", \"100\"]","prob_desc_input_spec":"The single line of the input contains a single integer $$$n$$$ $$$(1\\le n \\le 10^6)$$$.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"09be46206a151c237dc9912df7e0f057","prob_desc_created_at":"1621866900","source_code":"import java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\n\/**\r\n *\r\n * @Har_Har_Mahadev\r\n *\/\r\n\r\n\/**\r\n * Main , Solution , Remove Public\r\n *\/\r\npublic class D {\r\n\r\n\tpublic static void process() throws IOException {\r\n\t\tint n = sc.nextInt();\r\n\t\tlong dp[] = new long[n+1];\r\n\t\tfor(int i = 2; i<=n; i++) {\r\n\t\t\tfor(int j = i; j<=n; j+=i)dp[j]++;\r\n\t\t}\r\n\t\tdp[0] = 1;\r\n\t\tlong sum = 1;\r\n\t\tfor(int i=1; i<=n; i++) {\r\n\t\t\tdp[i] = (dp[i] + sum)%MM;\r\n\t\t\tsum = (sum+dp[i])%MM;\r\n\t\t}\r\n\t\tprintln(dp[n]);\r\n\r\n\t}\r\n\r\n\t\/\/=============================================================================\r\n\t\/\/--------------------------The End---------------------------------\r\n\t\/\/=============================================================================\r\n\tprivate static long INF = 2000000000000000000L, M = 1000000007, MM = 998244353;\r\n\tprivate static int N = 1_000_005;\r\n\r\n\tprivate static void google(int tt) {\r\n\t\tSystem.out.print(\"Case #\" + (tt) + \": \");\r\n\t}\r\n\r\n\tstatic FastScanner sc;\r\n\tstatic PrintWriter out;\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tboolean oj = true;\r\n\t\tif (oj) {\r\n\t\t\tsc = new FastScanner();\r\n\t\t\tout = new PrintWriter(System.out);\r\n\t\t} else {\r\n\t\t\tsc = new FastScanner(100);\r\n\t\t\tout = new PrintWriter(\"output.txt\");\r\n\t\t}\r\n\t\tint t = 1;\r\n\/\/\t\tt = sc.nextInt();\r\n\t\tint TTT = 1;\r\n\t\twhile (t-- > 0) {\r\n\t\t\t\/\/\t\t\tgoogle(TTT++);\r\n\t\t\tprocess();\r\n\t\t}\r\n\t\tout.flush();\r\n\t\tout.close();\r\n\t}\r\n\r\n\tstatic class Pair implements Comparable<Pair> {\r\n\t\tint x, y;\r\n\r\n\t\tPair(int x, int y) {\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int compareTo(Pair o) {\r\n\t\t\treturn Integer.compare(this.x, o.x);\r\n\t\t}\r\n\r\n\t\t\/\/\t\t @Override\r\n\t\t\/\/\t\t    public boolean equals(Object o) {\r\n\t\t\/\/\t\t        if (this == o) return true;\r\n\t\t\/\/\t\t        if (!(o instanceof Pair)) return false;\r\n\t\t\/\/\t\t        Pair key = (Pair) o;\r\n\t\t\/\/\t\t        return x == key.x && y == key.y;\r\n\t\t\/\/\t\t    }\r\n\t\t\/\/\t\t \r\n\t\t\/\/\t\t    @Override\r\n\t\t\/\/\t\t    public int hashCode() {\r\n\t\t\/\/\t\t        int result = x;\r\n\t\t\/\/\t\t        result = 31 * result + y;\r\n\t\t\/\/\t\t        return result;\r\n\t\t\/\/\t\t    }\r\n\t}\r\n\r\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n\tstatic void println(Object o) {\r\n\t\tout.println(o);\r\n\t}\r\n\r\n\tstatic void println() {\r\n\t\tout.println();\r\n\t}\r\n\r\n\tstatic void print(Object o) {\r\n\t\tout.print(o);\r\n\t}\r\n\r\n\tstatic void pflush(Object o) {\r\n\t\tout.println(o);\r\n\t\tout.flush();\r\n\t}\r\n\r\n\tstatic int ceil(int x, int y) {\r\n\t\treturn (x % y == 0 ? x \/ y : (x \/ y + 1));\r\n\t}\r\n\r\n\tstatic long ceil(long x, long y) {\r\n\t\treturn (x % y == 0 ? x \/ y : (x \/ y + 1));\r\n\t}\r\n\r\n\tstatic int max(int x, int y) {\r\n\t\treturn Math.max(x, y);\r\n\t}\r\n\r\n\tstatic int min(int x, int y) {\r\n\t\treturn Math.min(x, y);\r\n\t}\r\n\r\n\tstatic int abs(int x) {\r\n\t\treturn Math.abs(x);\r\n\t}\r\n\r\n\tstatic long abs(long x) {\r\n\t\treturn Math.abs(x);\r\n\t}\r\n\r\n\tstatic long sqrt(long z) {\r\n\t\tlong sqz = (long) Math.sqrt(z);\r\n\t\twhile (sqz * 1L * sqz < z) {\r\n\t\t\tsqz++;\r\n\t\t}\r\n\t\twhile (sqz * 1L * sqz > z) {\r\n\t\t\tsqz--;\r\n\t\t}\r\n\t\treturn sqz;\r\n\t}\r\n\r\n\tstatic int log2(int N) {\r\n\t\tint result = (int) (Math.log(N) \/ Math.log(2));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tstatic long max(long x, long y) {\r\n\t\treturn Math.max(x, y);\r\n\t}\r\n\r\n\tstatic long min(long x, long y) {\r\n\t\treturn Math.min(x, y);\r\n\t}\r\n\r\n\tpublic static int gcd(int a, int b) {\r\n\t\tBigInteger b1 = BigInteger.valueOf(a);\r\n\t\tBigInteger b2 = BigInteger.valueOf(b);\r\n\t\tBigInteger gcd = b1.gcd(b2);\r\n\t\treturn gcd.intValue();\r\n\t}\r\n\r\n\tpublic static long gcd(long a, long b) {\r\n\t\tBigInteger b1 = BigInteger.valueOf(a);\r\n\t\tBigInteger b2 = BigInteger.valueOf(b);\r\n\t\tBigInteger gcd = b1.gcd(b2);\r\n\t\treturn gcd.longValue();\r\n\t}\r\n\r\n\tpublic static long lcm(long a, long b) {\r\n\t\treturn (a * b) \/ gcd(a, b);\r\n\t}\r\n\r\n\tpublic static int lcm(int a, int b) {\r\n\t\treturn (a * b) \/ gcd(a, b);\r\n\t}\r\n\r\n\tpublic static int lower_bound(int[] arr, int x) {\r\n\t\tint low = 0, high = arr.length, mid = -1;\r\n\r\n\t\twhile (low < high) {\r\n\t\t\tmid = (low + high) \/ 2;\r\n\r\n\t\t\tif (arr[mid] >= x)\r\n\t\t\t\thigh = mid;\r\n\t\t\telse\r\n\t\t\t\tlow = mid + 1;\r\n\t\t}\r\n\r\n\t\treturn low;\r\n\t}\r\n\r\n\tpublic static int upper_bound(int[] arr, int x) {\r\n\t\tint low = 0, high = arr.length, mid = -1;\r\n\r\n\t\twhile (low < high) {\r\n\t\t\tmid = (low + high) \/ 2;\r\n\r\n\t\t\tif (arr[mid] > x)\r\n\t\t\t\thigh = mid;\r\n\t\t\telse\r\n\t\t\t\tlow = mid + 1;\r\n\t\t}\r\n\r\n\t\treturn low;\r\n\t}\r\n\r\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n\tstatic class FastScanner {\r\n\t\tBufferedReader br;\r\n\t\tStringTokenizer st;\r\n\r\n\t\tFastScanner() throws FileNotFoundException {\r\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t}\r\n\r\n\t\tFastScanner(int a) throws FileNotFoundException {\r\n\t\t\tbr = new BufferedReader(new FileReader(\"input.txt\"));\r\n\t\t}\r\n\r\n\t\tString next() throws IOException {\r\n\t\t\twhile (st == null || !st.hasMoreElements()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\r\n\t\tint nextInt() throws IOException {\r\n\t\t\treturn Integer.parseInt(next());\r\n\t\t}\r\n\r\n\t\tlong nextLong() throws IOException {\r\n\t\t\treturn Long.parseLong(next());\r\n\t\t}\r\n\r\n\t\tdouble nextDouble() throws IOException {\r\n\t\t\treturn Double.parseDouble(next());\r\n\t\t}\r\n\r\n\t\tString nextLine() throws IOException {\r\n\t\t\tString str = \"\";\r\n\t\t\ttry {\r\n\t\t\t\tstr = br.readLine();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\treturn str;\r\n\t\t}\r\n\r\n\t\tint[] readArray(int n) throws IOException {\r\n\t\t\tint[] A = new int[n];\r\n\t\t\tfor (int i = 0; i != n; i++) {\r\n\t\t\t\tA[i] = sc.nextInt();\r\n\t\t\t}\r\n\t\t\treturn A;\r\n\t\t}\r\n\r\n\t\tlong[] readArrayLong(int n) throws IOException {\r\n\t\t\tlong[] A = new long[n];\r\n\t\t\tfor (int i = 0; i != n; i++) {\r\n\t\t\t\tA[i] = sc.nextLong();\r\n\t\t\t}\r\n\t\t\treturn A;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic void ruffleSort(int[] a) {\r\n\t\tRandom get = new Random();\r\n\t\tfor (int i = 0; i < a.length; i++) {\r\n\t\t\tint r = get.nextInt(a.length);\r\n\t\t\tint temp = a[i];\r\n\t\t\ta[i] = a[r];\r\n\t\t\ta[r] = temp;\r\n\t\t}\r\n\t\tArrays.sort(a);\r\n\t}\r\n\r\n\tstatic void ruffleSort(long[] a) {\r\n\t\tRandom get = new Random();\r\n\t\tfor (int i = 0; i < a.length; i++) {\r\n\t\t\tint r = get.nextInt(a.length);\r\n\t\t\tlong temp = a[i];\r\n\t\t\ta[i] = a[r];\r\n\t\t\ta[r] = temp;\r\n\t\t}\r\n\t\tArrays.sort(a);\r\n\t}\r\n}\r\n","prob_desc_sample_outputs":"[\"1\", \"3\", \"6\", \"688750769\"]","lang_cluster":"Java","code_uid":"b5b61db1cda83984ff3e84966f106299","prob_desc_notes":"NoteThe good pairings for the second example are:   In the third example, the good pairings are:   ","prob_desc_output_spec":"Print the number of good pairings modulo $$$998244353$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Kavi has $$$2n$$$ points lying on the $$$OX$$$ axis, $$$i$$$-th of which is located at $$$x = i$$$.Kavi considers all ways to split these $$$2n$$$ points into $$$n$$$ pairs. Among those, he is interested in good pairings, which are defined as follows:Consider $$$n$$$ segments with ends at the points in correspondent pairs. The pairing is called good, if for every $$$2$$$ different segments $$$A$$$ and $$$B$$$ among those, at least one of the following holds:  One of the segments $$$A$$$ and $$$B$$$ lies completely inside the other.  $$$A$$$ and $$$B$$$ have the same length. Consider the following example:  $$$A$$$ is a good pairing since the red segment lies completely inside the blue segment.$$$B$$$ is a good pairing since the red and the blue segment have the same length.$$$C$$$ is not a good pairing since none of the red or blue segments lies inside the other, neither do they have the same size.Kavi is interested in the number of good pairings, so he wants you to find it for him. As the result can be large, find this number modulo $$$998244353$$$.Two pairings are called different, if some two points are in one pair in some pairing and in different pairs in another.","hidden_unit_tests":"[{\"input\": \"1\\n\", \"output\": [\"1\\n\\n\", \"1 \", \"1 \\n\", \"1\", \"1\\n\", \"\\n1\"]}, {\"input\": \"2\\n\", \"output\": [\"3 \", \"3 \\n\", \"3\\n\", \"3\\n\\n\", \"\\n3\", \"3\"]}, {\"input\": \"3\\n\", \"output\": [\"6\\n\", \"6 \\n\", \"\\n6\", \"6\\n\\n\", \"6\", \"6 \"]}, {\"input\": \"100\\n\", \"output\": [\"688750769\", \"688750769\\n\\n\", \"688750769 \", \"688750769\\n\", \"\\n688750769\", \"688750769 \\n\"]}, {\"input\": \"333625\\n\", \"output\": [\"668510586\", \"668510586\\n\\n\", \"668510586 \", \"668510586 \\n\", \"668510586\\n\"]}, {\"input\": \"1000000\\n\", \"output\": [\"126330412 \\n\", \"126330412\", \"126330412 \", \"126330412\\n\", \"126330412\\n\\n\"]}, {\"input\": \"757606\\n\", \"output\": [\"162462618 \\n\", \"162462618 \", \"162462618\", \"162462618\\n\\n\", \"162462618\\n\"]}, {\"input\": \"443013\\n\", \"output\": [\"95736273 \", \"95736273 \\n\", \"95736273\\n\", \"95736273\\n\\n\", \"95736273\"]}, {\"input\": \"489857\\n\", \"output\": [\"498405873 \", \"498405873\\n\", \"498405873 \\n\", \"498405873\", \"498405873\\n\\n\"]}, {\"input\": \"160945\\n\", \"output\": [\"650435832\", \"650435832\\n\\n\", \"650435832\\n\", \"650435832 \", \"650435832 \\n\"]}, {\"input\": \"693549\\n\", \"output\": [\"721751076 \", \"721751076\", \"721751076 \\n\", \"721751076\\n\", \"721751076\\n\\n\"]}, {\"input\": \"563368\\n\", \"output\": [\"170858430\\n\\n\", \"170858430\", \"170858430\\n\", \"170858430 \", \"170858430 \\n\"]}, {\"input\": \"825195\\n\", \"output\": [\"937989636\", \"937989636 \\n\", \"937989636 \", \"937989636\\n\", \"937989636\\n\\n\"]}, {\"input\": \"999228\\n\", \"output\": [\"996260068\\n\", \"996260068\\n\\n\", \"996260068 \", \"996260068 \\n\", \"996260068\"]}]","length":297,"num_hidden_unit_tests":14}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1\", \"2 1\", \"3 2\"]","prob_desc_input_spec":"The first and the only line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 10^5, 1 \\le k \\le \\min(2^n - 1, 10^9)$$$)\u00a0\u2014 the number of rounds in the tournament and the number of outcomes that sponsors can change.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"dc7b887afcc2e95c4e90619ceda63071","prob_desc_created_at":"1662129300","source_code":"import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class p4\r\n{\r\n\tBufferedReader br;\r\n\tStringTokenizer st;\r\n\tBufferedWriter bw;\r\n\tpublic static void main(String[] args)throws Exception\r\n\t{\r\n\t\tnew p4().run();\r\n\t}\r\n\r\n\tvoid run()throws IOException\r\n\t{\r\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tbw=new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\tsolve();\r\n\t}\r\n\tvoid solve() throws IOException\r\n\t{\r\n\t\tint limit=100001;\r\n\t\tint fac[]=new int[limit];\r\n\t\tint invfac[]=new int[limit];\r\n\t\tfac[0]=1;\r\n\t\tinvfac[0]=1;\r\n\t\tint mod=1000000007;\r\n\t\tfor(int i=0;++i<limit;)\r\n\t\t{\r\n\t\t\tlong x=(long)fac[i-1]*i;\r\n\t\t\tx%=mod;\r\n\t\t\tfac[i]=(int)x;\r\n\t\t\tinvfac[i]=(int)nPowerM(fac[i], mod-2);\r\n\t\t}\r\n\r\n\t\tint t=1;\r\n\t\twhile(t-->0)\r\n\t\t{\r\n\t\t\tint n=ni();\r\n\t\t\tint k=ni();\r\n\r\n\t\t\tlong ans=1;\r\n\t\t\tk=Math.min(k, n);\r\n\t\t\tfor(int i=0;++i<=k;)\r\n\t\t\t{\r\n\t\t\t\tlong x=fac[n];\r\n\t\t\t\tx*=invfac[i];\r\n\t\t\t\tx%=mod;\r\n\t\t\t\tx*=invfac[n-i];\r\n\t\t\t\tx%=mod;\r\n\t\t\t\t\r\n\t\t\t\tans+=x;\r\n\t\t\t\tans%=mod;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbw.write(ans+\"\\n\");\r\n\r\n\t\t}\r\n\t\tbw.flush();\r\n\t}\r\n\r\n\tpublic long mod(long a)\r\n\t{\r\n\t\tint mod=1000000007;\r\n\t\ta%=mod;\r\n\t\tif(a<0)\r\n\t\t\ta+=mod;\r\n\t\t\r\n\t\treturn a;\r\n\t}\r\n\r\n\tpublic long nPowerM(int n, int m)\r\n\t{\r\n\t\tif(m==0)\r\n\t\t\treturn 1L;\r\n\t\t\r\n\t\tint mod=1000000007;\r\n\t\tlong ans=nPowerM(n, m\/2);\r\n\t\tans*=ans;\r\n\t\tans%=mod;\r\n\t\t\r\n\t\tif(m%2==1)\r\n\t\t{\r\n\t\t\tans*=n;\r\n\t\t\tans%=mod;\r\n\t\t}\r\n\t\t\r\n\t\treturn ans;\r\n\t}\r\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ FOR INPUT \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n\tint[] nai(int n) { int a[]=new int[n]; for(int i=-1;++i<n;)a[i]=ni();\treturn a;}\r\n\tInteger[] naI(int n) { Integer a[]=new Integer[n]; for(int i=-1;++i<n;)a[i]=ni();\treturn a;}\r\n\tlong[] nal(int n) { long a[]=new long[n]; for(int i=-1;++i<n;)a[i]=nl();\treturn a;}\r\n\tchar[] nac()\t{char c[]=nextLine().toCharArray();\treturn c;}\r\n\tchar [][] nmc(int n)\t{char c[][]=new char[n][]; for(int i=-1;++i<n;)c[i]=nac();\treturn c;}\r\n\tint[][] nmi(int r, int c)\t{int a[][]=new int[r][c]; for(int i=-1;++i<r;)a[i]=nai(c);\treturn a;}\r\n\tString next()\r\n\t{\r\n\t\t\twhile (st == null || !st.hasMoreElements()) {\r\n\t\t\t\t\ttry {st = new StringTokenizer(br.readLine());}\r\n\t\t\t\t\tcatch (IOException e) {e.printStackTrace();}\r\n\t\t\t\t}\r\n\t\t\treturn st.nextToken();\r\n\t}\r\n\tint ni() { return Integer.parseInt(next()); }\r\n\tbyte nb() { return Byte.parseByte(next()); }\r\n\tshort ns() { return Short.parseShort(next()); }\r\n\tlong nl() { return Long.parseLong(next()); }\r\n\tdouble nd()\t{\treturn Double.parseDouble(next());\t}\r\n\tString nextLine()\r\n\t{\r\n\t\t\tString str = \"\";\r\n\t\t\ttry {str = br.readLine();}\r\n\t\t\tcatch (IOException e) {e.printStackTrace();}\r\n\t\t\treturn str;\r\n\t}\r\n}\r\n","prob_desc_sample_outputs":"[\"2\", \"3\", \"7\"]","lang_cluster":"Java","code_uid":"3c4b547325cb1c341fb5a3b8a0eed156","prob_desc_notes":"NoteIn the first example, there is only one match between players $$$1$$$ and $$$2$$$, so the sponsors can always make player $$$2$$$ wins.The tournament grid from the second example is shown in the picture in the statement.","prob_desc_output_spec":"Print exactly one integer\u00a0\u2014 the minimum number of the winner modulo $$$10^9 + 7$$$","prob_desc_output_to":"standard output","prob_desc_description":"Madoka decided to entrust the organization of a major computer game tournament \"OSU\"!In this tournament, matches are held according to the \"Olympic system\". In other words, there are $$$2^n$$$ participants in the tournament, numbered with integers from $$$1$$$ to $$$2^n$$$. There are $$$n$$$ rounds in total in the tournament. In the $$$i$$$-th round there are $$$2^{n - i}$$$ matches between two players (one of whom is right, the other is left), after which the winners go further along the tournament grid, and the losing participants are eliminated from the tournament. Herewith, the relative order in the next round does not change. And the winner of the tournament\u00a0\u2014 is the last remaining participant.But the smaller the participant's number, the more he will pay Madoka if he wins, so Madoka wants the participant with the lowest number to win. To do this, she can arrange the participants in the first round as she likes, and also determine for each match who will win\u00a0\u2014 the participant on the left or right.But Madoka knows that tournament sponsors can change the winner in matches no more than $$$k$$$ times. (That is, if the participant on the left won before the change, then the participant on the right will win after the change, and if the participant on the right won, then the participant on the left will win after the change).  So, the first image shows the tournament grid that Madoka made, where the red lines denote who should win the match. And the second one shows the tournament grid, after one change in the outcome of the match by sponsors (a match between $$$1$$$ and $$$3$$$ players). Print the minimum possible number of the winner in the tournament, which Madoka can get regardless of changes in sponsors. But since the answer can be very large, output it modulo $$$10^9 + 7$$$. Note that we need to minimize the answer, and only then take it modulo.","hidden_unit_tests":"[{\"input\": \"1 1\\n\", \"output\": [\"2\\n\", \"2 \", \"2\", \"2 \\n\", \"2\\n\\n\", \"\\n2\", \"2\\n\\n\", \"2\\n\"]}, {\"input\": \"2 1\\n\", \"output\": [\"\\n3\\n\", \"\\n3\", \"3\\n\\n\", \"3 \\n\", \"3\\n\\n\", \"3 \", \"3\\n\", \"3\\n\", \"3\"]}, {\"input\": \"3 2\\n\", \"output\": [\"7\", \"7\\n\\n\", \"\\n7\\n\", \"7\\n\", \"7 \", \"7 \\n\", \"7\\n\\n\", \"\\n7\", \"7\\n\"]}, {\"input\": \"5 3\\n\", \"output\": [\"\\n26\", \"26 \\n\", \"26\", \"26\\n\", \"\\n26\\n\", \"26\\n\\n\", \"26 \", \"26\\n\\n\", \"26\\n\"]}, {\"input\": \"5 5\\n\", \"output\": [\"32 \\n\", \"\\n32\", \"32 \", \"32\\n\\n\", \"32\", \"32\\n\", \"32\\n\\n\", \"32\\n\"]}, {\"input\": \"5 31\\n\", \"output\": [\"32 \\n\", \"\\n32\", \"32 \", \"32\\n\\n\", \"32\", \"32\\n\", \"32\\n\\n\", \"32\\n\"]}, {\"input\": \"11994 11995\\n\", \"output\": [\"685385528 \\n\", \"685385528 \", \"685385528\\n\", \"685385528\\n\", \"685385528\\n\\n\", \"\\n685385528\", \"685385528\\n\\n\", \"685385528\"]}, {\"input\": \"99999 3123\\n\", \"output\": [\"575224395\\n\", \"575224395\\n\\n\", \"575224395 \", \"575224395\\n\", \"\\n575224395\\n\", \"575224395\", \"\\n575224395\", \"575224395 \\n\", \"575224395\\n\\n\"]}, {\"input\": \"100000 1000000000\\n\", \"output\": [\"607723520\\n\", \"607723520\\n\", \"\\n607723520\", \"607723520\\n\\n\", \"607723520\\n\\n\", \"607723520 \", \"607723520\", \"607723520 \\n\"]}, {\"input\": \"100000 1\\n\", \"output\": [\"100001 \\n\", \"100001\", \"\\n100001\", \"100001\\n\\n\", \"100001 \", \"100001\\n\", \"100001\\n\\n\", \"\\n100001\\n\", \"100001\\n\"]}, {\"input\": \"100000 13\\n\", \"output\": [\"185515077\\n\", \"\\n185515077\", \"185515077\", \"185515077\\n\", \"\\n185515077\\n\", \"185515077 \\n\", \"185515077 \", \"185515077\\n\\n\", \"185515077\\n\\n\"]}, {\"input\": \"100000 53228\\n\", \"output\": [\"871774727\", \"871774727\\n\\n\", \"\\n871774727\\n\", \"871774727 \", \"871774727 \\n\", \"871774727\\n\", \"\\n871774727\", \"871774727\\n\\n\", \"871774727\\n\"]}, {\"input\": \"87532 32150\\n\", \"output\": [\"\\n165162987\", \"165162987\\n\", \"165162987\", \"165162987 \\n\", \"165162987\\n\", \"\\n165162987\\n\", \"165162987\\n\\n\", \"165162987\\n\\n\", \"165162987 \"]}, {\"input\": \"30 99999999\\n\", \"output\": [\"73741817\\n\\n\", \"73741817\\n\", \"73741817\\n\\n\", \"73741817\", \"73741817 \", \"\\n73741817\", \"73741817 \\n\", \"73741817\\n\"]}]","length":118,"num_hidden_unit_tests":14}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2600.0,"prob_desc_time_limit":"4 seconds","prob_desc_sample_inputs":"[\"1 1 1\", \"1 1 5000\", \"2 2 2\", \"998244352 1337 5000\"]","prob_desc_input_spec":"The only line contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$1 \\le n, m &lt; 998244353$$$, $$$1 \\le k \\le 5000$$$).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"e6b3e559b5fd4e05adf9f1cd1b22126b","prob_desc_created_at":"1576766100","source_code":"\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n\n        \/\/System.out.println(qmod(2,5,100));\n\n\n        long S[][]=new long[5005][5005];\n        long mod=998244353;\n        S[1][1]=1;\n        S[0][0]=0;\n        for(int i=1;i<=5000;i++){\n            S[i][i]=1;S[i][0]=0;\n        }\n        for(int i=2;i<=5000;i++){\n            for(int j=1;j<=i;j++){\n                S[i][j]=(S[i-1][j]*j%mod+S[i-1][j-1])%mod;\n            }\n        }\n        long n=sc.nextLong();long m=sc.nextLong();int k=sc.nextInt();\n        m=qmod(m,mod-2,mod);\n        long dp[]=new long[5005];dp[0]=1;\n        for(int i=1;i<=Math.min(n,k);i++)dp[i]=dp[i-1]*(n-i+1)%mod;\n\n\n        long ans=0;\n        for(int i=1;i<=Math.min(n,k);i++){\n            ans=(ans+dp[i]*qmod(m,i,mod)%mod*S[k][i]%mod)%mod;\n        }\n        System.out.println(ans);\n\n    }\n    public static long qmod(long a,long b,long mod){\n        long ans=1;\n        while(b>=1){\n\n            if((b&1)!=0){\n                ans=ans*a%mod;\n            }\n            a=a*a%mod;\n            b=b>>1;\n        }return ans;\n    }\n}\n","prob_desc_sample_outputs":"[\"1\", \"1\", \"499122178\", \"326459680\"]","lang_cluster":"Java","code_uid":"3e67988d8af9d995a69f2994c4c62a57","prob_desc_notes":null,"prob_desc_output_spec":"Print one integer \u2014 the expected value of $$$x^k$$$, taken modulo $$$998244353$$$ (the answer can always be represented as an irreducible fraction $$$\\frac{a}{b}$$$, where $$$b \\mod 998244353 \\ne 0$$$; you have to print $$$a \\cdot b^{-1} \\mod 998244353$$$).","prob_desc_output_to":"standard output","prob_desc_description":"Consider the following experiment. You have a deck of $$$m$$$ cards, and exactly one card is a joker. $$$n$$$ times, you do the following: shuffle the deck, take the top card of the deck, look at it and return it into the deck.Let $$$x$$$ be the number of times you have taken the joker out of the deck during this experiment. Assuming that every time you shuffle the deck, all $$$m!$$$ possible permutations of cards are equiprobable, what is the expected value of $$$x^k$$$? Print the answer modulo $$$998244353$$$.","hidden_unit_tests":"[{\"input\": \"1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 5000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2 2\\r\\n\", \"output\": [\"499122178\"]}, {\"input\": \"998244352 1337 5000\\r\\n\", \"output\": [\"326459680\"]}, {\"input\": \"569716410 849619604 1232\\r\\n\", \"output\": [\"551386348\"]}, {\"input\": \"569716410 849619604 5000\\r\\n\", \"output\": [\"122094144\"]}, {\"input\": \"588636954 730833344 4490\\r\\n\", \"output\": [\"389991357\"]}, {\"input\": \"588636954 730833344 5000\\r\\n\", \"output\": [\"216118622\"]}, {\"input\": \"213292922 8067309 44\\r\\n\", \"output\": [\"332601538\"]}, {\"input\": \"213292922 8067309 5000\\r\\n\", \"output\": [\"529462868\"]}, {\"input\": \"232213466 585535513 4789\\r\\n\", \"output\": [\"454306758\"]}, {\"input\": \"232213466 585535513 5000\\r\\n\", \"output\": [\"350297073\"]}, {\"input\": \"251134010 189925189 3047\\r\\n\", \"output\": [\"120053431\"]}, {\"input\": \"251134010 189925189 5000\\r\\n\", \"output\": [\"103457138\"]}]","length":46,"num_hidden_unit_tests":14}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 17 4\"]","prob_desc_input_spec":"The first line contains three positive integers k,\u2009n,\u2009w (1\u2009\u2009\u2264\u2009\u2009k,\u2009w\u2009\u2009\u2264\u2009\u20091000, 0\u2009\u2264\u2009n\u2009\u2264\u2009109), the cost of the first banana, initial number of dollars the soldier has and number of bananas he wants. ","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"e87d9798107734a885fd8263e1431347","prob_desc_created_at":"1432312200","source_code":"import java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\n\/**\n *\n *\/\npublic class TaskA {\n    public static void main(String[] args) {\n        InputStream inputStream;\n        String str = null;\n        if(str == null){\n            inputStream = System.in;\n        }else{\n            inputStream = new ByteArrayInputStream(str.getBytes());\n        }\n        \n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Solver solver = new Solver();\n        solver.solve(1, in, out);\n        out.close();\n    }\n    \n\n    static class Solver {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int cost = in.nextInt();\n            int current = in.nextInt();\n            int bananas = in.nextInt();\n            \n            int total = cost*(bananas*(bananas+1)\/2);\n        \n            System.out.println(Math.max(0,total-current));  \n        }\n    }\n    \n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n \n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n \n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n \n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n        \n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n}\n","prob_desc_sample_outputs":"[\"13\"]","lang_cluster":"Java","code_uid":"381ede732fa6a9f0793b79536401eaed","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer \u2014 the amount of dollars that the soldier must borrow from his friend. If he doesn't have to borrow money, output 0.","prob_desc_output_to":"standard output","prob_desc_description":"A soldier wants to buy w bananas in the shop. He has to pay k dollars for the first banana, 2k dollars for the second one and so on (in other words, he has to pay i\u00b7k dollars for the i-th banana). He has n dollars. How many dollars does he have to borrow from his friend soldier to buy w bananas?","hidden_unit_tests":"[{\"input\": \"3 17 4\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"1 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 5 6\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"1 1000000000 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 0 1000\\r\\n\", \"output\": [\"500500000\"]}, {\"input\": \"859 453892 543\\r\\n\", \"output\": [\"126416972\"]}, {\"input\": \"1000 1000000000 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 500500000 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 500500001 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 500499999 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"634 87973 214\\r\\n\", \"output\": [\"14497197\"]}, {\"input\": \"432 10000 241\\r\\n\", \"output\": [\"12587552\"]}, {\"input\": \"111 111111111 111\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 43 3\\r\\n\", \"output\": [\"77\"]}]","length":72,"num_hidden_unit_tests":15}
{"prob_desc_memory_limit":"512 megabytes","difficulty":2000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"7 3\", \"3 7\", \"1337 42\", \"1 1\", \"500000 1\"]","prob_desc_input_spec":"The only line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n, k \\le 5 \\cdot 10^5$$$).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"8e8eb64a047cb970a549ee870c3d280d","prob_desc_created_at":"1590676500","source_code":"\/\/ Utilities\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n\tstatic int N, K;\n\tstatic long[] fac;\n\tstatic long res = 0;\n\tstatic final int MOD = 998244353;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tN = in.iscan(); K = in.iscan(); fac = new long[N+1]; fac[0] = 1;\n\t\tfor (int i = 1; i <= N; i++) fac[i] = fac[i-1] * i % MOD;\n\t\tfor (int i = 1; i <= N; i++) {\n\t\t\tres = (res + choose(N\/i-1, K-1)) % MOD;\n\t\t}\n\t\tout.println(res);\n\t\tout.close();\n\t} \n\t\n\tstatic long choose(int n, int k) {\n\t\tif (k > n) return 0;\n\t\tlong a = fac[n];\n\t\tlong b = fac[k] * fac[n-k] % MOD;\n\t\t\/\/ b ^ prime-1 = 1 -> b ^ 998244352 = 1 -> b * (b ^ 998244351) = 1\n\t\t\/\/ -> Mod_inv = b ^ 998244351\n\t\treturn a * UTILITIES.fast_pow_mod(b, MOD-2, MOD) % MOD;\n\t}\n\n\tstatic INPUT in = new INPUT(System.in);\n\tstatic PrintWriter out = new PrintWriter(System.out);\n\tprivate static class INPUT {\n\n\t\tprivate InputStream stream;\n\t\tprivate byte[] buf = new byte[1024];\n\t\tprivate int curChar, numChars;\n\n\t\tpublic INPUT (InputStream stream) {\n\t\t\tthis.stream = stream;\n\t\t}\n\n\t\tpublic INPUT (String file) throws IOException {\n\t\t\tthis.stream = new FileInputStream (file);\n\t\t}\n\n\t\tpublic int cscan () throws IOException {\n\t\t\tif (curChar >= numChars) {\n\t\t\t\tcurChar = 0;\n\t\t\t\tnumChars = stream.read (buf);\n\t\t\t}\n\t\t\t\n\t\t\tif (numChars == -1)\n\t\t\t\treturn numChars;\n\n\t\t\treturn buf[curChar++];\n\t\t}\n\n\t\tpublic int iscan () throws IOException {\n\t\t\tint c = cscan (), sgn = 1;\n\t\t\t\n\t\t\twhile (space (c))\n\t\t\t\tc = cscan ();\n\n\t\t\tif (c == '-') {\n\t\t\t\tsgn = -1;\n\t\t\t\tc = cscan ();\n\t\t\t}\n\n\t\t\tint res = 0;\n\n\t\t\tdo {\n\t\t\t\tres = (res << 1) + (res << 3);\n\t\t\t\tres += c - '0';\n\t\t\t\tc = cscan ();\n\t\t\t}\n\t\t\twhile (!space (c));\n\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic String sscan () throws IOException {\n\t\t\tint c = cscan ();\n\t\t\t\n\t\t\twhile (space (c))\n\t\t\t\tc = cscan ();\n\n\t\t\tStringBuilder res = new StringBuilder ();\n\n\t\t\tdo {\n\t\t\t\tres.appendCodePoint (c);\n\t\t\t\tc = cscan ();\n\t\t\t}\n\t\t\twhile (!space (c));\n\n\t\t\treturn res.toString ();\n\t\t}\n\n\t\tpublic double dscan () throws IOException {\n\t\t\tint c = cscan (), sgn = 1;\n\t\t\t\n\t\t\twhile (space (c))\n\t\t\t\tc = cscan ();\n\n\t\t\tif (c == '-') {\n\t\t\t\tsgn = -1;\n\t\t\t\tc = cscan ();\n\t\t\t}\n\n\t\t\tdouble res = 0;\n\n\t\t\twhile (!space (c) && c != '.') {\n\t\t\t\tif (c == 'e' || c == 'E')\n\t\t\t\t\treturn res * UTILITIES.fast_pow (10, iscan ());\n\t\t\t\t\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = cscan ();\n\t\t\t}\n\n\t\t\tif (c == '.') {\n\t\t\t\tc = cscan ();\n\t\t\t\tdouble m = 1;\n\n\t\t\t\twhile (!space (c)) {\n\t\t\t\t\tif (c == 'e' || c == 'E')\n\t\t\t\t\t\treturn res * UTILITIES.fast_pow (10, iscan ());\n\n\t\t\t\t\tm \/= 10;\n\t\t\t\t\tres += (c - '0') * m;\n\t\t\t\t\tc = cscan ();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic long lscan () throws IOException {\n\t\t\tint c = cscan (), sgn = 1;\n\t\t\t\n\t\t\twhile (space (c))\n\t\t\t\tc = cscan ();\n\n\t\t\tif (c == '-') {\n\t\t\t\tsgn = -1;\n\t\t\t\tc = cscan ();\n\t\t\t}\n\n\t\t\tlong res = 0;\n\n\t\t\tdo {\n\t\t\t\tres = (res << 1) + (res << 3);\n\t\t\t\tres += c - '0';\n\t\t\t\tc = cscan ();\n\t\t\t}\n\t\t\twhile (!space (c));\n\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic boolean space (int c) {\n\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t\t}\n\t}\n\n\tpublic static class UTILITIES {\n\n\t\tstatic final double EPS = 10e-6;\n\n\t\tpublic static int lower_bound (int[] arr, int x) {\n\t\t\tint low = 0, high = arr.length, mid = -1;\n\n\t\t\twhile (low < high) {\n\t\t\t\tmid = (low + high) \/ 2;\n\n\t\t\t\tif (arr[mid] >= x)\n\t\t\t\t\thigh = mid;\n\t\t\t\telse\n\t\t\t\t\tlow = mid + 1;\n\t\t\t}\n\n\t\t\treturn low;\n\t\t}\n\n\t\tpublic static int upper_bound (int[] arr, int x) {\n\t\t\tint low = 0, high = arr.length, mid = -1;\n\n\t\t\twhile (low < high) {\n\t\t\t\tmid = (low + high) \/ 2;\n\n\t\t\t\tif (arr[mid] > x)\n\t\t\t\t\thigh = mid;\n\t\t\t\telse\n\t\t\t\t\tlow = mid + 1;\n\t\t\t}\n\n\t\t\treturn low;\n\t\t}\n\n\t\tpublic static long gcd (long a, long b) {\n\t\t\treturn b == 0 ? a : gcd (b, a % b);\n\t\t}\n\n\t\tpublic static long lcm (long a, long b) {\n\t\t\treturn a * b \/ gcd (a, b);\n\t\t}\n\n\t\tpublic static long fast_pow_mod (long b, long x, int mod) {\n\t\t\tif (x == 0) return 1;\n\t\t\tif (x == 1) return b;\n\t\t\tif (x % 2 == 0) return fast_pow_mod (b * b % mod, x \/ 2, mod) % mod;\n\n\t\t\treturn b * fast_pow_mod (b * b % mod, x \/ 2, mod) % mod;\n\t\t}\n\n\t\tpublic static int fast_pow (int b, int x) {\n\t\t\tif (x == 0) return 1;\n\t\t\tif (x == 1) return b;\n\t\t\tif (x % 2 == 0) return fast_pow (b * b, x \/ 2);\n\n\t\t\treturn b * fast_pow (b * b, x \/ 2);\n\t\t}\n\n\t\tpublic static long choose (long n, long k) {\n\t\t\tk = Math.min (k, n - k);\n\t\t\tlong val = 1;\n\n\t\t\tfor (int i = 0; i < k; ++i)\n\t\t\t\tval = val * (n - i) \/ (i + 1);\n\n\t\t\treturn val;\n\t\t}\n\n\t\tpublic static long permute (int n, int k) {\n\t\t\tif (n < k) return 0;\n\t\t\tlong val = 1;\n\n\t\t\tfor (int i = 0; i < k; ++i)\n\t\t\t\tval = (val * (n - i));\n\n\t\t\treturn val;\n\t\t}\n\t}\n}","prob_desc_sample_outputs":"[\"16\", \"0\", \"95147305\", \"1\", \"500000\"]","lang_cluster":"Java","code_uid":"aed44db6f353838e361c1b2a72699da6","prob_desc_notes":null,"prob_desc_output_spec":"Print one integer \u2014 the number of stable arrays $$$[a_1, a_2, \\dots, a_k]$$$ such that $$$1 \\le a_1 &lt; a_2 &lt; \\dots &lt; a_k \\le n$$$. Since the answer may be large, print it modulo $$$998244353$$$.","prob_desc_output_to":"standard output","prob_desc_description":"We define $$$x \\bmod y$$$ as the remainder of division of $$$x$$$ by $$$y$$$ ($$$\\%$$$ operator in C++ or Java, mod operator in Pascal).Let's call an array of positive integers $$$[a_1, a_2, \\dots, a_k]$$$ stable if for every permutation $$$p$$$ of integers from $$$1$$$ to $$$k$$$, and for every non-negative integer $$$x$$$, the following condition is met: $$$ (((x \\bmod a_1) \\bmod a_2) \\dots \\bmod a_{k - 1}) \\bmod a_k = (((x \\bmod a_{p_1}) \\bmod a_{p_2}) \\dots \\bmod a_{p_{k - 1}}) \\bmod a_{p_k} $$$ That is, for each non-negative integer $$$x$$$, the value of $$$(((x \\bmod a_1) \\bmod a_2) \\dots \\bmod a_{k - 1}) \\bmod a_k$$$ does not change if we reorder the elements of the array $$$a$$$.For two given integers $$$n$$$ and $$$k$$$, calculate the number of stable arrays $$$[a_1, a_2, \\dots, a_k]$$$ such that $$$1 \\le a_1 &lt; a_2 &lt; \\dots &lt; a_k \\le n$$$.","hidden_unit_tests":"[{\"input\": \"7 3\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"3 7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1337 42\\r\\n\", \"output\": [\"95147305\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"500000 1\\r\\n\", \"output\": [\"500000\"]}, {\"input\": \"500000 500000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"500000 250000\\r\\n\", \"output\": [\"803991687\"]}, {\"input\": \"250000 500000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"500 100\\r\\n\", \"output\": [\"337564072\"]}, {\"input\": \"37 13\\r\\n\", \"output\": [\"253439535\"]}, {\"input\": \"1 500000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"500000 500\\r\\n\", \"output\": [\"882447093\"]}, {\"input\": \"500000 200\\r\\n\", \"output\": [\"123055441\"]}, {\"input\": \"123456 78901\\r\\n\", \"output\": [\"963821949\"]}, {\"input\": \"500000 50\\r\\n\", \"output\": [\"635965713\"]}]","length":243,"num_hidden_unit_tests":15}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n5 10 2 3 14 5\", \"2\\n1 100\"]","prob_desc_input_spec":"The first line of the input contains one integer $$$n$$$ ($$$2 \\le n \\le 100$$$) \u2014 the number of students. It is guaranteed that $$$n$$$ is even. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 100$$$), where $$$a_i$$$ is the skill of the $$$i$$$-th student.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"55485fe203a114374f0aae93006278d3","prob_desc_created_at":"1545143700","source_code":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class TeamsForming {\n    public static final Scanner sc = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        ArrayList programmingSkill = new ArrayList();\n        byte stu = sc.nextByte();\n        short problems = 0;\n        for (int i = 0; i < stu; i++) {\n            programmingSkill.add(sc.nextInt());\n        }\n        Collections.sort(programmingSkill);\n        for (int i = 1; i < stu; i = i + 2) {\n            problems += ((int)programmingSkill.get(i) - (int)programmingSkill.get(i-1));\n        }\n        System.out.println(problems);\n    }\n}\n","prob_desc_sample_outputs":"[\"5\", \"99\"]","lang_cluster":"Java","code_uid":"b4755cf44675ace424130284bf0b46d2","prob_desc_notes":"NoteIn the first example the optimal teams will be: $$$(3, 4)$$$, $$$(1, 6)$$$ and $$$(2, 5)$$$, where numbers in brackets are indices of students. Then, to form the first team the third student should solve $$$1$$$ problem, to form the second team nobody needs to solve problems and to form the third team the second student should solve $$$4$$$ problems so the answer is $$$1 + 4 = 5$$$.In the second example the first student should solve $$$99$$$ problems to form a team with the second one.","prob_desc_output_spec":"Print one number \u2014 the minimum total number of problems students should solve to form exactly $$$\\frac{n}{2}$$$ teams.","prob_desc_output_to":"standard output","prob_desc_description":"There are $$$n$$$ students in a university. The number of students is even. The $$$i$$$-th student has programming skill equal to $$$a_i$$$. The coach wants to form $$$\\frac{n}{2}$$$ teams. Each team should consist of exactly two students, and each student should belong to exactly one team. Two students can form a team only if their skills are equal (otherwise they cannot understand each other and cannot form a team).Students can solve problems to increase their skill. One solved problem increases the skill by one.The coach wants to know the minimum total number of problems students should solve to form exactly $$$\\frac{n}{2}$$$ teams (i.e. each pair of students should form a team). Your task is to find this number.","hidden_unit_tests":"[{\"input\": \"6\\r\\n5 10 2 3 14 5\\r\\n\", \"output\": [\"5\", \"5\\n\\r\\n\", \"5\\r\\n\", \"5\\n\"]}, {\"input\": \"2\\r\\n1 100\\r\\n\", \"output\": [\"99\\n\\r\\n\", \"99\\r\\n\", \"99\", \"99\\n\"]}, {\"input\": \"100\\r\\n15 14 32 65 28 96 33 93 48 28 57 20 32 20 90 42 57 53 18 58 94 21 27 29 37 22 94 45 67 60 83 23 20 23 35 93 3 42 6 46 68 46 34 25 17 16 50 5 49 91 23 76 69 100 58 68 81 32 88 41 64 29 37 13 95 25 6 59 74 58 31 35 16 80 13 80 10 59 85 18 16 70 51 40 44 28 8 76 8 87 53 86 28 100 2 73 14 100 52 9\\r\\n\", \"output\": [\"60\\n\\r\\n\", \"60\\n\", \"60\", \"60\\r\\n\"]}, {\"input\": \"100\\r\\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"100\\r\\n45 59 59 59 45 45 45 59 45 59 45 45 59 59 45 45 45 59 45 45 45 59 45 59 59 59 45 45 45 59 45 59 59 45 45 59 59 59 59 45 59 59 45 45 45 45 59 45 59 59 59 45 45 45 59 45 45 59 59 45 45 59 45 59 59 59 59 59 59 45 45 59 45 59 59 45 45 59 59 45 59 59 45 59 59 59 45 59 45 45 59 45 59 59 45 59 59 59 59 59\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"100\\r\\n89 51 37 17 13 97 78 26 44 82 36 75 39 76 96 34 88 69 27 28 93 31 53 14 93 78 71 95 44 12 34 96 97 88 37 36 16 78 13 87 41 27 44 38 17 72 93 31 27 51 12 53 12 23 14 9 39 87 76 97 28 39 27 81 93 15 1 71 78 26 75 82 89 39 9 81 53 1 26 26 12 38 38 72 99 44 1 1 16 23 27 53 15 97 41 38 27 95 99 69\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"100\\r\\n98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39\\r\\n\", \"output\": [\"50\\r\\n\", \"50\\n\", \"50\", \"50\\n\\r\\n\"]}, {\"input\": \"100\\r\\n32 32 32 3 32 3 32 32 3 32 32 3 32 3 32 32 32 32 32 32 3 3 3 3 3 32 32 3 32 3 32 3 32 32 32 32 32 3 3 3 3 3 3 32 3 3 3 3 32 32 32 32 32 3 3 3 3 32 32 32 32 32 3 32 32 32 3 3 32 32 32 3 3 32 32 32 3 3 33 32 3 32 3 32 32 3 3 3 32 3 3 32 32 32 32 32 32 32 3 32\\r\\n\", \"output\": [\"1\", \"1\\n\", \"1\\n\\r\\n\", \"1\\r\\n\"]}, {\"input\": \"100\\r\\n31 76 76 31 31 31 31 31 31 76 31 31 76 31 31 76 31 76 31 76 31 76 76 31 31 76 76 76 31 31 31 31 31 76 31 76 31 31 31 76 76 76 76 31 76 76 31 76 76 31 76 31 31 76 31 76 31 76 31 31 76 31 31 31 31 31 76 31 31 31 31 76 31 31 31 76 76 31 31 31 76 31 76 31 76 32 77 76 76 31 76 31 31 31 76 31 31 31 76 31\\r\\n\", \"output\": [\"2\\n\\r\\n\", \"2\\n\", \"2\\r\\n\", \"2\"]}, {\"input\": \"100\\r\\n1 1 100 100 1 100 1 1 1 1 1 1 100 1 100 100 100 1 1 100 100 100 100 100 1 100 1 100 1 1 1 100 1 1 100 1 100 1 1 1 100 100 1 1 1 100 100 100 100 100 1 100 100 1 1 1 1 100 1 1 100 1 1 1 1 100 100 100 1 100 1 100 100 100 1 1 100 100 100 100 1 100 1 100 100 1 100 1 100 100 100 100 100 100 1 1 1 100 100 1\\r\\n\", \"output\": [\"99\\n\\r\\n\", \"99\\r\\n\", \"99\", \"99\\n\"]}, {\"input\": \"100\\r\\n55 2 69 13 65 71 65 8 9 87 57 43 64 53 3 74 55 31 87 5 79 47 9 29 5 31 59 1 79 97 48 91 36 40 92 37 76 73 21 44 98 55 47 1 96 63 37 83 35 8 50 54 84 100 62 98 88 1 78 57 48 46 55 49 30 100 11 39 27 61 38 55 67 16 95 25 76 67 20 46 91 91 50 33 65 64 82 30 31 42 85 78 42 29 2 69 12 50 54 79\\r\\n\", \"output\": [\"47\", \"47\\n\", \"47\\r\\n\", \"47\\n\\r\\n\"]}, {\"input\": \"2\\r\\n1 1\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"66\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"0\\n\", \"0\", \"0\\r\\n\", \"0\\n\\r\\n\"]}, {\"input\": \"4\\r\\n3 2 99 99\\r\\n\", \"output\": [\"1\", \"1\\n\", \"1\\n\\r\\n\", \"1\\r\\n\"]}, {\"input\": \"2\\r\\n1 70\\r\\n\", \"output\": [\"69\\r\\n\", \"69\\n\", \"69\\n\\r\\n\", \"69\"]}, {\"input\": \"2\\r\\n1 71\\r\\n\", \"output\": [\"70\\r\\n\", \"70\", \"70\\n\", \"70\\n\\r\\n\"]}]","length":21,"num_hidden_unit_tests":16}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 3 2 3\", \"5 3 100 1\"]","prob_desc_input_spec":"The only line contains four integers $$$k$$$, $$$n$$$, $$$s$$$, $$$p$$$ ($$$1 \\le k, n, s, p \\le 10^4$$$)\u00a0\u2014 the number of people, the number of airplanes each should make, the number of airplanes that can be made using one sheet and the number of sheets in one pack, respectively.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"73f0c7cfc06a9b04e4766d6aa61fc780","prob_desc_created_at":"1524677700","source_code":"import java.util.Scanner;\n \npublic class TestClass {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int k = in.nextInt();\n        int n = in.nextInt();\n        int s = in.nextInt();\n        int p = in.nextInt();\n        int ans = (int)Math.ceil((double)(k * (int)Math.ceil((double)n\/s)) \/ p);\n        System.out.println(ans);\n    }\n}","prob_desc_sample_outputs":"[\"4\", \"5\"]","lang_cluster":"Java","code_uid":"f6a52c18b912f66a9f7b9324f95faa90","prob_desc_notes":"NoteIn the first sample they have to buy $$$4$$$ packs of paper: there will be $$$12$$$ sheets in total, and giving $$$2$$$ sheets to each person is enough to suit everyone's needs.In the second sample they have to buy a pack for each person as they can't share sheets.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the minimum number of packs they should buy.","prob_desc_output_to":"standard output","prob_desc_description":"To make a paper airplane, one has to use a rectangular piece of paper. From a sheet of standard size you can make $$$s$$$ airplanes.A group of $$$k$$$ people decided to make $$$n$$$ airplanes each. They are going to buy several packs of paper, each of them containing $$$p$$$ sheets, and then distribute the sheets between the people. Each person should have enough sheets to make $$$n$$$ airplanes. How many packs should they buy?","hidden_unit_tests":"[{\"input\": \"5 3 2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"5 3 100 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"10000 10000 1 1\\r\\n\", \"output\": [\"100000000\"]}, {\"input\": \"1 1 10000 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"300 300 21 23\\r\\n\", \"output\": [\"196\"]}, {\"input\": \"300 2 37 51\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2 400 23 57\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000 10000 3 2\\r\\n\", \"output\": [\"16670000\"]}, {\"input\": \"1 2 1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 10 10\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5324 5439 32 13\\r\\n\", \"output\": [\"69622\"]}, {\"input\": \"9000 1 2432 1\\r\\n\", \"output\": [\"9000\"]}, {\"input\": \"230 1234 9124 23\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"11 1 1 1\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"6246 8489 1227 9\\r\\n\", \"output\": [\"4858\"]}, {\"input\": \"9 20 5 7\\r\\n\", \"output\": [\"6\"]}]","length":13,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 4\", \"2 1\"]","prob_desc_input_spec":"The only line contains two integers $$$N$$$ and $$$M$$$ ($$$1 \\leq N, M \\leq 10^9$$$) \u2014 the number of rows and columns in the grid.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"a91aab4c0618d036c81022232814ef44","prob_desc_created_at":"1662298500","source_code":"import java.util.*;\r\nimport java.math.*;\r\n\r\npublic class Dominoes {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner o = new Scanner(System.in);\r\n\t\tint n = o.nextInt(), m = o.nextInt();\r\n\t\tBigInteger b1 = BigInteger.valueOf(n), b2 = BigInteger.valueOf(m);\r\n\t\tif( n == 1 && m == 1)\r\n\t\t\tSystem.out.println(0);\r\n\t\telse if( m == 1 )\r\n\t\t\tSystem.out.println(n - 1);\r\n\t\telse\r\n\t\t\tSystem.out.println(BigInteger.valueOf(m - 1).multiply(b1));\r\n\t}\r\n}\r\n","prob_desc_sample_outputs":"[\"9\", \"1\"]","lang_cluster":"Java","code_uid":"a2ed0a25ce6ea31ecdb5e41cb2263289","prob_desc_notes":"NoteThe picture below is the grid that Pak Chanek has in the first example.  The picture below is an example of a tight domino in the grid.  ","prob_desc_output_spec":"An integer representing the number of distinct tight dominoes in the grid.","prob_desc_output_to":"standard output","prob_desc_description":"Pak Chanek has a grid that has $$$N$$$ rows and $$$M$$$ columns. Each row is numbered from $$$1$$$ to $$$N$$$ from top to bottom. Each column is numbered from $$$1$$$ to $$$M$$$ from left to right.Each tile in the grid contains a number. The numbers are arranged as follows:   Row $$$1$$$ contains integers from $$$1$$$ to $$$M$$$ from left to right.  Row $$$2$$$ contains integers from $$$M+1$$$ to $$$2 \\times M$$$ from left to right.  Row $$$3$$$ contains integers from $$$2 \\times M+1$$$ to $$$3 \\times M$$$ from left to right.  And so on until row $$$N$$$. A domino is defined as two different tiles in the grid that touch by their sides. A domino is said to be tight if and only if the two numbers in the domino have a difference of exactly $$$1$$$. Count the number of distinct tight dominoes in the grid.Two dominoes are said to be distinct if and only if there exists at least one tile that is in one domino, but not in the other.","hidden_unit_tests":"[{\"input\": \"3 4\\n\", \"output\": [\"\\n9\", \"9\", \"9\\n\\n\", \"9\\n\\n\", \"\\n\\n\\n9\\n\", \"9\\n\", \"\\n9\\n\", \"\\n\\n\\n\\n\\n\\n\\n\\n9\\n\", \"9\\n\"]}, {\"input\": \"2 1\\n\", \"output\": [\"\\n1\", \"1\\n\", \"1\", \"1\\n\\n\", \"\\n1\\n\", \"1\\n\\n\", \"\\n\\n1\\n\", \"1\\n\", \"\\n\\n\\n\\n\\n1\\n\"]}, {\"input\": \"1 1\\n\", \"output\": [\"\\n0\\n\", \"\\n0\", \"0\\n\\n\", \"0\\n\\n\", \"0\\n\", \"0\\n\", \"\\n\\n0\\n\", \"0\"]}, {\"input\": \"1 2\\n\", \"output\": [\"\\n1\", \"1\\n\", \"1\", \"1\\n\\n\", \"\\n1\\n\", \"1\\n\\n\", \"\\n\\n1\\n\", \"1\\n\"]}, {\"input\": \"2 2\\n\", \"output\": [\"2\\n\", \"2\", \"\\n\\n\\n\\n\\n2\\n\", \"2\\n\\n\", \"\\n\\n2\\n\", \"\\n2\", \"2\\n\\n\", \"\\n2\\n\", \"2\\n\"]}, {\"input\": \"1 1000000000\\n\", \"output\": [\"999999999\\n\", \"\\n999999999\\n\", \"\\n999999999\", \"999999999\\n\", \"999999999\\n\\n\", \"999999999\", \"999999999\\n\\n\"]}, {\"input\": \"1 999999997\\n\", \"output\": [\"999999996\\n\\n\", \"\\n999999996\", \"999999996\\n\\n\", \"999999996\\n\", \"999999996\\n\", \"\\n999999996\\n\", \"999999996\"]}, {\"input\": \"1 589284012\\n\", \"output\": [\"589284011\\n\", \"\\n589284011\", \"589284011\", \"589284011\\n\\n\", \"589284011\\n\\n\", \"\\n589284011\\n\", \"589284011\\n\"]}, {\"input\": \"1000000000 1\\n\", \"output\": [\"999999999\\n\", \"\\n999999999\\n\", \"\\n999999999\", \"999999999\\n\", \"999999999\\n\\n\", \"999999999\", \"999999999\\n\\n\"]}, {\"input\": \"999999999 1\\n\", \"output\": [\"\\n999999998\", \"\\n999999998\\n\", \"999999998\", \"999999998\\n\\n\", \"999999998\\n\", \"999999998\\n\\n\", \"999999998\\n\"]}, {\"input\": \"636562060 1\\n\", \"output\": [\"\\n636562059\", \"636562059\\n\\n\", \"636562059\\n\", \"636562059\", \"\\n636562059\\n\", \"636562059\\n\", \"636562059\\n\\n\"]}, {\"input\": \"2 1000000000\\n\", \"output\": [\"1999999998\\n\\n\", \"\\n1999999998\\n\", \"1999999998\\n\", \"1999999998\", \"1999999998\\n\", \"\\n1999999998\", \"1999999998\\n\\n\"]}, {\"input\": \"1000000000 2\\n\", \"output\": [\"1000000000\", \"1000000000\\n\\n\", \"1000000000\\n\", \"1000000000\\n\", \"\\n1000000000\", \"\\n1000000000\\n\", \"1000000000\\n\\n\"]}, {\"input\": \"30001 30001\\n\", \"output\": [\"900030000\\n\", \"\\n900030000\\n\", \"900030000\", \"\\n900030000\", \"900030000\\n\\n\", \"900030000\\n\\n\", \"900030000\\n\"]}, {\"input\": \"1000000000 1000000000\\n\", \"output\": [\"999999999000000000\\n\", \"999999999000000000\\n\\n\", \"999999999000000000\\n\\n\", \"999999999000000000\\n\", \"999999999000000000\"]}, {\"input\": \"767928735 1000000000\\n\", \"output\": [\"767928734232071265\\n\\n\", \"767928734232071265\\n\", \"767928734232071265\\n\\n\", \"767928734232071265\\n\", \"767928734232071265\"]}, {\"input\": \"1000000000 906523442\\n\", \"output\": [\"906523441000000000\\n\\n\", \"906523441000000000\", \"906523441000000000\\n\", \"906523441000000000\\n\\n\", \"906523441000000000\\n\"]}, {\"input\": \"647242241 921242095\\n\", \"output\": [\"596266797424092654\\n\", \"596266797424092654\\n\\n\", \"596266797424092654\\n\", \"596266797424092654\", \"596266797424092654\\n\\n\"]}]","length":16,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"512 megabytes","difficulty":1200.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"21\", \"20\"]","prob_desc_input_spec":"The first line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"ae20ae2a16273a0d379932d6e973f878","prob_desc_created_at":"1508151900","source_code":"import java.io.*;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\n\/**\n *\n * @author arif_\n * @date\n * @algo\n * @difficulty\n *\/\npublic class CF_876C {\n    \/* START OF I\/O ROUTINE *\/\n    \/\/ PrintWriter for faster output\n    public static PrintWriter out;\n\n    \/\/ MyInputReader class for faster input\n    public static class MyInputReader {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public MyInputReader(InputStream stream) {\n            br = new BufferedReader(new InputStreamReader(stream), 32768);\n        }\n\n        String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        String nextLine(){\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n    } \/\/ end of class MyInputReader\n    \/* END OF I\/O ROUTINE *\/\n\n\n    public static void main(String[] args) {\n        MyInputReader in = new MyInputReader(System.in);\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n\n        int n = in.nextInt();\n\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i=81; i>=1; i--) {\n            if (i >= n) continue;\n\n            int x = n - i;\n            int sum = 0, y = x;\n            while (y > 0) {\n                sum += (y % 10);\n                y \/= 10;\n            }\n\n            if (sum+x == n) ans.add(x);\n        }\n\n        out.println(ans.size());\n        for (Integer a : ans) {\n            out.println(a);\n        }\n        out.close();\n    } \/\/ end of method main()\n} \/\/ end of class Main","prob_desc_sample_outputs":"[\"1\\n15\", \"0\"]","lang_cluster":"Java","code_uid":"19022bb77b10a26d5642bdcae654dfeb","prob_desc_notes":"NoteIn the first test case x\u2009=\u200915 there is only one variant: 15\u2009+\u20091\u2009+\u20095\u2009=\u200921.In the second test case there are no such x.","prob_desc_output_spec":"In the first line print one integer k\u00a0\u2014 number of different values of x satisfying the condition.  In next k lines print these values in ascending order.","prob_desc_output_to":"standard output","prob_desc_description":"Eighth-grader Vova is on duty today in the class. After classes, he went into the office to wash the board, and found on it the number n. He asked what is this number and the teacher of mathematics Inna Petrovna answered Vova that n is the answer to the arithmetic task for first-graders. In the textbook, a certain positive integer x was given. The task was to add x to the sum of the digits of the number x written in decimal numeral system.Since the number n on the board was small, Vova quickly guessed which x could be in the textbook. Now he wants to get a program which will search for arbitrary values of the number n for all suitable values of x or determine that such x does not exist. Write such a program for Vova.","hidden_unit_tests":"[{\"input\": \"21\\r\\n\", \"output\": [\"1\\r\\n15\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100000001\\r\\n\", \"output\": [\"2\\r\\n99999937\\r\\n 100000000\", \"2\\r\\n99999937 100000000\", \"2\\r\\n99999937\\r\\n100000000\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"1\\r\\n999999932\"]}, {\"input\": \"999999979\\r\\n\", \"output\": [\"2\\r\\n999999899\\r\\n 999999908\", \"2\\r\\n999999899 999999908\", \"2\\r\\n999999899\\r\\n999999908\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"1\\r\\n5\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"1\\r\\n10\"]}, {\"input\": \"39\\r\\n\", \"output\": [\"1\\r\\n33\"]}, {\"input\": \"66\\r\\n\", \"output\": [\"1\\r\\n60\"]}, {\"input\": \"75\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"1\\r\\n86\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"2\\r\\n91\\r\\n100\", \"2\\r\\n91\\r\\n 100\", \"2\\r\\n91 100\"]}, {\"input\": \"2014\\r\\n\", \"output\": [\"2\\r\\n1988\\r\\n2006\", \"2\\r\\n1988 2006\", \"2\\r\\n1988\\r\\n 2006\"]}, {\"input\": \"999999994\\r\\n\", \"output\": [\"0\"]}]","length":88,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 2\", \"2 4\"]","prob_desc_input_spec":"The only line contains two space separated integers $$$w$$$, $$$h$$$\u00a0($$$1 \\leq w,h \\leq 1\\,000$$$)\u00a0\u2014\u00a0the width and height of the kitchen, measured in tiles.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"8b2a9ae21740c89079a6011a30cd6aee","prob_desc_created_at":"1563636900","source_code":"import java.util.Scanner;\n\npublic class CFTiles {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint w = scanner.nextInt();\n\t\tint h = scanner.nextInt();\n\t\tint ans = 4;\n\t\tfor(int i = 1; i < w;i++) {\n\t\t\tans = (ans*2)%998244353;\n\t\t}\n\t\tfor(int  i = 1; i < h;i++) {\n\t\t\tans = (ans*2)%998244353;\n\t\t}\n\t\tSystem.out.println(ans);\n\t\tscanner.close();\n\t}\n\n}","prob_desc_sample_outputs":"[\"16\", \"64\"]","lang_cluster":"Java","code_uid":"ad1156644178a0439401117f2490676f","prob_desc_notes":null,"prob_desc_output_spec":"Output a single integer $$$n$$$\u00a0\u2014\u00a0the remainder of the number of tilings when divided by $$$998244353$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Bob is decorating his kitchen, more precisely, the floor. He has found a prime candidate for the tiles he will use. They come in a simple form factor\u00a0\u2014\u00a0a square tile that is diagonally split into white and black part as depicted in the figure below.  The dimension of this tile is perfect for this kitchen, as he will need exactly $$$w \\times h$$$ tiles without any scraps. That is, the width of the kitchen is $$$w$$$ tiles, and the height is $$$h$$$ tiles. As each tile can be rotated in one of four ways, he still needs to decide on how exactly he will tile the floor. There is a single aesthetic criterion that he wants to fulfil: two adjacent tiles must not share a colour on the edge\u00a0\u2014\u00a0i.e. one of the tiles must have a white colour on the shared border, and the second one must be black.    The picture on the left shows one valid tiling of a $$$3 \\times 2$$$ kitchen. The picture on the right shows an invalid arrangement, as the bottom two tiles touch with their white parts. Find the number of possible tilings. As this number may be large, output its remainder when divided by $$$998244353$$$ (a prime number). ","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"2 4\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"20 10\\r\\n\", \"output\": [\"75497471\"]}, {\"input\": \"1000 1000\\r\\n\", \"output\": [\"708964705\"]}, {\"input\": \"1 1000\\r\\n\", \"output\": [\"46452554\"]}, {\"input\": \"1000 122\\r\\n\", \"output\": [\"712990290\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"15 22\\r\\n\", \"output\": [\"679477111\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"2 5\\r\\n\", \"output\": [\"128\"]}, {\"input\": \"432 333\\r\\n\", \"output\": [\"726933080\"]}, {\"input\": \"17 23\\r\\n\", \"output\": [\"444595123\"]}, {\"input\": \"843 134\\r\\n\", \"output\": [\"230806096\"]}, {\"input\": \"912 584\\r\\n\", \"output\": [\"626052968\"]}, {\"input\": \"88 88\\r\\n\", \"output\": [\"412395273\"]}, {\"input\": \"3 16\\r\\n\", \"output\": [\"524288\"]}]","length":20,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"xaxxxxa\", \"aaabaa\"]","prob_desc_input_spec":"The first line contains a string $$$s$$$ ($$$1 \\leq |s| \\leq 50$$$) consisting of lowercase English letters. It is guaranteed that there is at least one \"a\" in $$$s$$$.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"84cb9ad2ae3ba7e912920d7feb4f6219","prob_desc_created_at":"1555783500","source_code":"import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        String s=sc.next();\n        int a=0;\n        for (int i = 0; i < s.length(); i++) {\n            if(s.charAt(i)=='a'){\n                a++;\n            }\n        }\n        int tama\u00f1o=s.length();\n        while(true){\n            if(a>tama\u00f1o\/2){\n                System.out.println(tama\u00f1o);\n                break;\n            }else{\n                tama\u00f1o--;\n            }\n        }\n    }\n}\n","prob_desc_sample_outputs":"[\"3\", \"6\"]","lang_cluster":"Java","code_uid":"2ad3b7026243e7eb7ac7a3eb945d8aa2","prob_desc_notes":"NoteIn the first example, it's enough to erase any four of the \"x\"s. The answer is $$$3$$$ since that is the maximum number of characters that can remain.In the second example, we don't need to erase any characters.","prob_desc_output_spec":"Print a single integer, the length of the longest good string that Alice can get after erasing some characters from $$$s$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Alice has a string $$$s$$$. She really likes the letter \"a\". She calls a string good if strictly more than half of the characters in that string are \"a\"s. For example \"aaabb\", \"axaa\" are good strings, and \"baca\", \"awwwa\", \"\" (empty string) are not.Alice can erase some characters from her string $$$s$$$. She would like to know what is the longest string remaining after erasing some characters (possibly zero) to get a good string. It is guaranteed that the string has at least one \"a\" in it, so the answer always exists.","hidden_unit_tests":"[{\"input\": \"xaxxxxa\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"aaabaa\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"ababababababababababababababababababababababababav\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"abababababababababababababababababababababababava\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"abababababababababababababababababababababababavv\\r\\n\", \"output\": [\"47\"]}, {\"input\": \"a\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"ap\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"dya\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"qyax\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"ahaos\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"caidsucitzpblhucxnzcdupstfoourafborgyqwvaymdk\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"wqufdkunalpjjmeolduzppvzabhytailycojjhnsykfhim\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"qfggoxltgxqqirqazusxblbhhuajrjrsuojnwvdnzwymhjx\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"kvujzkexnkqygxalmlpupghpqqsvqsabpbgrhmwixfroghpm\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"ckhklxvduyregcmxabkrbcnxxjlgoaiikpbvuamdvrksefigx\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"yqahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiab\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"ass\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"xaxax\\r\\n\", \"output\": [\"3\"]}]","length":24,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3\\n1 4 6\", \"5\\n1 2 3 4 5\", \"5\\n1 2 3 7 8\"]","prob_desc_input_spec":"The first line contains a single integer n (3\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of holds. The next line contains n space-separated integers ai (1\u2009\u2264\u2009ai\u2009\u2264\u20091000), where ai is the height where the hold number i hangs. The sequence ai is increasing (i.e. each element except for the first one is strictly larger than the previous one).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"8a8013f960814040ac4bf229a0bd5437","prob_desc_created_at":"1418833800","source_code":"import java.io.*;\nimport java.util.*;\n\npublic class Minimum{\n    \n    public static void main(String[] args) throws IOException{\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[]tab = new int [n];\n        \/*\n        BufferedReader br = new BufferedReader( \n                            new InputStreamReader(System.in)); \n        \/\/int a=Integer.parseInt(br.readLine()) ;         \n\n        StringTokenizer st = new StringTokenizer(br.readLine()); \n        *\/\n        for (int i = 0; i<n;i++){\n            tab[i] = sc.nextInt();   \n        }\n        int x;\n        int max = Math.abs(tab[0]-tab[n-1]);\n        \n        for (int j = 1;j<n-1;j++){\n            int tre = 0;\n            for (int l =0;l<n-1;l++){\n\n                x = tab[l+1]-tab[l];\n\n                if (l+1==j){\n                    x=tab[l+2]-tab[l];\n                }\n                else if (l==j){\n                    x = tab[l+1]-tab[l-1];\n                }\n                \n\n                \n                tre = Math.max(x,tre);\n\n                \/*\n\n                if(l!=j&&l+1!=j&&tab[l+1]-tab[l]>tre){\n                    tre= tab[l+1]-tab[l];\n                }\n                else if (l==j&&tab[l+1]-tab[l-1]>tre){\n                    tre= tab[l+1]-tab[l-1];\n                }\n                else if (l+1==j&&tab[l+2]-tal[l]>tre){\n                    tre = tab[l+2]-tab[l]; \n                }\n                *\/\n\n            }\n\n            if (tre<max){\n                max= tre;\n            }\n        }\n    \n        System.out.print(max);\n    }\n}\n","prob_desc_sample_outputs":"[\"5\", \"2\", \"4\"]","lang_cluster":"Java","code_uid":"ab855196fe30b363445f0cc48faf0c6a","prob_desc_notes":"NoteIn the first sample you can remove only the second hold, then the sequence looks like (1,\u20096), the maximum difference of the neighboring elements equals 5.In the second test after removing every hold the difficulty equals 2.In the third test you can obtain sequences (1,\u20093,\u20097,\u20098), (1,\u20092,\u20097,\u20098), (1,\u20092,\u20093,\u20098), for which the difficulty is 4, 5 and 5, respectively. Thus, after removing the second element we obtain the optimal answer \u2014 4.","prob_desc_output_spec":"Print a single number \u2014 the minimum difficulty of the track after removing a single hold.","prob_desc_output_to":"standard output","prob_desc_description":"Mike is trying rock climbing but he is awful at it. There are n holds on the wall, i-th hold is at height ai off the ground. Besides, let the sequence ai increase, that is, ai\u2009&lt;\u2009ai\u2009+\u20091 for all i from 1 to n\u2009-\u20091; we will call such sequence a track. Mike thinks that the track a1, ..., an has difficulty . In other words, difficulty equals the maximum distance between two holds that are adjacent in height.Today Mike decided to cover the track with holds hanging on heights a1, ..., an. To make the problem harder, Mike decided to remove one hold, that is, remove one element of the sequence (for example, if we take the sequence (1,\u20092,\u20093,\u20094,\u20095) and remove the third element from it, we obtain the sequence (1,\u20092,\u20094,\u20095)). However, as Mike is awful at climbing, he wants the final difficulty (i.e. the maximum difference of heights between adjacent holds after removing the hold) to be as small as possible among all possible options of removing a hold. The first and last holds must stay at their positions.Help Mike determine the minimum difficulty of the track after removing one hold.","hidden_unit_tests":"[{\"input\": \"3\\r\\n1 4 6\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"5\\r\\n1 2 3 4 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\n1 2 3 7 8\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3\\r\\n1 500 1000\\r\\n\", \"output\": [\"999\"]}, {\"input\": \"10\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n1 4 9 16 25 36 49 64 81 100\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"10\\r\\n300 315 325 338 350 365 379 391 404 416\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"15\\r\\n87 89 91 92 93 95 97 99 101 103 105 107 109 111 112\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"60\\r\\n3 5 7 8 15 16 18 21 24 26 40 41 43 47 48 49 50 51 52 54 55 60 62 71 74 84 85 89 91 96 406 407 409 412 417 420 423 424 428 431 432 433 436 441 445 446 447 455 458 467 469 471 472 475 480 485 492 493 497 500\\r\\n\", \"output\": [\"310\"]}, {\"input\": \"3\\r\\n159 282 405\\r\\n\", \"output\": [\"246\"]}, {\"input\": \"81\\r\\n6 7 22 23 27 38 40 56 59 71 72 78 80 83 86 92 95 96 101 122 125 127 130 134 154 169 170 171 172 174 177 182 184 187 195 197 210 211 217 223 241 249 252 253 256 261 265 269 274 277 291 292 297 298 299 300 302 318 338 348 351 353 381 386 387 397 409 410 419 420 428 430 453 460 461 473 478 493 494 500 741\\r\\n\", \"output\": [\"241\"]}, {\"input\": \"10\\r\\n218 300 388 448 535 629 680 740 836 925\\r\\n\", \"output\": [\"111\"]}, {\"input\": \"100\\r\\n6 16 26 36 46 56 66 76 86 96 106 116 126 136 146 156 166 176 186 196 206 216 226 236 246 256 266 276 286 296 306 316 326 336 346 356 366 376 386 396 406 416 426 436 446 456 466 476 486 496 506 516 526 536 546 556 566 576 586 596 606 616 626 636 646 656 666 676 686 696 706 716 726 736 746 756 766 776 786 796 806 816 826 836 846 856 866 876 886 896 906 916 926 936 946 956 966 976 986 996\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000\\r\\n\", \"output\": [\"901\"]}, {\"input\": \"100\\r\\n1 9 15 17 28 29 30 31 32 46 48 49 52 56 62 77 82 85 90 91 94 101 102 109 111 113 116 118 124 125 131 132 136 138 139 143 145 158 161 162 165 167 171 173 175 177 179 183 189 196 801 802 804 806 817 819 827 830 837 840 842 846 850 855 858 862 863 866 869 870 878 881 883 884 896 898 899 901 904 906 908 909 910 911 912 917 923 924 925 935 939 943 945 956 963 964 965 972 976 978\\r\\n\", \"output\": [\"605\"]}, {\"input\": \"100\\r\\n2 43 47 49 50 57 59 67 74 98 901 903 904 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 938 939 940 942 943 944 945 946 947 948 949 950 952 953 954 956 957 958 959 960 961 962 963 965 966 967 968 969 970 971 972 973 974 975 976 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 998 999\\r\\n\", \"output\": [\"803\"]}, {\"input\": \"72\\r\\n178 186 196 209 217 226 236 248 260 273 281 291 300 309 322 331 343 357 366 377 389 399 409 419 429 442 450 459 469 477 491 501 512 524 534 548 557 568 582 593 602 616 630 643 652 660 670 679 693 707 715 728 737 750 759 768 776 789 797 807 815 827 837 849 863 873 881 890 901 910 920 932\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"38\\r\\n1 28 55 82 109 136 163 190 217 244 271 298 325 352 379 406 433 460 487 514 541 568 595 622 649 676 703 730 757 784 811 838 865 892 919 946 973 1000\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"28\\r\\n1 38 75 112 149 186 223 260 297 334 371 408 445 482 519 556 593 630 667 704 741 778 815 852 889 926 963 1000\\r\\n\", \"output\": [\"74\"]}]","length":62,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"6\\n0 0 0 0 0\\n1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 0 1\", \"3\\n0 0 1 2 0\\n0 0 9 2 0\\n0 0 5 9 0\"]","prob_desc_input_spec":"The first line of input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009103)\u00a0\u2014 the number of points. The next n lines of input contain five integers ai,\u2009bi,\u2009ci,\u2009di,\u2009ei (|ai|,\u2009|bi|,\u2009|ci|,\u2009|di|,\u2009|ei|\u2009\u2264\u2009103) \u00a0\u2014 the coordinates of the i-th point. All points are distinct.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"c1cfe1f67217afd4c3c30a6327e0add9","prob_desc_created_at":"1504535700","source_code":"import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.HashSet;\nimport java.util.StringTokenizer;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.io.InputStream;\n\n\/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Anand Iyer\n *\/\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskC {\n        public static boolean angle(TaskC.Point a, TaskC.Point b) {\n            double amag = a.mag();\n            double bmag = b.mag();\n            double abmag = a.v * b.v + a.w * b.w + a.x * b.x + a.y * b.y + a.z * b.z;\n            double angle = Math.toDegrees(Math.acos(abmag \/ (amag * bmag)));\n            if (angle < 90) {\n                return true;\n            }\n            return false;\n        }\n\n        public void solve(int testNumber, FastScanner in, PrintWriter out) {\n            int n = in.nextInt();\n            if (n > 11) {\n                out.println(\"0\");\n            } else {\n                HashSet<Integer> good = new HashSet<Integer>();\n                ArrayList<TaskC.Point> arr = new ArrayList<>();\n                for (int i = 0; i < n; i++) {\n                    int a = in.nextInt();\n                    int b = in.nextInt();\n                    int c = in.nextInt();\n                    int d = in.nextInt();\n                    int e = in.nextInt();\n                    TaskC.Point p = new TaskC.Point(a, b, c, d, e);\n                    arr.add(p);\n                }\n                for (int i = 0; i < n; i++) {\n                    boolean b = true;\n                    for (int j = 0; j < n; j++) {\n                        for (int k = 0; k < n; k++) {\n                            if (i != j && i != k && j != k) {\n                                TaskC.Point one = arr.get(j);\n                                TaskC.Point two = arr.get(k);\n                                TaskC.Point three = arr.get(i);\n                                TaskC.Point lol2 = new TaskC.Point(one.v - three.v, one.w - three.w, one.x - three.x, one.y - three.y, one.z - three.z);\n                                TaskC.Point lol1 = new TaskC.Point(two.v - three.v, two.w - three.w, two.x - three.x, two.y - three.y, two.z - three.z);\n                                if (angle(lol1, lol2)) {\n                                    b = false;\n                                }\n                            }\n                        }\n                    }\n                    if (b) {\n                        good.add(i + 1);\n                    }\n                }\n                if (good.size() == 0) {\n                    out.println(\"0\");\n                } else {\n                    out.println(good.size());\n                    for (int i : good) {\n                        out.println(i);\n                    }\n                }\n            }\n        }\n\n        public static class Point {\n            int v;\n            int w;\n            int x;\n            int y;\n            int z;\n\n            public Point(int a, int b, int c, int d, int e) {\n                v = a;\n                w = b;\n                x = c;\n                y = d;\n                z = e;\n            }\n\n            public double mag() {\n                return Math.sqrt(v * v + w * w + x * x + y * y + z * z);\n            }\n\n        }\n\n    }\n\n    static class FastScanner {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public FastScanner(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n    }\n}\n\n","prob_desc_sample_outputs":"[\"1\\n1\", \"0\"]","lang_cluster":"Java","code_uid":"ec19eddfbc9f3be2db0a6dbe94f7080d","prob_desc_notes":"NoteIn the first sample, the first point forms exactly a  angle with all other pairs of points, so it is good.In the second sample, along the cd plane, we can see the points look as follows:We can see that all angles here are acute, so no points are good.","prob_desc_output_spec":"First, print a single integer k\u00a0\u2014 the number of good points. Then, print k integers, each on their own line\u00a0\u2014 the indices of the good points in ascending order.","prob_desc_output_to":"standard output","prob_desc_description":"You are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.We will call point a bad if there are different points b and c, not equal to a, from the given set such that angle between vectors  and  is acute (i.e. strictly less than ). Otherwise, the point is called good.The angle between vectors  and  in 5-dimensional space is defined as , where  is the scalar product and  is length of .Given the list of points, print the indices of the good points in ascending order.","hidden_unit_tests":"[{\"input\": \"6\\r\\n0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 0 1 0 0\\r\\n0 0 0 1 0\\r\\n0 0 0 0 1\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"3\\r\\n0 0 1 2 0\\r\\n0 0 9 2 0\\r\\n0 0 5 9 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"2\\r\\n0 1 2 3 4\\r\\n5 6 7 8 9\\r\\n\", \"output\": [\"2\\r\\n1\\r\\n2\"]}, {\"input\": \"992\\r\\n-1000 -1000 1000 -30 -1000\\r\\n-1000 -1000 -1000 -1000 -50\\r\\n-30 1000 1000 -1000 1000\\r\\n-1000 -60 -1000 -1000 1000\\r\\n1000 -10 -1000 -1000 1000\\r\\n1000 1000 -1000 -60 -1000\\r\\n1000 1000 1000 0 -1000\\r\\n-30 1000 -1000 -1000 1000\\r\\n1000 1000 -1000 20 -1000\\r\\n1000 -1000 1000 -1000 -20\\r\\n-1000 -1000 1000 -20 -1000\\r\\n-1000 -10 -1000 1000 -1000\\r\\n-1000 20 -1000 -1000 -1000\\r\\n1000 1000 1000 0 1000\\r\\n40 1000 -1000 1000 1000\\r\\n1000 -1000 -40 -1000 1000\\r\\n-1000 1000 1000 -40 -1000\\r\\n1000 20 -1000 -1000 -1000\\r\\n-1000 -50 1000 -1000 -10...\", \"output\": [\"0\"]}, {\"input\": \"960\\r\\n-30 -1000 1000 1000 -1000\\r\\n1000 -1000 -20 1000 -1000\\r\\n1000 1000 1000 1000 -20\\r\\n-60 1000 1000 1000 1000\\r\\n-30 1000 1000 1000 1000\\r\\n-1000 -1000 50 -1000 -1000\\r\\n1000 -50 -1000 1000 1000\\r\\n20 1000 1000 1000 -1000\\r\\n1000 1000 1000 10 1000\\r\\n-1000 -1000 40 1000 1000\\r\\n10 -1000 -1000 1000 -1000\\r\\n1000 -1000 1000 -1000 30\\r\\n-1000 -1000 -20 -1000 -1000\\r\\n1000 -1000 -40 -1000 -1000\\r\\n-1000 -40 -1000 1000 -1000\\r\\n1000 1000 -1000 0 -1000\\r\\n1000 1000 -1000 -1000 40\\r\\n-1000 1000 -30 1000 1000\\r\\n1000 -1000 50 -1000 -1000\\r\\n1000 -...\", \"output\": [\"0\"]}, {\"input\": \"768\\r\\n715 -250 -245 715 -130\\r\\n325 -425 175 650 -650\\r\\n325 -25 60 455 -650\\r\\n65 125 545 -65 -455\\r\\n260 -325 -65 455 -195\\r\\n455 -550 -370 715 65\\r\\n325 325 65 -455 -650\\r\\n325 -200 480 390 -650\\r\\n-65 -200 -365 -195 455\\r\\n260 275 185 455 -195\\r\\n-65 125 545 -65 455\\r\\n455 200 365 195 65\\r\\n260 -775 170 -65 -195\\r\\n520 -500 -490 -195 -390\\r\\n-65 -725 50 650 455\\r\\n0 -250 -245 715 0\\r\\n-65 -50 120 910 455\\r\\n260 -200 480 390 -195\\r\\n-195 25 -60 -455 -260\\r\\n0 -50 120 910 0\\r\\n260 -875 410 130 -195\\r\\n195 100 -240 -195 260\\r\\n-65 225 305 -260 455\\r\\n...\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n0 -110 68 -51 -155\\r\\n-85 -110 68 -51 -155\\r\\n85 -70 51 68 -230\\r\\n0 -40 51 68 75\\r\\n0 5 -51 -68 -190\\r\\n85 0 0 0 0\\r\\n85 -115 -68 51 35\\r\\n85 -75 -187 34 -40\\r\\n-85 -110 -136 102 -155\\r\\n85 -110 -17 119 -155\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6\\r\\n-305 -390 638 -623 343\\r\\n479 755 -343 144 89\\r\\n-268 843 -461 989 -301\\r\\n-986 -274 347 -847 -728\\r\\n278 718 -372 -674 270\\r\\n-477 562 -489 -858 611\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n-705 38 170 -768 689\\r\\n-705 86 248 -768 709\\r\\n-705 86 170 -742 709\\r\\n-705 86 144 -768 709\\r\\n-705 86 170 -820 709\\r\\n-705 106 170 -768 661\\r\\n-822 86 170 -768 709\\r\\n-705 98 170 -768 714\\r\\n-705 86 170 -768 709\\r\\n-601 86 170 -768 709\\r\\n\", \"output\": [\"1\\r\\n9\"]}, {\"input\": \"11\\r\\n358 -724 -232 53 -520\\r\\n486 -554 -328 53 -220\\r\\n358 -554 -232 -372 -520\\r\\n358 -554 -232 308 -520\\r\\n868 -554 448 53 -520\\r\\n478 -554 -322 53 -600\\r\\n358 296 -232 53 -520\\r\\n256 -554 -368 53 -520\\r\\n230 -554 -136 53 -820\\r\\n-182 -554 173 53 -160\\r\\n358 -554 -232 53 -520\\r\\n\", \"output\": [\"1\\r\\n11\"]}, {\"input\": \"8\\r\\n-559 581 509 257 343\\r\\n-544 451 569 277 343\\r\\n-451 451 434 401 343\\r\\n-559 451 509 257 83\\r\\n-664 451 89 117 343\\r\\n-559 451 509 257 993\\r\\n-715 451 509 374 343\\r\\n-811 451 684 -79 343\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999\\r\\n-301 26 -665 194 -96\\r\\n-901 -537 578 418 152\\r\\n346 -572 111 785 -659\\r\\n-774 433 -503 655 -778\\r\\n-314 -17 493 869 -509\\r\\n548 -725 -570 -491 -325\\r\\n-957 448 -556 985 -810\\r\\n270 -748 -397 -488 -561\\r\\n-247 -96 494 -759 731\\r\\n91 -380 37 537 191\\r\\n-466 262 -76 -70 500\\r\\n206 160 698 -714 -277\\r\\n845 456 -813 316 514\\r\\n467 -950 286 310 735\\r\\n521 -141 -148 559 299\\r\\n-396 379 947 462 668\\r\\n570 -879 -520 -383 55\\r\\n705 350 -191 368 -39\\r\\n698 -23 987 237 -204\\r\\n-808 -190 559 4 -227\\r\\n563 -172 -987 -265 -908\\r\\n451 -117 -217 -849 239\\r\\n93...\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n8 8 8 8 8\\r\\n2 2 2 2 2\\r\\n0 0 0 0 0\\r\\n6 6 6 6 6\\r\\n7 7 7 7 7\\r\\n10 10 10 10 10\\r\\n9 9 9 9 9\\r\\n3 3 3 3 3\\r\\n1 1 1 1 1\\r\\n5 5 5 5 5\\r\\n4 4 4 4 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"7\\r\\n49 457 -650 325 -325\\r\\n0 0 325 325 0\\r\\n253 204 -325 0 -325\\r\\n204 -253 325 325 325\\r\\n408 -506 -325 -325 325\\r\\n49 457 -650 325 -650\\r\\n0 0 0 650 -325\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000\\r\\n89 -573 642 349 -32\\r\\n-619 -549 767 -674 414\\r\\n-405 -68 -629 -343 -734\\r\\n-889 220 -814 329 -336\\r\\n-887 396 -531 -800 -940\\r\\n-849 142 -700 705 -311\\r\\n258 584 -547 -661 -153\\r\\n-58 717 658 -477 456\\r\\n-375 -530 195 681 716\\r\\n-944 274 491 -475 215\\r\\n270 989 960 536 -990\\r\\n685 889 -386 -556 303\\r\\n557 -374 589 488 -65\\r\\n-159 224 -753 -277 577\\r\\n-67 -786 -495 -72 -811\\r\\n-429 -202 522 812 -249\\r\\n807 341 -773 -197 -585\\r\\n128 -943 -653 924 -492\\r\\n-602 815 180 -871 -939\\r\\n-583 863 915 -513 768\\r\\n774 791 -337 649 170\\r\\n-341 834 -528 ...\", \"output\": [\"0\"]}, {\"input\": \"1000\\r\\n0 0 0 0 0\\r\\n1 1 1 1 1\\r\\n2 2 2 2 2\\r\\n3 3 3 3 3\\r\\n4 4 4 4 4\\r\\n5 5 5 5 5\\r\\n6 6 6 6 6\\r\\n7 7 7 7 7\\r\\n8 8 8 8 8\\r\\n9 9 9 9 9\\r\\n10 10 10 10 10\\r\\n11 11 11 11 11\\r\\n12 12 12 12 12\\r\\n13 13 13 13 13\\r\\n14 14 14 14 14\\r\\n15 15 15 15 15\\r\\n16 16 16 16 16\\r\\n17 17 17 17 17\\r\\n18 18 18 18 18\\r\\n19 19 19 19 19\\r\\n20 20 20 20 20\\r\\n21 21 21 21 21\\r\\n22 22 22 22 22\\r\\n23 23 23 23 23\\r\\n24 24 24 24 24\\r\\n25 25 25 25 25\\r\\n26 26 26 26 26\\r\\n27 27 27 27 27\\r\\n28 28 28 28 28\\r\\n29 29 29 29 29\\r\\n30 30 30 30 30\\r\\n31 31 31 31 31\\r\\n32 32 32 32 32\\r\\n33 33 33 33 33\\r\\n34 34 34 34...\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n1 0 0 0 0\\r\\n-1 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 -1 0 0 0\\r\\n0 0 1 0 0\\r\\n0 0 -1 0 0\\r\\n0 0 0 1 0\\r\\n0 0 0 -1 0\\r\\n0 0 0 0 1\\r\\n0 0 0 0 -1\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\\r\\n11\"]}, {\"input\": \"4\\r\\n0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 1 1 0 0\\r\\n\", \"output\": [\"0\"]}]","length":138,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":3300.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 3 3\\n3 5\\n10 3 7\", \"6 5 10\\n9 3 3 4 9 9\\n9 9 1 6 4\"]","prob_desc_input_spec":"The first line of input will contain integers F, B, and N (1\u2009\u2264\u2009F\u2009\u2264\u200910,\u20091\u2009\u2264\u2009B\u2009\u2264\u2009100,\u20091\u2009\u2264\u2009N\u2009\u2264\u20091018), the number of types of flowers, the number of types of boxes, and the number of flowers that must go into the bouquet, respectively. The second line of input will contain F integers p1,\u2009p2,\u2009...,\u2009pF (1\u2009\u2264\u2009pi\u2009\u2264\u2009109), the numbers of petals on each of the flower types. The third line of input will contain B integers c1,\u2009c2,\u2009...,\u2009cB (1\u2009\u2264\u2009ci\u2009\u2264\u2009250), the number of pieces of chocolate in each of the box types.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"c3a4c109080f49b88be5fb13157d1af0","prob_desc_created_at":"1506791100","source_code":"import java.io.*;\nimport java.util.*;\n\npublic class G {\n\n\tstatic final int P = 1_000_000_007;\n\n\tvoid submit() {\n\t\tint n = nextInt();\n\t\tint m = nextInt();\n\t\tlong exp = nextLong();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\tint maxCoef = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tb[i] = nextInt();\n\t\t\tmaxCoef = Math.max(maxCoef, b[i]);\n\t\t}\n\n\t\tint[] bPoly = new int[maxCoef + 1];\n\t\tbPoly[maxCoef] = 1;\n\t\tfor (int pow : b) {\n\t\t\tbPoly[maxCoef - pow]--;\n\t\t\tif (bPoly[maxCoef - pow] < 0) {\n\t\t\t\tbPoly[maxCoef - pow] += P;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[] aPoly = {};\n\t\tfor (int pow : a) {\n\t\t\taPoly = sum(aPoly, quotPow(new int[] { 0, 1 }, bPoly, pow));\n\t\t}\n\t\tint[] ans = quotPow(aPoly, bPoly, exp);\n\n\t\tans = prod(ans, quotPow(new int[] { 0, 1 }, bPoly, maxCoef));\n\t\tans = quot(ans, bPoly);\n\n\t\tout.println((long)ans[0] * inv(P - bPoly[0]) % P);\n\t}\n\t\n\tint inv(int x) {\n\t\treturn x == 1 ? 1 : P - (int)((long)(P \/ x) * inv(P % x) % P);\n\t}\n\n\tint[] quotPow(int[] a, int[] b, long n) {\n\t\ta = quot(a, b);\n\t\tint[] ret = { 1 };\n\t\tfor (; n > 0; n >>= 1) {\n\t\t\tif ((n & 1) == 1) {\n\t\t\t\tret = quot(prod(ret, a), b);\n\t\t\t}\n\t\t\ta = quot(prod(a, a), b);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tint[] sum(int[] a, int[] b) {\n\t\tint[] c = Arrays.copyOf(a, Math.max(a.length, b.length));\n\t\tfor (int i = 0; i < b.length; i++) {\n\t\t\tc[i] += b[i];\n\t\t\tif (c[i] >= P) {\n\t\t\t\tc[i] -= P;\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}\n\n\tint[] prod(int[] a, int[] b) {\n\t\tint[] c = new int[a.length + b.length - 1];\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tfor (int j = 0; j < b.length; j++) {\n\t\t\t\tc[i + j] += (int) ((long) a[i] * b[j] % P);\n\t\t\t\tif (c[i + j] >= P) {\n\t\t\t\t\tc[i + j] -= P;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}\n\n\tint[] quot(int[] a, int[] b) {\n\t\ta = a.clone();\n\t\t\/\/ leading coef of b is 1\n\t\tif (a.length < b.length) {\n\t\t\treturn a;\n\t\t}\n\t\tint degB = b.length - 1;\n\t\tfor (int ptr = a.length - 1; ptr >= degB; ptr--) {\n\t\t\tlong coef = a[ptr];\n\t\t\tfor (int i = 0, j = ptr - degB; i < degB; i++, j++) {\n\t\t\t\ta[j] -= (int) (coef * b[i] % P);\n\t\t\t\tif (a[j] < 0) {\n\t\t\t\t\ta[j] += P;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Arrays.copyOf(a, degB);\n\t}\n\n\tvoid preCalc() {\n\n\t}\n\n\tvoid stress() {\n\n\t}\n\n\tvoid test() {\n\n\t}\n\n\tG() throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\t\tpreCalc();\n\t\tsubmit();\n\t\t\/\/ stress();\n\t\t\/\/ test();\n\t\tout.close();\n\t}\n\n\tstatic final Random rng = new Random();\n\n\tstatic int rand(int l, int r) {\n\t\treturn l + rng.nextInt(r - l + 1);\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tnew G();\n\t}\n\n\tBufferedReader br;\n\tPrintWriter out;\n\tStringTokenizer st;\n\n\tString nextToken() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tString nextString() {\n\t\ttry {\n\t\t\treturn br.readLine();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\tint nextInt() {\n\t\treturn Integer.parseInt(nextToken());\n\t}\n\n\tlong nextLong() {\n\t\treturn Long.parseLong(nextToken());\n\t}\n\n\tdouble nextDouble() {\n\t\treturn Double.parseDouble(nextToken());\n\t}\n}","prob_desc_sample_outputs":"[\"17\", \"31415926\"]","lang_cluster":"Java","code_uid":"cbc9359183def1896b34988dcd73d4da","prob_desc_notes":"NoteIn the first example, there is 1 way to make a bouquet with 9 petals (3\u2009+\u20093\u2009+\u20093), and 1 way to make a basket with 9 pieces of chocolate (3\u2009+\u20093\u2009+\u20093), for 1 possible combination. There are 3 ways to make a bouquet with 13 petals (3\u2009+\u20095\u2009+\u20095,\u20095\u2009+\u20093\u2009+\u20095,\u20095\u2009+\u20095\u2009+\u20093), and 5 ways to make a basket with 13 pieces of chocolate (3\u2009+\u200910,\u200910\u2009+\u20093,\u20093\u2009+\u20093\u2009+\u20097,\u20093\u2009+\u20097\u2009+\u20093,\u20097\u2009+\u20093\u2009+\u20093), for 15 more combinations. Finally there is 1 way to make a bouquet with 15 petals (5\u2009+\u20095\u2009+\u20095) and 1 way to make a basket with 15 pieces of chocolate (3\u2009+\u20093\u2009+\u20093\u2009+\u20093\u2009+\u20093), for 1 more combination.Note that it is possible for multiple types of flowers to have the same number of petals. Such types are still considered different. Similarly different types of boxes may contain the same number of pieces of chocolate, but are still considered different.","prob_desc_output_spec":"Print the number of bouquet+basket combinations Pieguy can buy, modulo 1000000007\u2009=\u2009109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"It's Piegirl's birthday soon, and Pieguy has decided to buy her a bouquet of flowers and a basket of chocolates.The flower shop has F different types of flowers available. The i-th type of flower always has exactly pi petals. Pieguy has decided to buy a bouquet consisting of exactly N flowers. He may buy the same type of flower multiple times. The N flowers are then arranged into a bouquet. The position of the flowers within a bouquet matters. You can think of a bouquet as an ordered list of flower types.The chocolate shop sells chocolates in boxes. There are B different types of boxes available. The i-th type of box contains ci pieces of chocolate. Pieguy can buy any number of boxes, and can buy the same type of box multiple times. He will then place these boxes into a basket. The position of the boxes within the basket matters. You can think of the basket as an ordered list of box types.Pieguy knows that Piegirl likes to pluck a petal from a flower before eating each piece of chocolate. He would like to ensure that she eats the last piece of chocolate from the last box just after plucking the last petal from the last flower. That is, the total number of petals on all the flowers in the bouquet should equal the total number of pieces of chocolate in all the boxes in the basket.How many different bouquet+basket combinations can Pieguy buy? The answer may be very large, so compute it modulo 1000000007\u2009=\u2009109\u2009+\u20097.","hidden_unit_tests":"[{\"input\": \"2 3 3\\r\\n3 5\\r\\n10 3 7\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"6 5 10\\r\\n9 3 3 4 9 9\\r\\n9 9 1 6 4\\r\\n\", \"output\": [\"31415926\"]}, {\"input\": \"8 2 1\\r\\n7 10 12 15 29 34 36 38\\r\\n1 1\\r\\n\", \"output\": [\"314159265\"]}, {\"input\": \"10 1 4484891659\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n1\\r\\n\", \"output\": [\"314159265\"]}, {\"input\": \"1 100 1\\r\\n5365669\\r\\n250 190 178 74 65 223 225 45 84 222 55 89 164 10 234 210 165 23 185 200 182 53 94 60 146 32 63 62 11 107 131 144 149 59 70 66 134 111 71 120 166 12 136 177 246 199 194 121 145 156 187 91 216 124 99 237 90 230 141 157 26 201 18 97 173 37 211 214 8 181 244 7 87 33 155 218 75 138 67 228 46 69 41 78 169 4 118 79 139 112 227 196 96 115 117 56 158 110 179 114\\r\\n\", \"output\": [\"314159265\"]}, {\"input\": \"10 100 864691128455135231\\r\\n536870911 805306367 939524095 939523967 937426943 805298175 788529151 804782079 939523839 805306363\\r\\n182 152 228 37 107 239 168 211 179 6 90 68 118 16 190 13 93 199 241 60 105 181 80 7 218 184 78 176 221 172 45 11 67 217 174 191 4 85 34 215 230 145 1 75 231 52 153 146 22 149 216 2 83 225 42 84 10 194 104 212 159 143 121 201 242 170 197 175 167 188 200 236 233 120 56 131 108 59 53 54 185 29 214 77 49 82 95 220 158 139 130 208 81 100 223 25 20 205 128 250\\r\\n\", \"output\": [\"582337624\"]}, {\"input\": \"9 52 881371880336470888\\r\\n634074578 642802746 740396295 773386884 579721198 396628655 503722503 971207868 202647942\\r\\n6 218 248 227 88 43 18 33 62 119 212 230 106 102 54 174 45 191 99 171 209 66 106 182 6 61 214 16 126 169 50 137 79 150 90 81 27 65 250 183 112 75 226 177 198 216 11 146 4 178 246 211\\r\\n\", \"output\": [\"635311469\"]}, {\"input\": \"9 96 621306592075475634\\r\\n804928248 476927808 284875072 503158867 627937890 322595515 786026685 645468307 669240390\\r\\n97 197 25 144 219 56 36 82 207 147 221 159 213 60 25 35 61 61 75 250 250 203 215 90 235 136 247 27 227 80 35 91 222 187 106 75 145 20 160 222 147 99 168 161 85 87 116 154 220 91 35 239 114 121 158 44 55 170 61 137 66 24 245 164 109 134 51 126 132 63 153 33 246 247 223 44 145 232 249 114 144 98 151 228 57 160 18 152 119 240 126 203 105 223 153 192\\r\\n\", \"output\": [\"121663555\"]}, {\"input\": \"7 37 584613336374288891\\r\\n535590429 751244358 124321145 232930851 266089174 543529670 773363571\\r\\n247 238 141 189 144 61 133 56 8 27 205 233 230 42 24 19 246 88 182 182 243 20 145 135 15 144 169 7 189 137 20 194 170 250 218 67 21\\r\\n\", \"output\": [\"699167651\"]}, {\"input\": \"1 81 547920080673102149\\r\\n561219907\\r\\n111 114 230 117 29 50 140 231 27 168 159 124 106 114 26 76 158 10 240 221 73 227 13 199 40 52 220 98 140 21 78 98 149 228 176 248 75 163 155 204 157 105 83 109 177 145 150 30 230 48 6 142 209 33 18 71 138 18 159 102 118 102 182 41 195 142 205 209 108 48 188 229 213 207 49 246 183 179 109 134 170\\r\\n\", \"output\": [\"886701643\"]}, {\"input\": \"9 21 287854792412106895\\r\\n291882089 564718673 358502890 837699009 657489855 690430685 632939232 373282330 398630021\\r\\n118 159 232 41 20 114 202 20 156 38 103 47 180 197 234 14 161 172 242 165 228\\r\\n\", \"output\": [\"603644863\"]}, {\"input\": \"9 70 251161541005887448\\r\\n757703054 544067926 902981667 712695184 295641139 911364840 620276118 902318577 865222469\\r\\n220 138 43 208 243 126 220 11 97 124 112 226 195 155 205 113 223 88 160 197 65 90 250 106 108 173 151 73 14 142 171 9 93 168 206 189 17 21 127 76 108 246 106 111 186 229 228 191 57 194 79 158 134 71 194 97 85 102 157 90 139 217 142 43 80 123 47 116 88 33\\r\\n\", \"output\": [\"599812932\"]}, {\"input\": \"7 22 991096248449924898\\r\\n783332532 378192988 592684636 147499872 343857831 837331700 197547597\\r\\n17 66 60 72 70 125 123 127 238 218 96 152 75 63 52 114 176 224 35 17 136 218\\r\\n\", \"output\": [\"176974567\"]}, {\"input\": \"5 63 954402997043705451\\r\\n513994713 652509537 432130709 317463343 687041819\\r\\n105 29 207 60 150 109 131 42 38 139 210 209 48 133 143 196 159 130 90 39 156 137 112 34 1 159 159 161 68 73 127 195 112 225 245 168 28 39 79 223 49 146 104 121 179 195 194 33 164 221 176 4 21 120 204 168 93 97 218 94 225 74 108\\r\\n\", \"output\": [\"839513920\"]}, {\"input\": \"9 7 694337708782710197\\r\\n539624191 631858791 976609486 752268030 30225807 279200011 467188665 630132600 594612100\\r\\n195 246 158 209 10 139 229\\r\\n\", \"output\": [\"542950823\"]}, {\"input\": \"8 18 624045669640274071\\r\\n983359971 71550121 96204862 799843967 446173607 796619138 402690754 223219513\\r\\n87 249 123 87 137 147 167 76 167 250 12 203 76 106 228 234 227 121\\r\\n\", \"output\": [\"214421258\"]}, {\"input\": \"1 1 1\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 1000000000000000000\\r\\n37\\r\\n23\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 1 1000000000000000000\\r\\n100003\\r\\n250\\r\\n\", \"output\": [\"1\"]}]","length":169,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\", \"2\"]","prob_desc_input_spec":"The only line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009109), the number at the beginning of the game.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"5e74750f44142624e6da41d4b35beb9a","prob_desc_created_at":"1522771500","source_code":"import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        String player = \"Mahmoud\";\n        boolean flag = true;\n\n        while (flag) {\n            if (player.contains(\"Mahmoud\")) {\n                if (n % 2 == 0) {\n                    flag = false;\n                } else if(n==1){\n                    player = \"Ehab\";\n                    flag = false;\n                } else {\n                    int random = (int) (Math.random() * (n - 2 + 1) + 2) \/ 2 * 2;\n                    n-=random;\n                }\n            } else if (player.contains(\"Ehab\")) {\n                if (n % 2 == 1) {\n                    flag = false;\n                } else {\n                    int random = (int) (Math.random() * ((n-1) - 1 + 1) + 1) \/ 2 * 2;\n                    random++;\n                    n-=random;\n                }\n            }\n        }\n        System.out.println(player);\n    }\n}\n","prob_desc_sample_outputs":"[\"Ehab\", \"Mahmoud\"]","lang_cluster":"Java","code_uid":"f6af34337009608e0b1d65cd7450aeca","prob_desc_notes":"NoteIn the first sample, Mahmoud can't choose any integer a initially because there is no positive even integer less than or equal to 1 so Ehab wins.In the second sample, Mahmoud has to choose a\u2009=\u20092 and subtract it from n. It's Ehab's turn and n\u2009=\u20090. There is no positive odd integer less than or equal to 0 so Mahmoud wins.","prob_desc_output_spec":"Output \"Mahmoud\" (without quotes) if Mahmoud wins and \"Ehab\" (without quotes) otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"Mahmoud and Ehab play a game called the even-odd game. Ehab chooses his favorite integer n and then they take turns, starting from Mahmoud. In each player's turn, he has to choose an integer a and subtract it from n such that:  1\u2009\u2264\u2009a\u2009\u2264\u2009n.  If it's Mahmoud's turn, a has to be even, but if it's Ehab's turn, a has to be odd. If the current player can't choose any number satisfying the conditions, he loses. Can you determine the winner if they both play optimally?","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"33333\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"123123123\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"22222221\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"22222220\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"536870912\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"536870913\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"536870911\\r\\n\", \"output\": [\"Ehab\"]}]","length":35,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"10\\nrocesfedoc\", \"16\\nplmaetwoxesisiht\", \"1\\nz\"]","prob_desc_input_spec":"The first line of input consists of a single integer $$$n$$$ ($$$1 \\le n \\le 100$$$) \u2014 the length of the string $$$t$$$. The second line of input consists of the string $$$t$$$. The length of $$$t$$$ is $$$n$$$, and it consists only of lowercase Latin letters.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"1b0b2ee44c63cb0634cb63f2ad65cdd3","prob_desc_created_at":"1529591700","source_code":"import java.util.Scanner;\n\npublic class RevEncrypt {\n\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(), i, j;\n\t\tString t = in.next(), s = \"\";\n\t\tin.close();\n\n\t\tfor (i = 2; i <= n; i++)\n\t\t\tif (n % i == 0) {\n\t\t\t\tfor (j = i - 1; j >= 0; j--)\n\t\t\t\t\ts += t.charAt(j);\n\t\t\t\t\n\t\t\t\ts += t.substring(i);\n\t\t\t\tt = s;\n\t\t\t\ts = \"\";\n\t\t\t}\n\t\tSystem.out.println(t);\n\t}\n}\n","prob_desc_sample_outputs":"[\"codeforces\", \"thisisexampletwo\", \"z\"]","lang_cluster":"Java","code_uid":"1ee6d560c74fa0a059b8abf9c4b047f7","prob_desc_notes":"NoteThe first example is described in the problem statement.","prob_desc_output_spec":"Print a string $$$s$$$ such that the above algorithm results in $$$t$$$.","prob_desc_output_to":"standard output","prob_desc_description":"A string $$$s$$$ of length $$$n$$$ can be encrypted by the following algorithm:  iterate over all divisors of $$$n$$$ in decreasing order (i.e. from $$$n$$$ to $$$1$$$),  for each divisor $$$d$$$, reverse the substring $$$s[1 \\dots d]$$$ (i.e. the substring which starts at position $$$1$$$ and ends at position $$$d$$$). For example, the above algorithm applied to the string $$$s$$$=\"codeforces\" leads to the following changes: \"codeforces\" $$$\\to$$$ \"secrofedoc\" $$$\\to$$$ \"orcesfedoc\" $$$\\to$$$ \"rocesfedoc\" $$$\\to$$$ \"rocesfedoc\" (obviously, the last reverse operation doesn't change the string because $$$d=1$$$).You are given the encrypted string $$$t$$$. Your task is to decrypt this string, i.e., to find a string $$$s$$$ such that the above algorithm results in string $$$t$$$. It can be proven that this string $$$s$$$ always exists and is unique.","hidden_unit_tests":"[{\"input\": \"10\\r\\nrocesfedoc\\r\\n\", \"output\": [\"codeforces\"]}, {\"input\": \"16\\r\\nplmaetwoxesisiht\\r\\n\", \"output\": [\"thisisexampletwo\"]}, {\"input\": \"1\\r\\nz\\r\\n\", \"output\": [\"z\"]}, {\"input\": \"2\\r\\nir\\r\\n\", \"output\": [\"ri\"]}, {\"input\": \"3\\r\\nilj\\r\\n\", \"output\": [\"jli\"]}, {\"input\": \"4\\r\\njfyy\\r\\n\", \"output\": [\"yyjf\"]}, {\"input\": \"6\\r\\nkrdych\\r\\n\", \"output\": [\"hcyrkd\"]}, {\"input\": \"60\\r\\nfnebsopcvmlaoecpzmakqigyuutueuozjxutlwwiochekmhjgwxsgfbcrpqj\\r\\n\", \"output\": [\"jqprcbfgsxwgjhmkehcoiwwltuxjzokamzpalobnfespcvmoecqigyuutueu\"]}, {\"input\": \"64\\r\\nhnlzzhrvqnldswxfsrowfhmyzbxtyoxhogudasgywxycyhzgiseerbislcncvnwy\\r\\n\", \"output\": [\"ywnvcnclsibreesigzhycyxwygsadugofxwsdlnqzlhnzhrvsrowfhmyzbxtyoxh\"]}, {\"input\": \"97\\r\\nqnqrmdhmbubaijtwsecbidqouhlecladwgwcuxbigckrfzasnbfbslukoayhcgquuacygakhxoubibxtqkpyyhzjipylujgrc\\r\\n\", \"output\": [\"crgjulypijzhyypkqtxbibuoxhkagycauuqgchyaokulsbfbnsazfrkcgibxucwgwdalcelhuoqdibceswtjiabubmhdmrqnq\"]}, {\"input\": \"100\\r\\nedykhvzcntljuuoqghptioetqnfllwekzohiuaxelgecabvsbibgqodqxvyfkbyjwtgbyhvssntinkwsinwsmalusiwnjmtcoovf\\r\\n\", \"output\": [\"fvooctmjnwisulamswniswknitnssvhybgtwjybkfyvxqdoqgbqteoitnczvkyedhljuuoqghptnfllwekzohiuaxelgecabvsbi\"]}, {\"input\": \"96\\r\\nqtbcksuvxonzbkokhqlgkrvimzqmqnrvqlihrmksldyydacbtckfphenxszcnzhfjmpeykrvshgiboivkvabhrpphgavvprz\\r\\n\", \"output\": [\"zrpvvaghpprhbavkviobighsvrkyepmjfhznczsxnehpfkctvrnqmqzmkokbvuctqbksxonzhqlgkrviqlihrmksldyydacb\"]}, {\"input\": \"90\\r\\nmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\\r\\n\", \"output\": [\"mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\"]}, {\"input\": \"89\\r\\nwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\r\\n\", \"output\": [\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\"]}, {\"input\": \"99\\r\\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\\r\\n\", \"output\": [\"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\"]}, {\"input\": \"100\\r\\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\r\\n\", \"output\": [\"oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"]}, {\"input\": \"60\\r\\nwwwwwxwwwwwwfhwwhwwwwwwawwwwwwwwwwwwwnwwwwwwwwwwwwwwwwwwwwww\\r\\n\", \"output\": [\"wwwwwwwwwwwwwwwwwwwwwwnwwwwwwwwwwhwwwxwwwwwwwwwfhwwwwawwwwww\"]}, {\"input\": \"90\\r\\ncccchccccccccccccccccccccccccccwcccccccccgcccccchccccccccccccccccccccccxccccccncccccccuccc\\r\\n\", \"output\": [\"cccucccccccnccccccxcccccccccccccccccccccchccccccccccccccccccccccchccccccccccwcccccccccgccc\"]}, {\"input\": \"97\\r\\nfwffffffffffffffffffffffffrffffffffffffffzfffffffffffffffftfcfffffffqffffffffffffffffffffffyfffff\\r\\n\", \"output\": [\"fffffyffffffffffffffffffffffqfffffffcftffffffffffffffffzffffffffffffffrffffffffffffffffffffffffwf\"]}, {\"input\": \"100\\r\\ndjjjjjjjjjjgjjjjjjjjjjjjjjsvjjjjjjjjjjmjjjjjjjjjjjjjajjjjjjajjjjjjrjjjjjjjjjjjjrjjtjjjjjjjjjjjjjojjj\\r\\n\", \"output\": [\"jjjojjjjjjjjjjjjjtjjrjjjjjjjjjjjjrjjjjjjajjjjjjajjjjjjjjjjjjjjdjjjgjjjjjjjjjsvjjjjjjjjjjmjjjjjjjjjjj\"]}]","length":22,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6 6 4\"]","prob_desc_input_spec":"The input contains three positive integer numbers in the first line: n,\u2009\u2009m and a (1\u2009\u2264\u2009\u2009n,\u2009m,\u2009a\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"ef971874d8c4da37581336284b688517","prob_desc_created_at":"1266580800","source_code":"import java.util.Scanner;\n\npublic class _1A {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner key = new Scanner(System.in);\n\t\t\n\t\tlong m, n, a;\n\t\tdo {\n\t\t\tm = key.nextInt();\n\t\t\tn = key.nextInt();\n\t\t\ta = key.nextInt();\n\t\t}while(m<=0 || n<=0 || a<=0);\n\t\t\/\/int x = m+n;\n\t\tlong c1 = (m%a != 0)? (m\/a)+1:m\/a;\n\t\tlong c2 = (n%a != 0)? (n\/a)+1:n\/a;;\n\t\t\/\/c*=c;\n\t\tSystem.out.println(c1*c2);\n\t\t\n\t\t\n\t\t\/\/int u = 1000000000;\n\t}\n\n}","prob_desc_sample_outputs":"[\"4\"]","lang_cluster":"Java","code_uid":"1711aae810f19a391e9cb7a2c0a605be","prob_desc_notes":null,"prob_desc_output_spec":"Write the needed number of flagstones.","prob_desc_output_to":"standard output","prob_desc_description":"Theatre Square in the capital city of Berland has a rectangular shape with the size n\u2009\u00d7\u2009m meters. On the occasion of the city's anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a\u2009\u00d7\u2009a.What is the least number of flagstones needed to pave the Square? It's allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It's not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square.","hidden_unit_tests":"[{\"input\": \"6 6 4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 2 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2 2 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 3 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 1000000000 1\\r\\n\", \"output\": [\"1000000000000000000\"]}, {\"input\": \"12 13 4\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"222 332 5\\r\\n\", \"output\": [\"3015\"]}, {\"input\": \"1000 1000 10\\r\\n\", \"output\": [\"10000\"]}, {\"input\": \"1001 1000 10\\r\\n\", \"output\": [\"10100\"]}, {\"input\": \"100 10001 1000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 1000000000 1000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 1000000000 999999999\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1000000000 1000000000 192\\r\\n\", \"output\": [\"27126743055556\"]}, {\"input\": \"1000000000 987654321 1\\r\\n\", \"output\": [\"987654321000000000\"]}, {\"input\": \"456784567 1000000000 51\\r\\n\", \"output\": [\"175618850864484\"]}, {\"input\": \"39916800 134217728 40320\\r\\n\", \"output\": [\"3295710\"]}]","length":24,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"... ... ...\\n... ... ...\\n... ... ...\\n\\n... ... ...\\n... ... ...\\n... x.. ...\\n\\n... ... ...\\n... ... ...\\n... ... ...\\n6 4\", \"xoo x.. x..\\nooo ... ...\\nooo ... ...\\n\\nx.. x.. x..\\n... ... ...\\n... ... ...\\n\\nx.. x.. x..\\n... ... ...\\n... ... ...\\n7 4\", \"o.. ... ...\\n... ... ...\\n... ... ...\\n\\n... xxx ...\\n... xox ...\\n... ooo ...\\n\\n... ... ...\\n... ... ...\\n... ... ...\\n5 5\"]","prob_desc_input_spec":"First 11 lines contains descriptions of table with 9 rows and 9 columns which are divided into 9 small fields by spaces and empty lines. Each small field is described by 9 characters without spaces and empty lines. character \"x\" (ASCII-code 120) means that the cell is occupied with chip of the first player, character \"o\" (ASCII-code 111) denotes a field occupied with chip of the second player, character \".\" (ASCII-code 46) describes empty cell. The line after the table contains two integers x and y (1\u2009\u2264\u2009x,\u2009y\u2009\u2264\u20099). They describe coordinates of the cell in table where the last move was done. Rows in the table are numbered from up to down and columns are numbered from left to right. It's guaranteed that cell where the last move was done is filled with \"x\" or \"o\". Also, it's guaranteed that there is at least one empty cell. It's not guaranteed that current state of game is reachable.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"8f0fad22f629332868c39969492264d3","prob_desc_created_at":"1514037900","source_code":"import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.BufferedWriter;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.io.InputStream;\n\n\/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jialin Ouyang (Jialin.Ouyang@gmail.com)\n *\/\npublic class Main {\n  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    QuickScanner in = new QuickScanner(inputStream);\n    QuickWriter out = new QuickWriter(outputStream);\n    TaskB solver = new TaskB();\n    solver.solve(1, in, out);\n    out.close();\n  }\n\n  static class TaskB {\n    char[][] board;\n\n    public void solve(int testNumber, QuickScanner in, QuickWriter out) {\n      board = new char[9][9];\n      for (int i = 0; i < 9; ++i)\n        for (int j = 0; j < 9; ++j) {\n          board[i][j] = (char) in.nextNonSpaceChar();\n        }\n      int x = (in.nextInt() - 1) % 3 * 3;\n      int y = (in.nextInt() - 1) % 3 * 3;\n      int count = 0;\n      if (hasEmpty(x, y)) {\n        for (int i = x; i < x + 3; ++i)\n          for (int j = y; j < y + 3; ++j)\n            if (board[i][j] == '.') {\n              board[i][j] = '!';\n            }\n      } else {\n        for (int i = 0; i < 9; ++i)\n          for (int j = 0; j < 9; ++j)\n            if (board[i][j] == '.') {\n              board[i][j] = '!';\n            }\n      }\n      for (int i = 0; i < 9; ++i) {\n        if (i > 0 && i % 3 == 0) out.println();\n        for (int j = 0; j < 9; ++j) {\n          if (j > 0 && j % 3 == 0) out.print(' ');\n          out.print(board[i][j]);\n        }\n        out.println();\n      }\n    }\n\n    boolean hasEmpty(int x, int y) {\n      for (int i = x; i < x + 3; ++i)\n        for (int j = y; j < y + 3; ++j) {\n          if (board[i][j] == '.') return true;\n        }\n      return false;\n    }\n\n  }\n\n  static class QuickWriter {\n    private final PrintWriter writer;\n\n    public QuickWriter(OutputStream outputStream) {\n      this.writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n    }\n\n    public QuickWriter(Writer writer) {\n      this.writer = new PrintWriter(writer);\n    }\n\n    public void print(Object... objects) {\n      for (int i = 0; i < objects.length; ++i) {\n        if (i > 0) {\n          writer.print(' ');\n        }\n        writer.print(objects[i]);\n      }\n    }\n\n    public void println(Object... objects) {\n      print(objects);\n      writer.println();\n    }\n\n    public void close() {\n      writer.close();\n    }\n\n  }\n\n  static class QuickScanner {\n    private static final int BUFFER_SIZE = 1024;\n    private InputStream stream;\n    private byte[] buffer;\n    private int currentPosition;\n    private int numberOfChars;\n\n    public QuickScanner(InputStream stream) {\n      this.stream = stream;\n      this.buffer = new byte[BUFFER_SIZE];\n      this.currentPosition = 0;\n      this.numberOfChars = 0;\n    }\n\n    public int nextInt() {\n      int c = nextNonSpaceChar();\n      boolean positive = true;\n      if (c == '-') {\n        positive = false;\n        c = nextChar();\n      }\n      int res = 0;\n      do {\n        if (c < '0' || '9' < c) throw new RuntimeException();\n        res = res * 10 + (c - '0');\n        c = nextChar();\n      } while (!isSpaceChar(c));\n      return positive ? res : -res;\n    }\n\n    public int nextNonSpaceChar() {\n      int res = nextChar();\n      for (; isSpaceChar(res) || res < 0; res = nextChar()) ;\n      return res;\n    }\n\n    public int nextChar() {\n      if (numberOfChars == -1) {\n        throw new RuntimeException();\n      }\n      if (currentPosition >= numberOfChars) {\n        currentPosition = 0;\n        try {\n          numberOfChars = stream.read(buffer);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n        if (numberOfChars <= 0) {\n          return -1;\n        }\n      }\n      return buffer[currentPosition++];\n    }\n\n    public boolean isSpaceChar(int c) {\n      return c == ' ' || c == '\\t' || isEndOfLineChar(c);\n    }\n\n    public boolean isEndOfLineChar(int c) {\n      return c == '\\n' || c == '\\r' || c < 0;\n    }\n\n  }\n}\n\n","prob_desc_sample_outputs":"[\"... ... ... \\n... ... ... \\n... ... ... \\n\\n... ... ... \\n... ... ... \\n... x.. ... \\n\\n!!! ... ... \\n!!! ... ... \\n!!! ... ...\", \"xoo x!! x!! \\nooo !!! !!! \\nooo !!! !!! \\n\\nx!! x!! x!! \\n!!! !!! !!! \\n!!! !!! !!! \\n\\nx!! x!! x!! \\n!!! !!! !!! \\n!!! !!! !!!\", \"o!! !!! !!! \\n!!! !!! !!! \\n!!! !!! !!! \\n\\n!!! xxx !!! \\n!!! xox !!! \\n!!! ooo !!! \\n\\n!!! !!! !!! \\n!!! !!! !!! \\n!!! !!! !!!\"]","lang_cluster":"Java","code_uid":"f89f6f9006021f27563fd1305fad3cd4","prob_desc_notes":"NoteIn the first test case the first player made a move to lower left cell of central field, so the second player can put a chip only to cells of lower left field.In the second test case the last move was done to upper left cell of lower central field, however all cells in upper left field are occupied, so the second player can put his chip to any empty cell.In the third test case the last move was done to central cell of central field, so current player can put his chip to any cell of central field, which is already occupied, so he can move anywhere. Pay attention that this state of the game is unreachable.","prob_desc_output_spec":"Output the field in same format with characters \"!\" (ASCII-code 33) on positions where the current player can put his chip. All other cells should not be modified.","prob_desc_output_to":"standard output","prob_desc_description":"Two bears are playing tic-tac-toe via mail. It's boring for them to play usual tic-tac-toe game, so they are a playing modified version of this game. Here are its rules.The game is played on the following field.  Players are making moves by turns. At first move a player can put his chip in any cell of any small field. For following moves, there are some restrictions: if during last move the opposite player put his chip to cell with coordinates (xl,\u2009yl) in some small field, the next move should be done in one of the cells of the small field with coordinates (xl,\u2009yl). For example, if in the first move a player puts his chip to lower left cell of central field, then the second player on his next move should put his chip into some cell of lower left field (pay attention to the first test case). If there are no free cells in the required field, the player can put his chip to any empty cell on any field.You are given current state of the game and coordinates of cell in which the last move was done. You should find all cells in which the current player can put his chip.A hare works as a postman in the forest, he likes to foul bears. Sometimes he changes the game field a bit, so the current state of the game could be unreachable. However, after his changes the cell where the last move was done is not empty. You don't need to find if the state is unreachable or not, just output possible next moves according to the rules.","hidden_unit_tests":"[{\"input\": \"... ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... x.. ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n6 4\\r\\n\", \"output\": [\"... ... ...\\r\\n ... ... ...\\r\\n ... ... ...\\r\\n\\r\\n ... ... ...\\r\\n ... ... ...\\r\\n ... x.. ...\\r\\n\\r\\n !!! ... ...\\r\\n !!! ... ...\\r\\n !!! ... ...\", \"... ... ... \\r\\n... ... ... \\r\\n... ... ... \\r\\n\\r\\n... ... ... \\r\\n... ... ... \\r\\n... x.. ... \\r\\n\\r\\n!!! ... ... \\r\\n!!! ... ... \\r\\n!!! ... ...\", \"... ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... x.. ...\\r\\n\\r\\n!!! ... ...\\r\\n!!! ... ...\\r\\n!!! ... ...\"]}, {\"input\": \"xoo x.. x..\\r\\nooo ... ...\\r\\nooo ... ...\\r\\n\\r\\nx.. x.. x..\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\nx.. x.. x..\\r\\n... ... ...\\r\\n... ... ...\\r\\n7 4\\r\\n\", \"output\": [\"xoo x!! x!!\\r\\n ooo !!! !!!\\r\\n ooo !!! !!!\\r\\n\\r\\n x!! x!! x!!\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\\r\\n\\r\\n x!! x!! x!!\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\", \"xoo x!! x!!\\r\\nooo !!! !!!\\r\\nooo !!! !!!\\r\\n\\r\\nx!! x!! x!!\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\\r\\n\\r\\nx!! x!! x!!\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\", \"xoo x!! x!! \\r\\nooo !!! !!! \\r\\nooo !!! !!! \\r\\n\\r\\nx!! x!! x!! \\r\\n!!! !!! !!! \\r\\n!!! !!! !!! \\r\\n\\r\\nx!! x!! x!! \\r\\n!!! !!! !!! \\r\\n!!! !!! !!!\"]}, {\"input\": \"o.. ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\n... xxx ...\\r\\n... xox ...\\r\\n... ooo ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n5 5\\r\\n\", \"output\": [\"o!! !!! !!!\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\\r\\n\\r\\n !!! xxx !!!\\r\\n !!! xox !!!\\r\\n !!! ooo !!!\\r\\n\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\", \"o!! !!! !!!\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\\r\\n\\r\\n!!! xxx !!!\\r\\n!!! xox !!!\\r\\n!!! ooo !!!\\r\\n\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\", \"o!! !!! !!! \\r\\n!!! !!! !!! \\r\\n!!! !!! !!! \\r\\n\\r\\n!!! xxx !!! \\r\\n!!! xox !!! \\r\\n!!! ooo !!! \\r\\n\\r\\n!!! !!! !!! \\r\\n!!! !!! !!! \\r\\n!!! !!! !!!\"]}, {\"input\": \".o. .o. ..x\\r\\n..x .xx ..o\\r\\n... ... ...\\r\\n\\r\\n... ... xxo\\r\\n..x o.o oxo\\r\\n.x. .o. xoo\\r\\n\\r\\n... o.. ...\\r\\n..o .xx ..x\\r\\n... ... ...\\r\\n5 9\\r\\n\", \"output\": [\"!o! !o! !!x \\r\\n!!x !xx !!o \\r\\n!!! !!! !!! \\r\\n\\r\\n!!! !!! xxo \\r\\n!!x o!o oxo \\r\\n!x! !o! xoo \\r\\n\\r\\n!!! o!! !!! \\r\\n!!o !xx !!x \\r\\n!!! !!! !!!\", \"!o! !o! !!x\\r\\n!!x !xx !!o\\r\\n!!! !!! !!!\\r\\n\\r\\n!!! !!! xxo\\r\\n!!x o!o oxo\\r\\n!x! !o! xoo\\r\\n\\r\\n!!! o!! !!!\\r\\n!!o !xx !!x\\r\\n!!! !!! !!!\", \"!o! !o! !!x\\r\\n !!x !xx !!o\\r\\n !!! !!! !!!\\r\\n\\r\\n !!! !!! xxo\\r\\n !!x o!o oxo\\r\\n !x! !o! xoo\\r\\n\\r\\n !!! o!! !!!\\r\\n !!o !xx !!x\\r\\n !!! !!! !!!\"]}, {\"input\": \"... .o. ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... .x. ..x\\r\\n\\r\\n.x. ... ...\\r\\n..o ... .o.\\r\\n... o.o xx.\\r\\n1 5\\r\\n\", \"output\": [\"... !o! ... \\r\\n... !!! ... \\r\\n... !!! ... \\r\\n\\r\\n... ... ... \\r\\n... ... ... \\r\\n... .x. ..x \\r\\n\\r\\n.x. ... ... \\r\\n..o ... .o. \\r\\n... o.o xx.\", \"... !o! ...\\r\\n... !!! ...\\r\\n... !!! ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... .x. ..x\\r\\n\\r\\n.x. ... ...\\r\\n..o ... .o.\\r\\n... o.o xx.\", \"... !o! ...\\r\\n ... !!! ...\\r\\n ... !!! ...\\r\\n\\r\\n ... ... ...\\r\\n ... ... ...\\r\\n ... .x. ..x\\r\\n\\r\\n .x. ... ...\\r\\n ..o ... .o.\\r\\n ... o.o xx.\"]}, {\"input\": \"ooo oxx xxo\\r\\nx.x oox xox\\r\\noox xo. xxx\\r\\n\\r\\nxxo xxx o.o\\r\\nxoo xo. oxo\\r\\nooo xox ox.\\r\\n\\r\\nxoo xoo .oo\\r\\nxox xox ox.\\r\\noxx xox oxo\\r\\n1 3\\r\\n\", \"output\": [\"ooo oxx xxo \\r\\nx!x oox xox \\r\\noox xo! xxx \\r\\n\\r\\nxxo xxx o!o \\r\\nxoo xo! oxo \\r\\nooo xox ox! \\r\\n\\r\\nxoo xoo !oo \\r\\nxox xox ox! \\r\\noxx xox oxo\", \"ooo oxx xxo\\r\\nx!x oox xox\\r\\noox xo! xxx\\r\\n\\r\\nxxo xxx o!o\\r\\nxoo xo! oxo\\r\\nooo xox ox!\\r\\n\\r\\nxoo xoo !oo\\r\\nxox xox ox!\\r\\noxx xox oxo\", \"ooo oxx xxo\\r\\n x!x oox xox\\r\\n oox xo! xxx\\r\\n\\r\\n xxo xxx o!o\\r\\n xoo xo! oxo\\r\\n ooo xox ox!\\r\\n\\r\\n xoo xoo !oo\\r\\n xox xox ox!\\r\\n oxx xox oxo\"]}, {\"input\": \"... ... ...\\r\\n..o ... ..o\\r\\n... .x. ..x\\r\\n\\r\\nx.. ... ...\\r\\n.x. .ox oo.\\r\\n... .xo ..x\\r\\n\\r\\n... ... .ox\\r\\n... ox. ..x\\r\\n... ..o .o.\\r\\n2 3\\r\\n\", \"output\": [\"... ... ...\\r\\n ..o ... ..o\\r\\n ... .x. ..x\\r\\n\\r\\n x.. ... !!!\\r\\n .x. .ox oo!\\r\\n ... .xo !!x\\r\\n\\r\\n ... ... .ox\\r\\n ... ox. ..x\\r\\n ... ..o .o.\", \"... ... ...\\r\\n..o ... ..o\\r\\n... .x. ..x\\r\\n\\r\\nx.. ... !!!\\r\\n.x. .ox oo!\\r\\n... .xo !!x\\r\\n\\r\\n... ... .ox\\r\\n... ox. ..x\\r\\n... ..o .o.\", \"... ... ... \\r\\n..o ... ..o \\r\\n... .x. ..x \\r\\n\\r\\nx.. ... !!! \\r\\n.x. .ox oo! \\r\\n... .xo !!x \\r\\n\\r\\n... ... .ox \\r\\n... ox. ..x \\r\\n... ..o .o.\"]}, {\"input\": \"xox o.x xxo\\r\\nxox xox oxo\\r\\nxxx .xx xoo\\r\\n\\r\\nooo oox o.x\\r\\n.xx xx. oo.\\r\\nooo xox ooo\\r\\n\\r\\nooo oxo xox\\r\\nx.x xox xox\\r\\noxo x.o xxo\\r\\n1 7\\r\\n\", \"output\": [\"xox o!x xxo\\r\\n xox xox oxo\\r\\n xxx !xx xoo\\r\\n\\r\\n ooo oox o!x\\r\\n !xx xx! oo!\\r\\n ooo xox ooo\\r\\n\\r\\n ooo oxo xox\\r\\n x!x xox xox\\r\\n oxo x!o xxo\", \"xox o!x xxo\\r\\nxox xox oxo\\r\\nxxx !xx xoo\\r\\n\\r\\nooo oox o!x\\r\\n!xx xx! oo!\\r\\nooo xox ooo\\r\\n\\r\\nooo oxo xox\\r\\nx!x xox xox\\r\\noxo x!o xxo\", \"xox o!x xxo \\r\\nxox xox oxo \\r\\nxxx !xx xoo \\r\\n\\r\\nooo oox o!x \\r\\n!xx xx! oo! \\r\\nooo xox ooo \\r\\n\\r\\nooo oxo xox \\r\\nx!x xox xox \\r\\noxo x!o xxo\"]}, {\"input\": \"ox. x.o ..x\\r\\n... ..o .o.\\r\\n.o. ... x.o\\r\\n\\r\\nx.x .oo ...\\r\\n..o ox. .xx\\r\\n..x o.x .o.\\r\\n\\r\\n... ... .x.\\r\\nox. xx. .o.\\r\\n... ... ..o\\r\\n9 9\\r\\n\", \"output\": [\"ox. x.o ..x\\r\\n... ..o .o.\\r\\n.o. ... x.o\\r\\n\\r\\nx.x .oo ...\\r\\n..o ox. .xx\\r\\n..x o.x .o.\\r\\n\\r\\n... ... !x!\\r\\nox. xx. !o!\\r\\n... ... !!o\", \"ox. x.o ..x\\r\\n ... ..o .o.\\r\\n .o. ... x.o\\r\\n\\r\\n x.x .oo ...\\r\\n ..o ox. .xx\\r\\n ..x o.x .o.\\r\\n\\r\\n ... ... !x!\\r\\n ox. xx. !o!\\r\\n ... ... !!o\", \"ox. x.o ..x \\r\\n... ..o .o. \\r\\n.o. ... x.o \\r\\n\\r\\nx.x .oo ... \\r\\n..o ox. .xx \\r\\n..x o.x .o. \\r\\n\\r\\n... ... !x! \\r\\nox. xx. !o! \\r\\n... ... !!o\"]}, {\"input\": \"xx. oxx .xo\\r\\nxxx o.o xox\\r\\nxoo xoo xoo\\r\\n\\r\\nooo o.x xox\\r\\no.. xoo .xo\\r\\noxx .x. xoo\\r\\n\\r\\nooo oxo oxx\\r\\nxxx xox ..o\\r\\noo. oxx xx.\\r\\n3 8\\r\\n\", \"output\": [\"xx! oxx !xo\\r\\n xxx o!o xox\\r\\n xoo xoo xoo\\r\\n\\r\\n ooo o!x xox\\r\\n o!! xoo !xo\\r\\n oxx !x! xoo\\r\\n\\r\\n ooo oxo oxx\\r\\n xxx xox !!o\\r\\n oo! oxx xx!\", \"xx! oxx !xo \\r\\nxxx o!o xox \\r\\nxoo xoo xoo \\r\\n\\r\\nooo o!x xox \\r\\no!! xoo !xo \\r\\noxx !x! xoo \\r\\n\\r\\nooo oxo oxx \\r\\nxxx xox !!o \\r\\noo! oxx xx!\", \"xx! oxx !xo\\r\\nxxx o!o xox\\r\\nxoo xoo xoo\\r\\n\\r\\nooo o!x xox\\r\\no!! xoo !xo\\r\\noxx !x! xoo\\r\\n\\r\\nooo oxo oxx\\r\\nxxx xox !!o\\r\\noo! oxx xx!\"]}, {\"input\": \"... xo. o..\\r\\noo. ..o xx.\\r\\n..x x.. ..o\\r\\n\\r\\n.ox .xx ...\\r\\no.x xox xo.\\r\\nxox .xo ..o\\r\\n\\r\\n..o ... xxo\\r\\no.. .o. oxo\\r\\n..o x.. ..x\\r\\n8 9\\r\\n\", \"output\": [\"... xo. o.. \\r\\noo. ..o xx. \\r\\n..x x.. ..o \\r\\n\\r\\n.ox .xx !!! \\r\\no.x xox xo! \\r\\nxox .xo !!o \\r\\n\\r\\n..o ... xxo \\r\\no.. .o. oxo \\r\\n..o x.. ..x\", \"... xo. o..\\r\\n oo. ..o xx.\\r\\n ..x x.. ..o\\r\\n\\r\\n .ox .xx !!!\\r\\n o.x xox xo!\\r\\n xox .xo !!o\\r\\n\\r\\n ..o ... xxo\\r\\n o.. .o. oxo\\r\\n ..o x.. ..x\", \"... xo. o..\\r\\noo. ..o xx.\\r\\n..x x.. ..o\\r\\n\\r\\n.ox .xx !!!\\r\\no.x xox xo!\\r\\nxox .xo !!o\\r\\n\\r\\n..o ... xxo\\r\\no.. .o. oxo\\r\\n..o x.. ..x\"]}, {\"input\": \"oox xoo xxx\\r\\nooo xxo oxo\\r\\nxxx xoo xxo\\r\\n\\r\\noxo oxx xoo\\r\\nxoo oox xox\\r\\nxox oox oox\\r\\n\\r\\nxxo xoo oxo\\r\\noxx xxx xxx\\r\\noxo oxo oo.\\r\\n1 5\\r\\n\", \"output\": [\"oox xoo xxx\\r\\nooo xxo oxo\\r\\nxxx xoo xxo\\r\\n\\r\\noxo oxx xoo\\r\\nxoo oox xox\\r\\nxox oox oox\\r\\n\\r\\nxxo xoo oxo\\r\\noxx xxx xxx\\r\\noxo oxo oo!\", \"oox xoo xxx \\r\\nooo xxo oxo \\r\\nxxx xoo xxo \\r\\n\\r\\noxo oxx xoo \\r\\nxoo oox xox \\r\\nxox oox oox \\r\\n\\r\\nxxo xoo oxo \\r\\noxx xxx xxx \\r\\noxo oxo oo!\", \"oox xoo xxx\\r\\n ooo xxo oxo\\r\\n xxx xoo xxo\\r\\n\\r\\n oxo oxx xoo\\r\\n xoo oox xox\\r\\n xox oox oox\\r\\n\\r\\n xxo xoo oxo\\r\\n oxx xxx xxx\\r\\n oxo oxo oo!\"]}, {\"input\": \".oo x.o xoo\\r\\n.o. xxx .x.\\r\\n..o x.o xxx\\r\\n\\r\\n..o .oo .xx\\r\\n.x. xox o.o\\r\\n.xo o.o .x.\\r\\n\\r\\n.o. xo. xxx\\r\\n.xo o.. .xo\\r\\n..o ..o xox\\r\\n1 8\\r\\n\", \"output\": [\".oo x!o xoo \\r\\n.o. xxx .x. \\r\\n..o x!o xxx \\r\\n\\r\\n..o .oo .xx \\r\\n.x. xox o.o \\r\\n.xo o.o .x. \\r\\n\\r\\n.o. xo. xxx \\r\\n.xo o.. .xo \\r\\n..o ..o xox\", \".oo x!o xoo\\r\\n.o. xxx .x.\\r\\n..o x!o xxx\\r\\n\\r\\n..o .oo .xx\\r\\n.x. xox o.o\\r\\n.xo o.o .x.\\r\\n\\r\\n.o. xo. xxx\\r\\n.xo o.. .xo\\r\\n..o ..o xox\", \".oo x!o xoo\\r\\n .o. xxx .x.\\r\\n ..o x!o xxx\\r\\n\\r\\n ..o .oo .xx\\r\\n .x. xox o.o\\r\\n .xo o.o .x.\\r\\n\\r\\n .o. xo. xxx\\r\\n .xo o.. .xo\\r\\n ..o ..o xox\"]}, {\"input\": \"xxo xoo xxo\\r\\nooo ooo xxx\\r\\noox oxo oxx\\r\\n\\r\\noxo oxo xxx\\r\\nxoo oxx oxo\\r\\nxxx oxx ooo\\r\\n\\r\\noxx xoo xxo\\r\\nxxx oox xox\\r\\nxxo o.o oxo\\r\\n9 6\\r\\n\", \"output\": [\"xxo xoo xxo\\r\\n ooo ooo xxx\\r\\n oox oxo oxx\\r\\n\\r\\n oxo oxo xxx\\r\\n xoo oxx oxo\\r\\n xxx oxx ooo\\r\\n\\r\\n oxx xoo xxo\\r\\n xxx oox xox\\r\\n xxo o!o oxo\", \"xxo xoo xxo \\r\\nooo ooo xxx \\r\\noox oxo oxx \\r\\n\\r\\noxo oxo xxx \\r\\nxoo oxx oxo \\r\\nxxx oxx ooo \\r\\n\\r\\noxx xoo xxo \\r\\nxxx oox xox \\r\\nxxo o!o oxo\", \"xxo xoo xxo\\r\\nooo ooo xxx\\r\\noox oxo oxx\\r\\n\\r\\noxo oxo xxx\\r\\nxoo oxx oxo\\r\\nxxx oxx ooo\\r\\n\\r\\noxx xoo xxo\\r\\nxxx oox xox\\r\\nxxo o!o oxo\"]}, {\"input\": \"ox. o.x .o.\\r\\nxxo xoo .oo\\r\\n.xx oox o..\\r\\n\\r\\nxx. oox oxx\\r\\noox oxx xxo\\r\\nxo. oxo x.x\\r\\n\\r\\no.x .x. xx.\\r\\n.xo ox. ooo\\r\\n.ox xo. ..o\\r\\n6 2\\r\\n\", \"output\": [\"ox. o.x .o. \\r\\nxxo xoo .oo \\r\\n.xx oox o.. \\r\\n\\r\\nxx. oox oxx \\r\\noox oxx xxo \\r\\nxo. oxo x.x \\r\\n\\r\\no.x !x! xx. \\r\\n.xo ox! ooo \\r\\n.ox xo! ..o\", \"ox. o.x .o.\\r\\n xxo xoo .oo\\r\\n .xx oox o..\\r\\n\\r\\n xx. oox oxx\\r\\n oox oxx xxo\\r\\n xo. oxo x.x\\r\\n\\r\\n o.x !x! xx.\\r\\n .xo ox! ooo\\r\\n .ox xo! ..o\", \"ox. o.x .o.\\r\\nxxo xoo .oo\\r\\n.xx oox o..\\r\\n\\r\\nxx. oox oxx\\r\\noox oxx xxo\\r\\nxo. oxo x.x\\r\\n\\r\\no.x !x! xx.\\r\\n.xo ox! ooo\\r\\n.ox xo! ..o\"]}, {\"input\": \"oxo xoo ox.\\r\\nxxx xoo xxo\\r\\nxoo xxx xox\\r\\n\\r\\nxxx xxx xoo\\r\\nooo o.o oxx\\r\\nxxo ooo xxx\\r\\n\\r\\nooo oox ooo\\r\\nooo oxo xxx\\r\\nxxo xox xxo\\r\\n6 1\\r\\n\", \"output\": [\"oxo xoo ox!\\r\\n xxx xoo xxo\\r\\n xoo xxx xox\\r\\n\\r\\n xxx xxx xoo\\r\\n ooo o!o oxx\\r\\n xxo ooo xxx\\r\\n\\r\\n ooo oox ooo\\r\\n ooo oxo xxx\\r\\n xxo xox xxo\", \"oxo xoo ox! \\r\\nxxx xoo xxo \\r\\nxoo xxx xox \\r\\n\\r\\nxxx xxx xoo \\r\\nooo o!o oxx \\r\\nxxo ooo xxx \\r\\n\\r\\nooo oox ooo \\r\\nooo oxo xxx \\r\\nxxo xox xxo\", \"oxo xoo ox!\\r\\nxxx xoo xxo\\r\\nxoo xxx xox\\r\\n\\r\\nxxx xxx xoo\\r\\nooo o!o oxx\\r\\nxxo ooo xxx\\r\\n\\r\\nooo oox ooo\\r\\nooo oxo xxx\\r\\nxxo xox xxo\"]}, {\"input\": \".xo oxx xoo\\r\\nooo .xo xxx\\r\\noxo oox xoo\\r\\n\\r\\nx.o xoo xxx\\r\\nxo. oxo oxx\\r\\nx.x xoo o.o\\r\\n\\r\\nxoo xox oxx\\r\\nooo .x. .xx\\r\\nxox x.. xoo\\r\\n6 5\\r\\n\", \"output\": [\".xo oxx xoo\\r\\n ooo .xo xxx\\r\\n oxo oox xoo\\r\\n\\r\\n x.o xoo xxx\\r\\n xo. oxo oxx\\r\\n x.x xoo o.o\\r\\n\\r\\n xoo xox oxx\\r\\n ooo !x! .xx\\r\\n xox x!! xoo\", \".xo oxx xoo\\r\\nooo .xo xxx\\r\\noxo oox xoo\\r\\n\\r\\nx.o xoo xxx\\r\\nxo. oxo oxx\\r\\nx.x xoo o.o\\r\\n\\r\\nxoo xox oxx\\r\\nooo !x! .xx\\r\\nxox x!! xoo\", \".xo oxx xoo \\r\\nooo .xo xxx \\r\\noxo oox xoo \\r\\n\\r\\nx.o xoo xxx \\r\\nxo. oxo oxx \\r\\nx.x xoo o.o \\r\\n\\r\\nxoo xox oxx \\r\\nooo !x! .xx \\r\\nxox x!! xoo\"]}, {\"input\": \"oxo xox ooo\\r\\n.xo xxo oxx\\r\\nxxx oxo xxx\\r\\n\\r\\nxxo oxx .xx\\r\\nxo. xoo oxx\\r\\noxo oxx xox\\r\\n\\r\\nxoo ooo oox\\r\\nooo ooo xxo\\r\\nxxx x.o oxo\\r\\n2 2\\r\\n\", \"output\": [\"oxo xox ooo \\r\\n!xo xxo oxx \\r\\nxxx oxo xxx \\r\\n\\r\\nxxo oxx !xx \\r\\nxo! xoo oxx \\r\\noxo oxx xox \\r\\n\\r\\nxoo ooo oox \\r\\nooo ooo xxo \\r\\nxxx x!o oxo\", \"oxo xox ooo\\r\\n !xo xxo oxx\\r\\n xxx oxo xxx\\r\\n\\r\\n xxo oxx !xx\\r\\n xo! xoo oxx\\r\\n oxo oxx xox\\r\\n\\r\\n xoo ooo oox\\r\\n ooo ooo xxo\\r\\n xxx x!o oxo\", \"oxo xox ooo\\r\\n!xo xxo oxx\\r\\nxxx oxo xxx\\r\\n\\r\\nxxo oxx !xx\\r\\nxo! xoo oxx\\r\\noxo oxx xox\\r\\n\\r\\nxoo ooo oox\\r\\nooo ooo xxo\\r\\nxxx x!o oxo\"]}, {\"input\": \"xox xxx xoo\\r\\nxoo xxx oxo\\r\\nxoo oox xoo\\r\\n\\r\\noxo oox xox\\r\\noxo xox xox\\r\\noox xoo oox\\r\\n\\r\\no.o xox oox\\r\\noox xxo xxo\\r\\nxox xxx oxo\\r\\n3 4\\r\\n\", \"output\": [\"xox xxx xoo\\r\\n xoo xxx oxo\\r\\n xoo oox xoo\\r\\n\\r\\n oxo oox xox\\r\\n oxo xox xox\\r\\n oox xoo oox\\r\\n\\r\\n o!o xox oox\\r\\n oox xxo xxo\\r\\n xox xxx oxo\", \"xox xxx xoo \\r\\nxoo xxx oxo \\r\\nxoo oox xoo \\r\\n\\r\\noxo oox xox \\r\\noxo xox xox \\r\\noox xoo oox \\r\\n\\r\\no!o xox oox \\r\\noox xxo xxo \\r\\nxox xxx oxo\", \"xox xxx xoo\\r\\nxoo xxx oxo\\r\\nxoo oox xoo\\r\\n\\r\\noxo oox xox\\r\\noxo xox xox\\r\\noox xoo oox\\r\\n\\r\\no!o xox oox\\r\\noox xxo xxo\\r\\nxox xxx oxo\"]}, {\"input\": \"ooo xxx .x.\\r\\nxxo oox ooo\\r\\n.o. oox xxx\\r\\n\\r\\nxox oxx xxo\\r\\nxxx oxx oxx\\r\\noxx ooo ooo\\r\\n\\r\\n.oo xoo xo.\\r\\nxxo oox ooo\\r\\nxox xxx xxo\\r\\n5 1\\r\\n\", \"output\": [\"ooo xxx !x! \\r\\nxxo oox ooo \\r\\n!o! oox xxx \\r\\n\\r\\nxox oxx xxo \\r\\nxxx oxx oxx \\r\\noxx ooo ooo \\r\\n\\r\\n!oo xoo xo! \\r\\nxxo oox ooo \\r\\nxox xxx xxo\", \"ooo xxx !x!\\r\\nxxo oox ooo\\r\\n!o! oox xxx\\r\\n\\r\\nxox oxx xxo\\r\\nxxx oxx oxx\\r\\noxx ooo ooo\\r\\n\\r\\n!oo xoo xo!\\r\\nxxo oox ooo\\r\\nxox xxx xxo\", \"ooo xxx !x!\\r\\n xxo oox ooo\\r\\n !o! oox xxx\\r\\n\\r\\n xox oxx xxo\\r\\n xxx oxx oxx\\r\\n oxx ooo ooo\\r\\n\\r\\n !oo xoo xo!\\r\\n xxo oox ooo\\r\\n xox xxx xxo\"]}]","length":168,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 3\", \"6 5\", \"1000000000 1\"]","prob_desc_input_spec":"The only line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 10^9$$$, $$$1 \\le m \\le 1000$$$)\u00a0\u2014 the size of the field and the number of parts to split the sets into.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"2ec9e7cddc634d7830575e14363a4657","prob_desc_created_at":"1543163700","source_code":"import java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\npublic class B {\n\tpublic static void main(String[] args) {\n\t\tInputStream input;\n\t\tOutputStream output;\n\t\ttry {\n\t\t\tinput = new FileInputStream(\"input.txt\");\n\t\t\toutput = new FileOutputStream(\"output.txt\");\n\t\t} catch (FileNotFoundException e) {\n\t\t\tinput = System.in;\n\t\t\toutput = System.out;\n\t\t}\n\t\tKattio io = new Kattio(input, output);\n\t\t\/\/int t=io.getInt();\n\t\t\/\/for (int i=1; i<=t; i++)\n\t\t(new Solve(io)).main();\n\t\tio.close();\n\n\t\tif (input instanceof FileInputStream)\n\t\t\ttry {\n\t\t\t\tinput.close();\n\t\t\t} catch (IOException e) {\n\t\t\t}\n\t\tif (output instanceof FileOutputStream)\n\t\t\ttry {\n\t\t\t\toutput.close();\n\t\t\t} catch (IOException e) {\n\t\t\t}\n\t}\n}\n\nclass Solve {\n\tKattio io;\n\n\tlong n;\n\tint m;\n\tlong[] a;\n\tlong[] b;\n\tSolve(Kattio io) {\n\t\tthis.io = io;\n\t}\n\n\tvoid main() {\n\t\tn=io.getLong();\n\t\tm=io.getInt();\n\t\ta = new long[m];\n\t\tb = new long[m];\n\t\tfor (int i=0; i<m; i++)\n\t\t{\n\t\t\tif (i<=n%m)\n\t\t\t\ta[i]=n\/m+1;\n\t\t\telse\n\t\t\t\ta[i]=n\/m;\n\t\t}\n\t\ta[0]--;\n\t\t\n\/\/\t\tfor (int i=0; i<m; i++)\n\/\/\t\t\tio.println(a[i]);\n\t\t\n\t\tArrays.fill(b,0);\n\t\tfor (int i=0; i<m; i++)\n\t\t\tb[(i*i)%m]+=a[i];\n\t\t\n\t\tlong res = 0;\n\t\tfor (int i=1; i<m; i++)\n\t\t\tres+=b[i]*b[m-i];\n\t\t\n\t\tres+=(b[0]*b[0]);\n\t\t\n\t\tio.println(res);\n\t}\n}\n\nclass Kattio extends PrintWriter {\n\tpublic Kattio(InputStream i) {\n\t\tsuper(new BufferedOutputStream(System.out));\n\t\tr = new BufferedReader(new InputStreamReader(i));\n\t}\n\n\tpublic Kattio(InputStream i, OutputStream o) {\n\t\tsuper(new BufferedOutputStream(o));\n\t\tr = new BufferedReader(new InputStreamReader(i));\n\t}\n\n\tpublic boolean hasMoreTokens() {\n\t\treturn peekToken() != null;\n\t}\n\n\tpublic int getInt() {\n\t\treturn Integer.parseInt(nextToken());\n\t}\n\n\tpublic double getDouble() {\n\t\treturn Double.parseDouble(nextToken());\n\t}\n\n\tpublic long getLong() {\n\t\treturn Long.parseLong(nextToken());\n\t}\n\n\tpublic String getWord() {\n\t\treturn nextToken();\n\t}\n\n\tprivate BufferedReader r;\n\tprivate String line;\n\tprivate StringTokenizer st;\n\tprivate String token;\n\n\tprivate String peekToken() {\n\t\tif (token == null)\n\t\t\ttry {\n\t\t\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\t\t\tline = r.readLine();\n\t\t\t\t\tif (line == null)\n\t\t\t\t\t\treturn null;\n\t\t\t\t\tst = new StringTokenizer(line);\n\t\t\t\t}\n\t\t\t\ttoken = st.nextToken();\n\t\t\t} catch (IOException e) {\n\t\t\t}\n\t\treturn token;\n\t}\n\n\tprivate String nextToken() {\n\t\tString ans = peekToken();\n\t\ttoken = null;\n\t\treturn ans;\n\t}\n}","prob_desc_sample_outputs":"[\"1\", \"13\", \"1000000000000000000\"]","lang_cluster":"Java","code_uid":"a619cbd4ca0a4e496a10adb7a54e3ad7","prob_desc_notes":"NoteIn the first example, only the set for cell $$$(3, 3)$$$ can be split equally ($$$3^2 + 3^2 = 18$$$, which is divisible by $$$m=3$$$).In the second example, the sets for the following cells can be divided equally:   $$$(1, 2)$$$ and $$$(2, 1)$$$, since $$$1^2 + 2^2 = 5$$$, which is divisible by $$$5$$$;  $$$(1, 3)$$$ and $$$(3, 1)$$$;  $$$(2, 4)$$$ and $$$(4, 2)$$$;  $$$(2, 6)$$$ and $$$(6, 2)$$$;  $$$(3, 4)$$$ and $$$(4, 3)$$$;  $$$(3, 6)$$$ and $$$(6, 3)$$$;  $$$(5, 5)$$$. In the third example, sets in all cells can be divided equally, since $$$m = 1$$$.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the number of sets that can be split equally.","prob_desc_output_to":"standard output","prob_desc_description":"Arkady and his friends love playing checkers on an $$$n \\times n$$$ field. The rows and the columns of the field are enumerated from $$$1$$$ to $$$n$$$.The friends have recently won a championship, so Arkady wants to please them with some candies. Remembering an old parable (but not its moral), Arkady wants to give to his friends one set of candies per each cell of the field: the set of candies for cell $$$(i, j)$$$ will have exactly $$$(i^2 + j^2)$$$ candies of unique type.There are $$$m$$$ friends who deserve the present. How many of these $$$n \\times n$$$ sets of candies can be split equally into $$$m$$$ parts without cutting a candy into pieces? Note that each set has to be split independently since the types of candies in different sets are different.","hidden_unit_tests":"[{\"input\": \"3 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"6 5\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"1000000000 1\\r\\n\", \"output\": [\"1000000000000000000\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 81\\r\\n\", \"output\": [\"12345678987654321\"]}, {\"input\": \"10000 1\\r\\n\", \"output\": [\"100000000\"]}, {\"input\": \"10000 2\\r\\n\", \"output\": [\"50000000\"]}, {\"input\": \"10000 3\\r\\n\", \"output\": [\"11108889\"]}, {\"input\": \"15 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 200\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 1000\\r\\n\", \"output\": [\"3400000000000000\"]}, {\"input\": \"999999998 229\\r\\n\", \"output\": [\"8714555372170630\"]}, {\"input\": \"999999999 228\\r\\n\", \"output\": [\"76946738381041\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000 5\\r\\n\", \"output\": [\"36000000\"]}, {\"input\": \"1 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"260\"]}, {\"input\": \"360 900\\r\\n\", \"output\": [\"374\"]}, {\"input\": \"1000 999\\r\\n\", \"output\": [\"657\"]}, {\"input\": \"12345 1\\r\\n\", \"output\": [\"152399025\"]}]","length":142,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"1.5 seconds","prob_desc_sample_inputs":"[\"2\"]","prob_desc_input_spec":"The first and only line contains integer N.   1\u2009\u2264\u2009N\u2009\u2264\u2009106 ","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"a18833c987fd7743e8021196b5dcdd1b","prob_desc_created_at":"1441526400","source_code":"\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\nimport static java.util.Arrays.*;\n\npublic class Main {\n\tprivate static final int mod = (int)1e9+7;\n\n\tfinal Random random = new Random(0);\n\tfinal IOFast io = new IOFast();\n\n\t\/\/\/ MAIN CODE\n\tpublic void run() throws IOException {\n\/\/\t\tif(true) {\n\/\/\t\t\tfor(int i = 1; i <= 20; i++) {\n\/\/\t\t\t\tnaive(i);\n\/\/\t\t\t}\n\/\/\t\t}\n\t\t\n\/\/\t\tint TEST_CASE = Integer.parseInt(new String(io.nextLine()).trim());\n\t\tint TEST_CASE = 1;\n\t\twhile(TEST_CASE-- != 0) {\n\t\t\tint n = io.nextInt() + 1;\n\t\t\tCombination comb = new Combination(n, mod);\n\t\t\tlong ans = 0;\n\t\t\tfor(int i = 1; i <= n; i++) {\n\t\t\t\tfinal long v = comb.get(n, i);\n\t\t\t\tans += v * v % mod;\n\t\t\t}\n\t\t\tio.out.println(ans % mod);\n\t\t}\n\t}\n\t\n\tvoid naive(int n) {\n\t\tint[][] comb = new int[2*n+1][2*n+1];\n\t\tint[][] S = new int[2*n+1][2*n+1];\n\t\tfor(int i = 0; i < comb.length; i++) {\n\t\t\tcomb[i][0] = comb[i][i] = 1;\n\t\t\tfor(int j = 1; j < i; j++) {\n\t\t\t\tcomb[i][j] = comb[i-1][j-1] + comb[i-1][j];\n\t\t\t\tS[i][j] = comb[i][j] + S[i-1][j-1] + S[i-1][j];\n\t\t\t}\n\t\t\tS[i][0] = 1;\n\t\t\tS[i][0] = 1;\n\/\/\t\t\tSystem.err.println(Arrays.toString(comb[i]));\n\/\/\t\t\tSystem.err.println(Arrays.toString(S[i]));\n\t\t}\n\t\t\n\t\tint ans = 0;\n\t\tfor(int i = 0; i <= 2*n; i++) {\n\/\/\t\t\tSystem.err.print(i + \": \");\n\t\t\tint v = 0;\n\t\t\tfor(int j = 0; j <= i; j++) {\n\t\t\t\tif(j <= n && i - j <= n) {\n\t\t\t\t\tans += comb[i][j];\n\t\t\t\t\tif(ans >= mod) ans -= mod;\n\t\t\t\t\tv += comb[i][j];\n\/\/\t\t\t\t\tSystem.err.print(j + \" \");\n\t\t\t\t}\n\t\t\t}\n\/\/\t\t\tSystem.err.println(v);\n\t\t}\n\t\tSystem.err.print(ans+\",\");\n\t}\n\n\tstatic\n\tpublic class Combination {\n\t\tfinal int mod;\n\t\tfinal int MAX;\n\t\tfinal long[] fact;\n\t\tfinal long[] inv;\n\t\tfinal long[] invfact;\n\t\t\n\t\tpublic Combination(int n, int mod) {\n\t\t\tthis.mod = mod;\n\t\t\tMAX = n + 1;\n\t\t\tfact = new long[MAX];\n\t\t\tinvfact = new long[MAX];\n\t\t\tinv = new long[MAX];\n\t\t\t\n\t\t\tinv[1] = 1;\n\t\t\tfor(int i = 2; i < inv.length; i++) {\n\t\t\t\tinv[i] = inv[mod % i] * (mod - mod \/ i) % mod;\n\t\t\t}\n\n\t\t\tfact[0] = 1;\n\t\t\tinvfact[0] = 1;\n\t\t\tfor(int i = 1; i < inv.length; i++) {\n\t\t\t\tfact[i] = i * fact[i-1] % mod;\n\t\t\t\tinvfact[i] = inv[i] * invfact[i-1] % mod;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic long get(int n, int r) {\n\t\t\treturn fact[n] * invfact[n - r] % mod * invfact[r] % mod;\n\t\t}\n\t\t\n\t\tpublic long getH(int n, int r) {\n\t\t\treturn get(n + r - 1, r);\n\t\t}\n\t\t\n\t\tpublic long getFact(int n) {\n\t\t\treturn fact[n];\n\t\t}\n\t}\n\n\t\n\t\/\/\/ TEMPLATE\n\tstatic int gcd(int n, int r) { return r == 0 ? n : gcd(r, n%r); }\n\tstatic long gcd(long n, long r) { return r == 0 ? n : gcd(r, n%r); }\n\t\n\tstatic <T> void swap(T[] x, int i, int j) { T t = x[i]; x[i] = x[j]; x[j] = t; }\n\tstatic void swap(int[] x, int i, int j) { int t = x[i]; x[i] = x[j]; x[j] = t; }\n\t\n\tvoid main() throws IOException {\n\t\t\/\/\t\tIOFast.setFileIO(\"rle-size.in\", \"rle-size.out\");\n\t\ttry { run(); }\n\t\tcatch (EndOfFileRuntimeException e) { }\n\t\tio.out.flush();\n\t}\n\tpublic static void main(String[] args) throws IOException { new Main().main(); }\n\t\n\tstatic class EndOfFileRuntimeException extends RuntimeException {\n\t\tprivate static final long serialVersionUID = -8565341110209207657L; }\n\n\tstatic\n\tpublic class IOFast {\n\t\tprivate BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tprivate PrintWriter out = new PrintWriter(System.out);\n\n\t\tvoid setFileIn(String ins) throws IOException { in.close(); in = new BufferedReader(new FileReader(ins)); }\n\t\tvoid setFileOut(String outs) throws IOException { out.flush(); out.close(); out = new PrintWriter(new FileWriter(outs)); }\n\t\tvoid setFileIO(String ins, String outs) throws IOException { setFileIn(ins); setFileOut(outs); }\n\n\t\tprivate static int pos, readLen;\n\t\tprivate static final char[] buffer = new char[1024 * 8];\n\t\tprivate static char[] str = new char[500*8*2];\n\t\tprivate static boolean[] isDigit = new boolean[256];\n\t\tprivate static boolean[] isSpace = new boolean[256];\n\t\tprivate static boolean[] isLineSep = new boolean[256];\n\n\t\tstatic { for(int i = 0; i < 10; i++) { isDigit['0' + i] = true; } isDigit['-'] = true; isSpace[' '] = isSpace['\\r'] = isSpace['\\n'] = isSpace['\\t'] = true; isLineSep['\\r'] = isLineSep['\\n'] = true; }\n\t\tpublic int read() throws IOException { if(pos >= readLen) { pos = 0; readLen = in.read(buffer); if(readLen <= 0) { throw new EndOfFileRuntimeException(); } } return buffer[pos++]; }\n\t\tpublic int nextInt() throws IOException { int len = 0; str[len++] = nextChar(); len = reads(len, isSpace); int i = 0; int ret = 0; if(str[0] == '-') { i = 1; } for(; i < len; i++) ret = ret * 10 + str[i] - '0'; if(str[0] == '-') { ret = -ret; } return ret; }\n\t\tpublic long nextLong() throws IOException { int len = 0; str[len++] = nextChar(); len = reads(len, isSpace); int i = 0; long ret = 0; if(str[0] == '-') { i = 1; } for(; i < len; i++) ret = ret * 10 + str[i] - '0'; if(str[0] == '-') { ret = -ret; } return ret; }\n\t\tpublic char nextChar() throws IOException { while(true) { final int c = read(); if(!isSpace[c]) { return (char)c; } } }\n\t\tint reads(int len, boolean[] accept) throws IOException { try { while(true) { final int c = read(); if(accept[c]) { break; } if(str.length == len) { char[] rep = new char[str.length * 3 \/ 2]; System.arraycopy(str, 0, rep, 0, str.length); str = rep; } str[len++] = (char)c; } } catch(EndOfFileRuntimeException e) { ; } return len; }\n\t\tint reads(char[] cs, int len, boolean[] accept) throws IOException { try { while(true) { final int c = read(); if(accept[c]) { break; } cs[len++] = (char)c; } } catch(EndOfFileRuntimeException e) { ; } return len; }\n\t\tpublic char[] nextLine() throws IOException { int len = 0; str[len++] = nextChar(); len = reads(len, isLineSep); try { if(str[len-1] == '\\r') { len--; read(); } } catch(EndOfFileRuntimeException e) { ; } return Arrays.copyOf(str, len); }\n\t\tpublic String nextString() throws IOException { return new String(next()); }\n\t\tpublic char[] next() throws IOException { int len = 0; str[len++] = nextChar(); len = reads(len, isSpace); return Arrays.copyOf(str, len); }\n\t\tpublic int next(char[] cs) throws IOException { int len = 0; cs[len++] = nextChar(); len = reads(cs, len, isSpace); return len; }\n\t\tpublic double nextDouble() throws IOException { return Double.parseDouble(nextString()); }\n\t\tpublic long[] nextLongArray(final int n) throws IOException { final long[] res = new long[n]; for(int i = 0; i < n; i++) { res[i] = nextLong(); } return res; }\n\t\tpublic int[] nextIntArray(final int n) throws IOException { final int[] res = new int[n]; for(int i = 0; i < n; i++) { res[i] = nextInt(); } return res; }\n\t\tpublic int[][] nextIntArray2D(final int n, final int k) throws IOException { final int[][] res = new int[n][]; for(int i = 0; i < n; i++) { res[i] = nextIntArray(k); } return res; }\n\t\tpublic int[][] nextIntArray2DWithIndex(final int n, final int k) throws IOException { final int[][] res = new int[n][k+1]; for(int i = 0; i < n; i++) { for(int j = 0; j < k; j++) { res[i][j] = nextInt(); } res[i][k] = i; } return res; }\n\t\tpublic double[] nextDoubleArray(final int n) throws IOException { final double[] res = new double[n]; for(int i = 0; i < n; i++) { res[i] = nextDouble(); } return res; }\n\t}\n}\n","prob_desc_sample_outputs":"[\"19\"]","lang_cluster":"Java","code_uid":"0eb0f2a4ebf89b8270ca2e19a679ac06","prob_desc_notes":"NoteStart: Game is in state A.   Turn 1: Either bot can make a move (first bot is red and second bot is blue), so there are two possible states after the first turn \u2013 B and C.  Turn 2: In both states B and C, either bot can again make a turn, so the list of possible states is expanded to include D, E, F and G.  Turn 3: Red bot already did N=2 moves when in state D, so it cannot make any more moves there. It can make moves when in state E, F and G, so states I, K and M are added to the list. Similarly, blue bot cannot make a move when in state G, but can when in D, E and F, so states H, J and L are added.  Turn 4: Red bot already did N=2 moves when in states H, I and K, so it can only make moves when in J, L and M, so states P, R and S are added. Blue bot cannot make a move when in states J, L and M, but only when in H, I and K, so states N, O and Q are added. Overall, there are 19 possible states of the game their algorithm needs to analyze.","prob_desc_output_spec":"Output should contain a single integer \u2013 number of possible states modulo 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"Sasha and Ira are two best friends. But they aren\u2019t just friends, they are software engineers and experts in artificial intelligence. They are developing an algorithm for two bots playing a two-player game. The game is cooperative and turn based. In each turn, one of the players makes a move (it doesn\u2019t matter which player, it's possible that players turns do not alternate). Algorithm for bots that Sasha and Ira are developing works by keeping track of the state the game is in. Each time either bot makes a move, the state changes. And, since the game is very dynamic, it will never go back to the state it was already in at any point in the past.Sasha and Ira are perfectionists and want their algorithm to have an optimal winning strategy. They have noticed that in the optimal winning strategy, both bots make exactly N moves each. But, in order to find the optimal strategy, their algorithm needs to analyze all possible states of the game (they haven\u2019t learned about alpha-beta pruning yet) and pick the best sequence of moves.They are worried about the efficiency of their algorithm and are wondering what is the total number of states of the game that need to be analyzed? ","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"69\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"251\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"923\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"3431\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"12869\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"48619\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"184755\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"705431\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"407336794\"]}, {\"input\": \"999\\r\\n\", \"output\": [\"72475737\"]}, {\"input\": \"9999\\r\\n\", \"output\": [\"703593269\"]}, {\"input\": \"99999\\r\\n\", \"output\": [\"879467332\"]}, {\"input\": \"999999\\r\\n\", \"output\": [\"192151599\"]}, {\"input\": \"524287\\r\\n\", \"output\": [\"295397547\"]}, {\"input\": \"131071\\r\\n\", \"output\": [\"920253602\"]}, {\"input\": \"178481\\r\\n\", \"output\": [\"845172388\"]}, {\"input\": \"524288\\r\\n\", \"output\": [\"250289717\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"627314155\"]}]","length":162,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":null,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"GTTAAAG\", \"AACCAACCAAAAC\"]","prob_desc_input_spec":"The input consists of a single line, containing a string s of length n (1\u2009\u2264\u2009n\u2009\u2264\u2009100). Each character of s will be from the set {'A', 'T', 'G', 'C'}. This problem doesn't have subproblems. You will get 3 points for the correct submission.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"8b26ca1ca2b28166c3d25dceb1f3d49f","prob_desc_created_at":"1392573600","source_code":"\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.BitSet;\nimport java.util.Calendar;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.Stack;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n\/**\n *\n *\n * 3 2 3 5\n * -2 -1 4 -1 2 7 3\n *\n * 10 1 -10617 30886 -7223 -63085 47793 -61665 -14614 60492 16649 -58579 3 8 1\n * 10 4 7 1 7 3 7\n *\n * 22862 -34877\n *\n * @author pttrung\n *\/\npublic class D {\n\n    public static long MOD = 1000000007;\n    static int x = 0, y = 0;\n    static boolean start;\n    public static long[][] dp, c;\n    public static int[] X = {0, 1, 0, -1};\n    public static int[] Y = {1, 0, -1, 0};\n\n    public static void main(String[] args) throws FileNotFoundException {\n        PrintWriter out;\n        Scanner in = new Scanner();\n        \/\/ out = new PrintWriter(new FileOutputStream(new File(\"output.txt\")));\n        out = new PrintWriter(System.out);\n        int result = 0;\n        String line = in.next();\n        int last = 1;\n        for (int i = 1; i < line.length(); i++) {\n            if (line.charAt(i) == line.charAt(i - 1)) {\n                last++;\n            } else {\n                if (last % 2 == 0) {\n                    result++;\n                }\n                last = 1;\n            }\n        }\n        if (last % 2 == 0) {\n            result++;\n        }\n        out.println(result);\n        out.close();\n    }\n\n    public static int[] KMP(String val) {\n        int i = 0;\n        int j = -1;\n        int[] result = new int[val.length() + 1];\n        result[0] = -1;\n        while (i < val.length()) {\n            while (j >= 0 && val.charAt(j) != val.charAt(i)) {\n                j = result[j];\n            }\n            j++;\n            i++;\n            result[i] = j;\n        }\n        return result;\n\n    }\n\n    public static boolean nextPer(int[] data) {\n        int i = data.length - 1;\n        while (i > 0 && data[i] < data[i - 1]) {\n            i--;\n        }\n        if (i == 0) {\n            return false;\n        }\n        int j = data.length - 1;\n        while (data[j] < data[i - 1]) {\n            j--;\n        }\n        int temp = data[i - 1];\n        data[i - 1] = data[j];\n        data[j] = temp;\n        Arrays.sort(data, i, data.length);\n        return true;\n    }\n\n    public static int digit(long n) {\n        int result = 0;\n        while (n > 0) {\n            n \/= 10;\n            result++;\n        }\n        return result;\n    }\n\n    public static double dist(long a, long b, long x, long y) {\n        double val = (b - a) * (b - a) + (x - y) * (x - y);\n        val = Math.sqrt(val);\n        double other = x * x + a * a;\n        other = Math.sqrt(other);\n        return val + other;\n\n    }\n\n    public static class Point implements Comparable<Point> {\n\n        int x, y;\n\n        public Point(int start, int end) {\n            this.x = start;\n            this.y = end;\n        }\n\n        @Override\n        public int hashCode() {\n            int hash = 5;\n            hash = 47 * hash + this.x;\n            hash = 47 * hash + this.y;\n            return hash;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj == null) {\n                return false;\n            }\n            if (getClass() != obj.getClass()) {\n                return false;\n            }\n            final Point other = (Point) obj;\n            if (this.x != other.x) {\n                return false;\n            }\n            if (this.y != other.y) {\n                return false;\n            }\n            return true;\n        }\n\n        @Override\n        public int compareTo(Point o) {\n            return x - o.x;\n        }\n    }\n\n    public static class FT {\n\n        long[] data;\n\n        FT(int n) {\n            data = new long[n];\n        }\n\n        public void update(int index, long value) {\n            while (index < data.length) {\n                data[index] += value;\n                index += (index & (-index));\n            }\n        }\n\n        public long get(int index) {\n            long result = 0;\n            while (index > 0) {\n                result += data[index];\n                index -= (index & (-index));\n            }\n            return result;\n\n        }\n    }\n\n    public static long gcd(long a, long b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    public static long pow(long a, long b) {\n        if (b == 0) {\n            return 1;\n        }\n        if (b == 1) {\n            return a;\n        }\n        long val = pow(a, b \/ 2);\n        if (b % 2 == 0) {\n            return val * val % MOD;\n        } else {\n            return val * (val * a % MOD) % MOD;\n\n\n\n\n\n\n\n\n        }\n    }\n\n    static class Scanner {\n\n        BufferedReader br;\n        StringTokenizer st;\n\n        public Scanner() throws FileNotFoundException {\n            \/\/ System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n            br = new BufferedReader(new InputStreamReader(System.in));\n            \/\/  br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\n        }\n\n        public String next() {\n\n            while (st == null || !st.hasMoreTokens()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (Exception e) {\n                    throw new RuntimeException();\n                }\n            }\n            return st.nextToken();\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        public String nextLine() {\n            st = null;\n            try {\n                return br.readLine();\n            } catch (Exception e) {\n                throw new RuntimeException();\n            }\n        }\n\n        public boolean endLine() {\n            try {\n                String next = br.readLine();\n                while (next != null && next.trim().isEmpty()) {\n                    next = br.readLine();\n                }\n                if (next == null) {\n                    return true;\n                }\n                st = new StringTokenizer(next);\n                return st.hasMoreTokens();\n            } catch (Exception e) {\n                throw new RuntimeException();\n            }\n        }\n    }\n}\n","prob_desc_sample_outputs":"[\"1\", \"5\"]","lang_cluster":"Java","code_uid":"4d0717c4fee71f84c55f0ff6dfe2ef91","prob_desc_notes":"NoteIn the first example, it is sufficient to insert a single nucleotide of any type between the two 'T's in the sequence to restore the functionality of the protein.","prob_desc_output_spec":"The program should print on one line a single integer representing the minimum number of 'A', 'T', 'G', 'C' characters that are required to be inserted into the input string in order to make all runs of identical characters have odd length.","prob_desc_output_to":"standard output","prob_desc_description":"You will receive 3 points for solving this problem.Manao is designing the genetic code for a new type of algae to efficiently produce fuel. Specifically, Manao is focusing on a stretch of DNA that encodes one protein. The stretch of DNA is represented by a string containing only the characters 'A', 'T', 'G' and 'C'.Manao has determined that if the stretch of DNA contains a maximal sequence of consecutive identical nucleotides that is of even length, then the protein will be nonfunctional. For example, consider a protein described by DNA string \"GTTAAAG\". It contains four maximal sequences of consecutive identical nucleotides: \"G\", \"TT\", \"AAA\", and \"G\". The protein is nonfunctional because sequence \"TT\" has even length.Manao is trying to obtain a functional protein from the protein he currently has. Manao can insert additional nucleotides into the DNA stretch. Each additional nucleotide is a character from the set {'A', 'T', 'G', 'C'}. Manao wants to determine the minimum number of insertions necessary to make the DNA encode a functional protein.","hidden_unit_tests":"[{\"input\": \"GTTAAAG\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"AACCAACCAAAAC\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"GTGAATTTCC\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"CAGGGGGCCGCCCATGAAAAAAACCCGGCCCCTTGGGAAAACTTGGGTTA\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"CCCTTCACCCGGATCCAAATCCCTTAGAAATAATCCCCGACGGCGTTGTATCACCTCTGCACTTGTTAGTAAGGTCAGGCGTCCATTACGGAAGAACGTA\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"GCATTACATGGGGGGGTCCTACGAGCCCGGCATCCCGGAAACTAGCCGGTTAATTTGGTTTAAACCCTCCCACCCCGGATTGTAACCCCCCTCATTGGTT\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"TTCCCAGAGAAAAAAAGGGGCCCAAATGCCCTAAAAACCCCCTTTGCCCCCCAACCCCTTTTTAAAATAAAAAGGGGCCCATTCCCTTAAAAATTTTTTG\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"AGCCGCCCCCCCAAAAAAGGGGGAAAAAAAAAAAAAAAAAAAAACTTTTGGAAACCCCCCCCTTTTTTTTTTTTTTTTTTTTTTTTTGGGGAAGGGGGGG\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"AAAAAAAAAAAAAAAAAATTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGAAAAATTTT\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"AACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTCCGG\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"A\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"TTT\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"G\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"T\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"C\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"AA\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"GGG\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"AAG\\r\\n\", \"output\": [\"1\"]}]","length":284,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"10 20 30\", \"1 1 5\"]","prob_desc_input_spec":"The first line of the input contains three integers d1, d2, d3 (1\u2009\u2264\u2009d1,\u2009d2,\u2009d3\u2009\u2264\u2009108)\u00a0\u2014 the lengths of the paths.    d1 is the length of the path connecting Patrick's house and the first shop;  d2 is the length of the path connecting Patrick's house and the second shop;  d3 is the length of the path connecting both shops. ","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"26cd7954a21866dbb2824d725473673e","prob_desc_created_at":"1448037300","source_code":"\/\/package com.company;\n\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n       int d1=input.nextInt(),d2=input.nextInt(),d3=input.nextInt();\n        System.out.println(Math.min(d1,d2+d3)+Math.min(d2,d3+d1)+Math.min(d3,d1+d2));\n    }\n}","prob_desc_sample_outputs":"[\"60\", \"4\"]","lang_cluster":"Java","code_uid":"e572b00781a7a24aa70a64da67b688c1","prob_desc_notes":"NoteThe first sample is shown on the picture in the problem statement. One of the optimal routes is: house  first shop  second shop  house.In the second sample one of the optimal routes is: house  first shop  house  second shop  house.","prob_desc_output_spec":"Print the minimum distance that Patrick will have to walk in order to visit both shops and return to his house.","prob_desc_output_to":"standard output","prob_desc_description":"Today Patrick waits for a visit from his friend Spongebob. To prepare for the visit, Patrick needs to buy some goodies in two stores located near his house. There is a d1 meter long road between his house and the first shop and a d2 meter long road between his house and the second shop. Also, there is a road of length d3 directly connecting these two shops to each other. Help Patrick calculate the minimum distance that he needs to walk in order to go to both shops and return to his house.  Patrick always starts at his house. He should visit both shops moving only along the three existing roads and return back to his house. He doesn't mind visiting the same shop or passing the same road multiple times. The only goal is to minimize the total distance traveled.","hidden_unit_tests":"[{\"input\": \"10 20 30\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"1 1 5\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100 33 34\\r\\n\", \"output\": [\"134\"]}, {\"input\": \"777 777 777\\r\\n\", \"output\": [\"2331\"]}, {\"input\": \"2 2 8\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"12 34 56\\r\\n\", \"output\": [\"92\"]}, {\"input\": \"789 101112 131415\\r\\n\", \"output\": [\"203802\"]}, {\"input\": \"27485716 99999999 35182\\r\\n\", \"output\": [\"55041796\"]}, {\"input\": \"1 293548 5\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"12059 259855 5874875\\r\\n\", \"output\": [\"543828\"]}, {\"input\": \"46981 105809 585858\\r\\n\", \"output\": [\"305580\"]}, {\"input\": \"9889 1221 2442\\r\\n\", \"output\": [\"7326\"]}, {\"input\": \"100500 200600 300700\\r\\n\", \"output\": [\"601800\"]}, {\"input\": \"318476 318476 318476\\r\\n\", \"output\": [\"955428\"]}, {\"input\": \"23985 3353 75633\\r\\n\", \"output\": [\"54676\"]}, {\"input\": \"120 1298 2222\\r\\n\", \"output\": [\"2836\"]}, {\"input\": \"98437 23487 666672\\r\\n\", \"output\": [\"243848\"]}, {\"input\": \"100000000 100000000 100000000\\r\\n\", \"output\": [\"300000000\"]}, {\"input\": \"2 5 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 1000 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 100000000 1\\r\\n\", \"output\": [\"4\"]}]","length":12,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3+2+1\", \"1+1+3+1+3\", \"2\"]","prob_desc_input_spec":"The first line contains a non-empty string s \u2014 the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2 and 3. String s is at most 100 characters long.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"76c7312733ef9d8278521cf09d3ccbc8","prob_desc_created_at":"1377531000","source_code":"import java.util.PriorityQueue;\nimport java.util.Scanner;\n\n\npublic class Main {\n public static void main(String[] args) {\n        Scanner lector = new Scanner(System.in);\n        PriorityQueue<Integer> list = new PriorityQueue();\n        String s = lector.next();\n        int x;\n        \n        for(char c:s.toCharArray()){\n            if(c!='+'){\n                list.add(c-48);\n            }  \n        }\n        \n        x = list.size();\n        \n        for (int i = 0; i < (x-1); i++) {\n             System.out.print(list.poll()+\"+\");\n        }\n            System.out.println(list.poll());\n    } }\n\/\/ 1509316386944\n","prob_desc_sample_outputs":"[\"1+2+3\", \"1+1+1+3+3\", \"2\"]","lang_cluster":"Java","code_uid":"cc6ebefb95c2c53d0ac19fde839e3e2a","prob_desc_notes":null,"prob_desc_output_spec":"Print the new sum that Xenia can count.","prob_desc_output_to":"standard output","prob_desc_description":"Xenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.The teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2 and 3. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+3.You've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.","hidden_unit_tests":"[{\"input\": \"3+2+1\\r\\n\", \"output\": [\"1+2+3\"]}, {\"input\": \"1+1+3+1+3\\r\\n\", \"output\": [\"1+1+1+3+3\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2+2+1+1+3\\r\\n\", \"output\": [\"1+1+2+2+3\"]}, {\"input\": \"2+1+2+2+2+3+1+3+1+2\\r\\n\", \"output\": [\"1+1+1+2+2+2+2+2+3+3\"]}, {\"input\": \"1+2+1+2+2+2+2+1+3+3\\r\\n\", \"output\": [\"1+1+1+2+2+2+2+2+3+3\"]}, {\"input\": \"2+3+3+1+2+2+2+1+1+2+1+3+2+2+3+3+2+2+3+3+3+1+1+1+3+3+3+2+1+3+2+3+2+1+1+3+3+3+1+2+2+1+2+2+1+2+1+3+1+1\\r\\n\", \"output\": [\"1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2+1+2+2+1+3+2+3+1+1+2+1+2+2+3+1+1+3+3+3+2+2+3+2+2+2+1+2+1+2+3+2+2+2+1+3+1+3+3+3+1+2+1+2+2+2+2+3+1+1\\r\\n\", \"output\": [\"1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3\"]}, {\"input\": \"2+2+1+1+1+3+1+1+3+3+2+3+1+3+1+1+3+1+1+2+2+2+2+1+2+1+2+1+1+1+3+1+3+2+3+2+3+3+1+1+1+2+3+2+1+3+1+3+2+2\\r\\n\", \"output\": [\"1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3+3\"]}, {\"input\": \"3+2+3+3+2+2+1+2+1+2+3+1+2+3+2+3+2+1+2+2+1+1+2+2+3+2+1+3+1+1+3+2+2+2+2+3+3+2+2+3+3+1+1+2+3+3+2+3+3+3\\r\\n\", \"output\": [\"1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1+1\\r\\n\", \"output\": [\"1+1\"]}, {\"input\": \"1+2\\r\\n\", \"output\": [\"1+2\"]}, {\"input\": \"1+3\\r\\n\", \"output\": [\"1+3\"]}, {\"input\": \"2+1\\r\\n\", \"output\": [\"1+2\"]}, {\"input\": \"2+2\\r\\n\", \"output\": [\"2+2\"]}, {\"input\": \"2+3\\r\\n\", \"output\": [\"2+3\"]}, {\"input\": \"3+1\\r\\n\", \"output\": [\"1+3\"]}, {\"input\": \"3+2\\r\\n\", \"output\": [\"2+3\"]}, {\"input\": \"3+3\\r\\n\", \"output\": [\"3+3\"]}]","length":25,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n10 2 3 5 4 2\", \"4\\n100 100 100 100\", \"8\\n7 6 5 4 3 2 2 3\"]","prob_desc_input_spec":"The first line contains an integer $$$n$$$ ($$$1 \\le n \\le 100$$$), where $$$n$$$ is the length of the given sequence. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 100$$$). These numbers can contain duplicates.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"63d9b7416aa96129c57d20ec6145e0cd","prob_desc_created_at":"1568466300","source_code":"import java.util.*;\n\npublic class Main {\n    public static void main(String[] args)  {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n\n        int a[]=new int[n];\n        boolean b[]=new boolean[n];\n        int r=0;\n        for (int i=0;i<n;i++){\n            a[i]=sc.nextInt();\n        }\n        Arrays.sort(a);\n        for (int i=0;i<a.length;i++){\n            if (!b[i]){\n                r++;\n                for (int j=i;j<a.length;j++){\n                    if (a[j]%a[i]==0)\n                        b[j]=true;\n                }\n            }\n        }\n        System.out.println(r);\n\n\n    }\n}","prob_desc_sample_outputs":"[\"3\", \"1\", \"4\"]","lang_cluster":"Java","code_uid":"ffbdb3604b8b839da2e5e27ad6bd0bd1","prob_desc_notes":"NoteIn the first example, one possible way to paint the elements in $$$3$$$ colors is:  paint in the first color the elements: $$$a_1=10$$$ and $$$a_4=5$$$,  paint in the second color the element $$$a_3=3$$$,  paint in the third color the elements: $$$a_2=2$$$, $$$a_5=4$$$ and $$$a_6=2$$$. In the second example, you can use one color to paint all the elements.In the third example, one possible way to paint the elements in $$$4$$$ colors is:  paint in the first color the elements: $$$a_4=4$$$, $$$a_6=2$$$ and $$$a_7=2$$$,  paint in the second color the elements: $$$a_2=6$$$, $$$a_5=3$$$ and $$$a_8=3$$$,  paint in the third color the element $$$a_3=5$$$,  paint in the fourth color the element $$$a_1=7$$$. ","prob_desc_output_spec":"Print the minimal number of colors to paint all the given numbers in a valid way.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a sequence of integers $$$a_1, a_2, \\dots, a_n$$$. You need to paint elements in colors, so that:   If we consider any color, all elements of this color must be divisible by the minimal element of this color.  The number of used colors must be minimized. For example, it's fine to paint elements $$$[40, 10, 60]$$$ in a single color, because they are all divisible by $$$10$$$. You can use any color an arbitrary amount of times (in particular, it is allowed to use a color only once). The elements painted in one color do not need to be consecutive.For example, if $$$a=[6, 2, 3, 4, 12]$$$ then two colors are required: let's paint $$$6$$$, $$$3$$$ and $$$12$$$ in the first color ($$$6$$$, $$$3$$$ and $$$12$$$ are divisible by $$$3$$$) and paint $$$2$$$ and $$$4$$$ in the second color ($$$2$$$ and $$$4$$$ are divisible by $$$2$$$). For example, if $$$a=[10, 7, 15]$$$ then $$$3$$$ colors are required (we can simply paint each element in an unique color).","hidden_unit_tests":"[{\"input\": \"6\\r\\n10 2 3 5 4 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\n100 100 100 100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8\\r\\n7 6 5 4 3 2 2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"100\\r\\n17 23 71 25 50 71 85 46 78 72 89 26 23 70 40 59 23 43 86 81 70 89 92 98 85 88 16 10 26 91 61 58 23 13 75 39 48 15 73 79 59 29 48 32 45 44 25 37 58 54 45 67 27 77 20 64 95 41 80 53 69 24 38 97 59 94 50 88 92 47 95 31 66 48 48 56 37 76 42 74 55 34 43 79 65 82 70 52 48 56 36 17 14 65 77 81 88 18 33 40\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"100\\r\\n89 38 63 73 77 4 99 74 30 5 69 57 97 37 88 71 36 59 19 63 46 20 33 58 61 98 100 31 33 53 99 96 34 17 44 95 54 52 22 77 67 88 20 88 26 43 12 23 96 94 14 7 57 86 56 54 32 8 3 43 97 56 74 22 5 100 12 60 93 12 44 68 31 63 7 71 21 29 19 38 50 47 97 43 50 59 88 40 51 61 20 68 32 66 70 48 19 55 91 53\\r\\n\", \"output\": [\"22\"]}, {\"input\": \"100\\r\\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 18 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\\r\\n\", \"output\": [\"22\"]}, {\"input\": \"100\\r\\n83 74 53 90 85 65 55 74 86 64 69 70 66 57 93 90 97 66 62 52 76 80 70 65 79 59 88 65 76 70 94 57 53 83 91 69 59 80 82 53 97 91 75 74 77 70 51 58 56 79 72 79 60 91 60 84 75 92 88 93 96 100 56 77 55 56 69 80 100 78 68 69 90 99 97 62 85 97 71 52 60 83 85 89 96 98 59 96 85 98 51 90 90 71 97 91 94 64 57 52\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"100\\r\\n94 83 55 57 63 89 73 59 75 97 77 54 77 81 70 81 99 52 88 76 98 88 79 67 76 80 89 50 60 60 53 83 96 87 75 99 61 91 75 85 88 80 90 54 84 88 98 93 69 97 93 54 83 59 57 92 88 78 53 55 99 63 60 70 61 52 60 55 100 85 80 58 53 97 59 61 50 90 75 85 86 63 91 96 67 68 86 96 79 98 51 83 82 92 65 100 76 83 57 100\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"100\\r\\n70 89 84 63 91 63 75 56 87 98 93 58 95 67 57 90 56 100 84 82 80 64 71 58 67 62 52 81 92 74 79 83 100 72 70 61 97 86 91 93 62 86 88 66 55 59 65 59 72 80 68 95 53 82 54 85 81 85 52 65 96 94 66 74 68 64 73 99 97 99 78 69 79 90 54 51 87 96 77 78 77 76 98 53 71 76 55 61 89 94 88 57 83 51 69 60 75 60 92 73\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"10\\r\\n7 70 8 9 8 9 35 1 99 27\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n40 80 40 40 40\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"17\\r\\n13 63 82 53 83 30 7 8 21 61 74 41 11 54 71 53 66\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"10\\r\\n8 5 5 10 8 10 8 9 7 9\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"20\\r\\n6 8 14 8 9 4 7 9 7 6 9 10 14 14 11 7 12 6 11 6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"15\\r\\n5 4 2 6 9 8 2 8 6 4 4 6 5 10 6\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"26\\r\\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n1 2\\r\\n\", \"output\": [\"1\"]}]","length":28,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"33\", \"98\"]","prob_desc_input_spec":"The only line contains a single integer $$$x$$$ ($$$30 \\leq x \\leq 100$$$)\u00a0\u2014 the value Tokitsukaze's HP currently.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"488e809bd0c55531b0b47f577996627e","prob_desc_created_at":"1562942100","source_code":"import java.util.Scanner;\n\n\/**\n * Create by andre on 22.07.2019\n *\/\npublic class Tokitsukaze {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \/\/while (true) {\n            int hp = scanner.nextInt();\n            classHP(hp);\n        \/\/}\n    }\n\n    public static void classHP(int hp) {\n        int n = hp \/ 4;\n        switch (hp % 4) {\n            case 1:\n                System.out.println(0+\" A\");\n                break;\n            case 3:\n                System.out.println(2+\" A\");\n                break;\n            case 2:\n                System.out.println(1+\" B\");\n                break;\n            case 0:\n                System.out.println(1+\" A\");\n                break;\n        }\n    }\n}\n","prob_desc_sample_outputs":"[\"0 A\", \"1 B\"]","lang_cluster":"Java","code_uid":"6238e57688eb5c4e20b36b6ca6fd64a4","prob_desc_notes":"NoteFor the first example, the category of Tokitsukaze's HP is already $$$A$$$, so you don't need to enhance her ability.For the second example:  If you don't increase her HP, its value is still $$$98$$$, which equals to $$$(4 \\times 24 + 2)$$$, and its category is $$$C$$$.  If you increase her HP by $$$1$$$, its value becomes $$$99$$$, which equals to $$$(4 \\times 24 + 3)$$$, and its category becomes $$$B$$$.  If you increase her HP by $$$2$$$, its value becomes $$$100$$$, which equals to $$$(4 \\times 25)$$$, and its category becomes $$$D$$$. Therefore, the best way is to increase her HP by $$$1$$$ so that the category of her HP becomes $$$B$$$.","prob_desc_output_spec":"Print an integer $$$a$$$ ($$$0 \\leq a \\leq 2$$$) and an uppercase letter $$$b$$$ ($$$b \\in \\lbrace A, B, C, D \\rbrace$$$), representing that the best way is to increase her HP by $$$a$$$, and then the category becomes $$$b$$$. Note that the output characters are case-sensitive.","prob_desc_output_to":"standard output","prob_desc_description":"Tokitsukaze is one of the characters in the game \"Kantai Collection\". In this game, every character has a common attribute\u00a0\u2014 health points, shortened to HP.In general, different values of HP are grouped into $$$4$$$ categories:  Category $$$A$$$ if HP is in the form of $$$(4 n + 1)$$$, that is, when divided by $$$4$$$, the remainder is $$$1$$$;  Category $$$B$$$ if HP is in the form of $$$(4 n + 3)$$$, that is, when divided by $$$4$$$, the remainder is $$$3$$$;  Category $$$C$$$ if HP is in the form of $$$(4 n + 2)$$$, that is, when divided by $$$4$$$, the remainder is $$$2$$$;  Category $$$D$$$ if HP is in the form of $$$4 n$$$, that is, when divided by $$$4$$$, the remainder is $$$0$$$. The above-mentioned $$$n$$$ can be any integer.These $$$4$$$ categories ordered from highest to lowest as $$$A &gt; B &gt; C &gt; D$$$, which means category $$$A$$$ is the highest and category $$$D$$$ is the lowest.While playing the game, players can increase the HP of the character. Now, Tokitsukaze wants you to increase her HP by at most $$$2$$$ (that is, either by $$$0$$$, $$$1$$$ or $$$2$$$). How much should she increase her HP so that it has the highest possible category?","hidden_unit_tests":"[{\"input\": \"33\\r\\n\", \"output\": [\"0  A\", \"0 A\"]}, {\"input\": \"98\\r\\n\", \"output\": [\"1 B\", \"1  B\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"1 A\", \"1  A\"]}, {\"input\": \"30\\r\\n\", \"output\": [\"1 B\", \"1  B\"]}, {\"input\": \"43\\r\\n\", \"output\": [\"2 A\", \"2   A\"]}, {\"input\": \"85\\r\\n\", \"output\": [\"0  A\", \"0 A\"]}, {\"input\": \"91\\r\\n\", \"output\": [\"2 A\", \"2   A\"]}, {\"input\": \"50\\r\\n\", \"output\": [\"1 B\", \"1  B\"]}, {\"input\": \"67\\r\\n\", \"output\": [\"2 A\", \"2   A\"]}, {\"input\": \"95\\r\\n\", \"output\": [\"2 A\", \"2   A\"]}, {\"input\": \"32\\r\\n\", \"output\": [\"1 A\", \"1  A\"]}, {\"input\": \"60\\r\\n\", \"output\": [\"1 A\", \"1  A\"]}, {\"input\": \"88\\r\\n\", \"output\": [\"1 A\", \"1  A\"]}, {\"input\": \"36\\r\\n\", \"output\": [\"1 A\", \"1  A\"]}, {\"input\": \"83\\r\\n\", \"output\": [\"2 A\", \"2   A\"]}, {\"input\": \"42\\r\\n\", \"output\": [\"1 B\", \"1  B\"]}, {\"input\": \"59\\r\\n\", \"output\": [\"2 A\", \"2   A\"]}, {\"input\": \"76\\r\\n\", \"output\": [\"1 A\", \"1  A\"]}, {\"input\": \"93\\r\\n\", \"output\": [\"0  A\", \"0 A\"]}, {\"input\": \"52\\r\\n\", \"output\": [\"1 A\", \"1  A\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"2 A\", \"2   A\"]}]","length":32,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n1 3 3 2\", \"3\\n1 1 1\", \"4\\n42 0 0 42\"]","prob_desc_input_spec":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of participants. The next line contains a sequence of n integers a1,\u2009a2,\u2009...,\u2009an (0\u2009\u2264\u2009ai\u2009\u2264\u2009600)\u00a0\u2014 participants' scores. It's guaranteed that at least one participant has non-zero score.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"3b520c15ea9a11b16129da30dcfb5161","prob_desc_created_at":"1519574700","source_code":"import java.io.BufferedReader;\n \nimport java.io.IOException; \nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.Scanner; \nimport java.util.StringTokenizer;\nimport java.util.ArrayList;\nimport java.util.TreeSet;\nimport java.util.Collections;\n  \npublic class Hello\n{ \n    static class FastReader \n    { \n        BufferedReader br; \n        StringTokenizer st; \n  \n        public FastReader() \n        { \n            br = new BufferedReader(new\n                     InputStreamReader(System.in)); \n        } \n  \n        String next() \n        { \n            while (st == null || !st.hasMoreElements()) \n            { \n                try\n                { \n                    st = new StringTokenizer(br.readLine()); \n                } \n                catch (IOException  e) \n                { \n                    e.printStackTrace(); \n                } \n            } \n            return st.nextToken(); \n        } \n  \n        int nextInt() \n        { \n            return Integer.parseInt(next()); \n        } \n  \n        long nextLong() \n        { \n            return Long.parseLong(next()); \n        } \n  \n        double nextDouble() \n        { \n            return Double.parseDouble(next()); \n        } \n  \n        String nextLine() \n        { \n            String str = \"\"; \n            try\n            { \n                str = br.readLine(); \n            } \n            catch (IOException e) \n            { \n                e.printStackTrace(); \n            } \n            return str; \n        } \n    } \n  \n    public static void main(String[] args) \n    { \n        FastReader in=new FastReader(); \n        \n        \n        \/\/start code here\n        int n=in.nextInt();\n        int res=0;\n        ArrayList<Integer> al = new ArrayList<>();\n        for(int i=0;i<n;++i)\n        {\n        \tint x = in.nextInt();\n        \tif(x!=0&&!al.contains(x))\n        \t{\n        \t\t++res;\n        \t\tal.add(x);\n        \t}\n        }\n        System.out.print(res);\n    }\n} ","prob_desc_sample_outputs":"[\"3\", \"1\", \"1\"]","lang_cluster":"Java","code_uid":"d75b817fb7e17cc64b3c9a9ab5b24ed2","prob_desc_notes":"NoteThere are three ways to choose a subset in sample case one.  Only participants with 3 points will get diplomas.  Participants with 2 or 3 points will get diplomas.  Everyone will get a diploma! The only option in sample case two is to award everyone.Note that in sample case three participants with zero scores cannot get anything.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the desired number of ways.","prob_desc_output_to":"standard output","prob_desc_description":"The recent All-Berland Olympiad in Informatics featured n participants with each scoring a certain amount of points.As the head of the programming committee, you are to determine the set of participants to be awarded with diplomas with respect to the following criteria:   At least one participant should get a diploma.  None of those with score equal to zero should get awarded.  When someone is awarded, all participants with score not less than his score should also be awarded. Determine the number of ways to choose a subset of participants that will receive the diplomas.","hidden_unit_tests":"[{\"input\": \"4\\r\\n1 3 3 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n42 0 0 42\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n1 0 1 0 1 0 0 0 0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n572 471 540 163 50 30 561 510 43 200\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"100\\r\\n122 575 426 445 172 81 247 429 97 202 175 325 382 384 417 356 132 502 328 537 57 339 518 211 479 306 140 168 268 16 140 263 593 249 391 310 555 468 231 180 157 18 334 328 276 155 21 280 322 545 111 267 467 274 291 304 235 34 365 180 21 95 501 552 325 331 302 353 296 22 289 399 7 466 32 302 568 333 75 192 284 10 94 128 154 512 9 480 243 521 551 492 420 197 207 125 367 117 438 600\\r\\n\", \"output\": [\"94\"]}, {\"input\": \"100\\r\\n600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"78\\r\\n5 4 13 2 5 6 2 10 10 1 2 6 7 9 6 3 5 7 1 10 2 2 7 0 2 11 11 3 1 13 3 10 6 2 0 3 0 5 0 1 4 11 1 1 7 0 12 7 5 12 0 2 12 9 8 3 4 3 4 11 4 10 2 3 10 12 5 6 1 11 2 0 8 7 9 1 3 12\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"34\\r\\n220 387 408 343 184 447 197 307 337 414 251 319 426 322 347 242 208 412 188 185 241 235 216 259 331 372 322 284 444 384 214 297 389 391\\r\\n\", \"output\": [\"33\"]}, {\"input\": \"100\\r\\n1 2 1 0 3 0 2 0 0 1 2 0 1 3 0 3 3 1 3 0 0 2 1 2 2 1 3 3 3 3 3 2 0 0 2 1 2 3 2 3 0 1 1 3 3 2 0 3 1 0 2 2 2 1 2 3 2 1 0 3 0 2 0 3 0 2 1 0 3 1 0 2 2 1 3 1 3 0 2 3 3 1 1 3 1 3 0 3 2 0 2 3 3 0 2 0 2 0 1 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n572 471 540 163 50 30 561 510 43 200 213 387 500 424 113 487 357 333 294 337 435 202 447 494 485 465 161 344 470 559 104 356 393 207 224 213 511 514 60 386 149 216 392 229 429 173 165 401 395 150 127 579 344 390 529 296 225 425 318 79 465 447 177 110 367 212 459 270 41 500 277 567 125 436 178 9 214 342 203 112 144 24 79 155 495 556 40 549 463 281 241 316 2 246 1 396 510 293 332 55\\r\\n\", \"output\": [\"93\"]}, {\"input\": \"99\\r\\n5 4 13 2 5 6 2 10 10 1 2 6 7 9 6 3 5 7 1 10 2 2 7 0 2 11 11 3 1 13 3 10 6 2 0 3 0 5 0 1 4 11 1 1 7 0 12 7 5 12 0 2 12 9 8 3 4 3 4 11 4 10 2 3 10 12 5 6 1 11 2 0 8 7 9 1 3 12 2 3 9 3 7 13 7 13 0 11 8 12 2 5 9 4 0 6 6 2 13\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"99\\r\\n1 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 1 1 0 0 0 0 0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"99\\r\\n21 74 25 44 71 80 46 28 96 1 74 24 81 83 16 55 31 1 27 36 56 38 17 10 78 5 39 67 67 15 39 62 92 48 90 9 54 67 30 79 56 17 33 27 75 54 20 79 21 44 10 66 66 73 90 3 34 33 64 79 20 94 0 51 24 30 1 52 95 21 88 98 6 65 31 1 67 32 74 91 83 9 93 27 53 11 8 79 42 20 50 91 19 96 6 24 66 16 37\\r\\n\", \"output\": [\"61\"]}, {\"input\": \"2\\r\\n0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n0 600\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n1 1 1 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\n0 0 1 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1\\r\\n5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n0 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n1 0 0 1 2\\r\\n\", \"output\": [\"2\"]}]","length":91,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 3\", \"3 1\"]","prob_desc_input_spec":"In the only line you are given two integers a, b (0\u2009\u2264\u2009a,\u2009b\u2009\u2264\u2009100) \u2014 the number of even and odd steps, accordingly.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"ec5e3b3f5ee6a13eaf01b9a9a66ff037","prob_desc_created_at":"1485873300","source_code":"import java.util.*;\npublic class A761 {\n    public static void main(String []args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m =sc.nextInt();\n        if(Math.abs(m-n) == 1 || (m+n!=0  && m==n) )\n        {\n            System.out.println(\"YES\");\n        }\n        else\n        {\n            System.out.println(\"NO\");\n        }\n    }\n    \n}\n","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"Java","code_uid":"3794aa48bbe40fc67062ad2d7b8738a1","prob_desc_notes":"NoteIn the first example one of suitable intervals is from 1 to 5. The interval contains two even steps\u00a0\u2014 2 and 4, and three odd: 1, 3 and 5.","prob_desc_output_spec":"In the only line print \"YES\", if the interval of steps described above exists, and \"NO\" otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"On her way to programming school tiger Dasha faced her first test \u2014 a huge staircase!  The steps were numbered from one to infinity. As we know, tigers are very fond of all striped things, it is possible that it has something to do with their color. So on some interval of her way she calculated two values \u2014 the number of steps with even and odd numbers. You need to check whether there is an interval of steps from the l-th to the r-th (1\u2009\u2264\u2009l\u2009\u2264\u2009r), for which values that Dasha has found are correct.","hidden_unit_tests":"[{\"input\": \"2 3\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"5 4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"9 9\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"85 95\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"89 25\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"74 73\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"62 39\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"57 57\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 0\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"98 100\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"99 100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 0\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 100\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"100 98\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 5\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"YES\"]}]","length":18,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"5 3 10\\n1 2 3 4 5\\nRGBRR\", \"2 1 15\\n5 6\\nRG\"]","prob_desc_input_spec":"The first line contains three integers $$$n$$$, $$$s$$$ and $$$k$$$ ($$$1 \\le n \\le 50$$$, $$$1 \\le s \\le n$$$, $$$1 \\le k \\le 2000$$$) \u2014 number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains $$$n$$$ integers $$$r_i$$$ ($$$1 \\le r_i \\le 50$$$) \u2014 numbers of candies in the boxes. The third line contains sequence of $$$n$$$ letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"a95e54a7e38cc0d61b39e4a01a6f8d3f","prob_desc_created_at":"1539335100","source_code":"import java.util.*;\nimport java.util.StringTokenizer;\nimport java.io.*;\npublic class Main {\n    static int []arr;\n    static int [][]dp;\n    static String s;\n    static ArrayList<Integer>[]G;\n    \n    public static int solve(int idx,int rem)\n    {\n        if (rem<=0) return 0;\n        if (dp[idx][rem]!=-1) return dp[idx][rem];\n        dp[idx][rem]=(int)1e6;\n        for (int i=1;i<=3;++i)\n        {\n            if (i==1&&s.charAt(idx-1)=='R') continue;\n            if (i==2&&s.charAt(idx-1)=='G') continue;\n            if (i==3&&s.charAt(idx-1)=='B') continue;\n            for (int u:G[i])\n                if (arr[u]>arr[idx])\n                    dp[idx][rem]=Math.min(dp[idx][rem],(solve(u, rem - arr[u])+Math.abs(u-idx)));\n        }\n        return dp[idx][rem];\n    }\n    \n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        \n        int n=sc.nextInt();\n        int pos=sc.nextInt();\n        int k=sc.nextInt();\n        G = new ArrayList[5];\n        for (int i=0;i<5;++i) G[i] = new ArrayList();\n        arr =new int [n+5];\n        dp=new int [n+5][k+5];\n        for (int i=0;i<=n+1;++i)\n            for (int j=0;j<=k+1;++j)\n                dp[i][j]=-1;\n            \n        for (int i=1;i<=n;++i) arr[i]=sc.nextInt();\n        s=sc.nextLine();\n        for (int i=0;i<n;++i)\n        {\n            char ch=s.charAt(i);\n            if ( ch == 'R')\n                G[1].add(i + 1);\n            else if (ch == 'G')\n                G[2].add(i + 1);\n            else G[3].add(i + 1);\n        }\n        \n        int cnt=(int)1e6;\n        for (int i=1;i<=n;++i)\n            cnt=Math.min(cnt,solve(i,k-arr[i])+Math.abs(i-pos));\n        \n        out.println((cnt>=(int)1e6)?-1:cnt);\n        out.close();\n    }\n    static class Scanner\n    {\n        StringTokenizer st;\n        BufferedReader br;\n\n        public Scanner(InputStream s){\tbr = new BufferedReader(new InputStreamReader(s));}\n\n        public String next() throws IOException\n        {\n            while (st == null || !st.hasMoreTokens())\n                st = new StringTokenizer(br.readLine());\n            return st.nextToken();\n        }\n\n        public int nextInt() throws IOException {return Integer.parseInt(next());}\n\n        public long nextLong() throws IOException {return Long.parseLong(next());}\n\n        public String nextLine() throws IOException {return br.readLine();}\n    }\n}","prob_desc_sample_outputs":"[\"4\", \"-1\"]","lang_cluster":"Java","code_uid":"c5906045df71bf595893e1d2b1fcd529","prob_desc_notes":"NoteThe sequence of actions of Tanya for the first example:  move from the box $$$3$$$ to the box $$$2$$$;  eat candies from the box $$$2$$$;  move from the box $$$2$$$ to the box $$$3$$$;  eat candy from the box $$$3$$$;  move from the box $$$3$$$ to the box $$$4$$$;  move from the box $$$4$$$ to the box $$$5$$$;  eat candies from the box $$$5$$$. Since Tanya eats candy instantly, the required time is four seconds.","prob_desc_output_spec":"Print minimal number of seconds to eat at least $$$k$$$ candies. If solution doesn't exist, print \"-1\".","prob_desc_output_to":"standard output","prob_desc_description":"There are $$$n$$$ candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from $$$1$$$ to $$$n$$$. The $$$i$$$-th box contains $$$r_i$$$ candies, candies have the color $$$c_i$$$ (the color can take one of three values \u200b\u200b\u2014 red, green, or blue). All candies inside a single box have the same color (and it is equal to $$$c_i$$$).Initially, Tanya is next to the box number $$$s$$$. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.Tanya wants to eat at least $$$k$$$ candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.","hidden_unit_tests":"[{\"input\": \"5 3 10\\r\\n1 2 3 4 5\\r\\nRGBRR\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 1 15\\r\\n5 6\\r\\nRG\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"6 1 21\\r\\n4 2 3 5 1 6\\r\\nRGBGRB\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"6 1 21\\r\\n6 5 4 3 2 1\\r\\nRGBRGB\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1 1 10\\r\\n10\\r\\nR\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1 10\\r\\n5 5\\r\\nRG\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"2 1 10\\r\\n5 6\\r\\nRR\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"5 3 10\\r\\n1 2 3 4 5\\r\\nRGBRG\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"9 1 6\\r\\n1 1 1 3 3 3 2 2 2\\r\\nRGGBRRGBB\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"50 39 2000\\r\\n48 43 26 24 46 37 15 30 39 34 4 14 29 34 8 18 40 8 17 37 15 29 2 23 41 7 12 13 36 11 24 22 26 46 11 31 10 46 11 35 6 41 16 50 11 1 46 20 46 28\\r\\nBGBBBBBBRGGBBBRRRRBBGRGGRBBRBBBRBBBBBRRGBGGRRRBBRB\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"50 49 1000\\r\\n30 37 34 31 26 44 32 12 36 15 5 5 31 24 17 24 43 19 17 23 45 2 24 17 23 48 20 44 46 44 13 4 29 49 33 41 14 25 46 43 7 47 28 25 2 30 37 37 19 32\\r\\nGBBBRBGRBRBRGRGRBBGBGRRBGGRBGRBRRRRRRRBRGRGGGGBRGG\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"50 32 600\\r\\n21 21 18 47 16 11 10 46 9 15 27 5 11 42 29 25 16 41 31 8 12 28 1 24 17 40 45 12 33 32 34 2 45 17 49 17 20 42 15 17 8 29 2 20 4 27 50 1 49 1\\r\\nBBRBBGBGBBRBGRRGRGGGBGBRRBBBGGBBBBGBGBRBBGRRGGBRGR\\r\\n\", \"output\": [\"185\"]}, {\"input\": \"50 37 500\\r\\n25 43 15 16 29 23 46 18 15 21 33 26 38 25 2 17 48 50 33 31 3 45 40 12 42 29 37 42 7 11 47 16 44 17 27 46 32 23 14 7 27 25 13 32 43 33 36 39 35 7\\r\\nGGBBRGBRRRRBBRGBRRRGGRGGRGGBRRRGBBRRGRGGRBGBGGRGBR\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"50 4 200\\r\\n14 10 50 47 41 9 22 21 42 36 50 10 27 28 39 1 36 12 45 35 17 3 15 25 32 4 34 39 44 34 20 15 18 1 38 25 20 45 24 9 18 15 35 36 12 9 28 4 44 10\\r\\nBGBRRBGBRRRGRGRBRGGGRBRRGBBGGRBRRGGRGGGBRRBRGGBGBG\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"50 50 1250\\r\\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2\\r\\nRRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGGGGGGGGGGGGGG\\r\\n\", \"output\": [\"992\"]}, {\"input\": \"30 28 208\\r\\n3 42 42 47 46 44 5 28 35 28 35 44 25 44 47 3 3 35 28 5 3 42 3 46 25 25 5 47 46 3\\r\\nBGBBGBBBBGRRGGGBRGRGRRGBBRRRRG\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"39 21 282\\r\\n13 39 20 29 30 14 29 29 30 29 16 39 50 13 16 45 36 36 13 20 29 21 34 36 39 30 34 21 20 14 16 45 21 45 29 34 50 50 14\\r\\nGGGBRRGRBGBRRBRGRBRBBGBGBGRRRGGRBBRGBGB\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"48 2 259\\r\\n25 31 22 30 30 17 31 50 28 30 46 43 4 6 10 22 50 14 5 46 12 6 46 3 17 12 4 28 25 14 5 5 6 14 22 12 17 43 43 10 4 3 31 3 25 28 50 10\\r\\nBBBBGGRRBRRBBRGGGBGGRGBRBGRGRGRBBRRBRRGBGBGGGRBR\\r\\n\", \"output\": [\"39\"]}, {\"input\": \"48 25 323\\r\\n39 37 32 4 4 32 18 44 49 4 12 12 12 22 22 37 38 32 24 45 44 37 18 39 45 22 24 22 45 39 4 22 24 22 12 49 4 29 18 38 29 29 38 44 12 12 49 4\\r\\nRRRRRBRRGBBRGRGGBGGBGBBBRBRGGGGBBRGRBGGGRBRBBRBG\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"48 33 357\\r\\n18 37 22 21 4 17 39 32 40 43 29 29 50 21 39 43 11 11 4 50 36 40 32 50 18 32 11 36 29 36 22 21 29 43 49 18 17 29 37 40 17 37 49 4 39 49 22 29\\r\\nGRGGGGBRBRRGGRGBRGBBGRBRRGBBRRBBBGRBBBBGRGGRRBRG\\r\\n\", \"output\": [\"63\"]}, {\"input\": \"50 50 2000\\r\\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2\\r\\nGRGRGBBGGRGGRRRGGBGGGRRRBGRRBGBRGBBGGGGRRGGBBRRRRG\\r\\n\", \"output\": [\"-1\"]}]","length":81,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 1\", \"4 2\", \"4 3\", \"4 0\"]","prob_desc_input_spec":"The only line contains two integers n,\u2009k (1\u2009\u2264\u2009n\u2009\u2264\u2009109,\u20090\u2009\u2264\u2009k\u2009\u2264\u2009106).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"6f6fc42a367cdce60d76fd1914e73f0c","prob_desc_created_at":"1455116400","source_code":"\/\/package educational.round07;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.InputMismatchException;\n\npublic class FX {\n\tInputStream is;\n\tPrintWriter out;\n\tString INPUT = \"\";\n\tint mod = 1000000007;\n\t\n\tvoid solve()\n\t{\n\t\tint n = ni(), K = ni();\n\t\tlong[] vals = new long[K+3];\n\t\tfor(int i = 1;i <= K+2;i++){\n\t\t\tvals[i] = pow(i, K, mod);\n\t\t}\n\t\tif(n <= K+2){\n\t\t\tlong s = 0;\n\t\t\tfor(int i = 1;i <= n;i++){\n\t\t\t\ts += vals[i];\n\t\t\t}\n\t\t\tout.println(s%mod);\n\t\t}else{\n\t\t\tfor(int i = 2;i <= K+2;i++){\n\t\t\t\tvals[i] += vals[i-1];\n\t\t\t\tif(vals[i] >= mod)vals[i] -= mod;\n\t\t\t}\n\t\t\tint[][] fif = enumFIF(K+3, mod);\n\t\t\tlong mul = 1;\n\t\t\tfor(int i = 1;i <= K+2;i++){\n\t\t\t\tmul = mul * (n-i)%mod;\n\t\t\t}\n\t\t\tlong s = 0;\n\t\t\tlong sig = 1;\n\t\t\tlong big = 8L*mod*mod;\n\t\t\tfor(int i = K+2;i >= 1;i--){\n\t\t\t\ts += invl(n-i, mod) * fif[1][i-1] % mod * fif[1][K+2-i] % mod * vals[i] * sig;\n\t\t\t\tif(s >= big)s -= big;\n\t\t\t\tif(s <= -big)s += big;\n\t\t\t\tsig = -sig;\n\t\t\t}\n\t\t\ts %= mod;\n\t\t\tif(s < 0)s += mod;\n\t\t\ts = s * mul % mod;\n\t\t\tout.println(s);\n\t\t}\n\t}\n\t\n\tpublic static long pow(long a, long n, long mod) {\n\t\t\/\/\t\ta %= mod;\n\t\tlong ret = 1;\n\t\tint x = 63 - Long.numberOfLeadingZeros(n);\n\t\tfor (; x >= 0; x--) {\n\t\t\tret = ret * ret % mod;\n\t\t\tif (n << 63 - x < 0)\n\t\t\t\tret = ret * a % mod;\n\t\t}\n\t\treturn ret;\n\t}\n\t\n\tpublic static long invl(long a, long mod) {\n\t\tlong b = mod;\n\t\tlong p = 1, q = 0;\n\t\twhile (b > 0) {\n\t\t\tlong c = a \/ b;\n\t\t\tlong d;\n\t\t\td = a;\n\t\t\ta = b;\n\t\t\tb = d % b;\n\t\t\td = p;\n\t\t\tp = q;\n\t\t\tq = d - c * q;\n\t\t}\n\t\treturn p < 0 ? p + mod : p;\n\t}\n\t\n\tpublic static int[][] enumFIF(int n, int mod) {\n\t\tint[] f = new int[n + 1];\n\t\tint[] invf = new int[n + 1];\n\t\tf[0] = 1;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tf[i] = (int) ((long) f[i - 1] * i % mod);\n\t\t}\n\t\tlong a = f[n];\n\t\tlong b = mod;\n\t\tlong p = 1, q = 0;\n\t\twhile (b > 0) {\n\t\t\tlong c = a \/ b;\n\t\t\tlong d;\n\t\t\td = a;\n\t\t\ta = b;\n\t\t\tb = d % b;\n\t\t\td = p;\n\t\t\tp = q;\n\t\t\tq = d - c * q;\n\t\t}\n\t\tinvf[n] = (int) (p < 0 ? p + mod : p);\n\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\tinvf[i] = (int) ((long) invf[i + 1] * (i + 1) % mod);\n\t\t}\n\t\treturn new int[][] { f, invf };\n\t}\n\t\n\tvoid run() throws Exception\n\t{\n\t\tis = oj ? System.in : new ByteArrayInputStream(INPUT.getBytes());\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tlong s = System.currentTimeMillis();\n\t\tsolve();\n\t\tout.flush();\n\t\ttr(System.currentTimeMillis()-s+\"ms\");\n\t}\n\t\n\tpublic static void main(String[] args) throws Exception { new FX().run(); }\n\t\n\tprivate byte[] inbuf = new byte[1024];\n\tprivate int lenbuf = 0, ptrbuf = 0;\n\t\n\tprivate int readByte()\n\t{\n\t\tif(lenbuf == -1)throw new InputMismatchException();\n\t\tif(ptrbuf >= lenbuf){\n\t\t\tptrbuf = 0;\n\t\t\ttry { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }\n\t\t\tif(lenbuf <= 0)return -1;\n\t\t}\n\t\treturn inbuf[ptrbuf++];\n\t}\n\t\n\tprivate boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }\n\tprivate int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }\n\t\n\tprivate double nd() { return Double.parseDouble(ns()); }\n\tprivate char nc() { return (char)skip(); }\n\t\n\tprivate String ns()\n\t{\n\t\tint b = skip();\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(!(isSpaceChar(b))){ \/\/ when nextLine, (isSpaceChar(b) && b != ' ')\n\t\t\tsb.appendCodePoint(b);\n\t\t\tb = readByte();\n\t\t}\n\t\treturn sb.toString();\n\t}\n\t\n\tprivate char[] ns(int n)\n\t{\n\t\tchar[] buf = new char[n];\n\t\tint b = skip(), p = 0;\n\t\twhile(p < n && !(isSpaceChar(b))){\n\t\t\tbuf[p++] = (char)b;\n\t\t\tb = readByte();\n\t\t}\n\t\treturn n == p ? buf : Arrays.copyOf(buf, p);\n\t}\n\t\n\tprivate char[][] nm(int n, int m)\n\t{\n\t\tchar[][] map = new char[n][];\n\t\tfor(int i = 0;i < n;i++)map[i] = ns(m);\n\t\treturn map;\n\t}\n\t\n\tprivate int[] na(int n)\n\t{\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0;i < n;i++)a[i] = ni();\n\t\treturn a;\n\t}\n\t\n\tprivate int ni()\n\t{\n\t\tint num = 0, b;\n\t\tboolean minus = false;\n\t\twhile((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n\t\tif(b == '-'){\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\t\t\n\t\twhile(true){\n\t\t\tif(b >= '0' && b <= '9'){\n\t\t\t\tnum = num * 10 + (b - '0');\n\t\t\t}else{\n\t\t\t\treturn minus ? -num : num;\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\t\n\tprivate long nl()\n\t{\n\t\tlong num = 0;\n\t\tint b;\n\t\tboolean minus = false;\n\t\twhile((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n\t\tif(b == '-'){\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\t\t\n\t\twhile(true){\n\t\t\tif(b >= '0' && b <= '9'){\n\t\t\t\tnum = num * 10 + (b - '0');\n\t\t\t}else{\n\t\t\t\treturn minus ? -num : num;\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\t\n\tprivate boolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n\tprivate void tr(Object... o) { if(!oj)System.out.println(Arrays.deepToString(o)); }\n}\n","prob_desc_sample_outputs":"[\"10\", \"30\", \"100\", \"4\"]","lang_cluster":"Java","code_uid":"3e8a704990721ed79774a4f6cc052cdd","prob_desc_notes":null,"prob_desc_output_spec":"Print the only integer a \u2014 the remainder after dividing the value of the sum by the value 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"There are well-known formulas: , , . Also mathematicians found similar formulas for higher degrees.Find the value of the sum  modulo 109\u2009+\u20097 (so you should find the remainder after dividing the answer by the value 109\u2009+\u20097).","hidden_unit_tests":"[{\"input\": \"4 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"4 3\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"4 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10 0\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 0\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"568830579\"]}, {\"input\": \"10000 100\\r\\n\", \"output\": [\"352711099\"]}, {\"input\": \"100 10000\\r\\n\", \"output\": [\"859998022\"]}, {\"input\": \"1000000000 1000000\\r\\n\", \"output\": [\"617381606\"]}, {\"input\": \"1000000 1000000\\r\\n\", \"output\": [\"997878755\"]}, {\"input\": \"999999 1000000\\r\\n\", \"output\": [\"504760730\"]}, {\"input\": \"77674473 447444\\r\\n\", \"output\": [\"838207299\"]}, {\"input\": \"333312494 795258\\r\\n\", \"output\": [\"393290476\"]}, {\"input\": \"761637147 673329\\r\\n\", \"output\": [\"223778667\"]}, {\"input\": \"335185991 514401\\r\\n\", \"output\": [\"412595240\"]}, {\"input\": \"203702132 355473\\r\\n\", \"output\": [\"229710810\"]}, {\"input\": \"1000000000 999935\\r\\n\", \"output\": [\"729344740\"]}]","length":221,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 1 2 1\", \"2 2 1 2\"]","prob_desc_input_spec":"Four lines contain integers $$$w_1, h_1, w_2$$$ and $$$h_2$$$ ($$$1 \\leq w_1, h_1, w_2, h_2 \\leq 10^8$$$, $$$w_1 \\ge w_2$$$)\u00a0\u2014 the width of the first rectangle, the height of the first rectangle, the width of the second rectangle and the height of the second rectangle. You can't rotate the rectangles.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"b5d44e0041053c996938aadd1b3865f6","prob_desc_created_at":"1550917200","source_code":"import java.io.IOException;\nimport java.util.NoSuchElementException;\n\npublic class Main{\n\t\n\tpublic static void main(String[] args){\n\t\tFastScanner sc = new FastScanner();\n\t\tlong w1 =sc.nextLong();\n\t\tlong h1 =sc.nextLong();\n\t\tlong w2 =sc.nextLong();\n\t\tlong h2 =sc.nextLong();\n\t\tif(w1==w2){\n\t\t\tSystem.out.println((w1+2) * (h1+h2+2) - w1 * (h1+h2));\n\t\t}else{\n\t\t\tSystem.out.println((w1+2) * (h1+h2+2) - w1 * (h1+h2));\n\t\t}\n\t}\n\n\t\n}\n\n\nclass FastScanner {\n    private final java.io.InputStream in = System.in;\n    private final byte[] buffer = new byte[1024];\n    private int ptr = 0;\n    private int buflen = 0;\n    private boolean hasNextByte() {\n        if (ptr < buflen) {\n            return true;\n        }else{\n            ptr = 0;\n            try {\n                buflen = in.read(buffer);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (buflen <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n    private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n    public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n    public String next() {\n        if (!hasNext()) throw new NoSuchElementException();\n        StringBuilder sb = new StringBuilder();\n        int b = readByte();\n        while(isPrintableChar(b)) {\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n    public long nextLong() {\n        if (!hasNext()) throw new NoSuchElementException();\n        long n = 0;\n        boolean minus = false;\n        int b = readByte();\n        if (b == '-') {\n            minus = true;\n            b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n            throw new NumberFormatException();\n        }\n        while(true){\n            if ('0' <= b && b <= '9') {\n                n *= 10;\n                n += b - '0';\n            }else if(b == -1 || !isPrintableChar(b)){\n                return (minus ? -n : n);\n            }else{\n                throw new NumberFormatException();\n            }\n            b = readByte();\n        }\n    }\n    public int nextInt() {\n        if (!hasNext()) throw new NoSuchElementException();\n        long n = 0;\n        boolean minus = false;\n        int b = readByte();\n        if (b == '-') {\n            minus = true;\n            b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n            throw new NumberFormatException();\n        }\n        while(true){\n            if ('0' <= b && b <= '9') {\n                n *= 10;\n                n += b - '0';\n            }else if(b == -1 || !isPrintableChar(b)){\n                return (int) (minus ? -n : n);\n            }else{\n                throw new NumberFormatException();\n            }\n            b = readByte();\n        }\n    }\n}\n","prob_desc_sample_outputs":"[\"12\", \"16\"]","lang_cluster":"Java","code_uid":"8823b8d72ce94b822fc45af826283ba8","prob_desc_notes":"NoteIn the first example the field looks as follows (the first rectangle is red, the second rectangle is blue, green shows the marked squares):  In the second example the field looks as:  ","prob_desc_output_spec":"Print exactly one integer\u00a0\u2014 the number of cells, which should be marked after the ship is destroyed.","prob_desc_output_to":"standard output","prob_desc_description":"In order to make the \"Sea Battle\" game more interesting, Boris decided to add a new ship type to it. The ship consists of two rectangles. The first rectangle has a width of $$$w_1$$$ and a height of $$$h_1$$$, while the second rectangle has a width of $$$w_2$$$ and a height of $$$h_2$$$, where $$$w_1 \\ge w_2$$$. In this game, exactly one ship is used, made up of two rectangles. There are no other ships on the field.The rectangles are placed on field in the following way:  the second rectangle is on top the first rectangle;  they are aligned to the left, i.e. their left sides are on the same line;  the rectangles are adjacent to each other without a gap. See the pictures in the notes: the first rectangle is colored red, the second rectangle is colored blue.Formally, let's introduce a coordinate system. Then, the leftmost bottom cell of the first rectangle has coordinates $$$(1, 1)$$$, the rightmost top cell of the first rectangle has coordinates $$$(w_1, h_1)$$$, the leftmost bottom cell of the second rectangle has coordinates $$$(1, h_1 + 1)$$$ and the rightmost top cell of the second rectangle has coordinates $$$(w_2, h_1 + h_2)$$$.After the ship is completely destroyed, all cells neighboring by side or a corner with the ship are marked. Of course, only cells, which don't belong to the ship are marked. On the pictures in the notes such cells are colored green.Find out how many cells should be marked after the ship is destroyed. The field of the game is infinite in any direction.","hidden_unit_tests":"[{\"input\": \"2 1 2 1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"2 2 1 2\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"1 1 1 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1 50 1 50\\r\\n\", \"output\": [\"206\"]}, {\"input\": \"6 4 2 7\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"100000000 100000000 99999999 100000000\\r\\n\", \"output\": [\"600000004\"]}, {\"input\": \"100000000 1 100000000 1\\r\\n\", \"output\": [\"200000008\"]}, {\"input\": \"19661988 30021918 8795449 27534575\\r\\n\", \"output\": [\"154436966\"]}, {\"input\": \"98948781 84140283 95485812 84557929\\r\\n\", \"output\": [\"535293990\"]}, {\"input\": \"47 40 42 49\\r\\n\", \"output\": [\"276\"]}, {\"input\": \"18 3 8 15\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"49 45 49 46\\r\\n\", \"output\": [\"284\"]}, {\"input\": \"50 50 50 50\\r\\n\", \"output\": [\"304\"]}, {\"input\": \"24 25 16 38\\r\\n\", \"output\": [\"178\"]}, {\"input\": \"23 1 12 2\\r\\n\", \"output\": [\"56\"]}, {\"input\": \"1000000 1000000 1000000 1000000\\r\\n\", \"output\": [\"6000004\"]}, {\"input\": \"1000000 1000000 999999 1000000\\r\\n\", \"output\": [\"6000004\"]}, {\"input\": \"1000000 1 1000000 1\\r\\n\", \"output\": [\"2000008\"]}, {\"input\": \"672810 797124 51792 404095\\r\\n\", \"output\": [\"3748062\"]}, {\"input\": \"960051 866743 887923 926936\\r\\n\", \"output\": [\"5507464\"]}, {\"input\": \"100000000 100000000 100000000 100000000\\r\\n\", \"output\": [\"600000004\"]}, {\"input\": \"1000 1000 700 20000\\r\\n\", \"output\": [\"44004\"]}]","length":106,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"7\\nABACABA\", \"5\\nZZZAA\"]","prob_desc_input_spec":"The first line of the input contains integer number $$$n$$$ ($$$2 \\le n \\le 100$$$) \u2014 the length of string $$$s$$$. The second line of the input contains the string $$$s$$$ consisting of $$$n$$$ capital Latin letters.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"e78005d4be93dbaa518f3b40cca84ab1","prob_desc_created_at":"1567258500","source_code":"import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tString s=sc.next();\n\t\tchar c[]=s.toCharArray();\n\t\tchar aa='1',bb='1';\n\t\tint max=-1;\n\t\tfor(int i=0;i<c.length-1;i++){\n\t\t\tchar a=c[i],b=c[i+1];\n\t\t\tint con=1;\n\t\t\tfor(int j=i+1;j<c.length-1;j++){\n\t\t\t\tif(c[j]==c[i]&&c[j+1]==c[i+1]){\n\t\t\t\t\tcon++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(con>max){\n\t\t\t\tmax=con;\n\t\t\t\taa=a;bb=b;\n\t\t\t}else if(con==max&&(a<aa||(a==aa&&b<bb))){\n\t\t\t\t\taa=a;bb=b;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(aa+\"\"+bb);\n\t}\n}\n","prob_desc_sample_outputs":"[\"AB\", \"ZZ\"]","lang_cluster":"Java","code_uid":"1e893aa51d1c23c5787c90d8a946c7bb","prob_desc_notes":"NoteIn the first example \"BA\" is also valid answer.In the second example the only two-gram \"ZZ\" can be printed because it contained in the string \"ZZZAA\" two times.","prob_desc_output_spec":"Print the only line containing exactly two capital Latin letters \u2014 any two-gram contained in the given string $$$s$$$ as a substring (i.e. two consecutive characters of the string) maximal number of times.","prob_desc_output_to":"standard output","prob_desc_description":"Two-gram is an ordered pair (i.e. string of length two) of capital Latin letters. For example, \"AZ\", \"AA\", \"ZA\" \u2014 three distinct two-grams.You are given a string $$$s$$$ consisting of $$$n$$$ capital Latin letters. Your task is to find any two-gram contained in the given string as a substring (i.e. two consecutive characters of the string) maximal number of times. For example, for string $$$s$$$ = \"BBAABBBA\" the answer is two-gram \"BB\", which contained in $$$s$$$ three times. In other words, find any most frequent two-gram.Note that occurrences of the two-gram can overlap with each other.","hidden_unit_tests":"[{\"input\": \"7\\r\\nABACABA\\r\\n\", \"output\": [\"BA\", \"AB\"]}, {\"input\": \"5\\r\\nZZZAA\\r\\n\", \"output\": [\"ZZ\"]}, {\"input\": \"26\\r\\nQWERTYUIOPASDFGHJKLZXCVBNM\\r\\n\", \"output\": [\"KL\", \"QW\", \"WE\", \"AS\"]}, {\"input\": \"2\\r\\nQA\\r\\n\", \"output\": [\"QA\"]}, {\"input\": \"2\\r\\nWW\\r\\n\", \"output\": [\"WW\"]}, {\"input\": \"11\\r\\nGGRRAATTZZZ\\r\\n\", \"output\": [\"ZZ\"]}, {\"input\": \"50\\r\\nNYQAHBYYOXLTRYQDMVENEMAQNBAKGLGQOLXNAIFNQTOCLNNQIA\\r\\n\", \"output\": [\"NQ\", \"YQ\"]}, {\"input\": \"100\\r\\nURXCAIZFIBNJTPCZHBQIBCILLPXZCFGMKKZMNPLCYGAVJVIBMCZEBSJWPSCPQDYCTTKPOKIJRSKIZPDGCHVOUTMPNECYORSFZFNC\\r\\n\", \"output\": [\"IB\"]}, {\"input\": \"100\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\", \"output\": [\"AA\"]}, {\"input\": \"10\\r\\nSQSQSQSQTG\\r\\n\", \"output\": [\"SQ\"]}, {\"input\": \"5\\r\\nAZAZA\\r\\n\", \"output\": [\"ZA\", \"AZ\"]}, {\"input\": \"15\\r\\nMIRZOYANOVECLOX\\r\\n\", \"output\": [\"AN\", \"IR\", \"MI\", \"NO\"]}, {\"input\": \"9\\r\\nEGORLETOV\\r\\n\", \"output\": [\"GO\", \"EG\", \"TO\"]}, {\"input\": \"8\\r\\nPUTINVOR\\r\\n\", \"output\": [\"PU\", \"IN\", \"UT\", \"NV\"]}, {\"input\": \"7\\r\\nKADUROV\\r\\n\", \"output\": [\"KA\", \"AD\"]}, {\"input\": \"6\\r\\nAZAZAZ\\r\\n\", \"output\": [\"AZ\"]}, {\"input\": \"3\\r\\nLOL\\r\\n\", \"output\": [\"OL\", \"LO\"]}, {\"input\": \"3\\r\\nKEK\\r\\n\", \"output\": [\"EK\", \"KE\"]}, {\"input\": \"5\\r\\nFUFEL\\r\\n\", \"output\": [\"UF\", \"EL\", \"FU\"]}, {\"input\": \"9\\r\\nMIKEPIDOR\\r\\n\", \"output\": [\"EP\", \"MI\", \"DO\", \"IK\"]}, {\"input\": \"9\\r\\nAAAAAAAAA\\r\\n\", \"output\": [\"AA\"]}, {\"input\": \"23\\r\\nAABBBAAACCCCCAAADDDDDDD\\r\\n\", \"output\": [\"DD\"]}]","length":28,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\", \"1\"]","prob_desc_input_spec":"The only line contains one integer $$$n$$$ ($$$1 \\le n \\le 60$$$)\u00a0\u2014 the length.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"4b7ff467ed5907e32fd529fb39b708db","prob_desc_created_at":"1560258300","source_code":"import java.util.Scanner;\npublic class fillingShapesA{\n    public static void main(String[] args) {\n        Scanner sc= new Scanner(System.in);\n        int n = sc.nextInt();\n        sc.close();\n        if(n<2 || n%2==1){\n            System.out.println(0);\n        }\n        else{\n            System.out.println((int)Math.sqrt(Math.pow(2, n)));\n        }\n    }\n}","prob_desc_sample_outputs":"[\"4\", \"0\"]","lang_cluster":"Java","code_uid":"38e5f5ff66e56cbc0db05b84a68d3886","prob_desc_notes":"NoteIn the first example, there are $$$4$$$ possible cases of filling.In the second example, you cannot fill the shapes in $$$3 \\times 1$$$ tiles.","prob_desc_output_spec":"Print the number of ways to fill.","prob_desc_output_to":"standard output","prob_desc_description":"You have a given integer $$$n$$$. Find the number of ways to fill all $$$3 \\times n$$$ tiles with the shape described in the picture below. Upon filling, no empty spaces are allowed. Shapes cannot overlap.  This picture describes when $$$n = 4$$$. The left one is the shape and the right one is $$$3 \\times n$$$ tiles. ","hidden_unit_tests":"[{\"input\": \"4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"36\\r\\n\", \"output\": [\"262144\"]}, {\"input\": \"47\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"60\\r\\n\", \"output\": [\"1073741824\"]}, {\"input\": \"56\\r\\n\", \"output\": [\"268435456\"]}, {\"input\": \"27\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"39\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"59\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"44\\r\\n\", \"output\": [\"4194304\"]}, {\"input\": \"57\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"18\\r\\n\", \"output\": [\"512\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"8\"]}]","length":14,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"5 1\", \"2 2\", \"3 2\", \"11 5\", \"37 63\"]","prob_desc_input_spec":"The first line contains two space-separated integers n and C, 1\u2009\u2264\u2009n\u2009\u2264\u2009500000, 1\u2009\u2264\u2009C\u2009\u2264\u2009200000.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"e63c70a9c96a94bce99618f2e695f83a","prob_desc_created_at":"1468137600","source_code":"\/*Author LAVLESH*\/\nimport java.util.*;\nimport java.io.*;\nimport java.math.BigInteger;\npublic class solution{\n\tstatic BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\tstatic StringTokenizer st=new StringTokenizer(\"\");\n    \n\t\n\n\tstatic public String next() {\n\t        while (st == null || !st.hasMoreTokens()) {\n\t            try {\n\t                st = new StringTokenizer(br.readLine());\n\t            } catch (IOException e) {\n\t                throw new RuntimeException(e);\n\t            }\n\t        }\n\t        return st.nextToken();\n\t    }\n\t\n\tstatic int mod=1000003;\n\tstatic int inv(int a){\n\t\treturn BigInteger.valueOf(a).modInverse(BigInteger.valueOf(mod)).intValue();\n\t}\n\tpublic static void main(String[]args)throws IOException{\n\t\tPrintWriter op =new PrintWriter(System.out,true);\n\t\tlong ans;\n\t\tint n=Integer.parseInt(next());\n\t\t int m=Integer.parseInt(next());\n\t\tint num=1,den=1;\n\t\t for(int i=1;i<=m;i++)\n\t\t {\n\t\t\t num=(int)((long)num*(n+i)%mod);\n\t\t\t den=(int)((long)den*i%mod);\n\t\t }\n\tans=(((long)num*inv(den)%mod)+mod)%mod;\n\t\top.println(ans-1);\n\t\t\n\t\t\n\t\t op.close();\n  }\n}\n ","prob_desc_sample_outputs":"[\"5\", \"5\", \"9\", \"4367\", \"230574\"]","lang_cluster":"Java","code_uid":"dd287c0598b8a5d0ce1b9259f856512a","prob_desc_notes":"NoteThe number 106\u2009+\u20093 is prime.In the second sample case, the five walls are:             B        BB., .B, BB, B., and .BIn the third sample case, the nine walls are the five as in the second sample case and in addition the following four: B    BB    B  B        BB., .B, BB, and BB","prob_desc_output_spec":"Print the number of different walls that Heidi could build, modulo 106\u2009+\u20093.","prob_desc_output_to":"standard output","prob_desc_description":"Heidi the Cow is aghast: cracks in the northern Wall? Zombies gathering outside, forming groups, preparing their assault? This must not happen! Quickly, she fetches her HC2 (Handbook of Crazy Constructions) and looks for the right chapter:How to build a wall:  Take a set of bricks.  Select one of the possible wall designs. Computing the number of possible designs is left as an exercise to the reader.  Place bricks on top of each other, according to the chosen design. This seems easy enough. But Heidi is a Coding Cow, not a Constructing Cow. Her mind keeps coming back to point 2b. Despite the imminent danger of a zombie onslaught, she wonders just how many possible walls she could build with up to n bricks.A wall is a set of wall segments as defined in the easy version. How many different walls can be constructed such that the wall consists of at least 1 and at most n bricks? Two walls are different if there exist a column c and a row r such that one wall has a brick in this spot, and the other does not.Along with n, you will be given C, the width of the wall (as defined in the easy version). Return the number of different walls modulo 106\u2009+\u20093.","hidden_unit_tests":"[{\"input\": \"5 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"11 5\\r\\n\", \"output\": [\"4367\"]}, {\"input\": \"37 63\\r\\n\", \"output\": [\"230574\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"350000 140000\\r\\n\", \"output\": [\"453366\"]}, {\"input\": \"350000 160000\\r\\n\", \"output\": [\"155549\"]}, {\"input\": \"350000 180000\\r\\n\", \"output\": [\"708073\"]}, {\"input\": \"350000 200000\\r\\n\", \"output\": [\"504934\"]}, {\"input\": \"400000 140000\\r\\n\", \"output\": [\"956370\"]}, {\"input\": \"400000 160000\\r\\n\", \"output\": [\"480365\"]}, {\"input\": \"400000 180000\\r\\n\", \"output\": [\"376155\"]}, {\"input\": \"400000 200000\\r\\n\", \"output\": [\"388234\"]}, {\"input\": \"450000 140000\\r\\n\", \"output\": [\"175993\"]}, {\"input\": \"450000 160000\\r\\n\", \"output\": [\"926957\"]}, {\"input\": \"450000 180000\\r\\n\", \"output\": [\"135727\"]}, {\"input\": \"450000 200000\\r\\n\", \"output\": [\"997315\"]}, {\"input\": \"500000 140000\\r\\n\", \"output\": [\"775486\"]}, {\"input\": \"500000 160000\\r\\n\", \"output\": [\"298591\"]}, {\"input\": \"500000 180000\\r\\n\", \"output\": [\"901135\"]}, {\"input\": \"500000 200000\\r\\n\", \"output\": [\"781209\"]}]","length":44,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3\\n4 7\\n8 10\\n5 5\", \"3\\n2 5\\n3 4\\n1 6\"]","prob_desc_input_spec":"The first line of input contains an integer number n (2\u2009\u2264\u2009n\u2009\u2264\u20095). n lines follow, the i-th of them containing two numbers Li and Ri (1\u2009\u2264\u2009Li\u2009\u2264\u2009Ri\u2009\u2264\u200910000) describing the i-th company's bid preferences. This problem doesn't have subproblems. You will get 8 points for the correct submission.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"5258ce738eb268b9750cfef309d265ef","prob_desc_created_at":"1423328400","source_code":"\/\/ practice with rainboy\nimport java.io.*;\nimport java.util.*;\n\npublic class CF513C extends PrintWriter {\n\tCF513C() { super(System.out, true); }\n\tScanner sc = new Scanner(System.in);\n\tpublic static void main(String[] $) {\n\t\tCF513C o = new CF513C(); o.main(); o.flush();\n\t}\n\n\tdouble prob(int l, int r, int a) {\n\t\treturn Math.max(r - Math.max(l, a) + 1, 0) \/ (r - l + 1.0);\n\t}\n\tvoid main() {\n\t\tint n = sc.nextInt();\n\t\tint[] ll = new int[n];\n\t\tint[] rr = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tll[i] = sc.nextInt();\n\t\t\trr[i] = sc.nextInt();\n\t\t}\n\t\tdouble ans = 0;\n\t\tfor (int a = 1; a <= 10000; a++) {\n\t\t\tdouble p = 1;\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\tp *= 1 - prob(ll[j], rr[j], a);\n\t\t\tdouble q = p;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tp = prob(ll[i], rr[i], a);\n\t\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\t\tif (j != i)\n\t\t\t\t\t\tp *= 1 - prob(ll[j], rr[j], a);\n\t\t\t\tq += p;\n\t\t\t}\n\t\t\tans += 1 - q;\n\t\t}\n\t\tprintf(\"%.9f\\n\", ans);\n\t}\n}\n","prob_desc_sample_outputs":"[\"5.7500000000\", \"3.5000000000\"]","lang_cluster":"Java","code_uid":"034427fba43e786a384a3b54ce8e1bac","prob_desc_notes":"NoteConsider the first example. The first company bids a random integer number of microdollars in range [4,\u20097]; the second company bids between 8 and 10, and the third company bids 5 microdollars. The second company will win regardless of the exact value it bids, however the price it will pay depends on the value of first company's bid. With probability 0.5 the first company will bid at most 5 microdollars, and the second-highest price of the whole auction will be 5. With probability 0.25 it will bid 6 microdollars, and with probability 0.25 it will bid 7 microdollars. Thus, the expected value the second company will have to pay is 0.5\u00b75\u2009+\u20090.25\u00b76\u2009+\u20090.25\u00b77\u2009=\u20095.75.","prob_desc_output_spec":"Output the answer with absolute or relative error no more than 1e\u2009-\u20099.","prob_desc_output_to":"standard output","prob_desc_description":"Nowadays, most of the internet advertisements are not statically linked to a web page. Instead, what will be shown to the person opening a web page is determined within 100 milliseconds after the web page is opened. Usually, multiple companies compete for each ad slot on the web page in an auction. Each of them receives a request with details about the user, web page and ad slot and they have to respond within those 100 milliseconds with a bid they would pay for putting an advertisement on that ad slot. The company that suggests the highest bid wins the auction and gets to place its advertisement. If there are several companies tied for the highest bid, the winner gets picked at random.However, the company that won the auction does not have to pay the exact amount of its bid. In most of the cases, a second-price auction is used. This means that the amount paid by the company is equal to the maximum of all the other bids placed for this ad slot.Let's consider one such bidding. There are n companies competing for placing an ad. The i-th of these companies will bid an integer number of microdollars equiprobably randomly chosen from the range between Li and Ri, inclusive. In the other words, the value of the i-th company bid can be any integer from the range [Li,\u2009Ri] with the same probability. Determine the expected value that the winner will have to pay in a second-price auction.","hidden_unit_tests":"[{\"input\": \"3\\r\\n4 7\\r\\n8 10\\r\\n5 5\\r\\n\", \"output\": [\"5.750000000000\", \"5.7500000000\", \"5.750000000\", \"5.750000000000000\"]}, {\"input\": \"3\\r\\n2 5\\r\\n3 4\\r\\n1 6\\r\\n\", \"output\": [\"3.500000000000\", \"3.500000000000000\", \"3.500000000\", \"3.5000000000\"]}, {\"input\": \"5\\r\\n1 10000\\r\\n1 10000\\r\\n1 10000\\r\\n1 10000\\r\\n1 10000\\r\\n\", \"output\": [\"6667.166666666666\", \"6667.1666666667\", \"6667.1666666584\", \"6667.166666666666100\", \"6667.166666667\"]}, {\"input\": \"2\\r\\n1 2\\r\\n1 2\\r\\n\", \"output\": [\"1.250000000\", \"1.2500000000\", \"1.250000000000000\", \"1.250000000000\"]}, {\"input\": \"2\\r\\n1 3\\r\\n1 3\\r\\n\", \"output\": [\"1.555555555556\", \"1.555555555555556\", \"1.5555555556\", \"1.555555556\"]}, {\"input\": \"5\\r\\n1 7\\r\\n2 5\\r\\n3 9\\r\\n4 8\\r\\n5 6\\r\\n\", \"output\": [\"5.953061224489796\", \"5.953061224490\", \"5.953061224\", \"5.9530612245\"]}, {\"input\": \"5\\r\\n17 9999\\r\\n19 9992\\r\\n1 10000\\r\\n6 9\\r\\n34 99\\r\\n\", \"output\": [\"5004.672756714480800\", \"5004.672756714\", \"5004.6727567145\", \"5004.672756714481\"]}, {\"input\": \"5\\r\\n3778 9170\\r\\n2657 6649\\r\\n4038 9722\\r\\n3392 7255\\r\\n4890 8961\\r\\n\", \"output\": [\"6938.4627241726\", \"6938.462724172721\", \"6938.462724172721200\", \"6938.4627241727\", \"6938.462724173\"]}, {\"input\": \"5\\r\\n2194 6947\\r\\n2062 8247\\r\\n4481 8430\\r\\n3864 9409\\r\\n3784 5996\\r\\n\", \"output\": [\"6373.539094073030400\", \"6373.539094073\", \"6373.5390940730\", \"6373.539094073030\", \"6373.539094073029400\"]}, {\"input\": \"5\\r\\n2906 6249\\r\\n659 9082\\r\\n2628 8663\\r\\n4199 5799\\r\\n2678 9558\\r\\n\", \"output\": [\"6062.1839551640\", \"6062.1839551638\", \"6062.183955164018\", \"6062.183955164017800\", \"6062.183955164\"]}, {\"input\": \"5\\r\\n659 8346\\r\\n2428 8690\\r\\n2357 5783\\r\\n3528 8580\\r\\n2425 7918\\r\\n\", \"output\": [\"6077.317876682\", \"6077.3178766816\", \"6077.3178766815\", \"6077.3178766810\", \"6077.317876681548100\", \"6077.317876681548\", \"6077.317876681549000\"]}, {\"input\": \"5\\r\\n4075 6754\\r\\n1024 8762\\r\\n504 9491\\r\\n1159 6496\\r\\n375 9191\\r\\n\", \"output\": [\"5919.621927382\", \"5919.6219273821\", \"5919.621927382185\", \"5919.6219273822\", \"5919.621927382185300\"]}, {\"input\": \"5\\r\\n4787 9531\\r\\n3133 9597\\r\\n1754 9725\\r\\n4335 7124\\r\\n4269 7752\\r\\n\", \"output\": [\"7046.2404831919\", \"7046.240483191878\", \"7046.240483192\", \"7046.240483191878400\"]}, {\"input\": \"5\\r\\n1851 8833\\r\\n1730 6325\\r\\n4901 9327\\r\\n4671 9278\\r\\n3163 9789\\r\\n\", \"output\": [\"7182.444906409056\", \"7182.444906409\", \"7182.444906409055900\", \"7182.4449064091\", \"7182.4449064085\"]}, {\"input\": \"5\\r\\n2563 8898\\r\\n2487 7923\\r\\n3048 5323\\r\\n142 7194\\r\\n4760 6061\\r\\n\", \"output\": [\"5657.238804524137800\", \"5657.238804524\", \"5657.238804524138\", \"5657.2388045241\", \"5657.2388045242\"]}, {\"input\": \"5\\r\\n979 6674\\r\\n1084 8758\\r\\n2003 5556\\r\\n478 7822\\r\\n3654 9623\\r\\n\", \"output\": [\"5721.932786256793\", \"5721.932786256793400\", \"5721.9327862568\", \"5721.9327862569\", \"5721.932786256792500\", \"5721.932786257\"]}, {\"input\": \"5\\r\\n4395 5976\\r\\n489 5355\\r\\n149 5158\\r\\n4462 5738\\r\\n2548 6658\\r\\n\", \"output\": [\"5102.0377827659\", \"5102.037782765963\", \"5102.0377827660\", \"5102.037782765963100\", \"5102.037782766\"]}, {\"input\": \"5\\r\\n3755 7859\\r\\n1245 7085\\r\\n592 5392\\r\\n1285 7892\\r\\n1442 7931\\r\\n\", \"output\": [\"5545.539181882964800\", \"5545.5391818830\", \"5545.5391818815\", \"5545.539181883\", \"5545.539181882965\"]}, {\"input\": \"5\\r\\n2171 7161\\r\\n4842 8682\\r\\n4547 9100\\r\\n269 9283\\r\\n3039 6492\\r\\n\", \"output\": [\"6641.5017309462\", \"6641.5017309459\", \"6641.501730946216400\", \"6641.501730946216\", \"6641.501730946\"]}, {\"input\": \"5\\r\\n1 1\\r\\n1 1\\r\\n2 2\\r\\n3 3\\r\\n4 4\\r\\n\", \"output\": [\"3.000000000\", \"3.000000000000000\", \"3.0000000000\", \"3.000000000000\"]}, {\"input\": \"2\\r\\n1 1\\r\\n1 1\\r\\n\", \"output\": [\"1.000000000000000\", \"1.000000000\", \"1.000000000000\", \"1.0000000000\"]}, {\"input\": \"2\\r\\n1 10000\\r\\n1 9999\\r\\n\", \"output\": [\"3333.666666667\", \"3333.666666666667\", \"3333.6666666667\", \"3333.666666666666500\"]}]","length":40,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 2\", \"3 1\"]","prob_desc_input_spec":"The only line contains two integers $$$n$$$ and $$$m~(1 \\le n \\le 10^5, 0 \\le m \\le \\frac{n (n - 1)}{2})$$$. It is guaranteed that there exists a graph without any self-loops or multiple edges with such number of vertices and edges.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"daf0dd781bf403f7c1bb668925caa64d","prob_desc_created_at":"1539269400","source_code":"import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long vertexes = in.nextLong();\n        long edges = in.nextLong();\n\n        long max = 0;\n\n        if (edges == 0) {\n            System.out.println(vertexes + \" \" + vertexes);\n            return;\n        }\n\n        for (long i = 1; i < vertexes; i++) {\n           long currentEdges = (i * (i - 1)) \/ 2;\n            if (currentEdges >= edges) {\n                max = vertexes - i;\n                break;\n            }\n        }\n\n        for (long i = 0; i < edges; i++) {\n            vertexes -= 2;\n\n            if (vertexes < 0) {\n                break;\n            }\n        }\n\n        vertexes = vertexes > 0 ? vertexes : 0;\n\n        System.out.println(vertexes + \" \" + max);\n    }\n}\n","prob_desc_sample_outputs":"[\"0 1\", \"1 1\"]","lang_cluster":"Java","code_uid":"da2b2fad16f5de844ff458c641e7b6df","prob_desc_notes":"NoteIn the first example it is possible to construct a graph with $$$0$$$ isolated vertices: for example, it should contain edges $$$(1, 2)$$$ and $$$(3, 4)$$$. To get one isolated vertex, we may construct a graph with edges $$$(1, 2)$$$ and $$$(1, 3)$$$. In the second example the graph will always contain exactly one isolated vertex.","prob_desc_output_spec":"In the only line print two numbers $$$min$$$ and $$$max$$$ \u2014 the minimum and maximum number of isolated vertices, respectively.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya has got an undirected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. This graph doesn't contain any self-loops or multiple edges. Self-loop is an edge connecting a vertex to itself. Multiple edges are a pair of edges such that they connect the same pair of vertices. Since the graph is undirected, the pair of edges $$$(1, 2)$$$ and $$$(2, 1)$$$ is considered to be multiple edges. Isolated vertex of the graph is a vertex such that there is no edge connecting this vertex to any other vertex.Vasya wants to know the minimum and maximum possible number of isolated vertices in an undirected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. ","hidden_unit_tests":"[{\"input\": \"4 2\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"20 55\\r\\n\", \"output\": [\"0 9\"]}, {\"input\": \"20 54\\r\\n\", \"output\": [\"0 9\"]}, {\"input\": \"20 56\\r\\n\", \"output\": [\"0 8\"]}, {\"input\": \"100000 3950493829\\r\\n\", \"output\": [\"0 11111\"]}, {\"input\": \"100000 49997\\r\\n\", \"output\": [\"6 99683\"]}, {\"input\": \"100 0\\r\\n\", \"output\": [\"100 100\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"15 4\\r\\n\", \"output\": [\"7 11\"]}, {\"input\": \"100000 4999950000\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"18889 138011083\\r\\n\", \"output\": [\"0 2274\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"0 85\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"4 6\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"5 10\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"10 2\\r\\n\", \"output\": [\"6 7\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"6 15\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"2 0\\r\\n\", \"output\": [\"2 2\"]}, {\"input\": \"6740 22710430\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"10 45\\r\\n\", \"output\": [\"0 0\"]}]","length":37,"num_hidden_unit_tests":23}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 5\", \"3 6\"]","prob_desc_input_spec":"The first line contains two integers a and m (1\u2009\u2264\u2009a,\u2009m\u2009\u2264\u2009105).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"f726133018e2149ec57e113860ec498a","prob_desc_created_at":"1415205000","source_code":"import java.util.*;\n\npublic class Factory {\n    \n    public static void main(String[] args) {\n        \n        int a, m, x;\n        Scanner scan = new Scanner(System.in);\n              \n        a = scan.nextInt();        \n        m = scan.nextInt();\n                        \n        for (int i=1; i<=10000; i++) {\n        \n            x = a%m;\n            if ((x+a) % m == 0){\n            \n            System.out.println(\"Yes\");\n            return ;\n        }            \n        else \n        {\n            a +=x;\n        } \n            \n        }\n            System.out.println(\"No\");\n        \n    }\n    \n}\n","prob_desc_sample_outputs":"[\"No\", \"Yes\"]","lang_cluster":"Java","code_uid":"3b97c09bf76fab5e4d4a71ef6b0950b1","prob_desc_notes":null,"prob_desc_output_spec":"Print \"Yes\" (without quotes) if the production will eventually stop, otherwise print \"No\".","prob_desc_output_to":"standard output","prob_desc_description":"One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce  (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. The board of directors are worried that the production by the given plan may eventually stop (that means that there will be \u0430 moment when the current number of details on the factory is divisible by m). Given the number of details a on the first day and number m check if the production stops at some moment.","hidden_unit_tests":"[{\"input\": \"1 5\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"3 6\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 8\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"3 24\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"100000 100000\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 99989\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"512 2\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"100 24\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"1 100000\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"100000 1\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"3 99929\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"99961 99971\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"1 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"4 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"3 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"32768 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"65535 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 65535\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"98812 100000\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"10 5\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"6 8\\r\\n\", \"output\": [\"Yes\"]}]","length":31,"num_hidden_unit_tests":23}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2500.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"2 6 3\", \"5 20 11\", \"10 30 10\"]","prob_desc_input_spec":"The only line contains three integers $$$p$$$, $$$s$$$ and $$$r$$$ ($$$1 \\le p \\le 100$$$, $$$0 \\le r \\le s \\le 5000$$$) \u2014 the number of players, the sum of scores of all players and Hasan's score, respectively.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"609195ef4a970c62a8210dafe118580e","prob_desc_created_at":"1546007700","source_code":"\/**\n * @author derrick20\n *\/\n\nimport java.io.*;\nimport java.util.*;\n\npublic class TopScorer {\n    public static void main(String[] args) throws Exception {\n        FastScanner sc = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int P = sc.nextInt();\n        int S = sc.nextInt();\n        int R = sc.nextInt();\n        \/\/ it should go up to s + p - 1, 5099, but let's be safe\n        int MAX = 5100; \/\/ todo change this!\n        fact = new long[MAX + 1];\n        invFact = new long[MAX + 1];\n        fact[0] = 1;\n        invFact[0] = 1;\n        for (int i = 1; i <= MAX; i++) {\n            fact[i] = ((long) i * fact[i - 1]) % mod;\n            invFact[i] = inv(fact[i]);\n        }\n\n        if (P == 1) {\n            out.println(1);\n        } else {\n            \/\/ O(SP^2) = 5*10^7\n            long wins = 0;\n            long total = 0;\n            for (int x = R; x <= S; x++) {\n                \/\/ l = group that gets x\n                \/\/ the remaining players P - 1 - l must get < x.\n                for (int l = 0; P - 1 - l >= 0 && S - x - l * x >= 0; l++) {\n                    int players = P - 1 - l;\n                    int balls = S - x - l * x;\n\/\/                    System.out.println(\"Forced \" + l + \" other players to have exactly \" + x + \" balls\");\n\/\/                    System.out.println(\"Remaining: players = \" + players + \" balls = \" + balls);\n                    long prob = (choose(P - 1, l) * f(players, balls, x)) % mod;\n                    \/\/ prob of having this number of x's for players, then given\n                    \/\/ that, the probability of winning is uniform among all x players\n                    long contrib = (inv(l + 1) * prob) % mod;\n                    wins = (wins + contrib) % mod;\n\/\/                    System.out.println(\"Prob: \" + prob + \" Contrib: \" + contrib);\n\/\/                    System.out.println();\n                }\n                long ways = choose(S - x + P - 2, P - 2);\n\/\/                System.out.println(\"Ways for x = \" + x + \" = \" + ways);\n\/\/                System.out.println(\"----------\");\n                total = (total + ways) % mod;\n            }\n            \/\/ we have now counted the number of winning states (scaling\n            \/\/ with the f function). The probability is this divided by total\n            \/\/ states.\n            long prob = (wins * inv(total)) % mod;\n            out.println(prob);\n        }\n        out.close();\n    }\n\n    \/\/ todo SET THE MOD\n    static long mod = 998244353;\n    static long[] fact, invFact;\n\n    \/\/ f returns probability that with these parameters, we get an assignment\n    \/\/ where all have < x balls.\n    static long f(int players, int balls, int x) {\n        \/\/ if there are no players, there MUST BE only 1 way.\n        if (players == 0) {\n\/\/            ASSERT(balls <= x, \"Gave impossible amt\");\n            \/**\n             * Key issue: add in logic for simple cases. If 0 players. it makes\n             * no sense to give a positive number of balls, so 0 ways. If zero,\n             * there is 1 way, i.e. do nothing.\n             *\/\n            return (balls == 0) ? 1 : 0;\n        }\n        long total = choose(balls + players - 1, players - 1);\n        long complement = 0;\n        int sign = 1;\n        for (int k = 1; k <= players && balls - k * x >= 0; k++) {\n            long amt = (choose(players, k) * choose(balls - k * x + players - 1, players - 1)) % mod;\n            complement = (complement + sign * amt) % mod;\n            sign *= -1;\n        }\n\/\/        System.out.println(\"Ways for (players, balls) = \" + players + \" \" + balls + \": Total \" + total + \", Complement: \" + complement);\n        long ans = (total - complement + mod) % mod;\n\/\/        ans = (ans * inv(total)) % mod; \/\/ probability\n        return ans;\n    }\n\n    static long choose(int n, int k) {\n        ASSERT(k <= n, \"Invalid choose\");\n        long ans = (fact[n] * invFact[n - k]) % mod;\n        return (ans * invFact[k]) % mod;\n    }\n\n    static long inv(long x) {\n        return fastExpo(x, mod - 2);\n    }\n\n    static long fastExpo(long x, long k) {\n        long ans = 1;\n        long bit = x;\n        while (k > 0) {\n            if (k % 2 == 1) {\n                ans = (bit * ans) % mod;\n            }\n            bit = (bit * bit) % mod;\n            k \/= 2;\n        }\n        return ans;\n    }\n\n    static class FastScanner {\n        private int BS = 1 << 16;\n        private char NC = (char) 0;\n        private byte[] buf = new byte[BS];\n        private int bId = 0, size = 0;\n        private char c = NC;\n        private double cnt = 1;\n        private BufferedInputStream in;\n\n        public FastScanner() {\n            in = new BufferedInputStream(System.in, BS);\n        }\n\n        public FastScanner(String s) {\n            try {\n                in = new BufferedInputStream(new FileInputStream(new File(s)), BS);\n            } catch (Exception e) {\n                in = new BufferedInputStream(System.in, BS);\n            }\n        }\n\n        private char getChar() {\n            while (bId == size) {\n                try {\n                    size = in.read(buf);\n                } catch (Exception e) {\n                    return NC;\n                }\n                if (size == -1) return NC;\n                bId = 0;\n            }\n            return (char) buf[bId++];\n        }\n\n        public int nextInt() {\n            return (int) nextLong();\n        }\n\n        public int[] nextInts(int N) {\n            int[] res = new int[N];\n            for (int i = 0; i < N; i++) {\n                res[i] = (int) nextLong();\n            }\n            return res;\n        }\n\n        public long[] nextLongs(int N) {\n            long[] res = new long[N];\n            for (int i = 0; i < N; i++) {\n                res[i] = nextLong();\n            }\n            return res;\n        }\n\n        public long nextLong() {\n            cnt = 1;\n            boolean neg = false;\n            if (c == NC) c = getChar();\n            for (; (c < '0' || c > '9'); c = getChar()) {\n                if (c == '-') neg = true;\n            }\n            long res = 0;\n            for (; c >= '0' && c <= '9'; c = getChar()) {\n                res = (res << 3) + (res << 1) + c - '0';\n                cnt *= 10;\n            }\n            return neg ? -res : res;\n        }\n\n        public double nextDouble() {\n            double cur = nextLong();\n            return c != '.' ? cur : cur + nextLong() \/ cnt;\n        }\n\n        public double[] nextDoubles(int N) {\n            double[] res = new double[N];\n            for (int i = 0; i < N; i++) {\n                res[i] = nextDouble();\n            }\n            return res;\n        }\n\n        public String next() {\n            StringBuilder res = new StringBuilder();\n            while (c <= 32) c = getChar();\n            while (c > 32) {\n                res.append(c);\n                c = getChar();\n            }\n            return res.toString();\n        }\n\n        public String nextLine() {\n            StringBuilder res = new StringBuilder();\n            while (c <= 32) c = getChar();\n            while (c != '\\n') {\n                res.append(c);\n                c = getChar();\n            }\n            return res.toString();\n        }\n\n        public boolean hasNext() {\n            if (c > 32) return true;\n            while (true) {\n                c = getChar();\n                if (c == NC) return false;\n                else if (c > 32) return true;\n            }\n        }\n    }\n\n    static void ASSERT(boolean assertion, String message) {\n        if (!assertion) throw new AssertionError(message);\n    }\n}","prob_desc_sample_outputs":"[\"124780545\", \"1\", \"85932500\"]","lang_cluster":"Java","code_uid":"a1609c0b6a7967c965b6ff6328f9e134","prob_desc_notes":"NoteIn the first example Hasan can score $$$3$$$, $$$4$$$, $$$5$$$ or $$$6$$$ goals. If he scores $$$4$$$ goals or more than he scores strictly more than his only opponent. If he scores $$$3$$$ then his opponent also scores $$$3$$$ and Hasan has a probability of $$$\\frac 1 2$$$ to win the game. Thus, overall he has the probability of $$$\\frac 7 8$$$ to win.In the second example even Hasan's lower bound on goal implies him scoring more than any of his opponents. Thus, the resulting probability is $$$1$$$.","prob_desc_output_spec":"Print a single integer \u2014 the probability of Hasan winning. It can be shown that it is in the form of $$$\\frac{P}{Q}$$$ where $$$P$$$ and $$$Q$$$ are non-negative integers and $$$Q \\ne 0$$$, $$$P \\le Q$$$. Report the value of $$$P \\cdot Q^{-1} \\pmod {998244353}$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Hasan loves playing games and has recently discovered a game called TopScore. In this soccer-like game there are $$$p$$$ players doing penalty shoot-outs. Winner is the one who scores the most. In case of ties, one of the top-scorers will be declared as the winner randomly with equal probability.They have just finished the game and now are waiting for the result. But there's a tiny problem! The judges have lost the paper of scores! Fortunately they have calculated sum of the scores before they get lost and also for some of the players they have remembered a lower bound on how much they scored. However, the information about the bounds is private, so Hasan only got to know his bound.According to the available data, he knows that his score is at least $$$r$$$ and sum of the scores is $$$s$$$.Thus the final state of the game can be represented in form of sequence of $$$p$$$ integers $$$a_1, a_2, \\dots, a_p$$$ ($$$0 \\le a_i$$$) \u2014 player's scores. Hasan is player number $$$1$$$, so $$$a_1 \\ge r$$$. Also $$$a_1 + a_2 + \\dots + a_p = s$$$. Two states are considered different if there exists some position $$$i$$$ such that the value of $$$a_i$$$ differs in these states. Once again, Hasan doesn't know the exact scores (he doesn't know his exact score as well). So he considers each of the final states to be equally probable to achieve.Help Hasan find the probability of him winning.It can be shown that it is in the form of $$$\\frac{P}{Q}$$$ where $$$P$$$ and $$$Q$$$ are non-negative integers and $$$Q \\ne 0$$$, $$$P \\le Q$$$. Report the value of $$$P \\cdot Q^{-1} \\pmod {998244353}$$$.","hidden_unit_tests":"[{\"input\": \"2 6 3\\r\\n\", \"output\": [\"124780545\"]}, {\"input\": \"5 20 11\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 30 10\\r\\n\", \"output\": [\"85932500\"]}, {\"input\": \"100 0 0\\r\\n\", \"output\": [\"828542813\"]}, {\"input\": \"100 1 0\\r\\n\", \"output\": [\"828542813\"]}, {\"input\": \"1 5000 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 5000 4999\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 4999 0\\r\\n\", \"output\": [\"499122177\"]}, {\"input\": \"83 2813 123\\r\\n\", \"output\": [\"758958584\"]}, {\"input\": \"100 5000 5000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 5000 30\\r\\n\", \"output\": [\"860412292\"]}, {\"input\": \"100 5000 0\\r\\n\", \"output\": [\"828542813\"]}, {\"input\": \"1 0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 1 0\\r\\n\", \"output\": [\"499122177\"]}, {\"input\": \"45 2315 860\\r\\n\", \"output\": [\"256332294\"]}, {\"input\": \"69 813 191\\r\\n\", \"output\": [\"367363860\"]}, {\"input\": \"93 2364 1182\\r\\n\", \"output\": [\"952630216\"]}, {\"input\": \"21 862 387\\r\\n\", \"output\": [\"910580465\"]}, {\"input\": \"45 886 245\\r\\n\", \"output\": [\"23345522\"]}, {\"input\": \"45 2315 2018\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"69 813 598\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"93 2364 2364\\r\\n\", \"output\": [\"1\"]}]","length":232,"num_hidden_unit_tests":23}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"e4\"]","prob_desc_input_spec":"The only line contains the king's position in the format \"cd\", where 'c' is the column from 'a' to 'h' and 'd' is the row from '1' to '8'.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"6994331ca6282669cbb7138eb7e55e01","prob_desc_created_at":"1471875000","source_code":"import java.io.*;\nimport java.util.*;\n\n\npublic class Main {\n\n    private static StringBuilder data = new StringBuilder();\n    private final static FastReader in = new FastReader();\n\n\n    public static void main(String[] args) {\n\n      String s=in.line();\n     if(s.charAt(0)>'a'&&s.charAt(0)<'h'&&s.charAt(1)>'1'&&s.charAt(1)<'8'){\n         System.out.println(8);\n     }else if((s.charAt(0)=='a'||s.charAt(0)=='h')&&(s.charAt(1)=='1'||s.charAt(1)=='8')){\n         System.out.println(3);\n     }else{\n         System.out.println(5);\n     }\n    }\n\n\n    static void fileOut(String s) {\n        File out = new File(\"output.txt\");\n        try {\n            FileWriter fw = new FileWriter(out);\n            fw.write(s);\n            fw.flush();\n            fw.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    static class FastReader {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public FastReader() {\n            br = new BufferedReader(new\n                    InputStreamReader(System.in));\n        }\n\n        public FastReader(String path) {\n            try {\n                br = new BufferedReader(new\n                        InputStreamReader(new FileInputStream(path)));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n\n        String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int inT() {\n            return Integer.parseInt(next());\n        }\n\n        long lonG() {\n            return Long.parseLong(next());\n        }\n\n        float floaT() {\n            return Float.parseFloat(next());\n        }\n\n        double doublE() {\n            return Double.parseDouble(next());\n        }\n\n\n        String line() {\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n\n}","prob_desc_sample_outputs":"[\"8\"]","lang_cluster":"Java","code_uid":"5af0c0e388a1790ac5165dcd0effbd7b","prob_desc_notes":null,"prob_desc_output_spec":"Print the only integer x \u2014 the number of moves permitted for the king.","prob_desc_output_to":"standard output","prob_desc_description":"The only king stands on the standard chess board. You are given his position in format \"cd\", where c is the column from 'a' to 'h' and d is the row from '1' to '8'. Find the number of moves permitted for the king.Check the king's moves here https:\/\/en.wikipedia.org\/wiki\/King_(chess).  King moves from the position e4 ","hidden_unit_tests":"[{\"input\": \"e4\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"a1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"h8\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"a4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"g7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"e1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"b2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"c7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"h6\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"c8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"a8\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"f8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"f2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"e8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"b8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"g8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"d8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"h4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"b1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"a2\\r\\n\", \"output\": [\"5\"]}]","length":93,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"6 3\\n1 1 1 0 1 0\", \"5 2\\n0 0 0 1 0\"]","prob_desc_input_spec":"The first line of the input contains two integers n and a (1\u2009\u2264\u2009a\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of cities and the index of city where Limak lives. The second line contains n integers t1,\u2009t2,\u2009...,\u2009tn (0\u2009\u2264\u2009ti\u2009\u2264\u20091). There are ti criminals in the i-th city.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"4840d571d4ce6e1096bb678b6c100ae5","prob_desc_created_at":"1465403700","source_code":"import java.util.Scanner;\n\npublic class ProblemSolving {\n\n    public static void main(String[] args) {\n        int len ,index;\n        Scanner s = new Scanner(System.in);\n        len = s.nextInt();\n        index = s.nextInt();\n        int arr[];\n        arr = new int[len];\n        for(int i =0 ; i< len ; i++) arr[i]= s.nextInt();\n        \n        \/\/------------------\n        index--;\n        int left =index\n            ,right = index\n            ,counter=0;\n        boolean flag  = false;\n        if(arr.length==1){\n            System.out.println(arr[0]);\n        }else{\n            while((right-left)!=arr.length-1||flag!=true){\n\/\/                System.out.println(left+\" \"+right);\n\/\/                System.out.println(arr[left]+\" \"+arr[right]);\n\/\/                System.out.println(Math.abs(left-index) +\" \"+Math.abs(right-index));\n                if(arr[left]==1&&arr[right]==1){\n                    if(left == right){\n                        counter++;\n                        arr[left]=0;\n                    }else{\n                        counter+=2;\n                        arr[left]=0;\n                        arr[right]=0;\n                    }\n                }else{\n                    if((Math.abs(left-index)!=Math.abs(right-index))&&(arr[left]==1 || arr[right]==1))counter++;    \n                    arr[left]=0;\n                    arr[right]=0;\n                }\n\/\/                System.out.println(counter);\n                if(left==0&&right==arr.length-1)flag = true;\n                if(left!=0)left--;\n                if(right!=arr.length-1)right++;\n                \n            }\n            System.out.println(counter);  \n        }    \n        \n    }\n        \n     \n}\n","prob_desc_sample_outputs":"[\"3\", \"1\"]","lang_cluster":"Java","code_uid":"5ed099db34d8baf9763fe16f74415200","prob_desc_notes":"NoteIn the first sample, there are six cities and Limak lives in the third one (blue arrow below). Criminals are in cities marked red.  Using the BCD gives Limak the following information:  There is one criminal at distance 0 from the third city\u00a0\u2014 Limak is sure that this criminal is exactly in the third city.  There is one criminal at distance 1 from the third city\u00a0\u2014 Limak doesn't know if a criminal is in the second or fourth city.  There are two criminals at distance 2 from the third city\u00a0\u2014 Limak is sure that there is one criminal in the first city and one in the fifth city.  There are zero criminals for every greater distance. So, Limak will catch criminals in cities 1, 3 and 5, that is 3 criminals in total.In the second sample (drawing below), the BCD gives Limak the information that there is one criminal at distance 2 from Limak's city. There is only one city at distance 2 so Limak is sure where a criminal is.  ","prob_desc_output_spec":"Print the number of criminals Limak will catch.","prob_desc_output_to":"standard output","prob_desc_description":"There are n cities in Bearland, numbered 1 through n. Cities are arranged in one long row. The distance between cities i and j is equal to |i\u2009-\u2009j|.Limak is a police officer. He lives in a city a. His job is to catch criminals. It's hard because he doesn't know in which cities criminals are. Though, he knows that there is at most one criminal in each city.Limak is going to use a BCD (Bear Criminal Detector). The BCD will tell Limak how many criminals there are for every distance from a city a. After that, Limak can catch a criminal in each city for which he is sure that there must be a criminal.You know in which cities criminals are. Count the number of criminals Limak will catch, after he uses the BCD.","hidden_unit_tests":"[{\"input\": \"6 3\\r\\n1 1 1 0 1 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5 2\\r\\n0 0 0 1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"9 3\\r\\n1 1 1 1 1 1 1 1 0\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"9 5\\r\\n1 0 1 0 1 0 1 0 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"20 17\\r\\n1 1 0 1 1 1 1 0 1 0 1 1 1 0 1 1 0 0 0 0\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"100 60\\r\\n1 1 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 0 0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 1 0 1 0 1 1 0 0 0 0 0 1 1 1 0 1 1 0 0 0 1 0 0 0 1 1 1 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 1 0 0\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"8 1\\r\\n1 0 1 1 0 0 1 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"11 11\\r\\n0 1 0 0 1 1 1 0 0 0 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"19 10\\r\\n0 1 1 0 1 0 0 1 1 0 0 1 0 1 0 0 1 0 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100 38\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 38\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 38\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"99 38\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"99 38\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"99 38\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"98 70\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"41\"]}, {\"input\": \"99 70\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"99 60\\r\\n0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 0 1 1 0 0 0 0 0 1 0 0 1 0 1 1 1 1 1 0 1 0 1 1 0 0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"98 24\\r\\n0 0 0 1 1 0 1 1 0 0 0 0 1 0 0 1 0 0 1 1 1 0 0 1 0 0 1 0 1 0 0 1 1 0 1 1 1 0 1 0 0 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 0 1 0 0 0 1 1 0 0 1 1 1 1 1 1 0 1 0 1 0 0 1 1\\r\\n\", \"output\": [\"39\"]}, {\"input\": \"100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 1\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1\\r\\n0 1\\r\\n\", \"output\": [\"1\"]}]","length":53,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\", \"3\"]","prob_desc_input_spec":"The first and only line of the input contains a single integer n (3\u2009\u2264\u2009n\u2009\u2264\u200954321) - the number of vertices of the regular polygon drawn by Ari.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"efa8e7901a3084d34cfb1a6b18067f2b","prob_desc_created_at":"1446309000","source_code":"    \nimport java.util.Scanner;\n\npublic class cls_div2_328_B {\n    public static void main(String[] args) {\n\n        Scanner scan = new Scanner(System.in);\n        \n        long n = scan.nextInt();\n        \n        scan.close();\n        \n        long result = (n - 2) + ((n - 3) * (n - 2));\n        \n        System.out.println(result);\n    }\n}\n","prob_desc_sample_outputs":"[\"9\", \"1\"]","lang_cluster":"Java","code_uid":"7e32db57b268384ac62fb9e4ae7d33c5","prob_desc_notes":"NoteOne of the possible solutions for the first sample is shown on the picture above.","prob_desc_output_spec":"Print the minimum number of jumps Ada should make to collect all the walnuts. Note, that she doesn't need to leave the polygon after.","prob_desc_output_to":"standard output","prob_desc_description":"Ari the monster always wakes up very early with the first ray of the sun and the first thing she does is feeding her squirrel.Ari draws a regular convex polygon on the floor and numbers it's vertices 1,\u20092,\u2009...,\u2009n in clockwise order. Then starting from the vertex 1 she draws a ray in the direction of each other vertex. The ray stops when it reaches a vertex or intersects with another ray drawn before. Ari repeats this process for vertex 2,\u20093,\u2009...,\u2009n (in this particular order). And then she puts a walnut in each region inside the polygon.  Ada the squirrel wants to collect all the walnuts, but she is not allowed to step on the lines drawn by Ari. That means Ada have to perform a small jump if she wants to go from one region to another. Ada can jump from one region P to another region Q if and only if P and Q share a side or a corner.Assuming that Ada starts from outside of the picture, what is the minimum number of jumps she has to perform in order to collect all the walnuts?","hidden_unit_tests":"[{\"input\": \"5\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"54321\\r\\n\", \"output\": [\"2950553761\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"54320\\r\\n\", \"output\": [\"2950445124\"]}, {\"input\": \"54319\\r\\n\", \"output\": [\"2950336489\"]}, {\"input\": \"54318\\r\\n\", \"output\": [\"2950227856\"]}, {\"input\": \"54317\\r\\n\", \"output\": [\"2950119225\"]}, {\"input\": \"54316\\r\\n\", \"output\": [\"2950010596\"]}, {\"input\": \"54315\\r\\n\", \"output\": [\"2949901969\"]}, {\"input\": \"54314\\r\\n\", \"output\": [\"2949793344\"]}, {\"input\": \"8153\\r\\n\", \"output\": [\"66438801\"]}, {\"input\": \"51689\\r\\n\", \"output\": [\"2671545969\"]}, {\"input\": \"16659\\r\\n\", \"output\": [\"277455649\"]}, {\"input\": \"47389\\r\\n\", \"output\": [\"2245527769\"]}, {\"input\": \"314\\r\\n\", \"output\": [\"97344\"]}, {\"input\": \"23481\\r\\n\", \"output\": [\"551263441\"]}, {\"input\": \"20380\\r\\n\", \"output\": [\"415262884\"]}, {\"input\": \"1994\\r\\n\", \"output\": [\"3968064\"]}]","length":17,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"0 1 1\\n1 0 1\\n1 1 0\", \"0 3 6\\n5 0 5\\n4 7 0\"]","prob_desc_input_spec":"The first three lines of the input contain the Little Elephant's notes. The first line contains elements of the first row of the magic square. The second line contains the elements of the second row, the third line is for the third row. The main diagonal elements that have been forgotten by the Elephant are represented by zeroes. It is guaranteed that the notes contain exactly three zeroes and they are all located on the main diagonal. It is guaranteed that all positive numbers in the table do not exceed 105.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"0c42eafb73d1e30f168958a06a0f9bca","prob_desc_created_at":"1356190200","source_code":"import java.util.*;\nimport java.io.*;\n\/\/267630EY\npublic class Main259B2\n{\n  static PrintWriter out=new PrintWriter(System.out);\n  \n  \n  public static void main(String[] args) throws IOException\n  {\n    Scanner sc=new Scanner(System.in);\n    int[][] a=new int[3][3];\n    for(int i=0;i<3;i++)\n    {\n      for(int j=0;j<3;j++)\n        a[i][j]=sc.nextInt();\n    }\n    int first=a[0][1]+a[0][2];\n    int second=a[1][0]+a[1][2];\n    int third=a[2][0]+a[2][1];\n    int fourth=(first+second+third)\/2;\n    a[0][0]=fourth-first;\n    a[1][1]=fourth-second;\n    a[2][2]=fourth-third;\n    for(int i=0;i<3;i++)\n    {\n      for(int j=0;j<3;j++)\n      {\n        out.print(a[i][j]+\" \");\n      }\n      out.println();\n    }\n    out.flush();\n      \n    \n    \n      \n    \n            \n      \n      \n                \n    \n  }\n  \n  static class Scanner\n  {\n    BufferedReader br;\n    StringTokenizer tk=new StringTokenizer(\"\");\n    public Scanner(InputStream is) \n        {\n      br=new BufferedReader(new InputStreamReader(is));\n    }\n        public int nextInt() throws IOException\n        {\n          if(tk.hasMoreTokens())\n                return Integer.parseInt(tk.nextToken());\n          tk=new StringTokenizer(br.readLine());\n          return nextInt();\n        }\n        public long nextLong() throws IOException\n        {\n            if(tk.hasMoreTokens())\n              return Long.parseLong(tk.nextToken());\n            tk=new StringTokenizer(br.readLine());\n            return nextLong();\n        }\n        public String next() throws IOException\n        {\n          if(tk.hasMoreTokens())\n            return (tk.nextToken());\n            tk=new StringTokenizer(br.readLine());\n            return next();\n        }\n        public String nextLine() throws IOException\n        {\n          tk=new StringTokenizer(\"\");\n          return br.readLine();\n        }\n        public double nextDouble() throws IOException\n        {\n            if(tk.hasMoreTokens())\n              return Double.parseDouble(tk.nextToken());\n            tk=new StringTokenizer(br.readLine());\n            return nextDouble();\n        }\n        public char nextChar() throws IOException\n        {\n            if(tk.hasMoreTokens())\n              return (tk.nextToken().charAt(0));\n            tk=new StringTokenizer(br.readLine());\n            return nextChar();\n        }\n        public int[] nextIntArray(int n) throws IOException\n        {\n            int a[]=new int[n];\n            for(int i=0;i<n;i++)\n              a[i]=nextInt();\n            return a;\n        }\n        public long[] nextLongArray(int n) throws IOException\n        {\n          long a[]=new long[n];\n            for(int i=0;i<n;i++)\n              a[i]=nextLong();\n            return a;\n        }\n        public int[] nextIntArrayOneBased(int n) throws IOException\n        {\n          int a[]=new int[n+1];\n            for(int i=1;i<=n;i++)\n              a[i]=nextInt();\n            return a;\n        }\n        public long[] nextLongArrayOneBased(int n) throws IOException\n        {\n          long a[]=new long[n+1];\n          for(int i=1;i<=n;i++)\n                a[i]=nextLong();\n          return a;\n        }\n  }\n}\n\n","prob_desc_sample_outputs":"[\"1 1 1\\n1 1 1\\n1 1 1\", \"6 3 6\\n5 5 5\\n4 7 4\"]","lang_cluster":"Java","code_uid":"f8270a6fe13a03011664d7ea15add46e","prob_desc_notes":null,"prob_desc_output_spec":"Print three lines, in each line print three integers \u2014 the Little Elephant's magic square. If there are multiple magic squares, you are allowed to print any of them. Note that all numbers you print must be positive and not exceed 105. It is guaranteed that there exists at least one magic square that meets the conditions.","prob_desc_output_to":"standard output","prob_desc_description":"Little Elephant loves magic squares very much.A magic square is a 3\u2009\u00d7\u20093 table, each cell contains some positive integer. At that the sums of integers in all rows, columns and diagonals of the table are equal. The figure below shows the magic square, the sum of integers in all its rows, columns and diagonals equals 15.  The Little Elephant remembered one magic square. He started writing this square on a piece of paper, but as he wrote, he forgot all three elements of the main diagonal of the magic square. Fortunately, the Little Elephant clearly remembered that all elements of the magic square did not exceed 105. Help the Little Elephant, restore the original magic square, given the Elephant's notes.","hidden_unit_tests":"[{\"input\": \"0 1 1\\r\\n1 0 1\\r\\n1 1 0\\r\\n\", \"output\": [\"1 1 1 \\r\\n1 1 1 \\r\\n1 1 1\", \"1 1 1\\r\\n 1 1 1\\r\\n 1 1 1\", \"1 1 1\\r\\n1 1 1\\r\\n1 1 1\"]}, {\"input\": \"0 3 6\\r\\n5 0 5\\r\\n4 7 0\\r\\n\", \"output\": [\"6 3 6\\r\\n 5 5 5\\r\\n 4 7 4\", \"6 3 6\\r\\n5 5 5\\r\\n4 7 4\", \"6 3 6 \\r\\n5 5 5 \\r\\n4 7 4\"]}, {\"input\": \"0 4 4\\r\\n4 0 4\\r\\n4 4 0\\r\\n\", \"output\": [\"4 4 4\\r\\n 4 4 4\\r\\n 4 4 4\", \"4 4 4 \\r\\n4 4 4 \\r\\n4 4 4\", \"4 4 4\\r\\n4 4 4\\r\\n4 4 4\"]}, {\"input\": \"0 54 48\\r\\n36 0 78\\r\\n66 60 0\\r\\n\", \"output\": [\"69 54 48 \\r\\n36 57 78 \\r\\n66 60 45\", \"69 54 48\\r\\n36 57 78\\r\\n66 60 45\", \"69 54 48\\r\\n 36 57 78\\r\\n 66 60 45\"]}, {\"input\": \"0 17 14\\r\\n15 0 15\\r\\n16 13 0\\r\\n\", \"output\": [\"14 17 14\\r\\n 15 15 15\\r\\n 16 13 16\", \"14 17 14\\r\\n15 15 15\\r\\n16 13 16\", \"14 17 14 \\r\\n15 15 15 \\r\\n16 13 16\"]}, {\"input\": \"0 97 56\\r\\n69 0 71\\r\\n84 43 0\\r\\n\", \"output\": [\"57 97 56\\r\\n69 70 71\\r\\n84 43 83\", \"57 97 56\\r\\n 69 70 71\\r\\n 84 43 83\", \"57 97 56 \\r\\n69 70 71 \\r\\n84 43 83\"]}, {\"input\": \"0 1099 1002\\r\\n1027 0 1049\\r\\n1074 977 0\\r\\n\", \"output\": [\"1013 1099 1002 \\r\\n1027 1038 1049 \\r\\n1074 977 1063\", \"1013 1099 1002\\r\\n1027 1038 1049\\r\\n1074 977 1063\", \"1013 1099 1002\\r\\n 1027 1038 1049\\r\\n 1074 977 1063\"]}, {\"input\": \"0 98721 99776\\r\\n99575 0 99123\\r\\n98922 99977 0\\r\\n\", \"output\": [\"99550 98721 99776\\r\\n99575 99349 99123\\r\\n98922 99977 99148\", \"99550 98721 99776\\r\\n 99575 99349 99123\\r\\n 98922 99977 99148\", \"99550 98721 99776 \\r\\n99575 99349 99123 \\r\\n98922 99977 99148\"]}, {\"input\": \"0 6361 2304\\r\\n1433 0 8103\\r\\n7232 3175 0\\r\\n\", \"output\": [\"5639 6361 2304 \\r\\n1433 4768 8103 \\r\\n7232 3175 3897\", \"5639 6361 2304\\r\\n1433 4768 8103\\r\\n7232 3175 3897\", \"5639 6361 2304\\r\\n 1433 4768 8103\\r\\n 7232 3175 3897\"]}, {\"input\": \"0 99626 99582\\r\\n99766 0 99258\\r\\n99442 99398 0\\r\\n\", \"output\": [\"99328 99626 99582 \\r\\n99766 99512 99258 \\r\\n99442 99398 99696\", \"99328 99626 99582\\r\\n99766 99512 99258\\r\\n99442 99398 99696\", \"99328 99626 99582\\r\\n 99766 99512 99258\\r\\n 99442 99398 99696\"]}, {\"input\": \"0 99978 99920\\r\\n99950 0 99918\\r\\n99948 99890 0\\r\\n\", \"output\": [\"99904 99978 99920\\r\\n99950 99934 99918\\r\\n99948 99890 99964\", \"99904 99978 99920\\r\\n 99950 99934 99918\\r\\n 99948 99890 99964\", \"99904 99978 99920 \\r\\n99950 99934 99918 \\r\\n99948 99890 99964\"]}, {\"input\": \"0 840 666\\r\\n612 0 948\\r\\n894 720 0\\r\\n\", \"output\": [\"834 840 666\\r\\n612 780 948\\r\\n894 720 726\", \"834 840 666\\r\\n 612 780 948\\r\\n 894 720 726\", \"834 840 666 \\r\\n612 780 948 \\r\\n894 720 726\"]}, {\"input\": \"0 28 10\\r\\n12 0 24\\r\\n26 8 0\\r\\n\", \"output\": [\"16 28 10 \\r\\n12 18 24 \\r\\n26 8 20\", \"16 28 10\\r\\n12 18 24\\r\\n26 8 20\", \"16 28 10\\r\\n 12 18 24\\r\\n 26 8 20\"]}, {\"input\": \"0 120 83\\r\\n98 0 90\\r\\n105 68 0\\r\\n\", \"output\": [\"79 120 83\\r\\n98 94 90\\r\\n105 68 109\", \"79 120 83\\r\\n 98 94 90\\r\\n 105 68 109\", \"79 120 83 \\r\\n98 94 90 \\r\\n105 68 109\"]}, {\"input\": \"0 86900 85807\\r\\n85836 0 86842\\r\\n86871 85778 0\\r\\n\", \"output\": [\"86310 86900 85807\\r\\n 85836 86339 86842\\r\\n 86871 85778 86368\", \"86310 86900 85807\\r\\n85836 86339 86842\\r\\n86871 85778 86368\", \"86310 86900 85807 \\r\\n85836 86339 86842 \\r\\n86871 85778 86368\"]}, {\"input\": \"0 74 78\\r\\n78 0 74\\r\\n74 78 0\\r\\n\", \"output\": [\"76 74 78 \\r\\n78 76 74 \\r\\n74 78 76\", \"76 74 78\\r\\n 78 76 74\\r\\n 74 78 76\", \"76 74 78\\r\\n78 76 74\\r\\n74 78 76\"]}, {\"input\": \"0 505 681\\r\\n605 0 657\\r\\n581 757 0\\r\\n\", \"output\": [\"707 505 681 \\r\\n605 631 657 \\r\\n581 757 555\", \"707 505 681\\r\\n 605 631 657\\r\\n 581 757 555\", \"707 505 681\\r\\n605 631 657\\r\\n581 757 555\"]}, {\"input\": \"0 662 918\\r\\n822 0 854\\r\\n758 1014 0\\r\\n\", \"output\": [\"934 662 918 \\r\\n822 838 854 \\r\\n758 1014 742\", \"934 662 918\\r\\n 822 838 854\\r\\n 758 1014 742\", \"934 662 918\\r\\n822 838 854\\r\\n758 1014 742\"]}, {\"input\": \"0 93 95\\r\\n93 0 97\\r\\n95 97 0\\r\\n\", \"output\": [\"97 93 95\\r\\n93 95 97\\r\\n95 97 93\", \"97 93 95 \\r\\n93 95 97 \\r\\n95 97 93\", \"97 93 95\\r\\n 93 95 97\\r\\n 95 97 93\"]}, {\"input\": \"0 709 712\\r\\n719 0 695\\r\\n702 705 0\\r\\n\", \"output\": [\"700 709 712\\r\\n 719 707 695\\r\\n 702 705 714\", \"700 709 712\\r\\n719 707 695\\r\\n702 705 714\", \"700 709 712 \\r\\n719 707 695 \\r\\n702 705 714\"]}, {\"input\": \"0 7 6\\r\\n9 0 1\\r\\n4 3 0\\r\\n\", \"output\": [\"2 7 6\\r\\n9 5 1\\r\\n4 3 8\", \"2 7 6 \\r\\n9 5 1 \\r\\n4 3 8\", \"2 7 6\\r\\n 9 5 1\\r\\n 4 3 8\"]}, {\"input\": \"0 9 2\\r\\n3 0 7\\r\\n8 1 0\\r\\n\", \"output\": [\"4 9 2 \\r\\n3 5 7 \\r\\n8 1 6\", \"4 9 2\\r\\n3 5 7\\r\\n8 1 6\", \"4 9 2\\r\\n 3 5 7\\r\\n 8 1 6\"]}, {\"input\": \"0 1 43\\r\\n13 0 61\\r\\n31 73 0\\r\\n\", \"output\": [\"67 1 43\\r\\n 13 37 61\\r\\n 31 73 7\", \"67 1 43\\r\\n13 37 61\\r\\n31 73 7\", \"67 1 43 \\r\\n13 37 61 \\r\\n31 73 7\"]}, {\"input\": \"0 100000 100000\\r\\n100000 0 100000\\r\\n100000 100000 0\\r\\n\", \"output\": [\"100000 100000 100000 \\r\\n100000 100000 100000 \\r\\n100000 100000 100000\", \"100000 100000 100000\\r\\n100000 100000 100000\\r\\n100000 100000 100000\", \"100000 100000 100000\\r\\n 100000 100000 100000\\r\\n 100000 100000 100000\"]}]","length":124,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2200.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1 1 1\", \"3 1 4\"]","prob_desc_input_spec":"The first line will contain three integers integer k,\u2009pa,\u2009pb (1\u2009\u2264\u2009k\u2009\u2264\u20091\u2009000, 1\u2009\u2264\u2009pa,\u2009pb\u2009\u2264\u20091\u2009000\u2009000).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"0dc9f5d75143a2bc744480de859188b4","prob_desc_created_at":"1514562000","source_code":"\n\/**\n * DA-IICT\n * Author : Savaliya Sagar\n *\/\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class D908\n{\n\tint k, mod = (int) (1e9 + 7);\n\tlong pa, pb, pa_pb;\n\tlong dp[][];\n\t\n\tvoid solve()\n\t{\n\t\tk = ni();\n\t\tdp = new long[k + 5][k + 5];\n\t\tfor (int i = 0; i < k + 5; i++)\n\t\t{\n\t\t\tArrays.fill(dp[i], -1);\n\t\t}\n\t\tint a = ni();\n\t\tint b = ni();\n\t\tpa = mul(a, pow(a + b, mod - 2, mod));\n\t\tpb = mul(b, pow(a + b, mod - 2, mod));\n\t\tpa_pb = mul(a, pow(b, mod - 2, mod));\n\t\tout.println(rec(1, 0));\n\t}\n\t\n\tlong rec(int a, int ab)\n\t{\n\t\tif (ab >= k)\n\t\t\treturn ab;\n\t\tif (a >= k)\n\t\t{\n\t\t\treturn (a + 0L + ab + pa_pb) % mod;\n\t\t}\n\t\tif (dp[a][ab] != -1)\n\t\t\treturn dp[a][ab];\n\t\tdp[a][ab] = rec(a + 1, ab) * pa + 0L + rec(a, ab + a) * pb;\n\t\tdp[a][ab] %= mod;\n\t\treturn (dp[a][ab]);\n\t}\n\t\n\tlong add(long a, long b)\n\t{\n\t\tlong sum = a + b;\n\t\tif (sum >= mod)\n\t\t\tsum -= mod;\n\t\treturn sum;\n\t}\n\t\n\tlong sub(long a, long b)\n\t{\n\t\tlong sub = a - b;\n\t\tif (sub < 0)\n\t\t\tsub += mod;\n\t\treturn sub;\n\t}\n\t\n\tlong mul(long a, long b)\n\t{\n\t\treturn (a * b) % mod;\n\t}\n\t\n\tlong pow(long x, long n, long mod)\n\t{\n\t\tlong res = 1;\n\t\tx %= mod;\n\t\twhile (n > 0)\n\t\t{\n\t\t\tif (n % 2 == 1)\n\t\t\t{\n\t\t\t\tres = (res * x) % mod;\n\t\t\t}\n\t\t\tx = (x * x) % mod;\n\t\t\tn \/= 2;\n\t\t}\n\t\treturn res;\n\t}\n\t\n\tvoid run() throws Exception\n\t{\n\t\tout = new PrintWriter(System.out);\n\t\treader = new BufferedReader(new InputStreamReader(System.in), 32768);\n\t\ttokenizer = null;\n\t\tsolve();\n\t\tout.flush();\n\t}\n\t\n\tpublic int ni()\n\t{\n\t\treturn Integer.parseInt(next());\n\t}\n\t\n\tBufferedReader reader;\n\tStringTokenizer tokenizer;\n\tPrintWriter out;\n\t\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tnew D908().run();\n\t}\n\t\n\tpublic String next()\n\t{\n\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens())\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\n\t\t\t} catch (IOException e)\n\t\t\t{\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn tokenizer.nextToken();\n\t}\n}\n","prob_desc_sample_outputs":"[\"2\", \"370000006\"]","lang_cluster":"Java","code_uid":"dc9032dd4412b0118f1c5b71d3a4bd64","prob_desc_notes":"NoteThe first sample, we will keep appending to our sequence until we get the subsequence 'ab' at least once. For instance, we get the sequence 'ab' with probability 1\/4, 'bbab' with probability 1\/16, and 'aab' with probability 1\/8. Note, it's impossible for us to end with a sequence like 'aabab', since we would have stopped our algorithm once we had the prefix 'aab'. The expected amount of times that 'ab' will occur across all valid sequences is 2. For the second sample, the answer is equal to .","prob_desc_output_spec":"Print a single integer, the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"You are given three integers k, pa and pb.You will construct a sequence with the following algorithm: Initially, start with the empty sequence. Each second, you do the following. With probability pa\u2009\/\u2009(pa\u2009+\u2009pb), add 'a' to the end of the sequence. Otherwise (with probability pb\u2009\/\u2009(pa\u2009+\u2009pb)), add 'b' to the end of the sequence.You stop once there are at least k subsequences that form 'ab'. Determine the expected number of times 'ab' is a subsequence in the resulting sequence. It can be shown that this can be represented by P\u2009\/\u2009Q, where P and Q are coprime integers, and . Print the value of .","hidden_unit_tests":"[{\"input\": \"1 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 1 4\\r\\n\", \"output\": [\"370000006\"]}, {\"input\": \"1000 123456 654321\\r\\n\", \"output\": [\"977760856\"]}, {\"input\": \"305 337309 378395\\r\\n\", \"output\": [\"174667130\"]}, {\"input\": \"108 531040 908573\\r\\n\", \"output\": [\"145579983\"]}, {\"input\": \"575 39377 68346\\r\\n\", \"output\": [\"899189133\"]}, {\"input\": \"66 199449 266025\\r\\n\", \"output\": [\"27912582\"]}, {\"input\": \"781 817338 452871\\r\\n\", \"output\": [\"711597307\"]}, {\"input\": \"99 534023 117289\\r\\n\", \"output\": [\"29694885\"]}, {\"input\": \"156 78149 46740\\r\\n\", \"output\": [\"114906561\"]}, {\"input\": \"57 339480 774350\\r\\n\", \"output\": [\"622654301\"]}, {\"input\": \"270 967166 795005\\r\\n\", \"output\": [\"530539317\"]}, {\"input\": \"628 446579 365440\\r\\n\", \"output\": [\"214808787\"]}, {\"input\": \"97 119368 2062\\r\\n\", \"output\": [\"2436614\"]}, {\"input\": \"757 869978 224540\\r\\n\", \"output\": [\"921904658\"]}, {\"input\": \"892 777143 664073\\r\\n\", \"output\": [\"527873013\"]}, {\"input\": \"177 2501 570142\\r\\n\", \"output\": [\"779148936\"]}, {\"input\": \"908 879494 944888\\r\\n\", \"output\": [\"114377456\"]}, {\"input\": \"734 32585 49636\\r\\n\", \"output\": [\"684730644\"]}, {\"input\": \"38 592277 400426\\r\\n\", \"output\": [\"499077928\"]}, {\"input\": \"192 42070 61266\\r\\n\", \"output\": [\"904814024\"]}, {\"input\": \"78 535199 331023\\r\\n\", \"output\": [\"684367478\"]}, {\"input\": \"842 171735 282219\\r\\n\", \"output\": [\"948183028\"]}, {\"input\": \"1000 1000000 1\\r\\n\", \"output\": [\"478180868\"]}]","length":121,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 8 6\", \"3 9 3\", \"8 5 20\"]","prob_desc_input_spec":"The first line contains three integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$1 \\leq n, m, k \\leq 100$$$)\u00a0\u2014 the number of participants, the number of pens, and the number of notebooks respectively.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"6cd07298b23cc6ce994bb1811b9629c4","prob_desc_created_at":"1561710000","source_code":"import java.util.*;\npublic class A1186{\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint a = in.nextInt(), b = in.nextInt(), c = in.nextInt();\n\t\tif(a <=b && a<=c)\n\t\t\tSystem.out.print(\"Yes\");\n\t\telse \n\t\t\tSystem.out.print(\"No\");\n\t}\n}","prob_desc_sample_outputs":"[\"Yes\", \"Yes\", \"No\"]","lang_cluster":"Java","code_uid":"b8c0a67cb6704a8a66621ac909ccf1b6","prob_desc_notes":"NoteIn the first example, there are $$$5$$$ participants. The Cossack has $$$8$$$ pens and $$$6$$$ notebooks. Therefore, he has enough pens and notebooks.In the second example, there are $$$3$$$ participants. The Cossack has $$$9$$$ pens and $$$3$$$ notebooks. He has more than enough pens but only the minimum needed number of notebooks.In the third example, there are $$$8$$$ participants but only $$$5$$$ pens. Since the Cossack does not have enough pens, the answer is \"No\".","prob_desc_output_spec":"Print \"Yes\" if it possible to reward all the participants. Otherwise, print \"No\". You can print each letter in any case (upper or lower).","prob_desc_output_to":"standard output","prob_desc_description":"Vus the Cossack holds a programming competition, in which $$$n$$$ people participate. He decided to award them all with pens and notebooks. It is known that Vus has exactly $$$m$$$ pens and $$$k$$$ notebooks.Determine whether the Cossack can reward all participants, giving each of them at least one pen and at least one notebook.","hidden_unit_tests":"[{\"input\": \"5 8 6\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"3 9 3\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"8 5 20\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"54 82 100\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"1 100 100\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"100 99 99\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"8 20 5\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"68 91 90\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"92 35 39\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"20 84 93\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"44 28 47\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"68 73 96\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"92 17 54\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"20 61 100\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"44 2 53\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"68 54 3\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"58 92 33\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"2 1 2\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"2 2 1\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"2 2 2\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"2 1 1\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"100 100 100\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"100 1 1\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"5 3 2\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}]","length":11,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"12\", \"20\", \"10\"]","prob_desc_input_spec":"The only line contains n (1\u2009\u2264\u2009n\u2009\u2264\u200925) \u2014 the required sum of points.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"5802f52caff6015f21b80872274ab16c","prob_desc_created_at":"1312714800","source_code":"import java.io.*;\nimport java.util.*;\npublic class Main\n{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        int v=n-10;\n        if(v==10)\n        System.out.println(15);\n        else if(v==0)\n        System.out.println(0);\n        else if(v==1)\n        {\n            System.out.println(4);\n            \n        }\n        else if(v==11)\n        System.out.println(4);\n        else\n        {\n            if(v<=10&&v>0)\n            {\n                System.out.println(4);\n            }\n            else\n            System.out.println(0);\n        }\n    }\n}","prob_desc_sample_outputs":"[\"4\", \"15\", \"0\"]","lang_cluster":"Java","code_uid":"057be3571a83a927330d2a4984cd183c","prob_desc_notes":"NoteIn the first sample only four two's of different suits can earn the required sum of points.In the second sample we can use all tens, jacks, queens and kings; overall it's 15 cards, as the queen of spades (as any other card) is only present once in the pack of cards and it's already in use.In the third sample there is no card, that would add a zero to the current ten points.","prob_desc_output_spec":"Print the numbers of ways to get the second card in the required way if the first card is the queen of spades.","prob_desc_output_to":"standard output","prob_desc_description":"One rainy gloomy evening when all modules hid in the nearby cafes to drink hot energetic cocktails, the Hexadecimal virus decided to fly over the Mainframe to look for a Great Idea. And she has found one!Why not make her own Codeforces, with blackjack and other really cool stuff? Many people will surely be willing to visit this splendid shrine of high culture.In Mainframe a standard pack of 52 cards is used to play blackjack. The pack contains cards of 13 values: 2, 3, 4, 5, 6, 7, 8, 9, 10, jacks, queens, kings and aces. Each value also exists in one of four suits: hearts, diamonds, clubs and spades. Also, each card earns some value in points assigned to it: cards with value from two to ten earn from 2 to 10 points, correspondingly. An ace can either earn 1 or 11, whatever the player wishes. The picture cards (king, queen and jack) earn 10 points. The number of points a card earns does not depend on the suit. The rules of the game are very simple. The player gets two cards, if the sum of points of those cards equals n, then the player wins, otherwise the player loses.The player has already got the first card, it's the queen of spades. To evaluate chances for victory, you should determine how many ways there are to get the second card so that the sum of points exactly equals n.","hidden_unit_tests":"[{\"input\": \"12\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"18\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"25\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"22\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"14\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"16\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"21\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"23\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"24\\r\\n\", \"output\": [\"0\"]}]","length":31,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 11\", \"17 107\", \"3 8\"]","prob_desc_input_spec":"The first line contains two integers n and m (1\u2009\u2264\u2009n\u2009\u2264\u200950, 1\u2009\u2264\u2009m\u2009\u2264\u2009104) \u2014 the number of walruses and the number of chips correspondingly.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"5dd5ee90606d37cae5926eb8b8d250bb","prob_desc_created_at":"1308582000","source_code":"import java.io.*;\nimport java.security.cert.*;\npublic class Main {\n    public static void main(String[] args)throws Exception {\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tint a[]=Androiz.separator(br.readLine(),\" \"),x=1;\n\t\twhile(a[1]>=0){\n\t\t\ta[1]-=x;\n\t\t\tif (x==a[0])x=1;else x++;}\n\t\t\tif(x==1)x=a[0];else x--;\n\t\t\tSystem.out.println(a[1]+x);\n        \n\t}\n}\t\nclass Androiz{\n\tstatic int lengthArray=-1;\n\t\n\tstatic int[] separator(String s,String pr){\n\t\tint[] n;\n\t\tString[] stringArray;\n\t\tchar[] charArray;\n\t\tif(pr==\" \"){\n\t\t\tstringArray=s.split(\" \");\n\t\t\tn=new int[(s.length()+1)\/2];\n\t\t\tfor(int i=0;i<stringArray.length;i++)n[i]=Integer.parseInt(stringArray[i]);\n\t\t\tlengthArray=stringArray.length;\n\t\t}else if (pr==\"\"){\n\t\t\tcharArray=s.toCharArray();\n\t\t\tn=new int[s.length()];\n\t\t\tfor(int i=0;i<s.length();i++)n[i]=Integer.parseInt(charArray[i]+\"\");\n\t\t\tlengthArray=s.length();\n\t\t}else n=new int[1];\n\t\treturn n;\n\t}\n}","prob_desc_sample_outputs":"[\"0\", \"2\", \"1\"]","lang_cluster":"Java","code_uid":"1018ca44530112aee123b08e9d8f5e24","prob_desc_notes":"NoteIn the first sample the presenter gives one chip to the walrus number 1, two chips to the walrus number 2, three chips to the walrus number 3, four chips to the walrus number 4, then again one chip to the walrus number 1. After that the presenter runs out of chips. He can't give anything to the walrus number 2 and the process finishes.In the third sample the presenter gives one chip to the walrus number 1, two chips to the walrus number 2, three chips to the walrus number 3, then again one chip to the walrus number 1. The presenter has one chip left and he can't give two chips to the walrus number 2, that's why the presenter takes the last chip.","prob_desc_output_spec":"Print the number of chips the presenter ended up with.","prob_desc_output_to":"standard output","prob_desc_description":"There are n walruses sitting in a circle. All of them are numbered in the clockwise order: the walrus number 2 sits to the left of the walrus number 1, the walrus number 3 sits to the left of the walrus number 2, ..., the walrus number 1 sits to the left of the walrus number n.The presenter has m chips. The presenter stands in the middle of the circle and starts giving the chips to the walruses starting from walrus number 1 and moving clockwise. The walrus number i gets i chips. If the presenter can't give the current walrus the required number of chips, then the presenter takes the remaining chips and the process ends. Determine by the given n and m how many chips the presenter will get in the end.","hidden_unit_tests":"[{\"input\": \"4 11\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"17 107\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 8\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"46 7262\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"32 6864\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"36 6218\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"25 9712\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"9 7601\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"1 9058\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"29 7772\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"45 9465\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"46 866\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"29 1241\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"17 4248\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"20 8082\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"50 9555\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 7455\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"36 880\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"24 7440\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"44 7888\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50 10000\\r\\n\", \"output\": [\"40\"]}, {\"input\": \"1 10000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50 50\\r\\n\", \"output\": [\"5\"]}]","length":35,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 1\\n1 1 1\\n4\", \"1 1 3\\n2 3 4\\n2\", \"1 0 0\\n1 0 0\\n1\"]","prob_desc_input_spec":"The first line contains integers a1, a2 and a3 (0\u2009\u2264\u2009a1,\u2009a2,\u2009a3\u2009\u2264\u2009100). The second line contains integers b1, b2 and b3 (0\u2009\u2264\u2009b1,\u2009b2,\u2009b3\u2009\u2264\u2009100). The third line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100). The numbers in the lines are separated by single spaces.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"fe6301816dea7d9cea1c3a06a7d1ea7e","prob_desc_created_at":"1405605600","source_code":"\n\/\/ B. Network Configuration\n\/\/ https:\/\/codeforces.com\/problemset\/problem\/448\/A\n\n\nimport java.util.Scanner;\n\npublic class A23 {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner sc = new Scanner(System.in);\n\t\n\t\t\n\t\tint c=0;\n\t\tfor(int i = 0; i<3;i++)\n\t\t\tc+=sc.nextInt();\n\t\t\n\t\tint m=0;\n\t\tfor(int i = 0; i<3;i++)\n\t\t\tm+=sc.nextInt();\n\t\t\n\t\tint s=sc.nextInt();\n\t\t\n\t\tint s1= c\/5 + (c%5==0?0:1);\n\t\tint s2= m\/10 + (m%10==0?0:1);\n\t\t\n\t\ts-=s1;\n\t\ts-=s2;\n\t\t\n\t\tif(s<0)\n\t\t\tSystem.out.println(\"NO\");\n\t\telse\n\t\t\tSystem.out.println(\"YES\");\n\t\t\n\t}\n}\n","prob_desc_sample_outputs":"[\"YES\", \"YES\", \"NO\"]","lang_cluster":"Java","code_uid":"ed5b095766014cc09d9d3422d1960a80","prob_desc_notes":null,"prob_desc_output_spec":"Print \"YES\" (without the quotes) if all the rewards can be put on the shelves in the described manner. Otherwise, print \"NO\" (without the quotes).","prob_desc_output_to":"standard output","prob_desc_description":"Bizon the Champion is called the Champion for a reason. Bizon the Champion has recently got a present \u2014 a new glass cupboard with n shelves and he decided to put all his presents there. All the presents can be divided into two types: medals and cups. Bizon the Champion has a1 first prize cups, a2 second prize cups and a3 third prize cups. Besides, he has b1 first prize medals, b2 second prize medals and b3 third prize medals. Naturally, the rewards in the cupboard must look good, that's why Bizon the Champion decided to follow the rules:  any shelf cannot contain both cups and medals at the same time;  no shelf can contain more than five cups;  no shelf can have more than ten medals. Help Bizon the Champion find out if we can put all the rewards so that all the conditions are fulfilled.","hidden_unit_tests":"[{\"input\": \"1 1 1\\r\\n1 1 1\\r\\n4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1 1 3\\r\\n2 3 4\\r\\n2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1 0 0\\r\\n1 0 0\\r\\n1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 0 0\\r\\n0 0 0\\r\\n1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 100 100\\r\\n100 100 100\\r\\n100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 100 100\\r\\n100 100 100\\r\\n1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 10 100\\r\\n100 10 1\\r\\n20\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 1 1\\r\\n0 0 0\\r\\n1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 0 0\\r\\n1 1 1\\r\\n1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"5 5 5\\r\\n0 0 0\\r\\n2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 0 0\\r\\n10 10 10\\r\\n2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"21 61 39\\r\\n63 58 69\\r\\n44\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"18 95 4\\r\\n7 1 75\\r\\n46\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"64 27 81\\r\\n72 35 23\\r\\n48\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"6 6 6\\r\\n11 11 11\\r\\n7\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 2 3\\r\\n2 4 6\\r\\n3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 2 3\\r\\n2 4 6\\r\\n4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"99 99 99\\r\\n99 99 99\\r\\n89\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"5 0 0\\r\\n15 0 0\\r\\n2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"10 10 10\\r\\n0 0 0\\r\\n1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 1 1\\r\\n1 1 1\\r\\n15\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"2 3 5\\r\\n2 3 5\\r\\n2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2 2 2\\r\\n3 3 5\\r\\n3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 2 2\\r\\n2 4 4\\r\\n1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1 2 3\\r\\n1 5 5\\r\\n2\\r\\n\", \"output\": [\"NO\"]}]","length":36,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4\\nLDUR\", \"5\\nRRRUU\", \"6\\nLLRRRR\"]","prob_desc_input_spec":"The first line contains one number n \u2014 the length of sequence of commands entered by Ivan (1\u2009\u2264\u2009n\u2009\u2264\u2009100). The second line contains the sequence itself \u2014 a string consisting of n characters. Each character can be U, D, L or R.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"b9fa2bb8001bd064ede531a5281cfd8a","prob_desc_created_at":"1510239900","source_code":"import java.util.*;\nimport java.io.*;\nimport java.math.*;\n\npublic class Main {\n\n    static Scanner input = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\n    public static void main(String[] args) {\n        int n = input.nextInt();\n        String s = input.next();\n        int x = 0, y = 0;\n        for (int i = 0; i < n; i++) {\n            switch (s.charAt(i)) {\n                case 'U':\n                    y++;\n                    break;\n                case 'L':\n                    x--;\n                    break;\n                case 'D':\n                    y--;\n                    break;\n                case 'R':\n                    x++;\n                    break;\n            }\n        }\n        System.out.println(n - Math.abs(x) - Math.abs(y));\n    }\n}","prob_desc_sample_outputs":"[\"4\", \"0\", \"4\"]","lang_cluster":"Java","code_uid":"2ec47de358cbf09b82afa5c083a06300","prob_desc_notes":null,"prob_desc_output_spec":"Print the maximum possible number of commands from the sequence the robot could perform to end up in the starting cell.","prob_desc_output_to":"standard output","prob_desc_description":"Ivan has a robot which is situated on an infinite grid. Initially the robot is standing in the starting cell (0,\u20090). The robot can process commands. There are four types of commands it can perform:  U \u2014 move from the cell (x,\u2009y) to (x,\u2009y\u2009+\u20091);  D \u2014 move from (x,\u2009y) to (x,\u2009y\u2009-\u20091);  L \u2014 move from (x,\u2009y) to (x\u2009-\u20091,\u2009y);  R \u2014 move from (x,\u2009y) to (x\u2009+\u20091,\u2009y). Ivan entered a sequence of n commands, and the robot processed it. After this sequence the robot ended up in the starting cell (0,\u20090), but Ivan doubts that the sequence is such that after performing it correctly the robot ends up in the same cell. He thinks that some commands were ignored by robot. To acknowledge whether the robot is severely bugged, he needs to calculate the maximum possible number of commands that were performed correctly. Help Ivan to do the calculations!","hidden_unit_tests":"[{\"input\": \"4\\r\\nLDUR\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"5\\r\\nRRRUU\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6\\r\\nLLRRRR\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"88\\r\\nLLUUULRDRRURDDLURRLRDRLLRULRUUDDLLLLRRDDURDURRLDURRLDRRRUULDDLRRRDDRRLUULLURDURUDDDDDLDR\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"89\\r\\nLDLLLDRDUDURRRRRUDULDDDLLUDLRLRLRLDLDUULRDUDLRRDLUDLURRDDRRDLDUDUUURUUUDRLUDUDLURDLDLLDDU\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"90\\r\\nRRRDUULLLRDUUDDRLDLRLUDURDRDUUURUURDDRRRURLDDDUUDRLLLULURDRDRURLDRRRRUULDULDDLLLRRLRDLLLLR\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"91\\r\\nRLDRLRRLLDLULULLURULLRRULUDUULLUDULDUULURUDRUDUURDULDUDDUUUDRRUUDLLRULRULURLDRDLDRURLLLRDDD\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"92\\r\\nRLRDDLULRLLUURRDDDLDDDLDDUURRRULLRDULDULLLUUULDUDLRLRRDRDRDDULDRLUDRDULDRURUDUULLRDRRLLDRLRR\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"93\\r\\nRLLURLULRURDDLUURLUDDRDLUURLRDLRRRDUULLRDRRLRLDURRDLLRDDLLLDDDLDRRURLLDRUDULDDRRULRRULRLDRDLR\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"94\\r\\nRDULDDDLULRDRUDRUUDUUDRRRULDRRUDURUULRDUUDLULLLUDURRDRDLUDRULRRRULUURUDDDDDUDLLRDLDRLLRUUURLUL\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"95\\r\\nRDLUUULLUURDDRLDLLRRRULRLRDULULRULRUDURLULDDDRLURLDRULDUDUUULLRDDURUULULLDDLDRDRLLLURLRDLLDDDDU\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"96\\r\\nRDDRLRLLDDULRLRURUDLRLDUDRURLLUUDLLURDLRRUURDRRUDRURLLDLLRDURDURLRLUDURULLLRDUURULUUULRRURRDLURL\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"97\\r\\nRURDDLRLLRULUDURDLRLLUUDURRLLUDLLLDUDRUULDRUUURURULRDLDRRLLUUUDLLLDDLLLLRLLDUDRRDLLUDLRURUDULRLUR\\r\\n\", \"output\": [\"82\"]}, {\"input\": \"98\\r\\nRUDURLULLDDLLRDLLRDDLLLLRLDDDDRRRDDRRURLDRLLRUUUDLUUUDDDUDRUURLURUUDUUDRULRRULLRRLRULLULDLUURLULRD\\r\\n\", \"output\": [\"92\"]}, {\"input\": \"99\\r\\nRRULLDULRRDRULLDUDRUDDDRLLUUDRDDUDURLDDRUUDRRUUURRRURDDLDUURDLRLURRDDLUDDLUDURDRUDDURLURURLRUDRURLD\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"100\\r\\nUDRLRRLLRRLRRRDDLLDDDLULLDDLURUURUULUDDDRDDLLRDLLUURLRDRLRRLRLLLULDUDDUURRLRDULDRDURRRRRRULDRRDLDRRL\\r\\n\", \"output\": [\"88\"]}, {\"input\": \"1\\r\\nU\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5\\r\\nUUULD\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1\\r\\nD\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5\\r\\nURLUL\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\nDDDRU\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\nLR\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8\\r\\nDDRDLDUR\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"6\\r\\nLLLLUD\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"13\\r\\nRRRLLLLLLLLLL\\r\\n\", \"output\": [\"6\"]}]","length":31,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 1\", \"4 2\", \"5 3\", \"5 4\"]","prob_desc_input_spec":"The first line contains two integers n and k (4\u2009\u2264\u2009n\u2009\u2264\u20091000, 1\u2009\u2264\u2009k\u2009\u2264\u20094).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"96d839dc2d038f8ae95fc47c217b2e2f","prob_desc_created_at":"1510239900","source_code":"import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.io.BufferedReader;\nimport java.util.Collections;\nimport java.io.InputStream;\n\npublic class CF28 {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        solve(in, out);\n        out.close();\n    }\n    \n\t public static void solve(InputReader in, PrintWriter out) \n\t {\n\t\t long n = in.nextInt();\n\t\t long k = in.nextInt();\n\t\t out.println(magic(n, k));\n\t\t \n\t }\n\t \n\t private static long magic(long n, long k) {\n\t\tif(k==1)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif(k>n)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tif(k==2)\n\t\t{\n\t\t\treturn 1 + n*(n-1)\/2;\n\t\t}\n\t\tif(k==3)\n\t\t{\n\t\t\treturn 1 + n*(n-1)\/2 + n*(n-1)*(n-2)\/3;\n\t\t}\n\t\tif(k==4)\n\t\t{\n\t\t\treturn 1 + n*(n-1)\/2 + n*(n-1)*(n-2)\/3 + n*(n-1)*(n-2)*(n-3)\/24*9;\t\t\t\n\t\t}\n\t\treturn 0;\n\t\t\n\t}\n\n\tstatic class InputReader {\n\t        public BufferedReader reader;\n\t        public StringTokenizer tokenizer;\n\n\t        public InputReader(InputStream stream) {\n\t            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n\t            tokenizer = null;\n\t        }\n\n\t        public String next() {\n\t            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\t                try {\n\t                    tokenizer = new StringTokenizer(reader.readLine());\n\t                } catch (IOException e) {\n\t                    throw new RuntimeException(e);\n\t                }\n\t            }\n\t            return tokenizer.nextToken();\n\t        }\n\n\t        public int nextInt() {\n\t            return Integer.parseInt(next());\n\t        }\n\n\t    }\n}\n","prob_desc_sample_outputs":"[\"1\", \"7\", \"31\", \"76\"]","lang_cluster":"Java","code_uid":"2ee12a2c0a464ae9900c37f5e13b2ff6","prob_desc_notes":null,"prob_desc_output_spec":"Print the number of almost identity permutations for given n and k.","prob_desc_output_to":"standard output","prob_desc_description":"A permutation p of size n is an array such that every integer from 1 to n occurs exactly once in this array.Let's call a permutation an almost identity permutation iff there exist at least n\u2009-\u2009k indices i (1\u2009\u2264\u2009i\u2009\u2264\u2009n) such that pi\u2009=\u2009i.Your task is to count the number of almost identity permutations for given numbers n and k.","hidden_unit_tests":"[{\"input\": \"4 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"5 4\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"200 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200 2\\r\\n\", \"output\": [\"19901\"]}, {\"input\": \"200 3\\r\\n\", \"output\": [\"2646701\"]}, {\"input\": \"200 4\\r\\n\", \"output\": [\"584811251\"]}, {\"input\": \"400 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"400 2\\r\\n\", \"output\": [\"79801\"]}, {\"input\": \"400 3\\r\\n\", \"output\": [\"21253401\"]}, {\"input\": \"400 4\\r\\n\", \"output\": [\"9477912501\"]}, {\"input\": \"600 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"600 2\\r\\n\", \"output\": [\"179701\"]}, {\"input\": \"600 3\\r\\n\", \"output\": [\"71820101\"]}, {\"input\": \"600 4\\r\\n\", \"output\": [\"48187303751\"]}, {\"input\": \"800 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"800 2\\r\\n\", \"output\": [\"319601\"]}, {\"input\": \"800 3\\r\\n\", \"output\": [\"170346801\"]}, {\"input\": \"800 4\\r\\n\", \"output\": [\"152620985001\"]}, {\"input\": \"1000 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000 2\\r\\n\", \"output\": [\"499501\"]}, {\"input\": \"1000 3\\r\\n\", \"output\": [\"332833501\"]}, {\"input\": \"1000 4\\r\\n\", \"output\": [\"373086956251\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"24\"]}]","length":82,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4\"]","prob_desc_input_spec":"The only line contains an integer n (2\u2009\u2264\u2009n\u2009\u2264\u20091012), the number of vertices in the graph.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"a98f0d924ea52cafe0048f213f075891","prob_desc_created_at":"1522771500","source_code":"\/\/ http:\/\/codeforces.com\/contest\/959\/problem\/E\n\nimport java.io.*;\nimport java.util.InputMismatchException;\n\n\npublic class CF959E {\n\n    public static void main(String[] args) throws IOException {\n        InputReader in = new InputReader(System.in);\n        OutputWriter out = new OutputWriter(System.out);\n        final long N = in.readLong() - 1;\n        long res = 0;\n        long i = 1;\n        for (i = 1; i <= N; i = i << 1) {\n            res = res + ((N - i) \/ (i << 1) + 1) * i;\n        }\n        out.print(res);\n        closeStreams(out, in);\n    }\n\n    private static void closeStreams(OutputWriter out, InputReader in) throws IOException {\n        out.flush();\n        out.close();\n        in.close();\n    }\n\n    static class InputReader {\n\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if (numChars == -1)\n                throw new InputMismatchException();\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0)\n                    return -1;\n            }\n            return buf[curChar++];\n        }\n\n        public int readInt() {\n            int c = read();\n            while (isSpaceChar(c))\n                c = read();\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9')\n                    throw new InputMismatchException();\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public double readDouble() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            double res = 0;\n            while (!isSpaceChar(c) && c != '.') {\n                if (c == 'e' || c == 'E') {\n                    return res * Math.pow(10, readInt());\n                }\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            }\n            if (c == '.') {\n                c = read();\n                double m = 1;\n                while (!isSpaceChar(c)) {\n                    if (c == 'e' || c == 'E') {\n                        return res * Math.pow(10, readInt());\n                    }\n                    if (c < '0' || c > '9') {\n                        throw new InputMismatchException();\n                    }\n                    m \/= 10;\n                    res += (c - '0') * m;\n                    c = read();\n                }\n            }\n            return res * sgn;\n        }\n\n        public long readLong() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            long res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public String readString() {\n            int c = read();\n            while (isSpaceChar(c))\n                c = read();\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null) {\n                return filter.isSpaceChar(c);\n            }\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public boolean isEndOfLine(int c) {\n            if (filter != null) {\n                return filter.isEndOfLine(c);\n            }\n            return c == '\\n' || c == '\\r' || c == -1;\n        }\n\n        public String next() {\n            return readString();\n        }\n\n        public void close() throws IOException {\n            this.stream.close();\n        }\n\n        public interface SpaceCharFilter {\n            boolean isSpaceChar(int ch);\n\n            boolean isEndOfLine(int ch);\n        }\n\n    }\n\n    static class IOUtils {\n\n        public static int[] readIntArray(InputReader in, int elementCount) {\n            return readIntArray(in, elementCount, 0);\n        }\n\n        public static int[] readIntArray(InputReader in, int elementCount, int startOffset) {\n            int[] array = new int[elementCount + startOffset];\n            for (int i = 0; i < elementCount; i++)\n                array[i + startOffset] = in.readInt();\n            return array;\n        }\n\n        public static long[] readLongArray(InputReader in, int elementCount) {\n            return readLongArray(in, elementCount, 0);\n        }\n\n        public static long[] readLongArray(InputReader in, int elementCount, int startOffset) {\n            long[] array = new long[elementCount + startOffset];\n            for (int i = 0; i < elementCount; i++)\n                array[i + startOffset] = in.readLong();\n            return array;\n        }\n\n    }\n\n    static class OutputWriter {\n\n        private final PrintWriter writer;\n\n        public OutputWriter(OutputStream outputStream) {\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n\n        public OutputWriter(Writer writer) {\n            this.writer = new PrintWriter(writer);\n        }\n\n        public void print(Object... objects) {\n            for (int i = 0; i < objects.length; i++) {\n                if (i != 0)\n                    writer.print(' ');\n                writer.print(objects[i]);\n            }\n        }\n\n        public void printLine(Object... objects) {\n            print(objects);\n            writer.println();\n        }\n\n        public void close() {\n            writer.close();\n        }\n\n        public void flush() {\n            writer.flush();\n        }\n\n    }\n}\n","prob_desc_sample_outputs":"[\"4\"]","lang_cluster":"Java","code_uid":"5e64f8683dec9cfa6f6e6619a6895030","prob_desc_notes":"NoteIn the first sample:  The weight of the minimum spanning tree is 1+2+1=4.","prob_desc_output_spec":"The only line contains an integer x, the weight of the graph's minimum spanning tree.","prob_desc_output_to":"standard output","prob_desc_description":"Ehab is interested in the bitwise-xor operation and the special graphs. Mahmoud gave him a problem that combines both. He has a complete graph consisting of n vertices numbered from 0 to n\u2009-\u20091. For all 0\u2009\u2264\u2009u\u2009&lt;\u2009v\u2009&lt;\u2009n, vertex u and vertex v are connected with an undirected edge that has weight  (where  is the bitwise-xor operation). Can you find the weight of the minimum spanning tree of that graph?You can read about complete graphs in https:\/\/en.wikipedia.org\/wiki\/Complete_graphYou can read about the minimum spanning tree in https:\/\/en.wikipedia.org\/wiki\/Minimum_spanning_treeThe weight of the minimum spanning tree is the sum of the weights on the edges included in it.","hidden_unit_tests":"[{\"input\": \"4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000\\r\\n\", \"output\": [\"20140978692096\"]}, {\"input\": \"999999999999\\r\\n\", \"output\": [\"20140978692095\"]}, {\"input\": \"23131234\\r\\n\", \"output\": [\"293058929\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"877968\"]}, {\"input\": \"1024\\r\\n\", \"output\": [\"5120\"]}, {\"input\": \"536870912\\r\\n\", \"output\": [\"7784628224\"]}, {\"input\": \"536870911\\r\\n\", \"output\": [\"7784628223\"]}, {\"input\": \"536870913\\r\\n\", \"output\": [\"8321499136\"]}, {\"input\": \"123456789\\r\\n\", \"output\": [\"1680249144\"]}, {\"input\": \"200\\r\\n\", \"output\": [\"844\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"5052\"]}, {\"input\": \"12000\\r\\n\", \"output\": [\"84624\"]}, {\"input\": \"65536\\r\\n\", \"output\": [\"524288\"]}, {\"input\": \"1048576\\r\\n\", \"output\": [\"10485760\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"549755813888\\r\\n\", \"output\": [\"10720238370816\"]}, {\"input\": \"549755813887\\r\\n\", \"output\": [\"10720238370815\"]}, {\"input\": \"549755813889\\r\\n\", \"output\": [\"11269994184704\"]}]","length":240,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 9\", \"5 8\"]","prob_desc_input_spec":"The only line contains two positive integers x and y (1\u2009\u2264\u2009x,\u2009y\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"de7731ce03735b962ee033613192f7bc","prob_desc_created_at":"1513008300","source_code":"\/\/ Let f(x) = # of sequences a_i such that gcd() = 1, sum(a_i)=x. We want f(y - x). This is a hard AF function to calculate: easiest recurrence would be sum(f_i) where i<t, gcd(t,i)=1,\n\/\/ but that's not fast enough at all.\n\n\/\/ Trick from editorial: Relate a function to an easier function with a relationship IN EITHER DIRECTION. Here, let g(t) = # of sequences w\/o gcd()=1 condition.\n\/\/ Then, we realize that a_i can onyl have so many gcd's, so g(t)=sum_(d|t) f(t\/d), f(t)=g(t)-sum_(d|t, d not t) f(t).\n\n\/\/ Notice the repeats in f(t). That means we can DP it. Let's code!\n\nimport java.util.*;\npublic class Unusual {\n\tprivate static final int N = 1000000007;\n\tpublic static long pow(int n) {\n\t\tif (n == 0) return 1;\n\t\tlong x = pow(n \/ 2);\n\t\tx = (x * x) % N;\n\t\tif (n % 2 == 1) x = (x * 2) % N;\n\t\treturn x;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint x = in.nextInt(), y = in.nextInt(), t = y \/ x, i;\n\t\tif (y % x != 0) {\n\t\t\tSystem.out.println(0);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\tArrayList<Integer> divisors = new ArrayList<Integer>();\n\t\tfor (i = 1; i * i < t; i++) {\n\t\t\tif (t % i == 0) {\n\t\t\t\tdivisors.add(i); divisors.add(t \/ i);\n\t\t\t}\n\t\t}\n\t\tif (i * i == t) divisors.add(i);\n\t\tint[] d = new int[divisors.size()];\n\t\tfor (i = 0; i < d.length; i++) {\n\t\t\td[i] = divisors.get(i);\n\t\t}\n\t\tArrays.sort(d);\n\t\tlong[] f = new long[divisors.size()];\n\t\tf[0] = 1;\n\t\tfor (i = 1; i < d.length; i++) {\n\t\t\tf[i] = pow(d[i] - 1);\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (d[i] % d[j] == 0) f[i] = (f[i] - f[j] + N) % N;\n\t\t\t}\n\t\t}\n\/\/\t\tSystem.out.println(Arrays.toString(d));\n\/\/\t\tSystem.out.println(Arrays.toString(f));\n\t\tSystem.out.println(f[d.length - 1]);\n\t}\n}\n","prob_desc_sample_outputs":"[\"3\", \"0\"]","lang_cluster":"Java","code_uid":"c1b6cbe9d0e32628226a6b92fe290a2b","prob_desc_notes":"NoteThere are three suitable sequences in the first test: (3,\u20093,\u20093), (3,\u20096), (6,\u20093).There are no suitable sequences in the second test.","prob_desc_output_spec":"Print the number of such sequences modulo 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"Count the number of distinct sequences a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai) consisting of positive integers such that gcd(a1,\u2009a2,\u2009...,\u2009an)\u2009=\u2009x and . As this number could be large, print the answer modulo 109\u2009+\u20097.gcd here means the greatest common divisor.","hidden_unit_tests":"[{\"input\": \"3 9\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5 8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 12\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"1 8\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"1 9\\r\\n\", \"output\": [\"252\"]}, {\"input\": \"1000000000 1000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 1000000000\\r\\n\", \"output\": [\"824916815\"]}, {\"input\": \"1 223092870\\r\\n\", \"output\": [\"521342052\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 994593600\\r\\n\", \"output\": [\"558135120\"]}, {\"input\": \"1 425613469\\r\\n\", \"output\": [\"455729363\"]}, {\"input\": \"495219 444706662\\r\\n\", \"output\": [\"115165527\"]}, {\"input\": \"9357 18255507\\r\\n\", \"output\": [\"745979764\"]}, {\"input\": \"741547455 471761895\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"225 315096300\\r\\n\", \"output\": [\"413133630\"]}, {\"input\": \"183612440 509579899\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"231096994 462193988\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"34601 35742833\\r\\n\", \"output\": [\"60054095\"]}, {\"input\": \"417485019 230941257\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"524 991033864\\r\\n\", \"output\": [\"172439543\"]}, {\"input\": \"859550004 563726557\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 282521795\\r\\n\", \"output\": [\"436596181\"]}, {\"input\": \"415879151 194713963\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"109936444 989427996\\r\\n\", \"output\": [\"252\"]}]","length":51,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"20 4 5 2\", \"30 9 4 1\"]","prob_desc_input_spec":"The only line contains four integers $$$n$$$, $$$k$$$, $$$M$$$ and $$$D$$$ ($$$2 \\le n \\le 10^{18}$$$, $$$2 \\le k \\le n$$$, $$$1 \\le M \\le n$$$, $$$1 \\le D \\le \\min{(n, 1000)}$$$, $$$M \\cdot D \\cdot k \\ge n$$$)\u00a0\u2014 the number of candies, the number of people, the maximum number of candies given to a person at once, the maximum number of times a person can receive candies.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"ac2e795cd44061db8da13e3947ba791b","prob_desc_created_at":"1524677700","source_code":"\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.StringTokenizer;\nimport java.util.TreeSet;\nimport java.util.stream.IntStream;\nimport java.util.stream.LongStream;\n\n\/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n *\/\n\/**\n *\n * @author Andy Phan\n *\/\npublic class c {\n    \n    public static void main(String[] args) { \n        FS in = new FS(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        long n = in.nextLong();\n        long k = in.nextLong();\n        long M = in.nextLong();\n        long D = in.nextLong();\n        D = Math.min(D, n\/k);\n        long max = 0;\n        for(long d = 1; d <= D; d++) {\n            long minX = n\/(k*d);\n            long maxX = n\/(k*(d-1)+1);\n            if(minX > M) continue;\n            max = Math.max(max, d*Math.min(M, maxX));\n        }\n        System.out.println(max);\n        out.close();\n    }\n\n    static class FS {\n\n        BufferedReader in;\n        StringTokenizer token;\n\n        public FS(InputStream str) {\n            in = new BufferedReader(new InputStreamReader(str));\n        }\n\n        public String next() {\n            if (token == null || !token.hasMoreElements()) {\n                try {\n                    token = new StringTokenizer(in.readLine());\n                } catch (IOException ex) {\n                }\n                return next();\n            }\n            return token.nextToken();\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n}\n\n\/*\n6\n-1\n1\n1\n1\n10\n6\n4\n8\n-1\n1\n1\n*\/","prob_desc_sample_outputs":"[\"8\", \"4\"]","lang_cluster":"Java","code_uid":"860daef97b0700ddbb22209a2e2f2140","prob_desc_notes":"NoteIn the first example Arkady should choose $$$x = 4$$$. He will give $$$4$$$ candies to himself, $$$4$$$ candies to the second person, $$$4$$$ candies to the third person, then $$$4$$$ candies to the fourth person and then again $$$4$$$ candies to himself. No person is given candies more than $$$2$$$ times, and Arkady receives $$$8$$$ candies in total.Note that if Arkady chooses $$$x = 5$$$, he will receive only $$$5$$$ candies, and if he chooses $$$x = 3$$$, he will receive only $$$3 + 3 = 6$$$ candies as well as the second person, the third and the fourth persons will receive $$$3$$$ candies, and $$$2$$$ candies will be thrown away. He can't choose $$$x = 1$$$ nor $$$x = 2$$$ because in these cases he will receive candies more than $$$2$$$ times.In the second example Arkady has to choose $$$x = 4$$$, because any smaller value leads to him receiving candies more than $$$1$$$ time.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the maximum possible number of candies Arkady can give to himself. Note that it is always possible to choose some valid $$$x$$$.","prob_desc_output_to":"standard output","prob_desc_description":"$$$k$$$ people want to split $$$n$$$ candies between them. Each candy should be given to exactly one of them or be thrown away.The people are numbered from $$$1$$$ to $$$k$$$, and Arkady is the first of them. To split the candies, Arkady will choose an integer $$$x$$$ and then give the first $$$x$$$ candies to himself, the next $$$x$$$ candies to the second person, the next $$$x$$$ candies to the third person and so on in a cycle. The leftover (the remainder that is not divisible by $$$x$$$) will be thrown away.Arkady can't choose $$$x$$$ greater than $$$M$$$ as it is considered greedy. Also, he can't choose such a small $$$x$$$ that some person will receive candies more than $$$D$$$ times, as it is considered a slow splitting.Please find what is the maximum number of candies Arkady can receive by choosing some valid $$$x$$$.","hidden_unit_tests":"[{\"input\": \"20 4 5 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"30 9 4 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 2 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"42 20 5 29\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"1000000000000000000 135 1000000000000000 1000\\r\\n\", \"output\": [\"8325624421831635\"]}, {\"input\": \"100 33 100 100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"1000000000 1000000000 1000000000 1000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"1000000000 32428 1000000000 1000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"1000000000 324934 1000 1000\\r\\n\", \"output\": [\"4000\"]}, {\"input\": \"1000000000000000000 32400093004 10000000 1000\\r\\n\", \"output\": [\"40000000\"]}, {\"input\": \"885 2 160 842\\r\\n\", \"output\": [\"504\"]}, {\"input\": \"216 137 202 208\\r\\n\", \"output\": [\"202\"]}, {\"input\": \"72 66 28 9\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"294 4 13 8\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"9 2 2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"31 3 2 8\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"104 2 5 11\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1000000000000000000 1000000000000000000 1000 1000\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"1000000000000000000 100000000000000000 1 1000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"23925738098196565 23925738098196565 23925738098196565 1000\\r\\n\", \"output\": [\"23925738098196565\"]}, {\"input\": \"576460752303423488 576460752303423488 351082447248993993 1000\\r\\n\", \"output\": [\"351082447248993993\"]}, {\"input\": \"962768465676381898 72057594037927936 586039918340257175 256\\r\\n\", \"output\": [\"586039918340257175\"]}, {\"input\": \"1000000000000000000 1000000000000000000 10 1000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"23925738098196565 23925738098196565 1 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000000000 1000000000000000000 1 1000\\r\\n\", \"output\": [\"1\"]}]","length":89,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n1 1 1 4\", \"5\\n1 1 5 2 1\"]","prob_desc_input_spec":"The first line of the input contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u200924). Next line contains n positive integers: the i-th number represents ci (1\u2009\u2264\u2009ci\u2009\u2264\u2009n).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"ed0925cfaee961a3ceebd13b3c96a15a","prob_desc_created_at":"1399822800","source_code":"\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.BitSet;\nimport java.util.Calendar;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.Stack;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n\/**\n * #\n * @author pttrung\n *\/\npublic class C_Round_245_Div1 {\n\n    public static long MOD = 1000000007;\n    static int[] dp;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/ PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n        \/\/ \"output.txt\")));\n        PrintWriter out = new PrintWriter(System.out);\n        Scanner in = new Scanner();\n        int n = in.nextInt();\n        int[] data = new int[n];\n        for (int i = 0; i < n; i++) {\n            data[i] = in.nextInt();\n        }\n        Arrays.sort(data);\n\n        if (data[n - 1] == n && data[0] == 1) {\n            dp = new int[1 << n];\n            boolean v = cal(0, 0, data);\n            if (v) {\n                out.println(\"YES\");\n            } else {\n                out.println(\"NO\");\n            }\n        } else {\n            out.println(\"NO\");\n        }\n        out.close();\n    }\n\n    static boolean cal(int index, int mask, int[] data) {\n        if (index == data.length) {\n            return Integer.bitCount(mask) == 1;\n        }\n        \/\/ System.out.println(index + \" \" + Integer.toBinaryString(mask));\n        int num = (index + 1) * mask;\n        int x = num \/ 30;\n        int y = num % 30;\n        if ((dp[x] & (1 << y)) != 0) {\n            return false;\n        }\n        dp[x] |= (1 << y);\n        if (data[index] == 1) {\n            return cal(index + 1, mask | (1 << index), data);\n        } else {\n\n            for (int i = mask;; i = (i - 1) & mask) {\n\n                if (Integer.bitCount(i) > 1) {\n                    int sum = 0;\n                    for (int j = 0; j < data.length; j++) {\n                        if (((1 << j) & i) != 0) {\n                            sum += data[j];\n                        }\n                    }\n                    \/\/ System.out.println(sum + \" \" + data[index] + \" \" + Integer.bitCount(mask));\n                    if (sum + 1 == data[index]) {\n                        if (cal(index + 1, (mask ^ i) | (1 << index), data)) {\n                            return true;\n                        }\n                    }\n                }\n\n                if (i == 0) {\n                    break;\n                }\n            }\n            return false;\n        }\n\n    }\n\n    public static int[] KMP(String val) {\n        int i = 0;\n        int j = -1;\n        int[] result = new int[val.length() + 1];\n        result[0] = -1;\n        while (i < val.length()) {\n            while (j >= 0 && val.charAt(j) != val.charAt(i)) {\n                j = result[j];\n            }\n            j++;\n            i++;\n            result[i] = j;\n        }\n        return result;\n\n    }\n\n    public static boolean nextPer(int[] data) {\n        int i = data.length - 1;\n        while (i > 0 && data[i] < data[i - 1]) {\n            i--;\n        }\n        if (i == 0) {\n            return false;\n        }\n        int j = data.length - 1;\n        while (data[j] < data[i - 1]) {\n            j--;\n        }\n        int temp = data[i - 1];\n        data[i - 1] = data[j];\n        data[j] = temp;\n        Arrays.sort(data, i, data.length);\n        return true;\n    }\n\n    public static int digit(long n) {\n        int result = 0;\n        while (n > 0) {\n            n \/= 10;\n            result++;\n        }\n        return result;\n    }\n\n    public static double dist(long a, long b, long x, long y) {\n        double val = (b - a) * (b - a) + (x - y) * (x - y);\n        val = Math.sqrt(val);\n        double other = x * x + a * a;\n        other = Math.sqrt(other);\n        return val + other;\n\n    }\n\n    public static class Point implements Comparable<Point> {\n\n        int x, y;\n\n        public Point(int start, int end) {\n            this.x = start;\n            this.y = end;\n        }\n\n        @Override\n        public int hashCode() {\n            int hash = 5;\n            hash = 47 * hash + this.x;\n            hash = 47 * hash + this.y;\n            return hash;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj == null) {\n                return false;\n            }\n            if (getClass() != obj.getClass()) {\n                return false;\n            }\n            final Point other = (Point) obj;\n            if (this.x != other.x) {\n                return false;\n            }\n            if (this.y != other.y) {\n                return false;\n            }\n            return true;\n        }\n\n        @Override\n        public int compareTo(Point o) {\n            return Integer.compare(x, o.x);\n        }\n    }\n\n    public static class FT {\n\n        long[] data;\n\n        FT(int n) {\n            data = new long[n];\n        }\n\n        public void update(int index, long value) {\n            while (index < data.length) {\n                data[index] += value;\n                index += (index & (-index));\n            }\n        }\n\n        public long get(int index) {\n            long result = 0;\n            while (index > 0) {\n                result += data[index];\n                index -= (index & (-index));\n            }\n            return result;\n\n        }\n    }\n\n    public static long gcd(long a, long b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    public static long pow(long a, long b, long MOD) {\n        if (b == 0) {\n            return 1;\n        }\n        if (b == 1) {\n            return a;\n        }\n        long val = pow(a, b \/ 2, MOD);\n        if (b % 2 == 0) {\n            return val * val % MOD;\n        } else {\n            return val * (val * a % MOD) % MOD;\n\n        }\n    }\n\n    static class Scanner {\n\n        BufferedReader br;\n        StringTokenizer st;\n\n        public Scanner() throws FileNotFoundException {\n            \/\/ System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\n            br = new BufferedReader(new InputStreamReader(System.in));\n            \/\/  br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\n        }\n\n        public String next() {\n\n            while (st == null || !st.hasMoreTokens()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (Exception e) {\n                    throw new RuntimeException();\n                }\n            }\n            return st.nextToken();\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        public String nextLine() {\n            st = null;\n            try {\n                return br.readLine();\n            } catch (Exception e) {\n                throw new RuntimeException();\n            }\n        }\n\n        public boolean endLine() {\n            try {\n                String next = br.readLine();\n                while (next != null && next.trim().isEmpty()) {\n                    next = br.readLine();\n                }\n                if (next == null) {\n                    return true;\n                }\n                st = new StringTokenizer(next);\n                return st.hasMoreTokens();\n            } catch (Exception e) {\n                throw new RuntimeException();\n            }\n        }\n    }\n}\n","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"Java","code_uid":"55805aa188ba065b4bace6fac3ff2bef","prob_desc_notes":null,"prob_desc_output_spec":"Output on the first line \"YES\" (without quotes) if there exist at least one tree following Iahub's restrictions, otherwise output \"NO\" (without quotes). ","prob_desc_output_to":"standard output","prob_desc_description":"Iahub and Iahubina went to a picnic in a forest full of trees. Less than 5 minutes passed before Iahub remembered of trees from programming. Moreover, he invented a new problem and Iahubina has to solve it, otherwise Iahub won't give her the food. Iahub asks Iahubina: can you build a rooted tree, such that  each internal node (a node with at least one son) has at least two sons;  node i has ci nodes in its subtree? Iahubina has to guess the tree. Being a smart girl, she realized that it's possible no tree can follow Iahub's restrictions. In this way, Iahub will eat all the food. You need to help Iahubina: determine if there's at least one tree following Iahub's restrictions. The required tree must contain n nodes.","hidden_unit_tests":"[{\"input\": \"4\\r\\n1 1 1 4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"5\\r\\n1 1 5 2 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"13\\r\\n1 1 1 1 1 1 1 1 1 4 4 4 13\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"4\\r\\n1 1 1 3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"24\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 24 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"24\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"10\\r\\n1 1 1 1 7 1 1 1 4 10\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"24\\r\\n1 1 3 1 1 10 2 9 13 1 8 1 4 1 3 24 1 1 1 1 4 1 3 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"24\\r\\n2 3 20 1 4 9 1 3 1 2 1 3 1 2 1 1 1 2 1 2 4 24 2 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"24\\r\\n8 5 3 1 1 5 10 1 1 1 1 5 1 2 7 3 4 1 1 24 1 1 2 8\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"24\\r\\n1 1 1 3 4 1 24 1 1 3 1 1 1 5 14 2 17 1 2 2 5 1 1 6\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"17\\r\\n6 1 1 1 3 1 1 17 6 1 4 1 1 1 3 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"23\\r\\n1 1 1 1 3 7 3 1 1 1 3 7 1 3 1 15 1 3 7 3 23 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"24\\r\\n1 24 1 1 1 3 8 1 1 3 1 1 6 1 1 1 1 3 5 1 3 7 13 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"16\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 16 1 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"21\\r\\n1 1 1 6 1 1 13 21 1 1 3 1 8 1 19 3 3 1 1 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"22\\r\\n1 1 1 6 1 1 13 21 1 1 2 1 8 1 19 3 3 1 1 1 1 2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"19\\r\\n9 7 1 8 1 1 1 13 1 1 3 3 19 1 1 1 1 1 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"18\\r\\n6 1 1 3 1 1 1 1 1 1 4 1 8 1 1 18 1 5\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"14\\r\\n4 1 1 1 3 1 1 1 1 14 1 5 1 3\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"2\\r\\n1 2\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"24\\r\\n3 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"20\\r\\n20 9 4 4 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"12\\r\\n12 7 4 3 3 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"YES\"]}]","length":307,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"512 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\", \"4\", \"12\"]","prob_desc_input_spec":"In the only line of input there is an integer n (3\u2009\u2264\u2009n\u2009\u2264\u20091000), the sum of numerator and denominator of the fraction.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"0af3515ed98d9d01ce00546333e98e77","prob_desc_created_at":"1504702500","source_code":"import java.lang.*;\nimport java.util.*;\nimport java.io.*;\npublic class fraction\n{  \n  \n\n  Scanner sc=new Scanner(System.in);\n  PrintWriter pr=new PrintWriter(System.out,true);\n  public static void main(String... args) \n  {\n       fraction c=new fraction();\n       c.prop();\n  }\n  public void prop() \n  {\n    int n,a=0,b=0;\n    n=sc.nextInt();\n     for (int i=n\/2;i>=1 ;--i) {\n        a=i ;\n        b=n-i ;\n         if(a>=b)\n           continue ;\n       b=gcd(a,b);\n        if(b==1)\n        {\n          b=n-i ;\n          break ;\n        }\n\n     }\n      pr.println(a+\" \"+b); \n  }\n  public int gcd(int a,int b)\n  {\n     if(a%b==0)\n       return b ;\n     return gcd(b,a%b);\n  }\n}","prob_desc_sample_outputs":"[\"1 2\", \"1 3\", \"5 7\"]","lang_cluster":"Java","code_uid":"d349351873784ea2b97edebadaac4799","prob_desc_notes":null,"prob_desc_output_spec":"Output two space-separated positive integers a and b, numerator and denominator of the maximum possible proper irreducible fraction satisfying the given sum.","prob_desc_output_to":"standard output","prob_desc_description":"Petya is a big fan of mathematics, especially its part related to fractions. Recently he learned that a fraction  is called proper iff its numerator is smaller than its denominator (a\u2009&lt;\u2009b) and that the fraction is called irreducible if its numerator and its denominator are coprime (they do not have positive common divisors except 1).During his free time, Petya thinks about proper irreducible fractions and converts them to decimals using the calculator. One day he mistakenly pressed addition button (\u2009+\u2009) instead of division button (\u00f7) and got sum of numerator and denominator that was equal to n instead of the expected decimal notation. Petya wanted to restore the original fraction, but soon he realized that it might not be done uniquely. That's why he decided to determine maximum possible proper irreducible fraction  such that sum of its numerator and denominator equals n. Help Petya deal with this problem. ","hidden_unit_tests":"[{\"input\": \"3\\r\\n\", \"output\": [\"1 2\", \"1\\r\\n2\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"1 3\", \"1\\r\\n3\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"5 7\", \"5\\r\\n7\"]}, {\"input\": \"34\\r\\n\", \"output\": [\"15 19\", \"15\\r\\n19\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"6\\r\\n7\", \"6 7\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"5\\r\\n6\", \"5 6\"]}, {\"input\": \"24\\r\\n\", \"output\": [\"11\\r\\n13\", \"11 13\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"8 9\", \"8\\r\\n9\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"3 7\", \"3\\r\\n7\"]}, {\"input\": \"69\\r\\n\", \"output\": [\"34\\r\\n35\", \"34 35\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"49 51\", \"49\\r\\n51\"]}, {\"input\": \"57\\r\\n\", \"output\": [\"28 29\", \"28\\r\\n29\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"499\\r\\n501\", \"499 501\"]}, {\"input\": \"999\\r\\n\", \"output\": [\"499\\r\\n500\", \"499 500\"]}, {\"input\": \"998\\r\\n\", \"output\": [\"497\\r\\n501\", \"497 501\"]}, {\"input\": \"997\\r\\n\", \"output\": [\"498\\r\\n499\", \"498 499\"]}, {\"input\": \"996\\r\\n\", \"output\": [\"497 499\", \"497\\r\\n499\"]}, {\"input\": \"995\\r\\n\", \"output\": [\"497\\r\\n498\", \"497 498\"]}, {\"input\": \"994\\r\\n\", \"output\": [\"495 499\", \"495\\r\\n499\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"2 3\", \"2\\r\\n3\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"1\\r\\n5\", \"1 5\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"3 5\", \"3\\r\\n5\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"4\\r\\n5\", \"4 5\"]}, {\"input\": \"423\\r\\n\", \"output\": [\"211\\r\\n212\", \"211 212\"]}, {\"input\": \"876\\r\\n\", \"output\": [\"437\\r\\n439\", \"437 439\"]}, {\"input\": \"29\\r\\n\", \"output\": [\"14\\r\\n15\", \"14 15\"]}]","length":40,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\", \"2\", \"3\", \"4\"]","prob_desc_input_spec":"The only line of the input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009109)\u00a0\u2014 number of stones Artem received on his birthday.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"a993069e35b35ae158d35d6fe166aaef","prob_desc_created_at":"1461515700","source_code":"import java.io.*;\nimport java.util.*;\npublic class stone{\npublic static void main(String[] args) {\n\tInputReader s=new InputReader(System.in);\n\tint n=s.nextInt();\n    if (n%3==1) {\n        n--;\n        System.out.println(2*n\/3+1);\n        }\n    else if (n%3==2) {\n            n-=2;\n            System.out.println(2*n\/3+1);\n        }\n        else\n            System.out.println(2*n\/3);\n\n\n\n\t}\t\n\tstatic class InputReader {\n    private InputStream stream;\n    private byte[] buf = new byte[1024];\n    private int curChar;\n    private int numChars;\n    private SpaceCharFilter filter;\n \n    public InputReader(InputStream stream) {\n        this.stream = stream;\n    }\n \n    public static boolean isWhitespace(int c) {\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n \n    public int read() {\n        if (numChars == -1)\n            throw new InputMismatchException();\n        if (curChar >= numChars) {\n            curChar = 0;\n            try {\n                numChars = stream.read(buf);\n            } catch (IOException e) {\n                throw new InputMismatchException();\n            }\n            if (numChars <= 0)\n                return -1;\n        }\n        return buf[curChar++];\n    }\n \n    public int nextInt() {\n        int c = read();\n        while (isSpaceChar(c))\n            c = read();\n        int sgn = 1;\n        if (c == '-') {\n            sgn = -1;\n            c = read();\n        }\n        int res = 0;\n        do {\n            if (c < '0' || c > '9')\n                throw new InputMismatchException();\n            res *= 10;\n            res += c - '0';\n            c = read();\n        } while (!isSpaceChar(c));\n        return res * sgn;\n    }\n \n    public long nextLong() {\n        int c = read();\n        while (isSpaceChar(c))\n            c = read();\n        int sgn = 1;\n        if (c == '-') {\n            sgn = -1;\n            c = read();\n        }\n        long res = 0;\n        do {\n            if (c < '0' || c > '9')\n                throw new InputMismatchException();\n            res *= 10;\n            res += c - '0';\n            c = read();\n        } while (!isSpaceChar(c));\n        return res * sgn;\n    }\n \n    public String nextToken() {\n        int c = read();\n        while (isSpaceChar(c))\n            c = read();\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isSpaceChar(c));\n        return res.toString();\n    }\n \n    public boolean isSpaceChar(int c) {\n        if (filter != null)\n            return filter.isSpaceChar(c);\n        return isWhitespace(c);\n    }\n \n    public interface SpaceCharFilter {\n        public boolean isSpaceChar(int ch);\n    }\n}\n}","prob_desc_sample_outputs":"[\"1\", \"1\", \"2\", \"3\"]","lang_cluster":"Java","code_uid":"04ade10ed4c5d09c3d365eb21ee18785","prob_desc_notes":"NoteIn the first sample, Artem can only give 1 stone to Masha.In the second sample, Atrem can give Masha 1 or 2 stones, though he can't give her 1 stone two times.In the third sample, Atrem can first give Masha 2 stones, a then 1 more stone.In the fourth sample, Atrem can first give Masha 1 stone, then 2 stones, and finally 1 stone again.","prob_desc_output_spec":"Print the maximum possible number of times Artem can give presents to Masha.","prob_desc_output_to":"standard output","prob_desc_description":"Little Artem got n stones on his birthday and now wants to give some of them to Masha. He knows that Masha cares more about the fact of receiving the present, rather than the value of that present, so he wants to give her stones as many times as possible. However, Masha remembers the last present she received, so Artem can't give her the same number of stones twice in a row. For example, he can give her 3 stones, then 1 stone, then again 3 stones, but he can't give her 3 stones and then again 3 stones right after that.How many times can Artem give presents to Masha?","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"102\\r\\n\", \"output\": [\"68\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"666666667\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"666666666\"]}, {\"input\": \"999999998\\r\\n\", \"output\": [\"666666665\"]}, {\"input\": \"999999997\\r\\n\", \"output\": [\"666666665\"]}, {\"input\": \"999999996\\r\\n\", \"output\": [\"666666664\"]}, {\"input\": \"999999995\\r\\n\", \"output\": [\"666666663\"]}, {\"input\": \"999999994\\r\\n\", \"output\": [\"666666663\"]}, {\"input\": \"999999993\\r\\n\", \"output\": [\"666666662\"]}, {\"input\": \"999999992\\r\\n\", \"output\": [\"666666661\"]}, {\"input\": \"999999991\\r\\n\", \"output\": [\"666666661\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"667\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"6667\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"66667\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"666667\"]}, {\"input\": \"10000000\\r\\n\", \"output\": [\"6666667\"]}, {\"input\": \"100000000\\r\\n\", \"output\": [\"66666667\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"5\"]}]","length":114,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 30\\n2 2 1\", \"3 20\\n2 1 1\"]","prob_desc_input_spec":"The first line contains two space separated integers n, d (1\u2009\u2264\u2009n\u2009\u2264\u2009100;\u00a01\u2009\u2264\u2009d\u2009\u2264\u200910000). The second line contains n space-separated integers: t1,\u2009t2,\u2009...,\u2009tn (1\u2009\u2264\u2009ti\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"b16f5f5c4eeed2a3700506003e8ea8ea","prob_desc_created_at":"1401895800","source_code":"import java.util.Scanner;\n\n\npublic class songsandjoke {\n\n\tpublic static void main(String[] args) {\n\t\t\/\/ TODO Auto-generated method stub\n       int n,d,k;\n       Scanner in=new Scanner(System.in);\n       n=in.nextInt();\n       d=in.nextInt();\n       int sum=0;\n       for(int i=0;i<n;i++){\n    \t   k=in.nextInt();\n    \t   sum+=k;\n       }    \n    sum+=(n-1)*10;\n    int joke=d-sum;\n    if(joke<0) System.out.println(\"-1\");\n    else System.out.println((joke\/5)+(n-1)*2);\n}\n}\n","prob_desc_sample_outputs":"[\"5\", \"-1\"]","lang_cluster":"Java","code_uid":"8ddd8f25bf7e009009b70932fe232642","prob_desc_notes":"NoteConsider the first example. The duration of the event is 30 minutes. There could be maximum 5 jokes in the following way:  First Churu cracks a joke in 5 minutes.  Then Devu performs the first song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now Devu performs second song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now finally Devu will perform his last song in 1 minutes.  Total time spent is 5\u2009+\u20092\u2009+\u200910\u2009+\u20092\u2009+\u200910\u2009+\u20091\u2009=\u200930 minutes.Consider the second example. There is no way of organizing Devu's all songs. Hence the answer is -1. ","prob_desc_output_spec":"If there is no way to conduct all the songs of Devu, output -1. Otherwise output the maximum number of jokes that Churu can crack in the grand event.","prob_desc_output_to":"standard output","prob_desc_description":"Devu is a renowned classical singer. He is invited to many big functions\/festivals. Recently he was invited to \"All World Classical Singing Festival\". Other than Devu, comedian Churu was also invited.Devu has provided organizers a list of the songs and required time for singing them. He will sing n songs, ith song will take ti minutes exactly. The Comedian, Churu will crack jokes. All his jokes are of 5 minutes exactly.People have mainly come to listen Devu. But you know that he needs rest of 10 minutes after each song. On the other hand, Churu being a very active person, doesn't need any rest.You as one of the organizers should make an optimal s\u0441hedule for the event. For some reasons you must follow the conditions:  The duration of the event must be no more than d minutes;  Devu must complete all his songs;  With satisfying the two previous conditions the number of jokes cracked by Churu should be as many as possible. If it is not possible to find a way to conduct all the songs of the Devu, output -1. Otherwise find out maximum number of jokes that Churu can crack in the grand event.","hidden_unit_tests":"[{\"input\": \"3 30\\r\\n2 2 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3 20\\r\\n2 1 1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"50 10000\\r\\n5 4 10 9 9 6 7 7 7 3 3 7 7 4 7 4 10 10 1 7 10 3 1 4 5 7 2 10 10 10 2 3 4 7 6 1 8 4 7 3 8 8 4 10 1 1 9 2 6 1\\r\\n\", \"output\": [\"1943\"]}, {\"input\": \"50 10000\\r\\n4 7 15 9 11 12 20 9 14 14 10 13 6 13 14 17 6 8 20 12 10 15 13 17 5 12 13 11 7 5 5 2 3 15 13 7 14 14 19 2 13 14 5 15 3 19 15 16 4 1\\r\\n\", \"output\": [\"1891\"]}, {\"input\": \"100 9000\\r\\n5 2 3 1 1 3 4 9 9 6 7 10 10 10 2 10 6 8 8 6 7 9 9 5 6 2 1 10 10 9 4 5 9 2 4 3 8 5 6 1 1 5 3 6 2 6 6 6 5 8 3 6 7 3 1 10 9 1 8 3 10 9 5 6 3 4 1 1 10 10 2 3 4 8 10 10 5 1 5 3 6 8 10 6 10 2 1 8 10 1 7 6 9 10 5 2 3 5 3 2\\r\\n\", \"output\": [\"1688\"]}, {\"input\": \"100 8007\\r\\n5 19 14 18 9 6 15 8 1 14 11 20 3 17 7 12 2 6 3 17 7 20 1 14 20 17 2 10 13 7 18 18 9 10 16 8 1 11 11 9 13 18 9 20 12 12 7 15 12 17 11 5 11 15 9 2 15 1 18 3 18 16 15 4 10 5 18 13 13 12 3 8 17 2 12 2 13 3 1 13 2 4 9 10 18 10 14 4 4 17 12 19 2 9 6 5 5 20 18 12\\r\\n\", \"output\": [\"1391\"]}, {\"input\": \"39 2412\\r\\n1 1 1 1 1 1 26 1 1 1 99 1 1 1 1 1 1 1 1 1 1 88 7 1 1 1 1 76 1 1 1 93 40 1 13 1 68 1 32\\r\\n\", \"output\": [\"368\"]}, {\"input\": \"39 2617\\r\\n47 1 1 1 63 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 70 1 99 63 1 1 1 1 1 1 1 1 64 1 1\\r\\n\", \"output\": [\"435\"]}, {\"input\": \"39 3681\\r\\n83 77 1 94 85 47 1 98 29 16 1 1 1 71 96 85 31 97 96 93 40 50 98 1 60 51 1 96 100 72 1 1 1 89 1 93 1 92 100\\r\\n\", \"output\": [\"326\"]}, {\"input\": \"45 894\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 28 28 1 1 1 1 1 1 1 1 1 1 1 1 1 1 99 3 1 1\\r\\n\", \"output\": [\"139\"]}, {\"input\": \"45 4534\\r\\n1 99 65 99 4 46 54 80 51 30 96 1 28 30 44 70 78 1 1 100 1 62 1 1 1 85 1 1 1 61 1 46 75 1 61 77 97 26 67 1 1 63 81 85 86\\r\\n\", \"output\": [\"514\"]}, {\"input\": \"72 3538\\r\\n52 1 8 1 1 1 7 1 1 1 1 48 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 40 1 1 38 1 1 1 1 1 1 1 1 1 1 1 35 1 93 79 1 1 1 1 1 1 1 1 1 51 1 1 1 1 1 1 1 1 1 1 1 1 96 1\\r\\n\", \"output\": [\"586\"]}, {\"input\": \"81 2200\\r\\n1 59 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 93 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 50 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"384\"]}, {\"input\": \"81 2577\\r\\n85 91 1 1 2 1 1 100 1 80 1 1 17 86 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 37 1 66 24 1 1 96 49 1 66 1 44 1 1 1 1 98 1 1 1 1 35 1 37 3 35 1 1 87 64 1 24 1 58 1 1 42 83 5 1 1 1 1 1 95 1 94 1 50 1 1\\r\\n\", \"output\": [\"174\"]}, {\"input\": \"81 4131\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"807\"]}, {\"input\": \"81 6315\\r\\n1 1 67 100 1 99 36 1 92 5 1 96 42 12 1 57 91 1 1 66 41 30 74 95 1 37 1 39 91 69 1 52 77 47 65 1 1 93 96 74 90 35 85 76 71 92 92 1 1 67 92 74 1 1 86 76 35 1 56 16 27 57 37 95 1 40 20 100 51 1 80 60 45 79 95 1 46 1 25 100 96\\r\\n\", \"output\": [\"490\"]}, {\"input\": \"96 1688\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 45 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 25 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 71 1 1 1 30 1 1 1\\r\\n\", \"output\": [\"284\"]}, {\"input\": \"96 8889\\r\\n1 1 18 1 1 1 1 1 1 1 1 1 99 1 1 1 1 88 1 45 1 1 1 1 1 1 1 1 1 1 1 1 1 1 96 1 1 1 1 21 1 1 1 1 1 1 1 73 1 1 1 1 1 10 1 1 1 1 1 1 1 46 43 1 1 1 1 1 98 1 1 1 1 1 1 6 1 1 1 1 1 74 1 25 1 55 1 1 1 13 1 1 54 1 1 1\\r\\n\", \"output\": [\"1589\"]}, {\"input\": \"10 100\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"100 10000\\r\\n54 46 72 94 79 83 91 54 73 3 24 55 54 31 28 20 19 6 25 19 47 23 1 70 15 87 51 39 54 77 55 5 60 3 15 99 56 88 22 78 79 21 38 27 28 86 7 88 12 59 55 70 25 1 70 49 1 45 69 72 50 17 4 56 8 100 90 34 35 20 61 76 88 79 4 74 65 68 75 26 40 72 59 94 10 67 96 85 29 90 47 24 44 1 66 93 55 36 1 99\\r\\n\", \"output\": [\"1017\"]}, {\"input\": \"100 6000\\r\\n41 31 23 17 24 78 26 96 93 48 46 2 49 33 35 9 73 100 34 48 83 36 33 69 43 24 3 74 8 81 27 33 94 38 77 9 76 90 62 90 21 67 22 22 12 2 17 27 61 18 72 85 59 65 71 38 90 75 74 66 60 47 58 50 90 95 75 10 5 100 97 29 83 88 65 26 93 90 22 98 36 55 70 38 50 92 88 72 99 96 25 14 74 16 25 92 67 94 77 96\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 1\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 6\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 5\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 3\\r\\n4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"3 24\\r\\n2 1 2\\r\\n\", \"output\": [\"-1\"]}]","length":22,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 2\", \"7 6\"]","prob_desc_input_spec":"The first line contains two integers $$$n$$$ and $$$v$$$ ($$$2 \\le n \\le 100$$$, $$$1 \\le v \\le 100$$$) \u00a0\u2014 the number of cities in the country and the capacity of the tank.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"f8eb96deeb82d9f011f13d7dac1e1ab7","prob_desc_created_at":"1550334900","source_code":"\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception\n    {\n        Scanner in = new Scanner(System.in);\n        OutputWriter out = new OutputWriter(System.out);\n        int n = in.nextInt();\n        int v = in.nextInt();\n        if (v>=n-1)\n            out.printLine(n-1);\n        else\n        {\n            int ans = v;\n            int cur = 1;\n            while (cur+v<n)\n            {\n                cur++;\n                ans+=cur;\n            }\n            out.printLine(ans);\n        }\n        out.flush();\n    }\n   public static int maxDiv(int a)\n   {\n       int ans =1;\n       for (int i =2;i<=Math.sqrt(a);i++)\n       {\n           if (a%i==0)\n           {\n               int u = a\/i;\n               ans=Math.max(ans,u);\n           }\n       }\n       return ans;\n   }\n}\nclass Graph {\n\n\n    int n;\n    ArrayList<Integer>[] adjList;\n\n    public Graph(int n) {\n        this.n = n;\n        adjList = new ArrayList[n];\n        for (int i = 0; i < n; i++)\n            adjList[i] = new ArrayList<>();\n    }\n\n}\nclass pair  implements Comparable\n{\n\n    int key;\n    int value;\n    int id;\n    public pair(Object key, Object value,Object id) {\n\n        this.key = (int)key;\n        this.value=(int)value;\n        this.id=(int)id;\n    }\n\n    @Override\n    public int compareTo(Object o) {\n        pair temp =(pair)o;\n        if (key!=temp.key)\n            return  key-temp.key;\n        else return id-temp.id;\n    }\n}\nclass Scanner {\n\n    StringTokenizer st;\n    BufferedReader br;\n\n    public Scanner(InputStream s) {\n        br = new BufferedReader(new InputStreamReader(s));\n    }\n\n    public Scanner (FileReader f) {\n        br = new BufferedReader(f);\n    }\n\n    public String next() throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine());\n        return st.nextToken();\n    }\n\n    public int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    public long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n\n    public String nextLine() throws IOException {\n        return br.readLine();\n    }\n\n    public double nextDouble() throws IOException {\n        String x = next();\n        StringBuilder sb = new StringBuilder(\"0\");\n        double res = 0, f = 1;\n        boolean dec = false, neg = false;\n        int start = 0;\n        if (x.charAt(0) == '-') {\n            neg = true;\n            start++;\n        }\n        for (int i = start; i < x.length(); i++)\n            if (x.charAt(i) == '.') {\n                res = Long.parseLong(sb.toString());\n                sb = new StringBuilder(\"0\");\n                dec = true;\n            } else {\n                sb.append(x.charAt(i));\n                if (dec)\n                    f *= 10;\n            }\n        res += Long.parseLong(sb.toString()) \/ f;\n        return res * (neg ? -1 : 1);\n    }\n\n    public boolean ready() throws IOException {\n        return br.ready();\n    }\n\n    public boolean nextEmpty() throws IOException {\n        String s = nextLine();\n        st = new StringTokenizer(s);\n        return s.isEmpty();\n    }\n}\nclass OutputWriter {\n    private final PrintWriter writer;\n\n    public OutputWriter(OutputStream outputStream) {\n        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n    }\n\n    public OutputWriter(Writer writer) {\n        this.writer = new PrintWriter(writer);\n    }\n\n    public void print(Object... objects) {\n        for (int i = 0; i < objects.length; i++) {\n            if (i != 0)\n                writer.print(' ');\n            writer.print(objects[i]);\n        }\n    }\n\n\n    public void printLine(Object... objects) {\n        print(objects);\n        writer.println();\n    }\n\n    public void close() {\n        writer.close();\n    }\n\n    public void flush() {\n        writer.flush();\n    }\n\n}","prob_desc_sample_outputs":"[\"4\", \"6\"]","lang_cluster":"Java","code_uid":"fafc53200723abbdc6f62512edfc3a3b","prob_desc_notes":"NoteIn the first example, Sasha can buy $$$2$$$ liters for $$$2$$$ dollars ($$$1$$$ dollar per liter) in the first city, drive to the second city, spend $$$1$$$ liter of fuel on it, then buy $$$1$$$ liter for $$$2$$$ dollars in the second city and then drive to the $$$4$$$-th city. Therefore, the answer is $$$1+1+2=4$$$.In the second example, the capacity of the tank allows to fill the tank completely in the first city, and drive to the last city without stops in other cities.","prob_desc_output_spec":"Print one integer\u00a0\u2014 the minimum amount of money that is needed to finish the trip.","prob_desc_output_to":"standard output","prob_desc_description":"Sasha is a very happy guy, that's why he is always on the move. There are $$$n$$$ cities in the country where Sasha lives. They are all located on one straight line, and for convenience, they are numbered from $$$1$$$ to $$$n$$$ in increasing order. The distance between any two adjacent cities is equal to $$$1$$$ kilometer. Since all roads in the country are directed, it's possible to reach the city $$$y$$$ from the city $$$x$$$ only if $$$x &lt; y$$$. Once Sasha decided to go on a trip around the country and to visit all $$$n$$$ cities. He will move with the help of his car, Cheetah-2677. The tank capacity of this model is $$$v$$$ liters, and it spends exactly $$$1$$$ liter of fuel for $$$1$$$ kilometer of the way. At the beginning of the journey, the tank is empty. Sasha is located in the city with the number $$$1$$$ and wants to get to the city with the number $$$n$$$. There is a gas station in each city. In the $$$i$$$-th city, the price of $$$1$$$ liter of fuel is $$$i$$$ dollars. It is obvious that at any moment of time, the tank can contain at most $$$v$$$ liters of fuel.Sasha doesn't like to waste money, that's why he wants to know what is the minimum amount of money is needed to finish the trip if he can buy fuel in any city he wants. Help him to figure it out!","hidden_unit_tests":"[{\"input\": \"4 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"7 6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"10 3\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"12 89\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"32 15\\r\\n\", \"output\": [\"167\"]}, {\"input\": \"77 1\\r\\n\", \"output\": [\"2926\"]}, {\"input\": \"2 56\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"91 14\\r\\n\", \"output\": [\"3016\"]}, {\"input\": \"92 84\\r\\n\", \"output\": [\"119\"]}, {\"input\": \"42 41\\r\\n\", \"output\": [\"41\"]}, {\"input\": \"20 1\\r\\n\", \"output\": [\"190\"]}, {\"input\": \"50 1\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"20 79\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"56 13\\r\\n\", \"output\": [\"958\"]}, {\"input\": \"84 15\\r\\n\", \"output\": [\"2429\"]}, {\"input\": \"7 100\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"99 97\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"97 99\\r\\n\", \"output\": [\"96\"]}, {\"input\": \"99 98\\r\\n\", \"output\": [\"98\"]}, {\"input\": \"100 1\\r\\n\", \"output\": [\"4950\"]}, {\"input\": \"100 3\\r\\n\", \"output\": [\"4755\"]}, {\"input\": \"100 98\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 97\\r\\n\", \"output\": [\"102\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"9 5\\r\\n\", \"output\": [\"14\"]}]","length":175,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\\n10 5 0 -5 -10\", \"4\\n1 1 1 1\", \"3\\n5 1 -5\", \"2\\n900 1000\"]","prob_desc_input_spec":"The first line contains a single integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of days for which the average air temperature is known. The second line contains a sequence of integers t1,\u2009t2,\u2009...,\u2009tn (\u2009-\u20091000\u2009\u2264\u2009ti\u2009\u2264\u20091000)\u00a0\u2014 where ti is the average temperature in the i-th day.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"d04fa4322a1b300bdf4a56f09681b17f","prob_desc_created_at":"1505739900","source_code":"import java.util.*;\nimport java.io.*;\n\npublic class Main {\n\t\n\tint solve(Scanner in, PrintWriter out)\n\t{\n\t\tint n = in.nextInt();\n\t\tint[] arr = new int[n];\n\t\t\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tarr[i] = in.nextInt();\n\t\t\n\t\tif(n == 2)\n\t\t\tout.print(arr[1] + (arr[1] - arr[0]));\n\t\telse{\n\t\t\tint ans = 0;\n\t\t\tint step = arr[0] - arr[1]; \n\t\t\tfor(int i = 0; i < n-1; i++){\n\t\t\t\tif((arr[i] - arr[i+1]) == step)\n\t\t\t\t\tans = arr[n-1] +(arr[1] - arr[0]);\n\t\t\t\telse{\n\t\t\t\t\tans = arr[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.print(ans);\n\t\t}\n\t\t\n\t\t\treturn 0;\n\t\t\t\n\t}\n\n\tvoid run()\n\t{\n\t\ttry(\n\t\t\tScanner in = new Scanner(System.in);\n\t\t\tPrintWriter out = new PrintWriter(System.out)) {\n\t\t\n\t\t\tsolve(in, out);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\n}\n","prob_desc_sample_outputs":"[\"-15\", \"1\", \"-5\", \"1100\"]","lang_cluster":"Java","code_uid":"c77115e976d5caae929be12c1e7e17e6","prob_desc_notes":"NoteIn the first example the sequence of the average temperatures is an arithmetic progression where the first term is 10 and each following terms decreases by 5. So the predicted average temperature for the sixth day is \u2009-\u200910\u2009-\u20095\u2009=\u2009\u2009-\u200915.In the second example the sequence of the average temperatures is an arithmetic progression where the first term is 1 and each following terms equals to the previous one. So the predicted average temperature in the fifth day is 1.In the third example the average temperatures do not form an arithmetic progression, so the average temperature of the fourth day equals to the temperature of the third day and equals to \u2009-\u20095.In the fourth example the sequence of the average temperatures is an arithmetic progression where the first term is 900 and each the following terms increase by 100. So predicted average temperature in the third day is 1000\u2009+\u2009100\u2009=\u20091100.","prob_desc_output_spec":"Print the average air temperature in the (n\u2009+\u20091)-th day, which Vasya predicts according to his method. Note that the absolute value of the predicted temperature can exceed 1000.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya came up with his own weather forecasting method. He knows the information about the average air temperature for each of the last n days. Assume that the average air temperature for each day is integral.Vasya believes that if the average temperatures over the last n days form an arithmetic progression, where the first term equals to the average temperature on the first day, the second term equals to the average temperature on the second day and so on, then the average temperature of the next (n\u2009+\u20091)-th day will be equal to the next term of the arithmetic progression. Otherwise, according to Vasya's method, the temperature of the (n\u2009+\u20091)-th day will be equal to the temperature of the n-th day.Your task is to help Vasya predict the average temperature for tomorrow, i. e. for the (n\u2009+\u20091)-th day.","hidden_unit_tests":"[{\"input\": \"5\\r\\n10 5 0 -5 -10\\r\\n\", \"output\": [\"-15\"]}, {\"input\": \"4\\r\\n1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n5 1 -5\\r\\n\", \"output\": [\"-5\"]}, {\"input\": \"2\\r\\n900 1000\\r\\n\", \"output\": [\"1100\"]}, {\"input\": \"2\\r\\n1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n2 5 8\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"4\\r\\n4 1 -2 -5\\r\\n\", \"output\": [\"-8\"]}, {\"input\": \"10\\r\\n-1000 -995 -990 -985 -980 -975 -970 -965 -960 -955\\r\\n\", \"output\": [\"-950\"]}, {\"input\": \"11\\r\\n-1000 -800 -600 -400 -200 0 200 400 600 800 1000\\r\\n\", \"output\": [\"1200\"]}, {\"input\": \"31\\r\\n1000 978 956 934 912 890 868 846 824 802 780 758 736 714 692 670 648 626 604 582 560 538 516 494 472 450 428 406 384 362 340\\r\\n\", \"output\": [\"318\"]}, {\"input\": \"5\\r\\n1000 544 88 -368 -824\\r\\n\", \"output\": [\"-1280\"]}, {\"input\": \"100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"33\\r\\n456 411 366 321 276 231 186 141 96 51 6 -39 -84 -129 -174 -219 -264 -309 -354 -399 -444 -489 -534 -579 -624 -669 -714 -759 -804 -849 -894 -939 -984\\r\\n\", \"output\": [\"-1029\"]}, {\"input\": \"77\\r\\n-765 -742 -719 -696 -673 -650 -627 -604 -581 -558 -535 -512 -489 -466 -443 -420 -397 -374 -351 -328 -305 -282 -259 -236 -213 -190 -167 -144 -121 -98 -75 -52 -29 -6 17 40 63 86 109 132 155 178 201 224 247 270 293 316 339 362 385 408 431 454 477 500 523 546 569 592 615 638 661 684 707 730 753 776 799 822 845 868 891 914 937 960 983\\r\\n\", \"output\": [\"1006\"]}, {\"input\": \"3\\r\\n2 4 8\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"4\\r\\n4 1 -3 -5\\r\\n\", \"output\": [\"-5\"]}, {\"input\": \"10\\r\\n-1000 -995 -990 -984 -980 -975 -970 -965 -960 -955\\r\\n\", \"output\": [\"-955\"]}, {\"input\": \"11\\r\\n-999 -800 -600 -400 -200 0 200 400 600 800 1000\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"51\\r\\n-9 10 30 50 70 90 110 130 150 170 190 210 230 250 270 290 310 330 350 370 390 410 430 450 470 490 510 530 550 570 590 610 630 650 670 690 710 730 750 770 790 810 830 850 870 890 910 930 950 970 990\\r\\n\", \"output\": [\"990\"]}, {\"input\": \"100\\r\\n10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 207\\r\\n\", \"output\": [\"207\"]}, {\"input\": \"2\\r\\n1000 1000\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"2\\r\\n-1000 1000\\r\\n\", \"output\": [\"3000\"]}, {\"input\": \"2\\r\\n1000 -1000\\r\\n\", \"output\": [\"-3000\"]}, {\"input\": \"2\\r\\n-1000 -1000\\r\\n\", \"output\": [\"-1000\"]}, {\"input\": \"100\\r\\n-85 -80 -76 -72 -68 -64 -60 -56 -52 -48 -44 -40 -36 -32 -28 -24 -20 -16 -12 -8 -4 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284 288 292 296 300 304 308 312\\r\\n\", \"output\": [\"312\"]}, {\"input\": \"4\\r\\n1 2 4 5\\r\\n\", \"output\": [\"5\"]}]","length":47,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\", \"5 1 1 1 1 0 0 0 0 0 0 0 0 0\"]","prob_desc_input_spec":"The only line contains 14 integers $$$a_1, a_2, \\ldots, a_{14}$$$ ($$$0 \\leq a_i \\leq 10^9$$$)\u00a0\u2014 the number of stones in each hole. It is guaranteed that for any $$$i$$$ ($$$1\\leq i \\leq 14$$$) $$$a_i$$$ is either zero or odd, and there is at least one stone in the board.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"1ac11153e35509e755ea15f1d57d156b","prob_desc_created_at":"1525183500","source_code":"\/\/codeforces_975B\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport static java.lang.Math.*;\n\npublic class acm{\n\t\n\tpublic static void main(String args[]) throws IOException,FileNotFoundException {\n\t\tBufferedReader gi = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter go = new PrintWriter(System.out);\n\t\tint[] line = parseArray(gi.readLine().split(\" \"));\n\t\tint div,rem;\n\t\tlong temp = 0,rez = 0;\n\t\tfor (int k = 0; k<14; k++){\n\t\t\tif (line[k] == 0){ continue; }\n\t\t\tdiv = line[k]\/14;\n\t\t\trem = line[k]%14;\n\t\t\ttemp = 0;\n\t\t\tfor (int j = k+1; j<=k+rem; j++){\n\t\t\t\tif ((line[j%14]+div+1)%2==0){ temp += line[j%14] + 1 + div; }\n\t\t\t}\n\t\t\tfor (int j = k+rem+1; j<14+k; j++){\n\t\t\t\tif ((line[j%14]+div)%2==0){ temp+= line[j%14] + div; }\n\t\t\t}\n\t\t\tif (div%2==0){temp+=div;}\n\t\t\trez = max(rez, temp);\n\t\t}\n\t\tgo.println(rez);\n\t\tgo.close();\n\t}\n\n\tstatic int[]  parseArray(String[] line){\n\t\tint len = line.length;\n\t\tint A[] = new int[len];\n\t\tint k = 0;\n\t\tfor (String e : line){\n\t\t\tA[k++] = Integer.parseInt(e);\n\t\t}\n\t\treturn A;\n\t}\n\n}\n\n","prob_desc_sample_outputs":"[\"4\", \"8\"]","lang_cluster":"Java","code_uid":"6a400fedbb4bf53e3321ac019890b3b2","prob_desc_notes":"NoteIn the first test case the board after the move from the hole with $$$7$$$ stones will look like 1 2 2 0 0 0 0 0 0 0 1 1 1 1. Then the player collects the even numbers and ends up with a score equal to $$$4$$$.","prob_desc_output_spec":"Output one integer, the maximum possible score after one move.","prob_desc_output_to":"standard output","prob_desc_description":"Mancala is a game famous in the Middle East. It is played on a board that consists of 14 holes.   Initially, each hole has $$$a_i$$$ stones. When a player makes a move, he chooses a hole which contains a positive number of stones. He takes all the stones inside it and then redistributes these stones one by one in the next holes in a counter-clockwise direction.Note that the counter-clockwise order means if the player takes the stones from hole $$$i$$$, he will put one stone in the $$$(i+1)$$$-th hole, then in the $$$(i+2)$$$-th, etc. If he puts a stone in the $$$14$$$-th hole, the next one will be put in the first hole.After the move, the player collects all the stones from holes that contain even number of stones. The number of stones collected by player is the score, according to Resli.Resli is a famous Mancala player. He wants to know the maximum score he can obtain after one move.","hidden_unit_tests":"[{\"input\": \"0 1 1 0 0 0 0 0 0 7 0 0 0 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"5 1 1 1 1 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 1\\r\\n\", \"output\": [\"54294\"]}, {\"input\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 15\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 0 0 0 0 1 0 0 0 0 1 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 5 1 1 1 3 3 3 5 7 5 3 7 5\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"787 393 649 463 803 365 81 961 989 531 303 407 579 915\\r\\n\", \"output\": [\"7588\"]}, {\"input\": \"8789651 4466447 1218733 6728667 1796977 6198853 8263135 6309291 8242907 7136751 3071237 5397369 6780785 9420869\\r\\n\", \"output\": [\"81063456\"]}, {\"input\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 29\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"282019717 109496191 150951267 609856495 953855615 569750143 6317733 255875779 645191029 572053369 290936613 338480779 879775193 177172893\\r\\n\", \"output\": [\"5841732816\"]}, {\"input\": \"105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505\\r\\n\", \"output\": [\"120472578\"]}, {\"input\": \"404418821 993626161 346204297 122439813 461187221 628048227 625919459 628611733 938993057 701270099 398043779 684205961 630975553 575964835\\r\\n\", \"output\": [\"8139909016\"]}, {\"input\": \"170651077 730658441 824213789 583764177 129437345 717005779 675398017 314979709 380861369 265878463 746564659 797260041 506575735 335169317\\r\\n\", \"output\": [\"6770880638\"]}, {\"input\": \"622585025 48249287 678950449 891575125 637411965 457739735 829353393 235216425 284006447 875591469 492839209 296444305 513776057 810057753\\r\\n\", \"output\": [\"7673796644\"]}, {\"input\": \"475989857 930834747 786217439 927967137 489188151 869354161 276693267 56154399 131055697 509249443 143116853 426254423 44465165 105798821\\r\\n\", \"output\": [\"6172339560\"]}, {\"input\": \"360122921 409370351 226220005 604004145 85173909 600403773 624052991 138163383 729239967 189036661 619842883 270087537 749500483 243727913\\r\\n\", \"output\": [\"5848946922\"]}, {\"input\": \"997102881 755715147 273805839 436713689 547411799 72470207 522269145 647688957 137422311 422612659 197751751 679663349 821420227 387967237\\r\\n\", \"output\": [\"6900015198\"]}, {\"input\": \"690518849 754551537 652949719 760695679 491633619 477564457 11669279 700467439 470069297 782338983 718169393 884421719 24619427 215745577\\r\\n\", \"output\": [\"7635414974\"]}, {\"input\": \"248332749 486342237 662201929 917696895 555278549 252122023 850296207 463343655 832574345 954281071 168282553 825538865 996753493 461254663\\r\\n\", \"output\": [\"6400166934\"]}, {\"input\": \"590789361 636464947 404477303 337309187 476703809 426863069 120608741 703406277 645444697 761482231 996635839 33459441 677458865 483861751\\r\\n\", \"output\": [\"7294965518\"]}, {\"input\": \"297857621 238127103 749085829 139033277 597985489 202617713 982184715 183932743 278551059 297781685 330124279 338959601 682874531 187519685\\r\\n\", \"output\": [\"5201808164\"]}, {\"input\": \"1 1 1 1 1 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 1 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 0 0 0 0 0 0 0 0 0 0 0 0 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0 0 0 0 0 0 0 0 1 1\\r\\n\", \"output\": [\"2\"]}]","length":46,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\\n0 1 0\", \"5\\n1 0 1 0 1\"]","prob_desc_input_spec":"The first line of the input contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of pieces in the chocolate bar. The second line contains n integers ai (0\u2009\u2264\u2009ai\u2009\u2264\u20091), where 0 represents a piece without the nut and 1 stands for a piece with the nut.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"58242665476f1c4fa723848ff0ecda98","prob_desc_created_at":"1453563300","source_code":"import java.util.*;\nimport java.util.Map.Entry;\nimport java.lang.*;\nimport java.math.*;\nimport java.text.*;\nimport java.io.*;\n\t\tpublic final class Solve {\n\t\tstatic List<List<Integer>> list = new ArrayList<>();\n\t\tstatic PrintWriter out = new PrintWriter(System.out); \n\t\tstatic void flush() {\n\t \tout.flush();\n\t \t}\n\t\tstatic void run(long s, long e) {\n\t\tNumberFormat formatter = new DecimalFormat(\"#0.00000\");\n\t\tSystem.out.print(\"Execution time is \" + formatter.format((e - s) \/ 1000d) + \" seconds\");\n\t\t}\n\t\t\n\t\tstatic class FastReader {\n\t     static BufferedReader br;\n\t    StringTokenizer st;\n\t\n\t    public FastReader() {\n\t    br = new BufferedReader(new\n\t    InputStreamReader(System.in));\n\t    }\n\t    static boolean isPalindrome(String str1, String str2) {\n\t    String str3 = str1+str2;\n\t    int i = 0, j = str3.length()-1;\n\t    while(i < j) {\n\t    char a = str3.charAt(i), b = str3.charAt(j);\n\t    if(a != b) return false;\n\t    i++;j--;\n\t    }\t\n\t    return true;\n\t    }\n\t    static boolean isPalindrome(String str) {\n\t    int i = 0, j = str.length()-1;\n\t    while(i < j) {\n\t    char a = str.charAt(i), b = str.charAt(j);\n\t    if(a != b) return false;\n\t    i++;j--;\n\t    }\n\t    return true;\n\t    }\n\t    String next() {\n\t    while (st == null || !st.hasMoreElements()) {\n\t    try{st = new StringTokenizer(br.readLine());}\n\t    catch (IOException  e) {e.printStackTrace();}\n\t    }\n\t    return st.nextToken();\n\t    }\n\t    int nextInt(){ return Integer.parseInt(next()); }\n\t    long nextLong() { return Long.parseLong(next());}\n\t    static int fact(int n) {\n\t    if(n == 1) return 1;\n\t    return n * fact(n-1);\n\t   \t}\n\t    public int[] readIntArray(int n) {\n\t    int[] arr = new int[n];\n\t\tfor(int i=0; i<n; ++i)\n\t\tarr[i]=nextInt();\n\t\treturn arr;\n\t\t}\n\t    public long[] readLongArray(int n) {\n\t    \tlong[] arr = new long[n];\n\t    \tfor(int i=0; i<n; ++i)\n\t    \t\tarr[i]=nextLong();\n\t    \treturn arr;\n\t    }\n\t    public int[][] readIntArray(int m, int n){\n\t\tint[][] arr = new int[m][n];\n\t\tfor(int i = 0;i<m;i++) \n\t\tfor(int j = 0;j<n;j++) \n\t\tarr[i][j] = nextInt();\n\t\treturn arr;\n\t    }\n\t    public String[] readStringArray(int n) {\n\t\tString[] arr = new String[n];\n\t\tfor(int i=0; i<n; ++i)\n\t\tarr[i]= nextLine();\n\t\treturn arr;\t\n\t    }\n\t    double nextDouble() {return Double.parseDouble(next());}\n\t    String nextLine() {\n\t    String str = \"\";\n\t    try{str = br.readLine();}\n\t    catch (IOException e) {e.printStackTrace();}\n\t    return str;}\n\t    }\n\t\tstatic void solve(int[] arr, int n) {\n\t\t\t\n\t\t\tint[] t = new int[n];\n\t\t\tint j = 0;\n\t\t\tfor(int i = 0;i<n;i++) {\n\t\t\t\tif(arr[i] == 1) {\n\t\t\t\t\tt[j++] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j == 0 ) {\n\t\t\t\tout.println(0);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong sum = 1;\n\t\t\tfor(int i = 0;i<j-1;i++) {\n\t\t\t\tsum = sum * (t[i+1] - t[i]);\n\t\t\t}\n\t\t\tout.println(sum);\n\t\t}\n\t\tpublic static void main(String args[]) throws IOException {\n\t    FastReader sc = new FastReader();\n\t    long s1 = System.currentTimeMillis();\n\t    int n = sc.nextInt();\n\t    int[] arr = sc.readIntArray(n);\n\t    solve(arr, n);\n\t    flush();\n\t    long e = System.currentTimeMillis();\n\/\/\t    run(s1,e);\n\t    }\n\t}\n\t\t\n\t\t\n\t\t","prob_desc_sample_outputs":"[\"1\", \"4\"]","lang_cluster":"Java","code_uid":"ed2ca2e1cdf060a648f0f4b77602dfac","prob_desc_notes":"NoteIn the first sample there is exactly one nut, so the number of ways equals 1\u00a0\u2014 Bob shouldn't make any breaks.In the second sample you can break the bar in four ways:10|10|11|010|110|1|011|01|01","prob_desc_output_spec":"Print the number of ways to break the chocolate into multiple parts so that each part would contain exactly one nut.","prob_desc_output_to":"standard output","prob_desc_description":"Bob loves everything sweet. His favorite chocolate bar consists of pieces, each piece may contain a nut. Bob wants to break the bar of chocolate into multiple pieces so that each part would contain exactly one nut and any break line goes between two adjacent pieces.You are asked to calculate the number of ways he can do it. Two ways to break chocolate are considered distinct if one of them contains a break between some two adjacent pieces and the other one doesn't. Please note, that if Bob doesn't make any breaks, all the bar will form one piece and it still has to have exactly one nut.","hidden_unit_tests":"[{\"input\": \"3\\r\\n0 1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n1 0 1 0 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10\\r\\n0 0 1 0 0 0 1 1 0 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"20\\r\\n0 0 0 0 1 1 1 0 1 0 0 1 0 1 1 0 1 1 1 0\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"50\\r\\n0 1 1 1 1 1 1 0 1 1 0 1 1 1 0 0 1 0 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0\\r\\n\", \"output\": [\"11520\"]}, {\"input\": \"99\\r\\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 1 1 0 0 0 1 0 1 0 0 0 0 1 1 1 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"17694720\"]}, {\"input\": \"1\\r\\n0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1\\r\\n\", \"output\": [\"5559060566555523\"]}, {\"input\": \"41\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"18\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n0 1 0 0 0 0 1 0 0 1\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10\\r\\n1 1 0 0 0 1 1 1 1 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"50\\r\\n1 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 0 1 0 1 0 0 1 0 1 0 0 1 0 1 1 1\\r\\n\", \"output\": [\"186624\"]}, {\"input\": \"50\\r\\n0 0 1 1 0 0 0 1 0 1 1 1 0 1 1 1 0 1 1 0 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 1 0 1 1 0 1 1 0 0 0 1 1 0 1\\r\\n\", \"output\": [\"122880\"]}, {\"input\": \"99\\r\\n1 1 1 1 0 1 0 1 0 0 0 1 1 0 0 1 0 1 0 1 1 0 0 1 0 1 1 0 1 1 1 1 1 1 0 1 0 0 0 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 0 0 1 1 1 1 1 0 1 0 0 1 1 1 0 0\\r\\n\", \"output\": [\"27869184000\"]}, {\"input\": \"99\\r\\n1 0 1 1 1 1 1 1 0 1 0 0 0 0 0 1 1 0 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0 1 1 0 0 1 0 1 1 1 0 1 0 0 0 1 0 1 1 0 1 0 1 1 0 0 1 0 0 1 1 1\\r\\n\", \"output\": [\"123834728448\"]}, {\"input\": \"100\\r\\n1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 1 0 0 1 0 0 1 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 1 0 0 1 1 1 0 1 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 1 0 1 0 1 0\\r\\n\", \"output\": [\"773967052800\"]}, {\"input\": \"100\\r\\n0 1 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 1 0 1 0 0 0 0 1 1 0 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 1 1 0 1 0 1 1 1 0 1 1 0 1\\r\\n\", \"output\": [\"38698352640\"]}, {\"input\": \"100\\r\\n1 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 1 1 1 0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 0 1 0 0 1 0 0 0 1 0 0 1 0\\r\\n\", \"output\": [\"72236924928\"]}, {\"input\": \"100\\r\\n1 1 0 0 1 0 1 1 0 0 0 1 0 1 0 0 1 1 0 1 1 0 0 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 1 1 1 0 1 1 0 1 0 0 0 0 1 0 0 1 0 0 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1\\r\\n\", \"output\": [\"58047528960\"]}, {\"input\": \"100\\r\\n0 1 0 1 1 0 1 0 1 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1 1 0 1 1 1 0 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 1 0 1 0 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 1 0 0 1 0 1 0 1 0 0 0 1 1 0 1 1 0 1 1 1 1 0\\r\\n\", \"output\": [\"73987522560\"]}, {\"input\": \"100\\r\\n1 1 0 1 1 0 0 1 0 1 0 1 0 1 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 1 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 1 1 0 0 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 1 0 1 1 1 0 1 1 0\\r\\n\", \"output\": [\"180592312320\"]}, {\"input\": \"100\\r\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1\\r\\n\", \"output\": [\"1900000000\"]}]","length":122,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 100\", \"5 30\"]","prob_desc_input_spec":"The first line contains two integers k and p (1\u2009\u2264\u2009k\u2009\u2264\u2009105,\u20091\u2009\u2264\u2009p\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"00e90909a77ce9e22bb7cbf1285b0609","prob_desc_created_at":"1512223500","source_code":"\/**\n * Created by Chirag on 12-12-2017.\n * DA-IICT (B.tech 3rd year)\n *\/\n\nimport java.io.*;\nimport java.util.*;\n\n\npublic class ChotllyRequest\n{\n    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n      \n      \n      \/*\n      int n      = sc.nextInt();        \/\/ read input as integer\n      long k     = sc.nextLong();       \/\/ read input as long\n      double d   = sc.nextDouble();     \/\/ read input as double\n      String str = sc.next();           \/\/ read input as String\n      String s   = sc.nextLine();       \/\/ read whole line as String\n\n      int result = 3*n;\n      out.println(result);                    \/\/ print via PrintWriter\n      *\/\n        \/\/The Code Starts here\n        int k=sc.nextInt();\n        int p=sc.nextInt();\n        int noOfNumbers=0;\n        long sum=0;\n        int i=1;\n        while (noOfNumbers<k)\n        {\n            int num=i;\n            StringBuilder revNum=new StringBuilder(Integer.toString(num));\n            revNum.reverse();\n            StringBuilder orgNum=new StringBuilder(Integer.toString(num));\n\/\/            debug(orgNum,revNum);\n            sum=(sum+(Long.parseLong(orgNum.append(revNum).toString()))%p)%p;\n            noOfNumbers++;\n            i++;\n        }\n        out.print(sum);\n\n\n        \/\/The Code ends here\n        out.close();\n    }\n\n\n    \/\/-----------PrintWriter for faster output---------------------------------\n    public static PrintWriter out;\n\n    \/\/-----------MyScanner class for faster input----------\n    public static class MyScanner {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public MyScanner() {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        char nextCharacter() {\n            return next().charAt(0);\n        }\n\n        String nextLine() {\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n\n        public int[] nextIntArray(int n) {\n            int[] arr = new int[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = nextInt();\n            }\n            return arr;\n        }\n\n        public long[] nextLongArray(int n) {\n            long[] arr = new long[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = nextLong();\n            }\n            return arr;\n        }\n\n        public int[][] nextInt2DArray(int m, int n) {\n            int[][] arr = new int[m][n];\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++)\n                    arr[i][j] = nextInt();\n            }\n            return arr;\n        }\n\n        private boolean isSpaceChar(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        private boolean isEndOfLine(int c) {\n            return c == '\\n' || c == '\\r' || c == -1;\n        }\n\n    }\n\n    public static void debug(Object... o) {\n        System.out.println(Arrays.deepToString(o));\n    }\n\n    public static class Pair implements Comparable<Pair> {\n        long u;\n        long v;\n\n        public Pair(long u, long v) {\n            this.u = u;\n            this.v = v;\n        }\n\n\n        public int hashCode() {\n            int hu = (int) (u ^ (u >>> 32));\n            int hv = (int) (v ^ (v >>> 32));\n            return 31 * hu + hv;\n        }\n\n        public boolean equals(Object o) {\n            Pair other = (Pair) o;\n            return u == other.u && v == other.v;\n        }\n\n        public int compareTo(Pair other) {\n            return Long.compare(u, other.u) != 0 ? Long.compare(u, other.u) : Long.compare(v, other.v);\n        }\n\n        public String toString() {\n            return \"[u=\" + u + \", v=\" + v + \"]\";\n        }\n    }\n    \/\/--------------------------------------------------------\n\n\n    \/\/ Different other methods\n\n    public static long pow(long n, long p, long mod) {\n        if (p == 0)\n            return 1;\n        if (p == 1)\n            return n % mod;\n        if (p % 2 == 0) {\n            long temp = pow(n, p \/ 2, mod);\n            return (temp * temp) % mod;\n        } else {\n            long temp = pow(n, p \/ 2, mod);\n            temp = (temp * temp) % mod;\n            return (temp * n) % mod;\n\n        }\n    }\n\n    public static long pow(long n, long p) {\n        if (p == 0)\n            return 1;\n        if (p == 1)\n            return n;\n        if (p % 2 == 0) {\n            long temp = pow(n, p \/ 2);\n            return (temp * temp);\n        } else {\n            long temp = pow(n, p \/ 2);\n            temp = (temp * temp);\n            return (temp * n);\n\n        }\n    }\n\n    public static long gcd(long x, long y) {\n        if (x == 0)\n            return y;\n        else\n            return gcd(y % x, x);\n    }\n\n    static long modInverse(long a, long m) {\n        long m0 = m, t, q;\n        long x0 = 0, x1 = 1;\n\n        if (m == 1)\n            return 0;\n\n        while (a > 1) {\n            \/\/ q is quotient\n            q = a \/ m;\n\n            t = m;\n\n            \/\/ m is remainder now, process\n            \/\/ same as Euclid's algo\n            m = a % m;\n            a = t;\n\n            t = x0;\n\n            x0 = x1 - q * x0;\n\n            x1 = t;\n        }\n\n        \/\/ Make x1 positive\n        if (x1 < 0)\n            x1 += m0;\n\n        return x1;\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1)\n            return false;\n        if (n <= 3)\n            return true;\n\n        if (n % 2 == 0 || n % 3 == 0)\n            return false;\n\n        for (int i = 5; i * i <= n; i = i + 6)\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n\n        return true;\n    }\n\n    public static class DisjointSet {\n        HashMap<Integer, Node> map = new HashMap<Integer, Node>();\n\n        class Node {\n            int data;\n            int rank;\n            Node parent;\n\n            Node(int data) {\n                this.data = data;\n                this.rank = 0;\n                this.parent = this;\n            }\n        }\n\n        void makeSet(int data) {\n            map.put(data, new Node(data));\n        }\n\n        Node findSet(int data) {\n            return findSet(map.get(data));\n        }\n\n        boolean isConnected(int d1, int d2) {\n            return findSet(d1) == findSet(d2);\n        }\n\n        Node findSet(Node node) {\n            Node parent = node.parent;\n            if (parent == node)\n                return parent;\n            node.parent = findSet(node.parent);\n            return node.parent;\n        }\n\n        void union(int data1, int data2) {\n            Node d1 = map.get(data1);\n            Node d2 = map.get(data2);\n\n            Node p1 = findSet(d1);\n            Node p2 = findSet(d2);\n\n            if (p1.data == p2.data)\n                return;\n\n            if (p1.rank >= p2.rank) {\n                p1.rank = (p1.rank == p2.rank) ? p1.rank + 1 : p1.rank;\n                p2.parent = p1;\n            } else {\n                p1.parent = p2;\n            }\n        }\n\n    }\n\n\n}\n\n","prob_desc_sample_outputs":"[\"33\", \"15\"]","lang_cluster":"Java","code_uid":"527c31bb2b7f05e512b03df3bcf02615","prob_desc_notes":"NoteIn the first example, the smallest zcy number is 11, and the second smallest zcy number is 22.In the second example, .","prob_desc_output_spec":"Output single integer\u00a0\u2014 answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":" \u2014 Thanks a lot for today.\u2014 I experienced so many great things.\u2014 You gave me memories like dreams... But I have to leave now...\u2014 One last request, can you...\u2014 Help me solve a Codeforces problem?\u2014 ......\u2014 What?Chtholly has been thinking about a problem for days:If a number is palindrome and length of its decimal representation without leading zeros is even, we call it a zcy number. A number is palindrome means when written in decimal representation, it contains no leading zeros and reads the same forwards and backwards. For example 12321 and 1221 are palindromes and 123 and 12451 are not. Moreover, 1221 is zcy number and 12321 is not.Given integers k and p, calculate the sum of the k smallest zcy numbers and output this sum modulo p.Unfortunately, Willem isn't good at solving this kind of problems, so he asks you for help!","hidden_unit_tests":"[{\"input\": \"2 100\\r\\n\", \"output\": [\"33\"]}, {\"input\": \"5 30\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"42147 412393322\\r\\n\", \"output\": [\"251637727\"]}, {\"input\": \"77809 868097296\\r\\n\", \"output\": [\"440411873\"]}, {\"input\": \"5105 443422097\\r\\n\", \"output\": [\"363192634\"]}, {\"input\": \"75615 376679484\\r\\n\", \"output\": [\"373089399\"]}, {\"input\": \"22951 23793302\\r\\n\", \"output\": [\"1898631\"]}, {\"input\": \"12785 993582106\\r\\n\", \"output\": [\"286204743\"]}, {\"input\": \"60276 428978808\\r\\n\", \"output\": [\"376477293\"]}, {\"input\": \"84776 104860385\\r\\n\", \"output\": [\"10209596\"]}, {\"input\": \"41984 653766991\\r\\n\", \"output\": [\"17823101\"]}, {\"input\": \"100000 1000000000\\r\\n\", \"output\": [\"495495496\"]}, {\"input\": \"41163 472310076\\r\\n\", \"output\": [\"207304047\"]}, {\"input\": \"6983 765352180\\r\\n\", \"output\": [\"586866999\"]}, {\"input\": \"33493 967727004\\r\\n\", \"output\": [\"305705165\"]}, {\"input\": \"90898 94010922\\r\\n\", \"output\": [\"65928728\"]}, {\"input\": \"67298 349286579\\r\\n\", \"output\": [\"156435206\"]}, {\"input\": \"92452 296773064\\r\\n\", \"output\": [\"229486976\"]}, {\"input\": \"58832 563860457\\r\\n\", \"output\": [\"16775206\"]}, {\"input\": \"90234 156145441\\r\\n\", \"output\": [\"44023160\"]}, {\"input\": \"91454 977186148\\r\\n\", \"output\": [\"681779748\"]}, {\"input\": \"11108 444095250\\r\\n\", \"output\": [\"188075844\"]}, {\"input\": \"46304 584475527\\r\\n\", \"output\": [\"275627129\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 1000000000\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"100000 1\\r\\n\", \"output\": [\"0\"]}]","length":318,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2\", \"3\"]","prob_desc_input_spec":"The input contains a single number n (2\u2009\u2264\u2009n\u2009\u2264\u2009109) \u2014 the size of the board.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"52e07d176aa1d370788f94ee2e61df93","prob_desc_created_at":"1417618800","source_code":"import java.io.*;\nimport java.util.StringTokenizer;\n\n\/\/solution classes here\n\npublic class Code {\n\n    \/\/main solution here\n\n    static Scanner sc = new Scanner(System.in);\n    static PrintWriter out = new PrintWriter(System.out);\n    static long mod = 998244353;\n    static long MOD = (long)1e9+7;\n    \/\/static ArrayList<Integer> list[] = new ArrayList[(int)1e6+1];\n    \/\/static int color[] = new int[(int)1e6+1];\n    \/\/static int visit[] = new int[(int)1e5+1];\n    \/\/static Deque<Integer> q = new ArrayDeque<>();\n    public static void main(String[] args) throws IOException {\n        int n = sc.nextInt();\n        if(n%2==0) {\n            out.println(\"white\");\n            out.print(\"1 2\");\n        }\n        else {\n            out.print(\"black\");\n        }\n\n        out.flush();\n        out.close();\n    }\n    \/\/solution functions here\n\n    static class Scanner {\n        StringTokenizer st;\n        BufferedReader br;\n\n        public Scanner(InputStream s) {\n            br = new BufferedReader(new InputStreamReader(s));\n        }\n\n        public Scanner(FileReader fileReader) {\n            br = new BufferedReader(fileReader);\n        }\n\n        public String next() throws IOException {\n            while (st == null || !st.hasMoreTokens())\n                st = new StringTokenizer(br.readLine());\n            return st.nextToken();\n        }\n\n        public int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n\n        public String nextLine() throws IOException {\n            return br.readLine();\n        }\n\n        public boolean ready() throws IOException {\n            return br.ready();\n        }\n    }\n}\n\n\/* *****************************************************************************************************************************\n * I'M NOT IN DANGER, I'M THE DANGER!!!\n * *****************************************************************************************************************************\n *\/","prob_desc_sample_outputs":"[\"white\\n1 2\", \"black\"]","lang_cluster":"Java","code_uid":"75fb60511428258085bc0ed79c23d7b2","prob_desc_notes":"NoteIn the first sample test the white queen can capture the black queen at the first move, so the white player wins.In the second test from the statement if the white queen captures the green pawn located on the central vertical line, then it will be captured by the black queen during the next move. So the only move for the white player is to capture the green pawn located at (2,\u20091). Similarly, the black queen doesn't have any other options but to capture the green pawn located at (2,\u20093), otherwise if it goes to the middle vertical line, it will be captured by the white queen.During the next move the same thing happens \u2014 neither the white, nor the black queen has other options rather than to capture green pawns situated above them. Thus, the white queen ends up on square (3,\u20091), and the black queen ends up on square (3,\u20093). In this situation the white queen has to capture any of the green pawns located on the middle vertical line, after that it will be captured by the black queen. Thus, the player who plays for the black queen wins.","prob_desc_output_spec":"On the first line print the answer to problem \u2014 string \"white\" or string \"black\", depending on who wins if the both players play optimally.  If the answer is \"white\", then you should also print two integers r and c representing the cell (r,\u2009c), where the first player should make his first move to win. If there are multiple such cells, print the one with the minimum r. If there are still multiple squares, print the one with the minimum c.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya decided to learn to play chess. Classic chess doesn't seem interesting to him, so he plays his own sort of chess.The queen is the piece that captures all squares on its vertical, horizontal and diagonal lines. If the cell is located on the same vertical, horizontal or diagonal line with queen, and the cell contains a piece of the enemy color, the queen is able to move to this square. After that the enemy's piece is removed from the board. The queen cannot move to a cell containing an enemy piece if there is some other piece between it and the queen. There is an n\u2009\u00d7\u2009n chessboard. We'll denote a cell on the intersection of the r-th row and c-th column as (r,\u2009c). The square (1,\u20091) contains the white queen and the square (1,\u2009n) contains the black queen. All other squares contain green pawns that don't belong to anyone.The players move in turns. The player that moves first plays for the white queen, his opponent plays for the black queen.On each move the player has to capture some piece with his queen (that is, move to a square that contains either a green pawn or the enemy queen). The player loses if either he cannot capture any piece during his move or the opponent took his queen during the previous move. Help Vasya determine who wins if both players play with an optimal strategy on the board n\u2009\u00d7\u2009n.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"16\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"10006\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"99966246\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"999999997\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"900001\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"775681\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"666666\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"12345\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"111111\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"346367\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"939698497\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"999999996\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}]","length":72,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 8\\n2 3 1 1 2\", \"7 10\\n1 3 4 2 1 4 2\", \"5 15\\n5 5 5 5 5\", \"5 16\\n5 5 5 5 5\", \"5 26\\n5 5 5 5 5\"]","prob_desc_input_spec":"The first line of the input contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 100$$$, $$$1 \\le m \\le 10^4$$$) \u2014 the number of cups of coffee and the number of pages in the coursework. The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 100$$$), where $$$a_i$$$ is the caffeine dosage of coffee in the $$$i$$$-th cup.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"acb8a57c8cfdb849a55fa65aff86628d","prob_desc_created_at":"1550586900","source_code":"import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Run {\n\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tString wholeInput = input.nextLine();\n\t\tString[] token = wholeInput.split(\" \");\n\t\tint n = Integer.valueOf(token[0]);\n\t\tint m = Integer.valueOf(token[1]);\n\t\twholeInput = input.nextLine();\n\t\ttoken = wholeInput.split(\" \");\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\ta[i] = Integer.valueOf(token[i]);\n\t\t}\n\t\tinput.close();\n\t\ttoken = null;\n\t\tint S = 0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tS += a[i];\n\t\t}\n\t\tif (m > S)\n\t\t{\n\t\t\tSystem.out.print(-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.print(solve(1, m, m, a));\n\t\t}\n\t}\n\t\n\tprivate static boolean checkAnswer(int m, int day, int[] a)\n\t{\n\t\tfor (int i = 0; i < a.length; i++)\n\t\t{\n\t\t\ta[i] = -a[i];\n\t\t}\n\t\tArrays.sort(a);\n\t\tfor (int i = 0; i < a.length; i++)\n\t\t{\n\t\t\ta[i] = -a[i];\n\t\t}\n\t\tint arrayMarker = 0;\n\t\tint cupMarker = 0;\n\t\tint S = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tif (a[arrayMarker] - cupMarker > 0)\n\t\t\t{\n\t\t\t\tS += a[arrayMarker] - cupMarker;\n\t\t\t}\n\t\t\tarrayMarker++;\n\t\t\tif (arrayMarker % day == 0)\n\t\t\t{\n\t\t\t\tcupMarker++;\n\t\t\t}\n\t\t\tif (arrayMarker == a.length)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (S >= m)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tprivate static int solve(int tempPos, int length, int m, int[] a)\n\t{\n\t\tint checkPos = tempPos + length \/ 2;\n\t\tif (length == 0)\n\t\t{\n\t\t\treturn tempPos;\n\t\t}\n\t\tif (checkAnswer(m, checkPos, a))\n\t\t{\n\t\t\treturn solve(tempPos, checkPos - tempPos, m, a);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn solve(checkPos + 1, tempPos + length - checkPos - 1, m, a);\n\t\t}\n\t}\n\n}\n","prob_desc_sample_outputs":"[\"4\", \"2\", \"1\", \"2\", \"-1\"]","lang_cluster":"Java","code_uid":"fad84375b84fff997423be3ca94b70cc","prob_desc_notes":"NoteIn the first example Polycarp can drink fourth cup during first day (and write $$$1$$$ page), first and second cups during second day (and write $$$2 + (3 - 1) = 4$$$ pages), fifth cup during the third day (and write $$$2$$$ pages) and third cup during the fourth day (and write $$$1$$$ page) so the answer is $$$4$$$. It is obvious that there is no way to write the coursework in three or less days in this test.In the second example Polycarp can drink third, fourth and second cups during first day (and write $$$4 + (2 - 1) + (3 - 2) = 6$$$ pages) and sixth cup during second day (and write $$$4$$$ pages) so the answer is $$$2$$$. It is obvious that Polycarp cannot write the whole coursework in one day in this test.In the third example Polycarp can drink all cups of coffee during first day and write $$$5 + (5 - 1) + (5 - 2) + (5 - 3) + (5 - 4) = 15$$$ pages of coursework.In the fourth example Polycarp cannot drink all cups during first day and should drink one of them during the second day. So during first day he will write $$$5 + (5 - 1) + (5 - 2) + (5 - 3) = 14$$$ pages of coursework and during second day he will write $$$5$$$ pages of coursework. This is enough to complete it.In the fifth example Polycarp cannot write the whole coursework at all, even if he will drink one cup of coffee during each day, so the answer is -1.","prob_desc_output_spec":"If it is impossible to write the coursework, print -1. Otherwise print the minimum number of days Polycarp needs to do it.","prob_desc_output_to":"standard output","prob_desc_description":"The only difference between easy and hard versions is the constraints.Polycarp has to write a coursework. The coursework consists of $$$m$$$ pages.Polycarp also has $$$n$$$ cups of coffee. The coffee in the $$$i$$$-th cup has $$$a_i$$$ caffeine in it. Polycarp can drink some cups of coffee (each one no more than once). He can drink cups in any order. Polycarp drinks each cup instantly and completely (i.e. he cannot split any cup into several days).Surely, courseworks are not usually being written in a single day (in a perfect world of Berland, at least). Some of them require multiple days of hard work.Let's consider some day of Polycarp's work. Consider Polycarp drinks $$$k$$$ cups of coffee during this day and caffeine dosages of cups Polycarp drink during this day are $$$a_{i_1}, a_{i_2}, \\dots, a_{i_k}$$$. Then the first cup he drinks gives him energy to write $$$a_{i_1}$$$ pages of coursework, the second cup gives him energy to write $$$max(0, a_{i_2} - 1)$$$ pages, the third cup gives him energy to write $$$max(0, a_{i_3} - 2)$$$ pages, ..., the $$$k$$$-th cup gives him energy to write $$$max(0, a_{i_k} - k + 1)$$$ pages.If Polycarp doesn't drink coffee during some day, he cannot write coursework at all that day.Polycarp has to finish his coursework as soon as possible (spend the minimum number of days to do it). Your task is to find out this number of days or say that it is impossible.","hidden_unit_tests":"[{\"input\": \"5 8\\r\\n2 3 1 1 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"7 10\\r\\n1 3 4 2 1 4 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5 15\\r\\n5 5 5 5 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5 16\\r\\n5 5 5 5 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5 26\\r\\n5 5 5 5 5\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"100 10000\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 10000\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 99 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"100 133\\r\\n1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 3 1 1 2 1 3 1 1 1 2 1 3 1 1 1 2 2 1 1 1 1 1 1 1 3 1 2 1 1 2\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"100 550\\r\\n12 7 8 16 13 6 12 6 10 12 13 10 6 12 9 8 5 13 7 13 5 14 10 13 9 6 14 14 6 11 13 13 8 3 8 13 12 8 13 8 14 10 15 8 12 8 10 13 13 13 7 8 12 9 7 10 16 10 10 4 9 9 11 8 8 13 8 15 11 8 9 6 6 16 12 11 9 8 10 9 12 8 11 9 8 10 7 13 6 13 10 9 15 9 3 11 5 17 7 13\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"100 1960\\r\\n18 11 82 57 57 53 81 33 89 3 78 61 82 12 23 55 97 3 91 25 38 60 23 65 67 24 57 52 7 61 95 16 60 95 100 42 41 98 72 61 5 77 36 65 58 53 19 100 99 84 55 13 10 10 92 84 58 91 39 39 70 79 73 92 21 1 58 100 56 96 7 94 56 57 56 46 93 3 62 19 51 90 22 90 69 85 92 44 9 4 94 91 85 70 98 17 9 39 3 40\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 1641\\r\\n94 59 24 80 3 80 94 45 34 21 35 13 95 66 8 38 75 41 69 76 97 83 18 86 10 16 35 91 86 91 77 42 73 67 92 34 11 23 31 54 12 59 51 6 57 69 7 60 84 25 33 65 17 90 100 45 75 70 92 35 67 70 34 10 90 39 77 73 58 62 58 12 41 50 81 16 41 8 17 11 1 38 96 66 30 9 25 97 55 85 56 75 82 5 89 15 1 88 61 16\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 807\\r\\n70 14 71 10 42 8 10 61 78 38 95 73 5 37 85 17 60 82 51 28 49 5 9 11 49 7 18 38 78 20 47 71 82 30 79 34 81 52 93 43 19 44 62 52 68 82 96 20 66 62 15 13 31 61 8 3 89 49 33 30 56 53 99 32 55 82 92 53 67 24 13 17 21 38 5 86 89 21 64 95 46 86 62 38 95 49 61 51 6 58 30 62 71 44 80 21 85 41 15 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 2019\\r\\n46 74 21 28 88 31 35 69 7 56 56 30 3 96 70 8 38 28 33 87 96 15 91 31 88 87 97 77 54 50 21 97 87 98 78 26 48 77 56 29 18 30 81 97 72 98 76 76 52 100 6 61 42 41 12 65 98 36 82 14 49 39 64 47 31 17 7 29 68 98 56 31 10 26 26 52 29 38 11 87 91 29 27 14 60 77 89 4 60 35 96 46 64 83 63 31 77 90 81 79\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 686\\r\\n18 25 67 51 38 62 52 81 51 74 16 90 13 67 47 91 23 70 10 34 48 38 82 48 31 79 76 12 41 84 7 22 95 62 69 26 18 2 18 18 22 11 96 39 83 22 65 36 26 37 88 10 53 13 16 30 15 11 35 10 37 26 25 69 100 51 23 6 77 64 12 45 95 10 59 21 68 51 58 83 45 69 1 94 21 5 21 58 10 17 58 41 52 18 54 32 68 42 39 63\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 3599\\r\\n97 74 72 46 41 31 18 51 98 37 18 61 78 30 64 7 47 3 2 36 27 93 7 23 67 61 88 35 47 14 20 9 77 13 54 17 77 24 49 56 60 4 75 45 2 65 83 59 62 38 13 57 98 98 98 10 44 57 82 13 6 32 48 39 79 57 94 48 56 45 58 65 32 35 50 33 36 52 48 11 63 53 67 46 91 75 68 29 59 32 62 19 3 87 23 13 3 60 100 23\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100 4344\\r\\n25 15 25 23 3 4 2 43 54 23 58 5 72 71 91 24 61 61 20 80 67 75 12 99 24 82 10 100 68 92 34 79 76 42 66 17 7 95 87 67 61 18 60 99 99 53 90 3 80 1 31 8 83 26 94 45 35 74 29 25 9 54 88 12 10 18 79 71 55 79 7 52 51 47 29 63 92 39 1 15 14 2 93 70 26 47 28 72 100 51 96 32 11 56 40 99 11 12 42 47\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"100 5013\\r\\n45 59 71 97 56 73 77 31 9 5 98 44 63 1 2 41 88 15 43 29 16 61 25 78 81 90 31 53 80 58 60 53 67 78 71 25 37 62 36 82 53 41 45 58 91 36 6 47 94 63 41 52 80 47 86 79 22 99 84 30 21 59 31 94 45 75 56 99 46 13 52 42 66 51 4 93 52 22 50 23 60 58 27 85 69 7 100 18 50 74 34 44 22 17 49 1 28 63 76 63\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"100 3961\\r\\n73 3 25 75 14 50 60 19 73 84 37 92 53 42 29 54 2 73 65 70 68 39 42 61 34 98 48 14 100 28 78 28 54 10 80 25 59 32 70 88 58 51 30 4 80 16 14 83 12 26 67 4 62 75 79 17 12 12 39 38 28 80 70 80 76 41 44 19 45 51 9 32 89 66 80 27 12 9 4 39 11 14 54 13 4 83 76 69 4 92 68 61 25 82 59 88 36 10 22 84\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100 4916\\r\\n1 48 78 56 75 22 48 7 28 70 77 32 43 71 40 72 29 28 83 15 9 16 52 40 91 14 69 75 13 95 5 6 53 47 93 33 92 7 7 95 51 66 11 58 77 3 29 27 34 89 80 60 47 95 79 60 3 32 86 50 39 85 5 58 99 6 29 42 36 77 53 15 8 78 51 58 65 96 49 47 70 70 80 37 47 51 40 12 57 19 5 77 32 47 68 86 44 57 60 96\\r\\n\", \"output\": [\"93\"]}, {\"input\": \"100 4799\\r\\n25 100 32 34 25 99 19 99 84 52 20 83 34 12 59 89 51 86 5 63 57 2 61 23 48 27 90 28 29 65 31 73 40 79 89 29 18 86 49 14 48 84 100 17 65 79 37 71 52 47 98 100 40 20 71 94 90 53 41 54 47 2 40 36 35 63 14 66 35 11 2 97 23 90 26 88 17 79 2 59 12 22 14 61 78 15 7 62 7 38 43 94 43 12 77 80 60 9 2 20\\r\\n\", \"output\": [\"47\"]}, {\"input\": \"42 12\\r\\n28 42 80 47 45 41 13 38 52 66 91 73 84 40 98 37 52 79 63 66 28 79 19 11 34 89 5 62 54 4 20 26 47 58 38 31 88 29 11 18 3 46\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"69 3483\\r\\n60 56 86 28 76 4 96 31 56 49 68 43 28 81 64 84 17 35 13 10 96 18 33 76 19 40 33 71 69 63 35 87 53 56 89 98 15 74 88 35 67 20 18 97 4 20 53 70 26 53 66 68 85 54 63 7 75 8 9 97 78 56 7 96 12 39 9 72 56\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"100 112\\r\\n1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"100 10000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 5\\r\\n6\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"18 76\\r\\n6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 1 1\\r\\n\", \"output\": [\"5\"]}]","length":94,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3\\n1 2\", \"3\\n4 6\", \"4\\n1 2\"]","prob_desc_input_spec":"The first line of input contains a single integer n (2\u2009\u2264\u2009n\u2009\u2264\u20092000)\u00a0\u2014 the number of players. The second line contains two integers a and b (1\u2009\u2264\u2009a\u2009&lt;\u2009b\u2009\u2264\u2009100)\u00a0\u2014 the numerator and the denominator of fraction .","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"67e599530203060c17f692f2624d0f99","prob_desc_created_at":"1515422700","source_code":"import java.io.*;\nimport java.util.*;\n\npublic class Codeforces913F {\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint a = input.nextInt();\n\t\tint b = input.nextInt();\n\t\tinput.close();\n\t\tfinal int mod = 998244353;\n\t\t\n\t\tint frac = multiply(a, inverse(b, mod), mod);\n\t\tint reverse = (mod+1-frac)%mod;\n\t\t\n\t\tint[] fracpower = new int[n+1];\n\t\tint[] reversepower = new int[n+1];\n\t\tfracpower[0] = 1;\n\t\treversepower[0] = 1;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfracpower[i] = multiply(fracpower[i-1], frac, mod);\n\t\t\treversepower[i] = multiply(reversepower[i-1], reverse, mod);\n\t\t}\n\t\t\n\t\tint[][] dp1 = new int[n+1][n+1];\n\t\tdp1[2][1] = 1;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tif (j == 1) {\n\t\t\t\t\tdp1[i][j] = fracpower[i-1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp1[i][j] = multiply(dp1[i-1][j-1], fracpower[i-j], mod);\n\t\t\t\t}\n\t\t\t\tif (j == i-1) {\n\t\t\t\t\tdp1[i][j] += reversepower[i-1];\n\t\t\t\t\tdp1[i][j] %= mod;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp1[i][j] += multiply(dp1[i-1][j], reversepower[j], mod);\n\t\t\t\t\tdp1[i][j] %= mod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[][] dp2 = new int[n+1][n+1];\n\t\tdp2[1][1] = 1;\n\t\tdp2[2][1] = 1;\n\t\tdp2[2][2] = 0;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tint val = 0;\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tdp2[i][j] = multiply(dp2[j][j], dp1[i][j], mod);\n\t\t\t\tval += dp2[i][j];\n\t\t\t\tval %= mod;\n\t\t\t}\n\t\t\tdp2[i][i] = (mod+1-val)%mod;\n\t\t}\n\t\t\n\t\t\/*for (int i = 2; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tSystem.out.print(dp2[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}*\/\n\t\t\n\t\tint[] EV = new int[n+1];\n\t\tEV[1] = 0;\n\t\tEV[2] = 1;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tint val = 0;\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tint r = j*(i-j) + (j*(j-1))\/2 + EV[i-j] + EV[j];\n\t\t\t\tr %= mod;\n\t\t\t\tval += multiply(dp2[i][j], r, mod);\n\t\t\t\tval %= mod;\n\t\t\t}\n\t\t\tval += multiply((i*(i-1))\/2, dp2[i][i], mod);\n\t\t\tval %= mod;\n\t\t\t\n\t\t\tint s = (mod+1-dp2[i][i])%mod;\n\t\t\tEV[i] = multiply(val, inverse(s, mod), mod);\n\t\t}\n\t\t\n\t\tSystem.out.println(EV[n]);\n\t}\n\t\n\tpublic static int multiply(int a, int b, int mod) {\n\t\tlong x = (long)a*(long)b;\n\t\treturn (int) (x%mod);\n\t}\n\t\n\tpublic static int inverse (int a, int n) {\n\t\tint m = n;\n\t\tint r1 = 1;\n\t\tint r2 = 0;\n\t\tint r3 = 0;\n\t\tint r4 = 1;\n\t\twhile ((a > 0) && (n > 0)) {\n\t\t\tif (n >= a) {\n\t\t\t\tr3 -= r1*(n\/a);\n\t\t\t\tr4 -= r2*(n\/a);\n\t\t\t\tn = n%a;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint tmp = a;\n\t\t\t\ta = n;\n\t\t\t\tn = tmp;\n\t\t\t\ttmp = r1;\n\t\t\t\tr1 = r3;\n\t\t\t\tr3 = tmp;\n\t\t\t\ttmp = r2;\n\t\t\t\tr2 = r4;\n\t\t\t\tr4 = tmp;\n\t\t\t}\n\t\t}\n\t\tif (a == 0) {\n\t\t\tif (r3 >= 0)\n\t\t\t\treturn (r3%m);\n\t\t\telse\n\t\t\t\treturn (m+(r3%m));\n\t\t}\n\t\telse {\n\t\t\tif (r1 >= 0)\n\t\t\t\treturn (r1%m);\n\t\t\telse\n\t\t\t\treturn (m+(r1%m));\n\t\t}\n\n\t}\n}","prob_desc_sample_outputs":"[\"4\", \"142606340\", \"598946623\"]","lang_cluster":"Java","code_uid":"d19b3637df2ca66378f6c31649f47a94","prob_desc_notes":"NoteIn the first example the expected value is 4.In the second example the expected value is .In the third example the expected value is .","prob_desc_output_spec":"In the only line print the expected value of total number of games played by all the players. Print the answer using the format above.","prob_desc_output_to":"standard output","prob_desc_description":"There is a chess tournament in All-Right-City. n players were invited to take part in the competition. The tournament is held by the following rules:  Initially, each player plays one game with every other player. There are no ties;  After that, the organizers build a complete directed graph with players as vertices. For every pair of players there is exactly one directed edge between them: the winner of their game is the startpoint of this edge and the loser is the endpoint;  After that, the organizers build a condensation of this graph. The condensation of this graph is an acyclic complete graph, therefore it has the only Hamiltonian path which consists of strongly connected components of initial graph A1\u2009\u2192\u2009A2\u2009\u2192\u2009...\u2009\u2192\u2009Ak.  The players from the first component A1 are placed on the first  places, the players from the component A2 are placed on the next  places, and so on.  To determine exact place of each player in a strongly connected component, all the procedures from 1 to 5 are repeated recursively inside each component, i.e. for every i\u2009=\u20091,\u20092,\u2009...,\u2009k players from the component Ai play games with each other again, and so on;  If a component consists of a single player, then he has no more rivals, his place is already determined and the process stops. The players are enumerated with integers from 1 to n. The enumeration was made using results of a previous tournament. It is known that player i wins player j (i\u2009&lt;\u2009j) with probability p.You need to help to organize the tournament. Find the expected value of total number of games played by all the players. It can be shown that the answer can be represented as , where P and Q are coprime integers and . Print the value of P\u00b7Q\u2009-\u20091 modulo 998244353.If you are not familiar with any of the terms above, you can read about them here.","hidden_unit_tests":"[{\"input\": \"3\\r\\n1 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3\\r\\n4 6\\r\\n\", \"output\": [\"142606340\"]}, {\"input\": \"4\\r\\n1 2\\r\\n\", \"output\": [\"598946623\"]}, {\"input\": \"2\\r\\n3 7\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n2 5\\r\\n\", \"output\": [\"893166004\"]}, {\"input\": \"43\\r\\n4 8\\r\\n\", \"output\": [\"527582808\"]}, {\"input\": \"11\\r\\n2 4\\r\\n\", \"output\": [\"126202394\"]}, {\"input\": \"99\\r\\n1 2\\r\\n\", \"output\": [\"861591514\"]}, {\"input\": \"55\\r\\n1 3\\r\\n\", \"output\": [\"421242628\"]}, {\"input\": \"468\\r\\n1 2\\r\\n\", \"output\": [\"510758445\"]}, {\"input\": \"86\\r\\n3 6\\r\\n\", \"output\": [\"138528121\"]}, {\"input\": \"11\\r\\n1 4\\r\\n\", \"output\": [\"868893170\"]}, {\"input\": \"700\\r\\n4 9\\r\\n\", \"output\": [\"710942710\"]}, {\"input\": \"692\\r\\n4 5\\r\\n\", \"output\": [\"256115029\"]}, {\"input\": \"587\\r\\n6 10\\r\\n\", \"output\": [\"763817354\"]}, {\"input\": \"669\\r\\n6 8\\r\\n\", \"output\": [\"290423740\"]}, {\"input\": \"886\\r\\n2 6\\r\\n\", \"output\": [\"532685839\"]}, {\"input\": \"1894\\r\\n3 5\\r\\n\", \"output\": [\"920485113\"]}, {\"input\": \"1551\\r\\n2 6\\r\\n\", \"output\": [\"797889458\"]}, {\"input\": \"1846\\r\\n3 4\\r\\n\", \"output\": [\"6738092\"]}, {\"input\": \"1267\\r\\n8 9\\r\\n\", \"output\": [\"186597454\"]}, {\"input\": \"1691\\r\\n4 8\\r\\n\", \"output\": [\"559533741\"]}, {\"input\": \"2000\\r\\n1 2\\r\\n\", \"output\": [\"431549766\"]}, {\"input\": \"2000\\r\\n99 100\\r\\n\", \"output\": [\"314240240\"]}, {\"input\": \"2000\\r\\n31 97\\r\\n\", \"output\": [\"177172458\"]}, {\"input\": \"2000\\r\\n1 100\\r\\n\", \"output\": [\"314240240\"]}]","length":131,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\", \"2\", \"3\", \"8\"]","prob_desc_input_spec":"The first line of the input will contain a single integer, n (1\u2009\u2264\u2009n\u2009\u2264\u2009100\u2009000).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"757cd804aba01dc4bc108cb0722f68dc","prob_desc_created_at":"1454087400","source_code":"import java.lang.*;\nimport java.util.*;\nimport java.io.*;\npublic class test\n{  \n  \n  Scanner sc=new Scanner(System.in);\n  PrintWriter pr=new PrintWriter(System.out,true);\n  public static void main(String... args) \n  {\n       test c=new test();\n       c.prop();\n  }\n  public void prop() \n  {\n    int n,count=1 ;\n    Stack<Integer> s=new Stack<Integer>();\n     s.push(0);\n      n=sc.nextInt();\n        for (int i=1; ;++i) {\n            if(n%2==0)\n            {\n              ++count ;\n              n=n\/2 ;\n            }else\n              {\n                s.push(count);\n                n=n-1 ;\n              }\n            if(n==0)\n             break ;  \n        }\n       for (; ; ) {\n          n=s.pop();\n            if(n==0)\n              break ;\n            else\n              pr.print(n+\" \");\n       }\n      pr.println(\"\");\n        \n  }\n}","prob_desc_sample_outputs":"[\"1\", \"2\", \"2 1\", \"4\"]","lang_cluster":"Java","code_uid":"e0e985af6d2591f79aa2e0abed7b3a2c","prob_desc_notes":"NoteIn the first sample, we only have a single slime with value 1. The final state of the board is just a single slime with value 1.In the second sample, we perform the following steps:Initially we place a single slime in a row by itself. Thus, row is initially 1.Then, we will add another slime. The row is now 1 1. Since two rightmost slimes have the same values, we should replace these slimes with one with value 2. Thus, the final state of the board is 2.In the third sample, after adding the first two slimes, our row is 2. After adding one more slime, the row becomes 2 1.In the last sample, the steps look as follows:   1  2  2 1  3  3 1  3 2  3 2 1  4 ","prob_desc_output_spec":"Output a single line with k integers, where k is the number of slimes in the row after you've finished the procedure described in the problem statement. The i-th of these numbers should be the value of the i-th slime from the left.","prob_desc_output_to":"standard output","prob_desc_description":"Your friend recently gave you some slimes for your birthday. You have n slimes all initially with value 1.You are going to play a game with these slimes. Initially, you put a single slime by itself in a row. Then, you will add the other n\u2009-\u20091 slimes one by one. When you add a slime, you place it at the right of all already placed slimes. Then, while the last two slimes in the row have the same value v, you combine them together to create a slime with value v\u2009+\u20091.You would like to see what the final state of the row is after you've added all n slimes. Please print the values of the slimes in the row from left to right.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"2 1\", \"2  1\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"17  16  11  10  8  6\", \"17 16 11 10 8 6\"]}, {\"input\": \"12345\\r\\n\", \"output\": [\"14  13  6  5  4  1\", \"14 13 6 5 4 1\"]}, {\"input\": \"32\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"70958\\r\\n\", \"output\": [\"17  13  11  9  6  4  3  2\", \"17 13 11 9 6 4 3 2\"]}, {\"input\": \"97593\\r\\n\", \"output\": [\"17 15 14 13 12 11 9 6 5 4 1\", \"17  15  14  13  12  11  9  6  5  4  1\"]}, {\"input\": \"91706\\r\\n\", \"output\": [\"17  15  14  11  10  6  5  4  2\", \"17 15 14 11 10 6 5 4 2\"]}, {\"input\": \"85371\\r\\n\", \"output\": [\"17 15 12 11 9 7 6 5 4 2 1\", \"17  15  12  11  9  7  6  5  4  2  1\"]}, {\"input\": \"97205\\r\\n\", \"output\": [\"17  15  14  13  12  10  9  8  6  5  3  1\", \"17 15 14 13 12 10 9 8 6 5 3 1\"]}, {\"input\": \"34768\\r\\n\", \"output\": [\"16  11  10  9  8  7  5\", \"16 11 10 9 8 7 5\"]}, {\"input\": \"12705\\r\\n\", \"output\": [\"14 13 9 8 6 1\", \"14  13  9  8  6  1\"]}, {\"input\": \"30151\\r\\n\", \"output\": [\"15 14 13 11 9 8 7 3 2 1\", \"15  14  13  11  9  8  7  3  2  1\"]}, {\"input\": \"4974\\r\\n\", \"output\": [\"13  10  9  7  6  4  3  2\", \"13 10 9 7 6 4 3 2\"]}, {\"input\": \"32728\\r\\n\", \"output\": [\"15  14  13  12  11  10  9  8  7  5  4\", \"15 14 13 12 11 10 9 8 7 5 4\"]}, {\"input\": \"8192\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"65536\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"32\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"256\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"4096\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"33301\\r\\n\", \"output\": [\"16  10  5  3  1\", \"16 10 5 3 1\"]}, {\"input\": \"16725\\r\\n\", \"output\": [\"15 9 7 5 3 1\", \"15  9  7  5  3  1\"]}, {\"input\": \"149\\r\\n\", \"output\": [\"8 5 3 1\", \"8  5  3  1\"]}, {\"input\": \"16277\\r\\n\", \"output\": [\"14 13 12 11 10 9 8 5 3 1\", \"14  13  12  11  10  9  8  5  3  1\"]}, {\"input\": \"99701\\r\\n\", \"output\": [\"17 16 11 9 7 6 5 3 1\", \"17  16  11  9  7  6  5  3  1\"]}]","length":43,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"rock\\nrock\\nrock\", \"paper\\nrock\\nrock\", \"scissors\\nrock\\nrock\", \"scissors\\npaper\\nrock\"]","prob_desc_input_spec":"The first input line contains the name of the gesture that Uncle Fyodor showed, the second line shows which gesture Matroskin showed and the third line shows Sharic\u2019s gesture. ","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"072c7d29a1b338609a72ab6b73988282","prob_desc_created_at":"1292140800","source_code":"import java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.util.InputMismatchException;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.NoSuchElementException;\nimport java.io.Writer;\nimport java.math.BigInteger;\nimport java.io.InputStream;\n\n\/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Alex\n *\/\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskA {\n    public void solve(int testNumber, InputReader in, OutputWriter out){\n\t    String F = in.next(), M = in.next(), S = in.next();\n\t    if (beats(F, M) && beats(F, S)){\n\t\t    out.printLine(\"F\");\n\t\t    return;\n\t    }\n\t    if (beats(M, F) && beats(M, S)){\n\t\t    out.printLine(\"M\");\n\t\t    return;\n\t    }\n\t    if (beats(S, F) && beats(S, M)){\n\t\t    out.printLine(\"S\");\n\t\t    return;\n\t    }\n\t    out.printLine(\"?\");\n    }\n\tboolean beats(String a, String b){\n\t\tif (a.equals(\"rock\") && b.equals(\"scissors\")) return true;\n\t\tif (a.equals(\"paper\") && b.equals(\"rock\")) return true;\n\t\tif (a.equals(\"scissors\") && b.equals(\"paper\")) return true;\n\t\treturn false;\n\t}\n}\n\nclass InputReader {\n\tprivate InputStream stream;\n\tprivate byte[] buf = new byte[1024];\n\tprivate int curChar;\n\tprivate int numChars;\n\tprivate SpaceCharFilter filter;\n\n\tpublic InputReader(InputStream stream) {\n\t\tthis.stream = stream;\n\t}\n\n\tpublic int read() {\n\t\tif (numChars == -1)\n\t\t\tthrow new InputMismatchException();\n\t\tif (curChar >= numChars) {\n\t\t\tcurChar = 0;\n\t\t\ttry {\n\t\t\t\tnumChars = stream.read(buf);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t\tif (numChars <= 0)\n\t\t\t\treturn -1;\n\t\t}\n\t\treturn buf[curChar++];\n\t}\n\tpublic String readString() {\n\t\tint c = read();\n\t\twhile (isSpaceChar(c))\n\t\t\tc = read();\n\t\tStringBuilder res = new StringBuilder();\n\t\tdo {\n\t\t\tif (Character.isValidCodePoint(c))\n\t\t\t\tres.appendCodePoint(c);\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(c));\n\t\treturn res.toString();\n\t}\n\n\tpublic boolean isSpaceChar(int c) {\n\t\tif (filter != null)\n\t\t\treturn filter.isSpaceChar(c);\n\t\treturn isWhitespace(c);\n\t}\n\n\tpublic static boolean isWhitespace(int c) {\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t}\n\tpublic String next() {\n\t\treturn readString();\n\t}\n\tpublic interface SpaceCharFilter {\n\t\tpublic boolean isSpaceChar(int ch);\n\t}\n}\n\nclass OutputWriter {\n\tprivate final PrintWriter writer;\n\n\tpublic OutputWriter(OutputStream outputStream) {\n\t\twriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n\t}\n\tpublic void print(Object...objects) {\n\t\tfor (int i = 0; i < objects.length; i++) {\n\t\t\tif (i != 0)\n\t\t\t\twriter.print(' ');\n\t\t\twriter.print(objects[i]);\n\t\t}\n\t}\n\tpublic void printLine(Object...objects) {\n\t\tprint(objects);\n\t\twriter.println();\n\t}\n\tpublic void close() {\n\t\twriter.close();\n\t}\n}\n\n","prob_desc_sample_outputs":"[\"?\", \"F\", \"?\", \"?\"]","lang_cluster":"Java","code_uid":"fe0c35b1311a6e18367b62802b72b158","prob_desc_notes":null,"prob_desc_output_spec":"Print \"F\" (without quotes) if Uncle Fyodor wins. Print \"M\" if Matroskin wins and \"S\" if Sharic wins. If it is impossible to find the winner, print \"?\".","prob_desc_output_to":"standard output","prob_desc_description":"Uncle Fyodor, Matroskin the Cat and Sharic the Dog live their simple but happy lives in Prostokvashino. Sometimes they receive parcels from Uncle Fyodor\u2019s parents and sometimes from anonymous benefactors, in which case it is hard to determine to which one of them the package has been sent. A photographic rifle is obviously for Sharic who loves hunting and fish is for Matroskin, but for whom was a new video game console meant? Every one of the three friends claimed that the present is for him and nearly quarreled. Uncle Fyodor had an idea how to solve the problem justly: they should suppose that the console was sent to all three of them and play it in turns. Everybody got relieved but then yet another burning problem popped up \u2014 who will play first? This time Matroskin came up with a brilliant solution, suggesting the most fair way to find it out: play rock-paper-scissors together. The rules of the game are very simple. On the count of three every player shows a combination with his hand (or paw). The combination corresponds to one of three things: a rock, scissors or paper. Some of the gestures win over some other ones according to well-known rules: the rock breaks the scissors, the scissors cut the paper, and the paper gets wrapped over the stone. Usually there are two players. Yet there are three friends, that\u2019s why they decided to choose the winner like that: If someone shows the gesture that wins over the other two players, then that player wins. Otherwise, another game round is required. Write a program that will determine the winner by the gestures they have shown.","hidden_unit_tests":"[{\"input\": \"rock\\r\\nrock\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\nrock\\r\\nrock\\r\\n\", \"output\": [\"F\"]}, {\"input\": \"scissors\\r\\nrock\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\npaper\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\npaper\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"rock\\r\\npaper\\r\\nrock\\r\\n\", \"output\": [\"M\"]}, {\"input\": \"rock\\r\\nscissors\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\nscissors\\r\\nrock\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\nscissors\\r\\nrock\\r\\n\", \"output\": [\"S\"]}, {\"input\": \"rock\\r\\nrock\\r\\npaper\\r\\n\", \"output\": [\"S\"]}, {\"input\": \"paper\\r\\nrock\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\nrock\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"rock\\r\\npaper\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\npaper\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\npaper\\r\\npaper\\r\\n\", \"output\": [\"F\"]}, {\"input\": \"rock\\r\\nscissors\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\nscissors\\r\\npaper\\r\\n\", \"output\": [\"M\"]}, {\"input\": \"scissors\\r\\nscissors\\r\\npaper\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"rock\\r\\nrock\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\nrock\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\nrock\\r\\nscissors\\r\\n\", \"output\": [\"M\"]}, {\"input\": \"rock\\r\\npaper\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"paper\\r\\npaper\\r\\nscissors\\r\\n\", \"output\": [\"S\"]}, {\"input\": \"scissors\\r\\npaper\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"rock\\r\\nscissors\\r\\nscissors\\r\\n\", \"output\": [\"F\"]}, {\"input\": \"paper\\r\\nscissors\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"scissors\\r\\nscissors\\r\\nscissors\\r\\n\", \"output\": [\"?\"]}]","length":131,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 2\", \"6 3\"]","prob_desc_input_spec":"The single line contains two integers, a and b (1\u2009\u2264\u2009a\u2009\u2264\u20091000;\u00a02\u2009\u2264\u2009b\u2009\u2264\u20091000).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"a349094584d3fdc6b61e39bffe96dece","prob_desc_created_at":"1388417400","source_code":"import java.util.*;\nimport java.lang.*;\nimport java.util.Scanner;\npublic class solution{\n    public static void main(String args[]){\n        Scanner sc =new Scanner(System.in);\n        int a=sc.nextInt();\n        int b=sc.nextInt();\n        int res = a;\n        while(a>=b){\n            res += (a\/b);\n            a = (a\/b)+(a%b);\n        }\n        \/\/res += a;\n       System.out.println(res); \n    }\n}\n","prob_desc_sample_outputs":"[\"7\", \"8\"]","lang_cluster":"Java","code_uid":"2c104274035ae876f687fd1d37a65ea8","prob_desc_notes":"NoteConsider the first sample. For the first four hours Vasily lights up new candles, then he uses four burned out candles to make two new ones and lights them up. When these candles go out (stop burning), Vasily can make another candle. Overall, Vasily can light up the room for 7 hours.","prob_desc_output_spec":"Print a single integer \u2014 the number of hours Vasily can light up the room for.","prob_desc_output_to":"standard output","prob_desc_description":"Vasily the Programmer loves romance, so this year he decided to illuminate his room with candles.Vasily has a candles.When Vasily lights up a new candle, it first burns for an hour and then it goes out. Vasily is smart, so he can make b went out candles into a new candle. As a result, this new candle can be used like any other new candle.Now Vasily wonders: for how many hours can his candles light up the room if he acts optimally well? Help him find this number.","hidden_unit_tests":"[{\"input\": \"4 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6 3\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1000 1000\\r\\n\", \"output\": [\"1001\"]}, {\"input\": \"123 5\\r\\n\", \"output\": [\"153\"]}, {\"input\": \"1000 2\\r\\n\", \"output\": [\"1999\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"999 2\\r\\n\", \"output\": [\"1997\"]}, {\"input\": \"1000 3\\r\\n\", \"output\": [\"1499\"]}, {\"input\": \"1000 4\\r\\n\", \"output\": [\"1333\"]}, {\"input\": \"1 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"80 970\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"10 4\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"4 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"91 5\\r\\n\", \"output\": [\"113\"]}, {\"input\": \"777 17\\r\\n\", \"output\": [\"825\"]}, {\"input\": \"100 4\\r\\n\", \"output\": [\"133\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6 4\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"26 8\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"9 4\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"20 3\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"17 3\\r\\n\", \"output\": [\"25\"]}]","length":17,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n1 2 6\", \"10\\n1 2 3 4 5\"]","prob_desc_input_spec":"The first line of the input contains one integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100, n is even) \u2014 the size of the chessboard.  The second line of the input contains  integer numbers  (1\u2009\u2264\u2009pi\u2009\u2264\u2009n) \u2014 initial positions of the pieces. It is guaranteed that all the positions are distinct.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"0efe9afd8e6be9e00f7949be93f0ca1a","prob_desc_created_at":"1526913900","source_code":"import java.util.*;\n\npublic class chess {\n\n\tpublic static void main(String[] args) {\n\t\t\/\/ TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tArrayList<Integer> a=new ArrayList<Integer>();\n\t\tfor(int i=0;i<n\/2;i++){\n\t\t\tint t=sc.nextInt();\n\t\t\ta.add(t);\n\t\t}\n\t\tCollections.sort(a);\n\t\tint ans1=0;\n\t\tint ans2=0;\n\t\tint x=n;\n\t\tfor(int i=n\/2-1;i>=0;i--){\n\t\t\tans1+=Math.abs(x-a.get(i));\n\t\t\tans2+=Math.abs(x-1-a.get(i));\n\t\t\tx=x-2;\n\t\t}\n\t\tSystem.out.println(Math.min(ans1, ans2));\n\n\t}\n\n}\n","prob_desc_sample_outputs":"[\"2\", \"10\"]","lang_cluster":"Java","code_uid":"2324fb38a55a298de6529f9512ed5717","prob_desc_notes":"NoteIn the first example the only possible strategy is to move the piece at the position 6 to the position 5 and move the piece at the position 2 to the position 3. Notice that if you decide to place the pieces in the white cells the minimum number of moves will be 3.In the second example the possible strategy is to move  in 4 moves, then  in 3 moves,  in 2 moves and  in 1 move.","prob_desc_output_spec":"Print one integer \u2014 the minimum number of moves you have to make to place all the pieces in the cells of the same color.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a chessboard of size 1\u2009\u00d7\u2009n. It is guaranteed that n is even. The chessboard is painted like this: \"BWBW...BW\".Some cells of the board are occupied by the chess pieces. Each cell contains no more than one chess piece. It is known that the total number of pieces equals to .In one step you can move one of the pieces one cell to the left or to the right. You cannot move pieces beyond the borders of the board. You also cannot move pieces to the cells that are already occupied.Your task is to place all the pieces in the cells of the same color using the minimum number of moves (all the pieces must occupy only the black cells or only the white cells after all the moves are made).","hidden_unit_tests":"[{\"input\": \"6\\r\\n1 2 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n1 2 3 4 5\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"2\\r\\n2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n93 54 57 61 68 66 70 96 64 82 80 75 69 77 76 94 67 86 90 73 74 58 100 83 92 89 56 99 88 59 95 72 81 51 85 71 97 60 91 63 65 98 79 84 53 62 87 55 52 78\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"100\\r\\n41 13 29 11 25 15 6 23 28 50 48 17 3 9 44 24 5 19 34 22 33 32 20 16 35 37 4 10 46 2 39 40 47 49 36 42 1 30 43 21 14 7 18 45 31 8 12 26 27 38\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"96\\r\\n12 58 70 19 65 61 41 46 15 92 64 72 9 26 53 37 2 3 1 40 10 8 94 66 50 34 36 96 47 78 7 57 5 6 17 69 28 88 89 49 55 81 35 22 25 79 86 59\\r\\n\", \"output\": [\"152\"]}, {\"input\": \"10\\r\\n5 6 7 8 9\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"20\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"45\"]}, {\"input\": \"10\\r\\n6 7 8 9 10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"10\\r\\n9 8 7 6 5\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n1 5 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"12\\r\\n1 7 8 9 10 12\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n1 4 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"24\\r\\n10 21 15 3 11 4 18 24 16 22 14 9\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"20\\r\\n3 4 6 7 8 10 11 13 14 17\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10\\r\\n10 9 8 1 5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n84 10 26 79 58 93 67 85 7 2 99 4 47 45 75 22 32 82 65 53 63 49 42 52 12 69 86 46 25 76 40 15 13 78 8 81 62 28 60 21 27 80 98 56 3 36 54 16 50 43\\r\\n\", \"output\": [\"104\"]}, {\"input\": \"10\\r\\n1 7 8 9 10\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"10\\r\\n1 4 6 8 10\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"80\\r\\n41 70 18 53 32 79 51 49 21 27 47 65 50 15 62 60 5 40 14 25 64 9 19 58 38 76 66 52 17 34 13 2 80 43 3 42 33 36 6 72\\r\\n\", \"output\": [\"47\"]}, {\"input\": \"50\\r\\n27 42 41 4 10 45 44 26 49 50 17 28 2 36 18 39 23 12 21 24 19 29 22 40 37\\r\\n\", \"output\": [\"59\"]}, {\"input\": \"10\\r\\n2 3 4 5 6\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n3 5 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100\\r\\n9 63 62 88 3 67 54 33 79 51 71 80 37 46 43 57 69 17 34 6 18 40 59 83 76 86 8 55 90 89 45 42 28 98 30 38 77 91 73 58 23 61 41 65 64 93 14 44 16 24\\r\\n\", \"output\": [\"160\"]}, {\"input\": \"10\\r\\n1 6 7 8 9\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"6\\r\\n3 4 5\\r\\n\", \"output\": [\"2\"]}]","length":27,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 80\\n1 2 2 1\", \"4 1\\n1 2 2 1\", \"4 2\\n1 2 3 1\"]","prob_desc_input_spec":"The first line of input will contain two integers n and k (1\u2009\u2264\u2009n,\u2009k\u2009\u2264\u200980). The second line will contain n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009n) \u2013 the sequence of book requests.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"956228e31679caa9952b216e010f9773","prob_desc_created_at":"1495958700","source_code":"import java.io.DataInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.HashSet;\nimport java.util.Set;\n\n\/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author da_201612051\n *\/\npublic class Main {\n\n  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    FastIO in = new FastIO(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    TaskA1 solver = new TaskA1();\n    solver.solve(1, in, out);\n    out.close();\n  }\n\n  static class TaskA1 {\n\n    public void solve(int testNumber, FastIO in, PrintWriter out) {\n      int n = in.nextInt();\n      int k = in.nextInt();\n      int[] query = in.nextIntArray(n);\n      int cost = 0;\n      Set<Integer> availableBooks = new HashSet<>(k);\n      int[] access = new int[81];\n      int removable = -1;\n      for (int i = 0; i < n; i++) {\n        access[query[i]]++;\n      }\n      for (int i = 0; i < n; i++) {\n        int currentBook = query[i];\n        boolean doesNotContain = !availableBooks.contains(currentBook);\n        if (doesNotContain) {\n          cost++;\n        }\n        if (removable != -1) {\n          availableBooks.remove(removable);\n          removable = -1;\n        } else if (availableBooks.size() == k && doesNotContain) {\n          int removableBook = -1;\n          int count = k;\n          Set<Integer> known = new HashSet<>();\n          for (int j = i + 1; j < n && count > 0; j++) {\n            if (availableBooks.contains(query[j]) && !known.contains(query[j])) {\n              count--;\n              known.add(query[j]);\n              removableBook = query[j];\n            }\n          }\n          if (removableBook != -1) {\n            availableBooks.remove(removableBook);\n          } else {\n            availableBooks.remove(availableBooks.iterator().next());\n          }\n        }\n        availableBooks.add(currentBook);\n        if (--access[currentBook] == 0) {\n          removable = currentBook;\n        }\n      }\n      out.println(cost);\n    }\n\n  }\n\n  static class FastIO {\n\n    final private int BUFFER_SIZE = 1 << 16;\n    private InputStream din;\n    private byte[] buffer;\n    private int bufferPointer;\n    private int bytesRead;\n\n    public FastIO() {\n      buffer = new byte[BUFFER_SIZE];\n      bufferPointer = bytesRead = 0;\n    }\n\n    public FastIO(InputStream inputStream) {\n      this();\n      din = new DataInputStream(inputStream);\n    }\n\n    public FastIO(String file_name) {\n      try {\n        din = new DataInputStream(new FileInputStream(file_name));\n        buffer = new byte[BUFFER_SIZE];\n        bufferPointer = bytesRead = 0;\n      } catch (FileNotFoundException e) {\n        e.printStackTrace();\n      }\n    }\n\n    public int nextInt() {\n      int ret = 0;\n      try {\n        byte c = read();\n        while (c <= ' ') {\n          c = read();\n        }\n        boolean neg = (c == '-');\n        if (neg) {\n          c = read();\n        }\n        do {\n          ret = ret * 10 + c - '0';\n        } while ((c = read()) >= '0' && c <= '9');\n\n        if (neg) {\n          return -ret;\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      return ret;\n    }\n\n    public int[] nextIntArray(int n) {\n      int[] arr = new int[n];\n      for (int i = 0; i < n; i++) {\n        arr[i] = nextInt();\n      }\n      return arr;\n    }\n\n    private void fillBuffer() {\n      try {\n        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n        if (bytesRead == -1) {\n          buffer[0] = -1;\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n\n    private byte read() {\n      if (bufferPointer == bytesRead) {\n        fillBuffer();\n      }\n      return buffer[bufferPointer++];\n    }\n\n  }\n}\n\n","prob_desc_sample_outputs":"[\"2\", \"3\", \"3\"]","lang_cluster":"Java","code_uid":"85af70e9511d21e0424665fe4aa66c3b","prob_desc_notes":"NoteIn the first test case, Heidi is able to keep all books forever. Therefore, she only needs to buy the book 1 before the first day and the book 2 before the second day.In the second test case, she can only keep one book at a time. Therefore she will need to buy new books on the first, second and fourth day.In the third test case, before buying book 3 on the third day, she must decide which of the books 1 and 2 she should get rid of. Of course, she should keep the book 1, which will be requested on the fourth day.","prob_desc_output_spec":"On a single line print the minimum cost of buying books at the store so as to satisfy all requests.","prob_desc_output_to":"standard output","prob_desc_description":"Your search for Heidi is over \u2013 you finally found her at a library, dressed up as a human. In fact, she has spent so much time there that she now runs the place! Her job is to buy books and keep them at the library so that people can borrow and read them. There are n different books, numbered 1 through n.We will look at the library's operation during n consecutive days. Heidi knows in advance that on the i-th day (1\u2009\u2264\u2009i\u2009\u2264\u2009n) precisely one person will come to the library, request to borrow the book ai, read it in a few hours, and return the book later on the same day.Heidi desperately wants to please all her guests, so she will make sure to always have the book ai available in the library on the i-th day. During the night before the i-th day, she has the option of going to the bookstore (which operates at nights to avoid competition with the library) and buying any book for the price of 1 CHF. Of course, if she already has a book at the library, she does not need to buy it again. Initially, the library contains no books.There is a problem, though. The capacity of the library is k \u2013 this means that at any time, there can be at most k books at the library. If buying a new book would cause Heidi to have more than k books, she must first get rid of some book that she already has, in order to make room for the new book. If she later needs a book that she got rid of, she will need to buy that book again.You are given k and the sequence of requests for books a1,\u2009a2,\u2009...,\u2009an. What is the minimum cost (in CHF) of buying new books to satisfy all the requests?","hidden_unit_tests":"[{\"input\": \"4 80\\r\\n1 2 2 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 1\\r\\n1 2 2 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 2\\r\\n1 2 3 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"11 1\\r\\n1 2 3 5 1 10 10 1 1 3 5\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"5 2\\r\\n1 2 3 1 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"4 2\\r\\n1 2 3 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"80 4\\r\\n9 9 2 6 3 10 2 5 4 9 6 7 5 5 3 8 5 3 2 10 7 8 5 3 4 9 4 3 9 5 2 10 8 4 7 3 8 3 5 2 3 7 8 4 2 4 4 7 2 2 5 7 5 8 10 10 5 1 1 3 5 2 10 8 7 9 7 4 8 3 2 8 7 9 10 9 7 1 5 5\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"80 4\\r\\n10 19 20 18 16 7 13 18 15 5 7 13 16 8 14 8 3 15 19 19 7 13 17 9 18 16 4 14 10 18 1 3 5 3 20 18 9 4 17 19 13 20 16 12 15 5 5 18 17 16 4 5 20 10 18 4 7 19 10 15 8 15 17 3 10 16 19 2 6 6 3 12 10 7 15 3 17 15 6 8\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"80 4\\r\\n28 34 9 3 29 12 19 17 22 10 21 2 26 18 14 7 7 10 37 39 10 1 9 37 33 4 25 21 23 2 4 2 35 1 11 19 33 31 18 10 23 1 26 20 17 31 18 27 31 22 33 7 2 5 30 24 18 32 1 14 2 33 7 26 2 10 1 10 5 19 37 33 33 34 28 20 1 22 11 14\\r\\n\", \"output\": [\"58\"]}, {\"input\": \"80 4\\r\\n71 49 41 21 72 71 37 14 51 59 73 11 70 15 36 46 32 57 58 15 72 67 16 75 70 11 67 3 40 36 2 9 63 68 32 22 63 52 67 55 35 19 72 59 22 19 44 55 59 74 4 34 53 3 22 57 32 27 78 12 71 4 26 15 43 21 79 10 67 39 34 74 38 26 31 78 2 78 69 42\\r\\n\", \"output\": [\"62\"]}, {\"input\": \"80 8\\r\\n16 13 11 16 3 4 1 4 4 16 6 6 1 12 19 18 12 15 2 10 2 18 18 13 3 17 16 15 7 6 19 8 2 14 17 13 1 14 4 2 3 16 2 15 13 15 9 10 7 14 7 2 1 18 19 15 7 3 19 8 9 4 12 4 3 4 9 10 6 5 4 4 9 4 20 8 17 7 1 14\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"80 8\\r\\n5 17 39 25 40 34 11 23 7 16 20 35 31 14 18 17 32 10 40 9 17 23 5 33 2 9 21 22 8 11 22 7 28 36 3 10 12 21 20 29 25 5 12 30 8 21 18 19 1 29 9 4 19 5 15 36 38 37 10 27 15 13 6 22 31 5 40 30 21 39 23 21 39 32 37 28 29 11 34 16\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"80 8\\r\\n8 72 32 27 27 20 69 28 77 25 8 4 75 11 41 71 57 17 45 65 79 8 61 15 24 80 39 36 34 13 76 37 16 71 64 77 11 58 30 26 61 23 18 30 68 65 12 47 69 65 3 55 71 3 32 4 20 39 47 25 75 49 34 60 48 56 77 70 59 59 75 6 5 23 55 30 62 66 4 4\\r\\n\", \"output\": [\"57\"]}, {\"input\": \"80 12\\r\\n9 5 8 1 12 2 6 19 8 20 6 12 9 6 16 1 2 5 11 6 8 4 13 7 2 17 18 12 15 17 13 2 9 8 1 17 10 2 9 12 18 3 5 11 10 16 7 16 8 11 3 18 13 19 8 13 13 2 20 13 11 14 20 3 2 1 17 18 17 8 4 3 12 3 19 18 4 16 6 6\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"80 12\\r\\n27 12 25 30 13 27 12 17 35 25 1 28 35 16 23 20 38 1 37 2 35 29 16 26 37 4 23 39 24 2 16 21 39 21 23 38 33 9 38 22 40 36 23 39 1 2 4 14 22 26 32 4 31 38 4 5 4 15 35 12 5 32 37 38 11 14 16 26 36 38 2 40 10 15 33 38 36 20 35 12\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"80 12\\r\\n30 19 34 24 56 38 31 63 57 50 53 69 79 5 6 74 47 47 73 17 18 70 72 49 35 20 65 21 18 4 54 12 67 8 28 25 64 6 31 36 35 54 61 7 45 54 55 49 50 6 3 7 10 29 76 62 50 50 32 66 25 19 17 3 67 17 37 67 58 18 54 25 8 78 35 16 61 19 45 40\\r\\n\", \"output\": [\"55\"]}, {\"input\": \"80 16\\r\\n4 27 31 28 8 17 28 31 20 7 39 5 40 13 28 6 23 1 16 4 34 2 13 6 6 9 18 1 25 19 33 26 33 16 24 5 13 23 25 9 10 16 25 34 39 8 4 6 33 25 7 40 32 23 13 17 32 20 28 25 33 20 29 2 40 34 23 6 28 2 12 12 9 36 18 39 32 8 11 15\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"80 16\\r\\n31 26 40 46 75 35 63 29 2 49 51 14 4 65 10 4 8 72 44 67 57 60 69 21 52 40 37 54 27 12 31 24 21 59 61 80 11 76 58 7 77 10 55 9 11 36 7 41 61 13 2 28 28 77 22 57 54 62 65 80 78 32 72 64 41 69 36 46 50 5 48 53 6 76 76 65 57 7 29 67\\r\\n\", \"output\": [\"53\"]}, {\"input\": \"80 40\\r\\n34 71 32 39 65 8 13 4 7 4 18 66 20 12 57 74 58 50 30 27 31 48 1 6 63 63 7 32 56 48 42 35 45 55 52 76 52 26 40 15 8 38 73 47 55 75 17 22 36 59 28 19 6 79 58 7 40 66 48 39 71 67 55 61 71 24 60 39 63 6 47 70 8 10 68 49 49 67 53 15\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"80 60\\r\\n70 59 1 24 50 77 11 71 36 26 75 56 30 31 76 51 73 29 49 2 80 55 32 52 51 56 2 28 37 11 37 1 63 33 74 60 59 63 55 28 73 45 5 69 77 8 35 76 47 48 49 77 25 75 38 70 77 80 27 9 13 45 14 30 33 34 32 78 52 4 7 57 55 43 13 1 45 36 79 45\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"80 80\\r\\n73 32 65 26 35 2 10 73 80 64 67 14 40 34 15 59 8 71 5 9 49 63 32 51 23 1 13 9 34 6 80 31 32 60 31 27 65 20 21 74 26 51 17 11 19 37 4 50 73 22 71 55 76 7 51 21 50 63 6 75 66 55 37 62 10 45 52 21 42 18 80 12 7 28 54 50 9 5 25 42\\r\\n\", \"output\": [\"53\"]}, {\"input\": \"80 4\\r\\n1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"80 8\\r\\n1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"80 16\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 9 10 11 12\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"80 32\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 1 2 3 4 5 6 7 8 9 10 11 12 13 14\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"80 80\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80\\r\\n\", \"output\": [\"80\"]}]","length":157,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"AS\\n2H 4C TH JH AD\", \"2H\\n3D 4C AC KD AS\", \"4D\\nAS AC AD AH 5H\"]","prob_desc_input_spec":"The first line of the input contains one string which describes the card on the table. The second line contains five strings which describe the cards in your hand. Each string is two characters long. The first character denotes the rank and belongs to the set $$$\\{{\\tt 2}, {\\tt 3}, {\\tt 4}, {\\tt 5}, {\\tt 6}, {\\tt 7}, {\\tt 8}, {\\tt 9}, {\\tt T}, {\\tt J}, {\\tt Q}, {\\tt K}, {\\tt A}\\}$$$. The second character denotes the suit and belongs to the set $$$\\{{\\tt D}, {\\tt C}, {\\tt S}, {\\tt H}\\}$$$. All the cards in the input are different.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"699444eb6366ad12bc77e7ac2602d74b","prob_desc_created_at":"1546613100","source_code":"import java.util.Scanner;\npublic class Solution{\n    public static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        int t=5;\n        String[] arr=new String[t];\n        String my=sc.next();\n       for(int i=0;i<t;i++){\n            arr[i]=sc.next();\n        }\n        String ans=\"NO\";\n        for(int i=0;i<t;i++){\n            char f=my.charAt(0),s=my.charAt(1);\n            if(f==arr[i].charAt(0) || s == arr[i].charAt(1)) {\n                ans=\"YES\";\n                break;\n            }\n        }\n        System.out.println(\"\"+ans);\n        \n    }\n}","prob_desc_sample_outputs":"[\"YES\", \"NO\", \"YES\"]","lang_cluster":"Java","code_uid":"d7b49e635bf5a04ea72cb0a640b8135d","prob_desc_notes":"NoteIn the first example, there is an Ace of Spades (AS) on the table. You can play an Ace of Diamonds (AD) because both of them are Aces.In the second example, you cannot play any card.In the third example, you can play an Ace of Diamonds (AD) because it has the same suit as a Four of Diamonds (4D), which lies on the table.","prob_desc_output_spec":"If it is possible to play a card from your hand, print one word \"YES\". Otherwise, print \"NO\". You can print each letter in any case (upper or lower).","prob_desc_output_to":"standard output","prob_desc_description":"Gennady owns a small hotel in the countryside where he lives a peaceful life. He loves to take long walks, watch sunsets and play cards with tourists staying in his hotel. His favorite game is called \"Mau-Mau\".To play Mau-Mau, you need a pack of $$$52$$$ cards. Each card has a suit (Diamonds \u2014 D, Clubs \u2014 C, Spades \u2014 S, or Hearts \u2014 H), and a rank (2, 3, 4, 5, 6, 7, 8, 9, T, J, Q, K, or A).At the start of the game, there is one card on the table and you have five cards in your hand. You can play a card from your hand if and only if it has the same rank or the same suit as the card on the table.In order to check if you'd be a good playing partner, Gennady has prepared a task for you. Given the card on the table and five cards in your hand, check if you can play at least one card.","hidden_unit_tests":"[{\"input\": \"AS\\r\\n2H 4C TH JH AD\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"2H\\r\\n3D 4C AC KD AS\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"4D\\r\\nAS AC AD AH 5H\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"3D\\r\\n8S 4S 2C AS 6H\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"7H\\r\\nTC 4C KC AD 9S\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"KH\\r\\n3C QD 9S KS 8D\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"4H\\r\\nJH QC 5H 9H KD\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"9H\\r\\nKC 6D KD 4C 2S\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"AD\\r\\nQC 5S 4H JH 2S\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"QC\\r\\nQD KS AH 7S 2S\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"7H\\r\\n4H 6D AC KH 8H\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"4S\\r\\n9D 4D 5S 7D 5D\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"AS\\r\\n2H 4C TH JH TS\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"AS\\r\\n2S 3S 4S 5S 6S\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"KS\\r\\nAD 2D 3D 4D 5D\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"7S\\r\\n7H 2H 3H 4H 5H\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"AS\\r\\n4H 4C TH JH TS\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"7S\\r\\n2H 4H 5H 6H 2S\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"AS\\r\\n2H 4C TH JH KS\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"AS\\r\\n2S 2H 3H 4H 5H\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"AC\\r\\n2D 3D 4D 5C 6D\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"2S\\r\\n2D 3D 4D 5D 6D\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"AS\\r\\n2H 4C TH JH 3S\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"2S\\r\\n2H 3H 4H 5H 6H\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"AS\\r\\n2S 3D 4D 5D 6D\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"AS\\r\\n2C 3C 4C 5C 5S\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"2D\\r\\n2H 3H 4H 5H 6H\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}, {\"input\": \"9D\\r\\n2D 3D 4D 5D 6D\\r\\n\", \"output\": [\"YES\", \"yes\", \"Yes\"]}]","length":22,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"432\", \"99\", \"237\", \"42\"]","prob_desc_input_spec":"The only line in the input contains an integer $$$a$$$ ($$$1 \\le a \\le 1000$$$).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"bb6fb9516b2c55d1ee47a30d423562d7","prob_desc_created_at":"1561559700","source_code":"import java.util.*;\npublic class NearestInterestingNumber {\n\n   static int sum(int n){\n       int x =0;\n           while(n>0){\n               x+=n%10;\n               n\/=10;\n           }\n           return x;\n   }\n\n\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        while(sum(n)%4!=0){\n            n++;\n        }\n        System.out.println(n);\n        \n        \n        }\n        }\n","prob_desc_sample_outputs":"[\"435\", \"103\", \"237\", \"44\"]","lang_cluster":"Java","code_uid":"81065573bb370a3dd4db72421f2c2a34","prob_desc_notes":null,"prob_desc_output_spec":"Print the nearest greater or equal interesting number for the given number $$$a$$$. In other words, print the interesting number $$$n$$$ such that $$$n \\ge a$$$ and $$$n$$$ is minimal.","prob_desc_output_to":"standard output","prob_desc_description":"Polycarp knows that if the sum of the digits of a number is divisible by $$$3$$$, then the number itself is divisible by $$$3$$$. He assumes that the numbers, the sum of the digits of which is divisible by $$$4$$$, are also somewhat interesting. Thus, he considers a positive integer $$$n$$$ interesting if its sum of digits is divisible by $$$4$$$.Help Polycarp find the nearest larger or equal interesting number for the given number $$$a$$$. That is, find the interesting number $$$n$$$ such that $$$n \\ge a$$$ and $$$n$$$ is minimal.","hidden_unit_tests":"[{\"input\": \"432\\r\\n\", \"output\": [\"435\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"103\"]}, {\"input\": \"237\\r\\n\", \"output\": [\"237\"]}, {\"input\": \"42\\r\\n\", \"output\": [\"44\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"1003\"]}, {\"input\": \"898\\r\\n\", \"output\": [\"903\"]}, {\"input\": \"997\\r\\n\", \"output\": [\"1003\"]}, {\"input\": \"999\\r\\n\", \"output\": [\"1003\"]}, {\"input\": \"399\\r\\n\", \"output\": [\"400\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"120\\r\\n\", \"output\": [\"121\"]}, {\"input\": \"909\\r\\n\", \"output\": [\"912\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"398\\r\\n\", \"output\": [\"398\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"799\\r\\n\", \"output\": [\"800\"]}, {\"input\": \"970\\r\\n\", \"output\": [\"970\"]}, {\"input\": \"188\\r\\n\", \"output\": [\"192\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"38\\r\\n\", \"output\": [\"39\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"518\\r\\n\", \"output\": [\"521\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"400\\r\\n\", \"output\": [\"400\"]}, {\"input\": \"36\\r\\n\", \"output\": [\"39\"]}]","length":25,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n1 5 5 1 6 1\", \"5\\n2 4 2 4 4\", \"5\\n6 6 6 6 6\"]","prob_desc_input_spec":"The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 50$$$) \u2014 the number of elements in Petya's array. The following line contains a sequence $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 1\\,000$$$) \u2014 the Petya's array.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"1b9d3dfcc2353eac20b84c75c27fab5a","prob_desc_created_at":"1582202100","source_code":"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class RemoveDuplicates {\n\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tArrayList<Integer> x = new ArrayList<Integer>();\n\t\tArrayList<Integer> y = new ArrayList<Integer>();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tx.add(scan.nextInt());\n\t\t}\n\t\tfor(int i=n-1;i>=0;i--)\n\t\t{\n\t\t\tif(!y.contains(x.get(i)))y.add(x.get(i));\n\t\t}\n\t\tCollections.reverse(y);\n\t\tSystem.out.println(y.size());\n\t\tfor(int i=0;i<y.size();i++)\n\t\t{\n\t\t\tSystem.out.print(y.get(i)+\" \");\n\t\t}\n\t}\n}","prob_desc_sample_outputs":"[\"3\\n5 6 1\", \"2\\n2 4\", \"1\\n6\"]","lang_cluster":"Java","code_uid":"f1e1b2b3cd6a71fc66d00489d75bcc8f","prob_desc_notes":"NoteIn the first example you should remove two integers $$$1$$$, which are in the positions $$$1$$$ and $$$4$$$. Also you should remove the integer $$$5$$$, which is in the position $$$2$$$.In the second example you should remove integer $$$2$$$, which is in the position $$$1$$$, and two integers $$$4$$$, which are in the positions $$$2$$$ and $$$4$$$.In the third example you should remove four integers $$$6$$$, which are in the positions $$$1$$$, $$$2$$$, $$$3$$$ and $$$4$$$.","prob_desc_output_spec":"In the first line print integer $$$x$$$ \u2014 the number of elements which will be left in Petya's array after he removed the duplicates. In the second line print $$$x$$$ integers separated with a space \u2014 Petya's array after he removed the duplicates. For each unique element only the rightmost entry should be left.","prob_desc_output_to":"standard output","prob_desc_description":"Petya has an array $$$a$$$ consisting of $$$n$$$ integers. He wants to remove duplicate (equal) elements.Petya wants to leave only the rightmost entry (occurrence) for each element of the array. The relative order of the remaining unique elements should not be changed.","hidden_unit_tests":"[{\"input\": \"6\\r\\n1 5 5 1 6 1\\r\\n\", \"output\": [\"3\\n5 6 1\\r\\n\", \"3\\r\\n5 6 1 \\r\\n\", \"3\\r\\n5\\r\\n6\\r\\n1\\r\\n\", \"3\\r\\n5 6 1\", \"3\\r\\n5  6  1  \", \"3\\r\\n5 6 1 \", \"3\\r\\n 5 6 1\", \"3\\r\\n5 6 1\\r\\n\", \"3\\r\\n5 6 1 \\n\", \"3\\n5 6 1\", \"3\\n5 6 1 \"]}, {\"input\": \"5\\r\\n2 4 2 4 4\\r\\n\", \"output\": [\"2\\r\\n2 4\\r\\n\", \"2\\r\\n2 4 \", \"2\\r\\n2 4\", \"2\\r\\n2\\r\\n4\\r\\n\", \"2\\n2 4\", \"2\\r\\n2  4  \", \"2\\r\\n2 4 \\n\", \"2\\n2 4\\r\\n\", \"2\\r\\n2 4 \\r\\n\", \"2\\n2 4 \", \"2\\r\\n 2 4\"]}, {\"input\": \"5\\r\\n6 6 6 6 6\\r\\n\", \"output\": [\"1\\r\\n6 \", \"1\\r\\n6\", \"1\\r\\n6 \\r\\n\", \"1\\n6\\r\\n\", \"1\\r\\n6\\r\\n\", \"1\\r\\n 6\", \"1\\r\\n6  \", \"1\\r\\n6 \\n\", \"1\\n6\", \"1\\n6 \"]}, {\"input\": \"7\\r\\n1 2 3 4 2 2 3\\r\\n\", \"output\": [\"4\\r\\n1 4 2 3 \\n\", \"4\\r\\n1 4 2 3\\r\\n\", \"4\\r\\n1 4 2 3 \", \"4\\n1 4 2 3\\r\\n\", \"4\\r\\n1\\r\\n4\\r\\n2\\r\\n3\\r\\n\", \"4\\r\\n1 4 2 3 \\r\\n\", \"4\\r\\n1  4  2  3  \", \"4\\n1 4 2 3 \", \"4\\r\\n1 4 2 3\", \"4\\r\\n 1 4 2 3\", \"4\\n1 4 2 3\"]}, {\"input\": \"9\\r\\n100 100 100 99 99 99 100 100 100\\r\\n\", \"output\": [\"2\\n99 100\", \"2\\r\\n99 100 \\r\\n\", \"2\\r\\n99 100 \", \"2\\r\\n99 100\", \"2\\r\\n99\\r\\n100\\r\\n\", \"2\\r\\n99 100\\r\\n\", \"2\\r\\n99 100 \\n\", \"2\\n99 100\\r\\n\", \"2\\n99 100 \", \"2\\r\\n 99 100\", \"2\\r\\n99  100  \"]}, {\"input\": \"27\\r\\n489 489 487 488 750 230 43 645 42 42 489 42 973 42 973 750 645 355 868 112 868 489 750 489 887 489 868\\r\\n\", \"output\": [\"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868\", \"13\\r\\n487  488  230  43  42  973  645  355  112  750  887  489  868  \", \"13\\r\\n487\\r\\n488\\r\\n230\\r\\n43\\r\\n42\\r\\n973\\r\\n645\\r\\n355\\r\\n112\\r\\n750\\r\\n887\\r\\n489\\r\\n868\\r\\n\", \"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868 \", \"13\\r\\n 487 488 230 43 42 973 645 355 112 750 887 489 868\", \"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868 \\n\", \"13\\n487 488 230 43 42 973 645 355 112 750 887 489 868\", \"13\\n487 488 230 43 42 973 645 355 112 750 887 489 868\\r\\n\", \"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868\\r\\n\", \"13\\r\\n487 488 230 43 42 973 645 355 112 750 887 489 868 \\r\\n\", \"13\\n487 488 230 43 42 973 645 355 112 750 887 489 868 \"]}, {\"input\": \"40\\r\\n151 421 421 909 117 222 909 954 227 421 227 954 954 222 421 227 421 421 421 151 421 227 222 222 222 222 421 183 421 227 421 954 222 421 954 421 222 421 909 421\\r\\n\", \"output\": [\"8\\r\\n117\\r\\n151\\r\\n183\\r\\n227\\r\\n954\\r\\n222\\r\\n909\\r\\n421\\r\\n\", \"8\\r\\n117 151 183 227 954 222 909 421 \\r\\n\", \"8\\r\\n117 151 183 227 954 222 909 421\", \"8\\n117 151 183 227 954 222 909 421\\r\\n\", \"8\\r\\n117 151 183 227 954 222 909 421 \\n\", \"8\\n117 151 183 227 954 222 909 421 \", \"8\\r\\n117 151 183 227 954 222 909 421 \", \"8\\r\\n 117 151 183 227 954 222 909 421\", \"8\\r\\n117  151  183  227  954  222  909  421  \", \"8\\r\\n117 151 183 227 954 222 909 421\\r\\n\", \"8\\n117 151 183 227 954 222 909 421\"]}, {\"input\": \"48\\r\\n2 2 2 903 903 2 726 2 2 2 2 2 2 2 2 2 2 726 2 2 2 2 2 2 2 726 2 2 2 2 62 2 2 2 2 2 2 2 2 726 62 726 2 2 2 903 903 2\\r\\n\", \"output\": [\"4\\n62 726 903 2 \", \"4\\r\\n62 726 903 2\", \"4\\r\\n62 726 903 2 \\r\\n\", \"4\\r\\n 62 726 903 2\", \"4\\r\\n62 726 903 2\\r\\n\", \"4\\n62 726 903 2\", \"4\\n62 726 903 2\\r\\n\", \"4\\r\\n62 726 903 2 \", \"4\\r\\n62\\r\\n726\\r\\n903\\r\\n2\\r\\n\", \"4\\r\\n62 726 903 2 \\n\", \"4\\r\\n62  726  903  2  \"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\\r\\n1\", \"1\\r\\n 1\", \"1\\r\\n1 \\r\\n\", \"1\\r\\n1\\r\\n\", \"1\\n1 \", \"1\\r\\n1 \\n\", \"1\\r\\n1  \", \"1\\n1\\r\\n\", \"1\\n1\", \"1\\r\\n1 \"]}, {\"input\": \"13\\r\\n5 37 375 5 37 33 37 375 37 2 3 3 2\\r\\n\", \"output\": [\"6\\n5 33 375 37 3 2\", \"6\\r\\n5 33 375 37 3 2\\r\\n\", \"6\\r\\n5 33 375 37 3 2\", \"6\\n5 33 375 37 3 2 \", \"6\\r\\n5 33 375 37 3 2 \\r\\n\", \"6\\r\\n5 33 375 37 3 2 \", \"6\\r\\n5 33 375 37 3 2 \\n\", \"6\\r\\n5  33  375  37  3  2  \", \"6\\r\\n 5 33 375 37 3 2\", \"6\\n5 33 375 37 3 2\\r\\n\", \"6\\r\\n5\\r\\n33\\r\\n375\\r\\n37\\r\\n3\\r\\n2\\r\\n\"]}, {\"input\": \"50\\r\\n1 2 3 4 5 4 3 2 1 2 3 2 1 4 5 5 4 3 2 1 1 2 3 4 5 4 3 2 1 2 3 2 1 4 5 5 4 3 2 1 4 3 2 5 1 6 6 6 6 6\\r\\n\", \"output\": [\"6\\r\\n4\\r\\n3\\r\\n2\\r\\n5\\r\\n1\\r\\n6\\r\\n\", \"6\\n4 3 2 5 1 6\", \"6\\r\\n4 3 2 5 1 6 \", \"6\\r\\n4 3 2 5 1 6\\r\\n\", \"6\\r\\n 4 3 2 5 1 6\", \"6\\r\\n4 3 2 5 1 6 \\n\", \"6\\r\\n4 3 2 5 1 6 \\r\\n\", \"6\\r\\n4 3 2 5 1 6\", \"6\\n4 3 2 5 1 6 \", \"6\\r\\n4  3  2  5  1  6  \", \"6\\n4 3 2 5 1 6\\r\\n\"]}, {\"input\": \"47\\r\\n233 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"2\\n233 1\\r\\n\", \"2\\r\\n233 1\", \"2\\n233 1\", \"2\\r\\n233\\r\\n1\\r\\n\", \"2\\r\\n233 1 \", \"2\\r\\n233 1\\r\\n\", \"2\\r\\n233  1  \", \"2\\r\\n 233 1\", \"2\\r\\n233 1 \\r\\n\", \"2\\r\\n233 1 \\n\", \"2\\n233 1 \"]}, {\"input\": \"47\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1\\r\\n1\", \"1\\r\\n 1\", \"1\\r\\n1 \\r\\n\", \"1\\r\\n1\\r\\n\", \"1\\n1 \", \"1\\r\\n1 \\n\", \"1\\r\\n1  \", \"1\\n1\\r\\n\", \"1\\n1\", \"1\\r\\n1 \"]}, {\"input\": \"2\\r\\n964 964\\r\\n\", \"output\": [\"1\\n964\\r\\n\", \"1\\n964 \", \"1\\r\\n964 \\r\\n\", \"1\\r\\n964\\r\\n\", \"1\\r\\n964  \", \"1\\r\\n964 \\n\", \"1\\r\\n964 \", \"1\\r\\n964\", \"1\\n964\", \"1\\r\\n 964\"]}, {\"input\": \"2\\r\\n1000 1000\\r\\n\", \"output\": [\"1\\r\\n 1000\", \"1\\n1000\", \"1\\r\\n1000 \\n\", \"1\\n1000 \", \"1\\r\\n1000\", \"1\\r\\n1000\\r\\n\", \"1\\r\\n1000 \", \"1\\r\\n1000  \", \"1\\r\\n1000 \\r\\n\", \"1\\n1000\\r\\n\"]}, {\"input\": \"1\\r\\n1000\\r\\n\", \"output\": [\"1\\r\\n 1000\", \"1\\n1000\", \"1\\r\\n1000 \\n\", \"1\\n1000 \", \"1\\r\\n1000\", \"1\\r\\n1000\\r\\n\", \"1\\r\\n1000 \", \"1\\r\\n1000  \", \"1\\r\\n1000 \\r\\n\", \"1\\n1000\\r\\n\"]}, {\"input\": \"45\\r\\n991 991 996 996 992 992 999 1000 998 1000 992 999 996 999 991 991 999 993 992 999 1000 997 992 999 996 991 994 996 991 999 1000 993 999 997 999 992 991 997 991 998 998 995 998 994 993\\r\\n\", \"output\": [\"10\\r\\n996\\r\\n1000\\r\\n999\\r\\n992\\r\\n997\\r\\n991\\r\\n995\\r\\n998\\r\\n994\\r\\n993\\r\\n\", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993 \\r\\n\", \"10\\n996 1000 999 992 997 991 995 998 994 993 \", \"10\\r\\n 996 1000 999 992 997 991 995 998 994 993\", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993 \\n\", \"10\\n996 1000 999 992 997 991 995 998 994 993\\r\\n\", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993 \", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993\\r\\n\", \"10\\r\\n996 1000 999 992 997 991 995 998 994 993\", \"10\\n996 1000 999 992 997 991 995 998 994 993\", \"10\\r\\n996  1000  999  992  997  991  995  998  994  993  \"]}, {\"input\": \"6\\r\\n994 993 1000 998 991 994\\r\\n\", \"output\": [\"5\\r\\n993  1000  998  991  994  \", \"5\\n993 1000 998 991 994\", \"5\\r\\n993\\r\\n1000\\r\\n998\\r\\n991\\r\\n994\\r\\n\", \"5\\r\\n993 1000 998 991 994 \\r\\n\", \"5\\r\\n993 1000 998 991 994 \", \"5\\r\\n993 1000 998 991 994\\r\\n\", \"5\\r\\n993 1000 998 991 994 \\n\", \"5\\r\\n 993 1000 998 991 994\", \"5\\r\\n993 1000 998 991 994\", \"5\\n993 1000 998 991 994 \", \"5\\n993 1000 998 991 994\\r\\n\"]}, {\"input\": \"48\\r\\n992 995 992 991 994 992 995 999 996 993 999 995 993 992 1000 992 997 996 991 993 992 998 998 998 999 995 992 992 993 992 992 995 996 995 997 991 997 991 999 994 994 997 1000 998 1000 992 1000 999\\r\\n\", \"output\": [\"10\\r\\n993\\r\\n996\\r\\n995\\r\\n991\\r\\n994\\r\\n997\\r\\n998\\r\\n992\\r\\n1000\\r\\n999\\r\\n\", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999\", \"10\\n993 996 995 991 994 997 998 992 1000 999\\r\\n\", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999 \\n\", \"10\\n993 996 995 991 994 997 998 992 1000 999\", \"10\\r\\n993  996  995  991  994  997  998  992  1000  999  \", \"10\\r\\n 993 996 995 991 994 997 998 992 1000 999\", \"10\\n993 996 995 991 994 997 998 992 1000 999 \", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999\\r\\n\", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999 \", \"10\\r\\n993 996 995 991 994 997 998 992 1000 999 \\r\\n\"]}, {\"input\": \"3\\r\\n6 6 3\\r\\n\", \"output\": [\"2\\n6 3\", \"2\\n6 3 \", \"2\\r\\n6 3\", \"2\\r\\n6 3 \\n\", \"2\\r\\n6 3 \", \"2\\r\\n6\\r\\n3\\r\\n\", \"2\\r\\n6 3 \\r\\n\", \"2\\n6 3\\r\\n\", \"2\\r\\n6  3  \", \"2\\r\\n6 3\\r\\n\", \"2\\r\\n 6 3\"]}, {\"input\": \"36\\r\\n999 1000 993 993 1000 999 996 997 998 995 995 997 999 995 1000 998 998 994 993 998 994 999 1000 995 996 994 991 991 999 996 993 999 996 998 991 997\\r\\n\", \"output\": [\"9\\n1000 995 994 993 999 996 998 991 997\\r\\n\", \"9\\n1000 995 994 993 999 996 998 991 997\", \"9\\r\\n1000 995 994 993 999 996 998 991 997 \\r\\n\", \"9\\r\\n1000 995 994 993 999 996 998 991 997 \", \"9\\n1000 995 994 993 999 996 998 991 997 \", \"9\\r\\n1000 995 994 993 999 996 998 991 997\\r\\n\", \"9\\r\\n1000\\r\\n995\\r\\n994\\r\\n993\\r\\n999\\r\\n996\\r\\n998\\r\\n991\\r\\n997\\r\\n\", \"9\\r\\n1000  995  994  993  999  996  998  991  997  \", \"9\\r\\n1000 995 994 993 999 996 998 991 997 \\n\", \"9\\r\\n 1000 995 994 993 999 996 998 991 997\", \"9\\r\\n1000 995 994 993 999 996 998 991 997\"]}, {\"input\": \"49\\r\\n991 997 995 991 995 998 994 996 997 991 998 993 992 999 996 995 991 991 999 997 995 993 997 1000 997 993 993 994 999 994 992 991 1000 996 994 996 996 999 992 992 1000 991 997 993 991 994 997 991 996\\r\\n\", \"output\": [\"10\\r\\n998 995 999 992 1000 993 994 997 991 996 \\r\\n\", \"10\\r\\n998 995 999 992 1000 993 994 997 991 996 \\n\", \"10\\r\\n 998 995 999 992 1000 993 994 997 991 996\", \"10\\r\\n998\\r\\n995\\r\\n999\\r\\n992\\r\\n1000\\r\\n993\\r\\n994\\r\\n997\\r\\n991\\r\\n996\\r\\n\", \"10\\n998 995 999 992 1000 993 994 997 991 996 \", \"10\\r\\n998  995  999  992  1000  993  994  997  991  996  \", \"10\\n998 995 999 992 1000 993 994 997 991 996\", \"10\\r\\n998 995 999 992 1000 993 994 997 991 996 \", \"10\\r\\n998 995 999 992 1000 993 994 997 991 996\\r\\n\", \"10\\n998 995 999 992 1000 993 994 997 991 996\\r\\n\", \"10\\r\\n998 995 999 992 1000 993 994 997 991 996\"]}, {\"input\": \"2\\r\\n1000 999\\r\\n\", \"output\": [\"2\\n1000 999\\r\\n\", \"2\\n1000 999 \", \"2\\r\\n1000\\r\\n999\\r\\n\", \"2\\r\\n1000 999 \", \"2\\r\\n1000  999  \", \"2\\r\\n 1000 999\", \"2\\r\\n1000 999 \\r\\n\", \"2\\r\\n1000 999\", \"2\\r\\n1000 999 \\n\", \"2\\n1000 999\", \"2\\r\\n1000 999\\r\\n\"]}, {\"input\": \"28\\r\\n997 994 991 994 994 995 1000 992 995 994 994 995 991 996 991 996 991 999 999 993 994 997 995 992 991 992 998 1000\\r\\n\", \"output\": [\"10\\n996 999 993 994 997 995 991 992 998 1000\\r\\n\", \"10\\r\\n 996 999 993 994 997 995 991 992 998 1000\", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000\\r\\n\", \"10\\n996 999 993 994 997 995 991 992 998 1000\", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000 \", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000\", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000 \\n\", \"10\\r\\n996\\r\\n999\\r\\n993\\r\\n994\\r\\n997\\r\\n995\\r\\n991\\r\\n992\\r\\n998\\r\\n1000\\r\\n\", \"10\\r\\n996 999 993 994 997 995 991 992 998 1000 \\r\\n\", \"10\\n996 999 993 994 997 995 991 992 998 1000 \", \"10\\r\\n996  999  993  994  997  995  991  992  998  1000  \"]}, {\"input\": \"15\\r\\n991 995 995 1000 991 993 997 998 1000 994 1000 992 991 995 992\\r\\n\", \"output\": [\"8\\r\\n993 997 998 994 1000 991 995 992\\r\\n\", \"8\\r\\n993  997  998  994  1000  991  995  992  \", \"8\\r\\n993 997 998 994 1000 991 995 992 \\r\\n\", \"8\\n993 997 998 994 1000 991 995 992\", \"8\\r\\n993\\r\\n997\\r\\n998\\r\\n994\\r\\n1000\\r\\n991\\r\\n995\\r\\n992\\r\\n\", \"8\\r\\n993 997 998 994 1000 991 995 992 \", \"8\\n993 997 998 994 1000 991 995 992\\r\\n\", \"8\\r\\n993 997 998 994 1000 991 995 992\", \"8\\n993 997 998 994 1000 991 995 992 \", \"8\\r\\n993 997 998 994 1000 991 995 992 \\n\", \"8\\r\\n 993 997 998 994 1000 991 995 992\"]}, {\"input\": \"6\\r\\n1000 1 1000 2 1000 1\\r\\n\", \"output\": [\"3\\r\\n2 1000 1 \", \"3\\n2 1000 1\\r\\n\", \"3\\r\\n 2 1000 1\", \"3\\r\\n2\\r\\n1000\\r\\n1\\r\\n\", \"3\\r\\n2  1000  1  \", \"3\\r\\n2 1000 1\", \"3\\n2 1000 1 \", \"3\\r\\n2 1000 1 \\r\\n\", \"3\\n2 1000 1\", \"3\\r\\n2 1000 1\\r\\n\", \"3\\r\\n2 1000 1 \\n\"]}, {\"input\": \"6\\r\\n1000 1 1000 2 1 1000\\r\\n\", \"output\": [\"3\\n2 1 1000\", \"3\\r\\n2 1 1000 \\r\\n\", \"3\\r\\n2  1  1000  \", \"3\\r\\n2\\r\\n1\\r\\n1000\\r\\n\", \"3\\n2 1 1000\\r\\n\", \"3\\r\\n2 1 1000\", \"3\\r\\n2 1 1000\\r\\n\", \"3\\r\\n 2 1 1000\", \"3\\r\\n2 1 1000 \\n\", \"3\\r\\n2 1 1000 \", \"3\\n2 1 1000 \"]}, {\"input\": \"7\\r\\n1 1000 1 999 1000 1 2\\r\\n\", \"output\": [\"4\\r\\n999 1000 1 2 \\r\\n\", \"4\\n999 1000 1 2\", \"4\\r\\n 999 1000 1 2\", \"4\\r\\n999 1000 1 2 \", \"4\\n999 1000 1 2\\r\\n\", \"4\\n999 1000 1 2 \", \"4\\r\\n999\\r\\n1000\\r\\n1\\r\\n2\\r\\n\", \"4\\r\\n999 1000 1 2\", \"4\\r\\n999 1000 1 2 \\n\", \"4\\r\\n999  1000  1  2  \", \"4\\r\\n999 1000 1 2\\r\\n\"]}]","length":28,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6 3\", \"1 2\", \"4 6\"]","prob_desc_input_spec":"The first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq n \\leq 10^6$$$, $$$2 \\leq k \\leq 1000$$$).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"ed0ebc1e484fcaea875355b5b7944c57","prob_desc_created_at":"1545572100","source_code":"import java.io.*;\nimport java.util.*;\n\npublic class Pascal {\n\n    static PrintWriter out = new PrintWriter(System.out);\n    static BufferedReader br;\n    static StringTokenizer st;\n\n\n    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n        int n = nextInt();\n        int k = nextInt();\n        int min = Integer.MAX_VALUE;\n        for (int i = 1; i < k; i++) {\n            if (n % i == 0) {\n                int x = (n \/ (i % k)) * k + i;\n                if(x < min) min = x;\n            }\n        }\n        out.print(min);\n        out.close();\n    }\n\n    static int nextInt() throws IOException {\n        if (st == null || !st.hasMoreElements()) st = new StringTokenizer(br.readLine());\n        return Integer.parseInt(st.nextToken());\n    }\n\n    static long nextLong() throws IOException {\n        if (st == null || !st.hasMoreElements()) st = new StringTokenizer(br.readLine());\n        return Long.parseLong(st.nextToken());\n    }\n\n    static String next() throws IOException {\n        if (st == null || !st.hasMoreElements()) st = new StringTokenizer(br.readLine());\n        return st.nextToken();\n    }\n}\n\n","prob_desc_sample_outputs":"[\"11\", \"3\", \"10\"]","lang_cluster":"Java","code_uid":"49013fa3fea701a5c49bd1a4d423301f","prob_desc_notes":"NoteThe result of integer division $$$a~\\mathrm{div}~b$$$ is equal to the largest integer $$$c$$$ such that $$$b \\cdot c \\leq a$$$. $$$a$$$ modulo $$$b$$$ (shortened $$$a \\bmod b$$$) is the only integer $$$c$$$ such that $$$0 \\leq c &lt; b$$$, and $$$a - c$$$ is divisible by $$$b$$$.In the first sample, $$$11~\\mathrm{div}~3 = 3$$$ and $$$11 \\bmod 3 = 2$$$. Since $$$3 \\cdot 2 = 6$$$, then $$$x = 11$$$ is a solution to $$$(x~\\mathrm{div}~3) \\cdot (x \\bmod 3) = 6$$$. One can see that $$$19$$$ is the only other positive integer solution, hence $$$11$$$ is the smallest one.","prob_desc_output_spec":"Print a single integer $$$x$$$\u00a0\u2014 the smallest positive integer solution to $$$(x~\\mathrm{div}~k) \\cdot (x \\bmod k) = n$$$. It is guaranteed that this equation has at least one positive integer solution.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya likes to solve equations. Today he wants to solve $$$(x~\\mathrm{div}~k) \\cdot (x \\bmod k) = n$$$, where $$$\\mathrm{div}$$$ and $$$\\mathrm{mod}$$$ stand for integer division and modulo operations (refer to the Notes below for exact definition). In this equation, $$$k$$$ and $$$n$$$ are positive integer parameters, and $$$x$$$ is a positive integer unknown. If there are several solutions, Vasya wants to find the smallest possible $$$x$$$. Can you help him?","hidden_unit_tests":"[{\"input\": \"6 3\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 6\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1000000 1000\\r\\n\", \"output\": [\"1250800\"]}, {\"input\": \"999983 1000\\r\\n\", \"output\": [\"999983001\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"100 2\\r\\n\", \"output\": [\"201\"]}, {\"input\": \"101 10\\r\\n\", \"output\": [\"1011\"]}, {\"input\": \"1 1000\\r\\n\", \"output\": [\"1001\"]}, {\"input\": \"2 997\\r\\n\", \"output\": [\"999\"]}, {\"input\": \"1000000 2\\r\\n\", \"output\": [\"2000001\"]}, {\"input\": \"524288 2\\r\\n\", \"output\": [\"1048577\"]}, {\"input\": \"720720 1000\\r\\n\", \"output\": [\"728990\"]}, {\"input\": \"810000 901\\r\\n\", \"output\": [\"811800\"]}, {\"input\": \"123456 789\\r\\n\", \"output\": [\"152131\"]}, {\"input\": \"666666 666\\r\\n\", \"output\": [\"813732\"]}, {\"input\": \"808201 900\\r\\n\", \"output\": [\"809999\"]}, {\"input\": \"996004 999\\r\\n\", \"output\": [\"998000\"]}, {\"input\": \"994009 997\\r\\n\", \"output\": [\"991026974\"]}, {\"input\": \"9 8\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"999883 200\\r\\n\", \"output\": [\"199976601\"]}, {\"input\": \"23 36\\r\\n\", \"output\": [\"59\"]}, {\"input\": \"199942 1000\\r\\n\", \"output\": [\"99971002\"]}, {\"input\": \"999002 457\\r\\n\", \"output\": [\"228271959\"]}, {\"input\": \"999995 1000\\r\\n\", \"output\": [\"199999005\"]}, {\"input\": \"1593 66\\r\\n\", \"output\": [\"1841\"]}, {\"input\": \"22248 608\\r\\n\", \"output\": [\"33244\"]}]","length":42,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\\n4\\n6\\n9\"]","prob_desc_input_spec":"Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\leq t \\leq 10$$$). Description of the test cases follows. Each test case consists of a single integer $$$n$$$ ($$$2 \\leq n \\leq 10^{9}$$$).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"3fd60db24b1873e906d6dee9c2508ac5","prob_desc_created_at":"1594479900","source_code":"import java.util.*;\npublic class Main {\n\n\tpublic static int primefactors(long n){\n\t\tfor (int i=3;i<=Math.sqrt(n);i+=2){\n\t\t\tif(n%i==0){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn 0;\n\t}\n\tpublic static void main(String[] args) {\n\t\t\/\/ TODO Auto-generated method stub\nScanner sc = new Scanner (System.in);\nint m=0;\nint t=sc .nextInt();\n\nwhile(t-->0){\n\tlong n=sc .nextLong();\n\tif (n%2==0){\n\t\tSystem.out.println( n\/2+\" \"+n\/2);\n\t\t\n\t\n\t}\n\telse{\n\t\t\n\tm=primefactors(n);\n\tif(m!=0){\n\tSystem.out.println((n\/m)+\" \"+(n-n\/m));\n\t}\n\telse{\n\t\tSystem.out.println(1+\" \"+ (n-1));\n\t}\n\t\n\t}\n\n}}}\n","prob_desc_sample_outputs":"[\"2 2\\n3 3\\n3 6\"]","lang_cluster":"Java","code_uid":"c88fe8fb4256ba6c7b69058c9b6673ef","prob_desc_notes":"NoteFor the first test case, the numbers we can choose are $$$1, 3$$$ or $$$2, 2$$$. $$$LCM(1, 3) = 3$$$ and $$$LCM(2, 2) = 2$$$, so we output $$$2 \\ 2$$$.For the second test case, the numbers we can choose are $$$1, 5$$$, $$$2, 4$$$, or $$$3, 3$$$. $$$LCM(1, 5) = 5$$$, $$$LCM(2, 4) = 4$$$, and $$$LCM(3, 3) = 3$$$, so we output $$$3 \\ 3$$$.For the third test case, $$$LCM(3, 6) = 6$$$. It can be shown that there are no other pairs of numbers which sum to $$$9$$$ that have a lower $$$LCM$$$.","prob_desc_output_spec":"For each test case, output two positive integers $$$a$$$ and $$$b$$$, such that $$$a + b = n$$$ and $$$LCM(a, b)$$$ is the minimum possible.","prob_desc_output_to":"standard output","prob_desc_description":"In Omkar's last class of math, he learned about the least common multiple, or $$$LCM$$$. $$$LCM(a, b)$$$ is the smallest positive integer $$$x$$$ which is divisible by both $$$a$$$ and $$$b$$$.Omkar, having a laudably curious mind, immediately thought of a problem involving the $$$LCM$$$ operation: given an integer $$$n$$$, find positive integers $$$a$$$ and $$$b$$$ such that $$$a + b = n$$$ and $$$LCM(a, b)$$$ is the minimum value possible.Can you help Omkar solve his ludicrously challenging math problem?","hidden_unit_tests":"[{\"input\": \"3\\r\\n4\\r\\n6\\r\\n9\\r\\n\", \"output\": [\"2 2\\r\\n3 3\\r\\n3 6\"]}, {\"input\": \"3\\r\\n4\\r\\n5\\r\\n2\\r\\n\", \"output\": [\"2 2\\r\\n1 4\\r\\n1 1\"]}, {\"input\": \"8\\r\\n527\\r\\n622\\r\\n63\\r\\n423\\r\\n147\\r\\n791\\r\\n838\\r\\n903\\r\\n\", \"output\": [\"31 496\\r\\n311 311\\r\\n21 42\\r\\n141 282\\r\\n49 98\\r\\n113 678\\r\\n419 419\\r\\n301 602\"]}, {\"input\": \"6\\r\\n861605021\\r\\n68328580\\r\\n877214985\\r\\n692261986\\r\\n3399371\\r\\n684035729\\r\\n\", \"output\": [\"1 861605020\\r\\n34164290 34164290\\r\\n292404995 584809990\\r\\n346130993 346130993\\r\\n199963 3199408\\r\\n52618133 631417596\"]}, {\"input\": \"10\\r\\n201963219\\r\\n303973760\\r\\n54544086\\r\\n751923241\\r\\n687055210\\r\\n1649300\\r\\n203977471\\r\\n402504158\\r\\n14556710\\r\\n207186606\\r\\n\", \"output\": [\"67321073 134642146\\r\\n151986880 151986880\\r\\n27272043 27272043\\r\\n17486587 734436654\\r\\n343527605 343527605\\r\\n824650 824650\\r\\n1 203977470\\r\\n201252079 201252079\\r\\n7278355 7278355\\r\\n103593303 103593303\"]}, {\"input\": \"8\\r\\n4\\r\\n10\\r\\n9\\r\\n2\\r\\n6\\r\\n2\\r\\n6\\r\\n6\\r\\n\", \"output\": [\"2 2\\r\\n5 5\\r\\n3 6\\r\\n1 1\\r\\n3 3\\r\\n1 1\\r\\n3 3\\r\\n3 3\"]}, {\"input\": \"2\\r\\n7\\r\\n8\\r\\n\", \"output\": [\"1 6\\r\\n4 4\"]}, {\"input\": \"6\\r\\n294048\\r\\n763985\\r\\n486901\\r\\n359327\\r\\n977269\\r\\n431116\\r\\n\", \"output\": [\"147024 147024\\r\\n152797 611188\\r\\n1471 485430\\r\\n1 359326\\r\\n1 977268\\r\\n215558 215558\"]}, {\"input\": \"2\\r\\n328547178\\r\\n28450577\\r\\n\", \"output\": [\"164273589 164273589\\r\\n1 28450576\"]}, {\"input\": \"1\\r\\n42443736\\r\\n\", \"output\": [\"21221868 21221868\"]}, {\"input\": \"1\\r\\n646185419\\r\\n\", \"output\": [\"58744129 587441290\"]}, {\"input\": \"1\\r\\n784975562\\r\\n\", \"output\": [\"392487781 392487781\"]}, {\"input\": \"1\\r\\n142930164\\r\\n\", \"output\": [\"71465082 71465082\"]}, {\"input\": \"10\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n1000000000\\r\\n\", \"output\": [\"500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\\r\\n500000000 500000000\"]}, {\"input\": \"1\\r\\n1000000000\\r\\n\", \"output\": [\"500000000 500000000\"]}, {\"input\": \"1\\r\\n2\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"10\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n999999733\\r\\n\", \"output\": [\"1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\\r\\n1 999999732\"]}, {\"input\": \"10\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n996788159\\r\\n\", \"output\": [\"31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\\r\\n31627 996756532\"]}, {\"input\": \"6\\r\\n988945538\\r\\n826161801\\r\\n753987902\\r\\n90107430\\r\\n303400713\\r\\n958438508\\r\\n\", \"output\": [\"494472769 494472769\\r\\n275387267 550774534\\r\\n376993951 376993951\\r\\n45053715 45053715\\r\\n101133571 202267142\\r\\n479219254 479219254\"]}, {\"input\": \"7\\r\\n13881727\\r\\n399705329\\r\\n4040273\\r\\n562529221\\r\\n51453229\\r\\n165146341\\r\\n104085043\\r\\n\", \"output\": [\"21589 13860138\\r\\n25933 399679396\\r\\n20509 4019764\\r\\n28111 562501110\\r\\n10211 51443018\\r\\n17291 165129050\\r\\n16363 104068680\"]}, {\"input\": \"3\\r\\n312736423\\r\\n170982179\\r\\n270186827\\r\\n\", \"output\": [\"19031 312717392\\r\\n21701 170960478\\r\\n16979 270169848\"]}, {\"input\": \"7\\r\\n21103739\\r\\n157343101\\r\\n218561743\\r\\n285460211\\r\\n3775711\\r\\n806739229\\r\\n255032251\\r\\n\", \"output\": [\"19853 21083886\\r\\n16673 157326428\\r\\n15139 218546604\\r\\n25309 285434902\\r\\n7753 3767958\\r\\n30781 806708448\\r\\n16063 255016188\"]}, {\"input\": \"2\\r\\n30849937\\r\\n619420033\\r\\n\", \"output\": [\"22469 30827468\\r\\n27961 619392072\"]}, {\"input\": \"1\\r\\n792717909\\r\\n\", \"output\": [\"264239303 528478606\"]}, {\"input\": \"6\\r\\n682299640\\r\\n402232729\\r\\n615880174\\r\\n837345547\\r\\n139232179\\r\\n210082106\\r\\n\", \"output\": [\"341149820 341149820\\r\\n1 402232728\\r\\n307940087 307940087\\r\\n156601 837188946\\r\\n6053573 133178606\\r\\n105041053 105041053\"]}, {\"input\": \"9\\r\\n203197635\\r\\n675378503\\r\\n971363026\\r\\n746226358\\r\\n441100327\\r\\n941328384\\r\\n321242664\\r\\n890263904\\r\\n284574795\\r\\n\", \"output\": [\"67732545 135465090\\r\\n35546237 639832266\\r\\n485681513 485681513\\r\\n373113179 373113179\\r\\n35257 441065070\\r\\n470664192 470664192\\r\\n160621332 160621332\\r\\n445131952 445131952\\r\\n94858265 189716530\"]}, {\"input\": \"2\\r\\n565258040\\r\\n932782779\\r\\n\", \"output\": [\"282629020 282629020\\r\\n310927593 621855186\"]}, {\"input\": \"10\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n998244353\\r\\n\", \"output\": [\"1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\\r\\n1 998244352\"]}]","length":38,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\", \"4\"]","prob_desc_input_spec":"The single line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091017). Please, do not use the %lld specifier to read or write 64 bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"7e7b59f2112fd200ee03255c0c230ebd","prob_desc_created_at":"1374913800","source_code":"import java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.util.InputMismatchException;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.NoSuchElementException;\nimport java.io.Writer;\nimport java.math.BigInteger;\nimport java.io.InputStream;\n\n\/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Alex\n *\/\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskA {\n    public void solve(int testNumber, InputReader in, OutputWriter out) {\n\t\tlong n = in.readLong(), res = 1, p = 3;\n\t\twhile (p < n) {\n\t\t\tif (n % p != 0) res = Math.max(res, n \/ p + 1);\n\t\t\tp *= 3;\n\t\t}\n\t\tout.print(res);\n\t}\n}\n\nclass InputReader {\n\tprivate InputStream stream;\n\tprivate byte[] buf = new byte[1024];\n\tprivate int curChar;\n\tprivate int numChars;\n\tprivate SpaceCharFilter filter;\n\n\tpublic InputReader(InputStream stream) {\n\t\tthis.stream = stream;\n\t}\n\n\tpublic int read() {\n\t\tif (numChars == -1)\n\t\t\tthrow new InputMismatchException();\n\t\tif (curChar >= numChars) {\n\t\t\tcurChar = 0;\n\t\t\ttry {\n\t\t\t\tnumChars = stream.read(buf);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t\tif (numChars <= 0)\n\t\t\t\treturn -1;\n\t\t}\n\t\treturn buf[curChar++];\n\t}\n\tpublic long readLong() {\n\t\tint c = read();\n\t\twhile (isSpaceChar(c))\n\t\t\tc = read();\n\t\tint sgn = 1;\n\t\tif (c == '-') {\n\t\t\tsgn = -1;\n\t\t\tc = read();\n\t\t}\n\t\tlong res = 0;\n\t\tdo {\n\t\t\tif (c < '0' || c > '9')\n\t\t\t\tthrow new InputMismatchException();\n\t\t\tres *= 10;\n\t\t\tres += c - '0';\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(c));\n\t\treturn res * sgn;\n\t}\n\tpublic boolean isSpaceChar(int c) {\n\t\tif (filter != null)\n\t\t\treturn filter.isSpaceChar(c);\n\t\treturn isWhitespace(c);\n\t}\n\n\tpublic static boolean isWhitespace(int c) {\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t}\n\tpublic interface SpaceCharFilter {\n\t\tpublic boolean isSpaceChar(int ch);\n\t}\n}\n\nclass OutputWriter {\n\tprivate final PrintWriter writer;\n\n\tpublic OutputWriter(OutputStream outputStream) {\n\t\twriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n\t}\n\tpublic void close() {\n\t\twriter.close();\n\t}\n\tpublic void print(long i) {\n\t\twriter.print(i);\n\t}\n}\n\n","prob_desc_sample_outputs":"[\"1\", \"2\"]","lang_cluster":"Java","code_uid":"40687a19669d4776821f9ff8ef2811a6","prob_desc_notes":"NoteIn the first test case, if a buyer has exactly one coin of at least 3 marks, then, to give Gerald one mark, he will have to give this coin. In this sample, the customer can not have a coin of one mark, as in this case, he will be able to give the money to Gerald without any change.In the second test case, if the buyer had exactly three coins of 3 marks, then, to give Gerald 4 marks, he will have to give two of these coins. The buyer cannot give three coins as he wants to minimize the number of coins that he gives.","prob_desc_output_spec":"In a single line print an integer: the maximum number of coins the unlucky buyer could have paid with.","prob_desc_output_to":"standard output","prob_desc_description":"Gerald has been selling state secrets at leisure. All the secrets cost the same: n marks. The state which secrets Gerald is selling, has no paper money, only coins. But there are coins of all positive integer denominations that are powers of three: 1 mark, 3 marks, 9 marks, 27 marks and so on. There are no coins of other denominations. Of course, Gerald likes it when he gets money without the change. And all buyers respect him and try to give the desired sum without change, if possible. But this does not always happen.One day an unlucky buyer came. He did not have the desired sum without change. Then he took out all his coins and tried to give Gerald a larger than necessary sum with as few coins as possible. What is the maximum number of coins he could get?The formal explanation of the previous paragraph: we consider all the possible combinations of coins for which the buyer can not give Gerald the sum of n marks without change. For each such combination calculate the minimum number of coins that can bring the buyer at least n marks. Among all combinations choose the maximum of the minimum number of coins. This is the number we want.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100000000000000000\\r\\n\", \"output\": [\"33333333333333334\"]}, {\"input\": \"99999999999999999\\r\\n\", \"output\": [\"3703703703703704\"]}, {\"input\": \"50031545098999707\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"16677181699666569\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"72900000000000\\r\\n\", \"output\": [\"33333333334\"]}, {\"input\": \"99999999999999997\\r\\n\", \"output\": [\"33333333333333333\"]}, {\"input\": \"58061299250691018\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"49664023559436051\\r\\n\", \"output\": [\"128191526\"]}, {\"input\": \"66708726798666276\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"29442431889534807\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"70414767176369958\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"93886356235159944\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"97626528902553453\\r\\n\", \"output\": [\"551104613133\"]}, {\"input\": \"52013157885656046\\r\\n\", \"output\": [\"880847395988\"]}, {\"input\": \"37586570003500923\\r\\n\", \"output\": [\"548\"]}, {\"input\": \"34391854792828422\\r\\n\", \"output\": [\"582429080812\"]}, {\"input\": \"205891132094649\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"243\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5559060566555523\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"81\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"108\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1129718145924\\r\\n\", \"output\": [\"2\"]}]","length":112,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"512 megabytes","difficulty":1700.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 3\"]","prob_desc_input_spec":"The only line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 100\\,000$$$), the number of rows and the number of columns of the field.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"0f1ab296cbe0952faa904f2bebe0567b","prob_desc_created_at":"1571562300","source_code":"import java.io.*;\nimport java.util.StringTokenizer;\n\n\npublic class ivanTheFool {\n    public static long mod = 1000000007;\n    public static void fout(long x){\n        System.out.println(x);\n    }\n    \/**-----------fast reader------------*\/\n    static class FastReader \n    { \n        BufferedReader br; \n        StringTokenizer st; \n  \n        public FastReader() \n        { \n            br = new BufferedReader(new\n                     InputStreamReader(System.in)); \n        } \n  \n        String next() \n        { \n            while (st == null || !st.hasMoreElements()) \n            { \n                try\n                { \n                    st = new StringTokenizer(br.readLine()); \n                } \n                catch (IOException  e) \n                { \n                    e.printStackTrace(); \n                } \n            } \n            return st.nextToken(); \n        } \n  \n        int nextInt() \n        { \n            return Integer.parseInt(next()); \n        } \n  \n        long nextLong() \n        { \n            return Long.parseLong(next()); \n        } \n  \n        double nextDouble() \n        { \n            return Double.parseDouble(next()); \n        } \n  \n        String nextLine() \n        { \n            String str = \"\"; \n            try\n            { \n                str = br.readLine(); \n            } \n            catch (IOException e) \n            { \n                e.printStackTrace(); \n            } \n            return str; \n        } \n    } \n    \/**-----end of fast reader----------------*\/\n\n    public static long pmod(long  x,long  y){\n        long r = 1;\n        while(y > 0){\n            if(y%2 == 1){\n                r = (r * x)%mod;\n            }\n            x = (x * x)%mod;\n            y >>= 1;\n        }\n        return r;\n    }\n\n    public static void main(String[] args) {\n        FastReader rd = new FastReader();\n        long n,m;\n        n = rd.nextLong();\n        m = rd.nextLong();\n        long answer = 0;\n        long []fact = new long[200000];\n        fact[0] = 1;\n        for(long i = 1;i<200000;++i){\n            fact[(int)i] = (fact[(int)i-1]*i)%mod;\n        }\n        answer += 2;\/\/all adj cells are different\n        if(m >= 2){\n            for(long blk = 1 ; blk <= (m\/2);blk++){\n                long bins = m - (2*blk) + 1;\n                long sub = (fact[(int)(bins + blk -1)]*pmod(fact[(int)blk],mod-(long)2))%mod;\n                sub = (sub * pmod(fact[(int)bins-1],mod-(long)2))%mod;\n                sub = (2 * sub)%mod;\n                \/\/fout(sub);\n                answer = (answer + sub)%mod;\n            }\n        }\n        if(n >= 2){\n            for(long blk = 1 ; blk <= (n\/2);blk++){\n                long bins = n - (2*blk) + 1;\n                long sub = (fact[(int)(bins + blk -1)]*pmod(fact[(int)blk],mod-(long)2))%mod;\n                sub = (sub * pmod(fact[(int)bins-1],mod-(long)2))%mod;\n                sub = (2 * sub)%mod;\n                answer = (answer + sub)%mod;\n            }\n        }\n        \/\/ if(m == 1 ^ n == 1){\n        \/\/     answer = (answer + 2)%mod;\n        \/\/ }\n        fout(answer);\n    }\n}","prob_desc_sample_outputs":"[\"8\"]","lang_cluster":"Java","code_uid":"4e760af9000a875cd4c60edd15d6c42f","prob_desc_notes":"NoteThe picture below shows all possible random pictures of size $$$2$$$ by $$$3$$$.   ","prob_desc_output_spec":"Print one integer, the number of random pictures modulo $$$10^9 + 7$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Recently Ivan the Fool decided to become smarter and study the probability theory. He thinks that he understands the subject fairly well, and so he began to behave like he already got PhD in that area.To prove his skills, Ivan decided to demonstrate his friends a concept of random picture. A picture is a field of $$$n$$$ rows and $$$m$$$ columns, where each cell is either black or white. Ivan calls the picture random if for every cell it has at most one adjacent cell of the same color. Two cells are considered adjacent if they share a side.Ivan's brothers spent some time trying to explain that it's not how the randomness usually works. Trying to convince Ivan, they want to count the number of different random (according to Ivan) pictures. Two pictures are considered different if at least one cell on those two picture is colored differently. Since the number of such pictures may be quite large, print it modulo $$$10^9 + 7$$$.","hidden_unit_tests":"[{\"input\": \"2 3\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2 5\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"3 6\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 100000\\r\\n\", \"output\": [\"935236457\"]}, {\"input\": \"100000 1\\r\\n\", \"output\": [\"935236457\"]}, {\"input\": \"91697 91697\\r\\n\", \"output\": [\"999949469\"]}, {\"input\": \"86821 24538\\r\\n\", \"output\": [\"1000000005\"]}, {\"input\": \"100000 100000\\r\\n\", \"output\": [\"870472905\"]}, {\"input\": \"99999 1\\r\\n\", \"output\": [\"822870997\"]}, {\"input\": \"1 99999\\r\\n\", \"output\": [\"822870997\"]}, {\"input\": \"1 99998\\r\\n\", \"output\": [\"112365460\"]}, {\"input\": \"99998 1\\r\\n\", \"output\": [\"112365460\"]}, {\"input\": \"1 88588\\r\\n\", \"output\": [\"153641669\"]}, {\"input\": \"68869 1\\r\\n\", \"output\": [\"840775285\"]}, {\"input\": \"91248 82914\\r\\n\", \"output\": [\"542035391\"]}, {\"input\": \"99999 100000\\r\\n\", \"output\": [\"758107445\"]}, {\"input\": \"100000 99999\\r\\n\", \"output\": [\"758107445\"]}, {\"input\": \"99999 99999\\r\\n\", \"output\": [\"645741985\"]}, {\"input\": \"13771 94814\\r\\n\", \"output\": [\"581579207\"]}, {\"input\": \"99411 90913\\r\\n\", \"output\": [\"189215541\"]}, {\"input\": \"52702 64157\\r\\n\", \"output\": [\"1000000005\"]}, {\"input\": \"24538 86821\\r\\n\", \"output\": [\"1000000005\"]}]","length":117,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2500.0,"prob_desc_time_limit":"1.5 seconds","prob_desc_sample_inputs":"[\"3 1\", \"3 2\", \"2 0\", \"2 2\"]","prob_desc_input_spec":"The first line contains integers n, k (1\u2009\u2264\u2009n\u2009\u2264\u2009500;\u00a00\u2009\u2264\u2009k\u2009\u2264\u2009500).","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"111673158df2e37ac6c019bb99225ccb","prob_desc_created_at":"1398612600","source_code":"import java.io.*;\nimport java.util.*;\nimport java.math.BigInteger;\nimport java.util.Collections.*;\nimport static java.lang.Math.*;\nimport static java.lang.Math.max;\nimport static java.lang.Math.min;\nimport static java.util.Arrays.*;\nimport static java.math.BigInteger.*;\n\n\npublic class Main{\n\n    void run(){\n        Locale.setDefault(Locale.US);\n        boolean my;\n        try {\n            my = System.getProperty(\"MY_LOCAL\") != null;\n        } catch (Exception e) {\n            my = false;\n\n        }\n        try{\n            err = System.err;\n            if( my ){\n                sc  = new FastScanner(new BufferedReader(new FileReader(\"input.txt\")));\n\/\/                sc  = new FastScanner(new BufferedReader(new FileReader(\"C:\\\\myTest.txt\")));\n                out = new PrintWriter   (new FileWriter(\"output.txt\"));\n            }\n            else {\n                sc = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n                out = new PrintWriter(new OutputStreamWriter(System.out));\n            }\n\/\/            out = new PrintWriter(new OutputStreamWriter(System.out));\n        }catch(Exception e){\n            MLE();\n        }\n        if( my )\n            tBeg = System.currentTimeMillis();\n        solve();\n        if( my )\n            err.println( \"TIME: \" + (System.currentTimeMillis() - tBeg ) \/ 1e3 );\n        exit(0);\n    }\n\n    void exit( int val ){\n        err.flush();\n        out.flush();\n        System.exit(val);\n    }\n\n    double tBeg;\n    FastScanner sc;\n    PrintWriter out;\n    PrintStream err;\n\n    class FastScanner{\n\n        StringTokenizer st;\n        BufferedReader br;\n\n        FastScanner( BufferedReader _br ){\n            br = _br;\n        }\n\n        String readLine(){\n            try {\n                return br.readLine();\n            } catch (IOException e) {\n                return null;\n            }\n        }\n\n        String next(){\n            while( st==null || !st.hasMoreElements() )\n                st = new StringTokenizer(readLine());\n            return st.nextToken();\n        }\n\n        int nextInt(){ return Integer.parseInt(next()); }\n        long nextLong(){ return Long.parseLong(next()); }\n        double nextDouble(){ return Double.parseDouble(next()); }\n    }\n\n    void MLE(){\n        int[][] arr = new int[1024*1024][]; for( int i = 0; i < 1024*1024; ++i ) arr[i] = new int[1024*1024];\n    }\n\n    void MLE( boolean doNotMLE ){ if( !doNotMLE ) MLE(); }\n\n    void TLE(){\n        for(;;);\n    }\n\n    public static void main(String[] args) {\n        new Main().run();\n\/\/        new Thread( null, new Runnable() {\n\/\/            @Override\n\/\/            public void run() {\n\/\/                new Main().run();\n\/\/            }\n\/\/        }, \"Lolka\", 256_000_000L ).run();\n    }\n\n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n    final int mod = (int)1e9 + 7;\n    int n, k;\n    int[][] dp0, dp1;\n    int[] pow2 = new int[600];\n    {\n        pow2[0] = 1;\n        for (int i = 1; i < pow2.length; i++) {\n            pow2[i] = (pow2[i-1] * 2) % mod;\n        }\n    }\n\n    void solve(){\n        n = sc.nextInt();\n        k = sc.nextInt();\n        dp0 = new int[k+1][n+1];\n        dp1  = new int[k+1][n+1];\n        for (int[] val : dp0) fill(val, 0);\n\n        for (int sz = 1; sz <= n; sz++) {\n\n            for (int cnt  = 0; cnt <= k; cnt++) {\n                int[] dp1_cnt = dp1[cnt];\n                int[] dp1_cnt1 = null; if( cnt+1<=k ) dp1_cnt1 = dp1[cnt+1];\n                int[] dp0_cnt = dp0[cnt];\n                for (int last = 0; last <= sz; last++) {\n                    if( cnt == 0 ){\n                        if( last == 0 ) dp1_cnt[last] = 1;\n                        else dp1_cnt[last] = 0;\n                    }\n                    else if( sz == last ){\n                        if( cnt == 1 ){\n                            dp1_cnt[last] = pow2[last] - 1;\n                        }\n                    }\n                    else{\n                        if( dp0_cnt[last] !=0  )\n                            dp1_cnt[last] = (int)( (1L * dp0_cnt[last] * pow2[last]) % mod );\n                    }\n\n                    if( 1<=last && last <= sz-1   &&   1 <= cnt && cnt+1 <= k ){\n                        if( dp1_cnt[last] != 0 )\n                        dp1_cnt1[sz] =\n                                (int)(\n                                    (dp1_cnt1[sz] + 1L*dp1_cnt[last] * (pow2[sz-last]-1)) % mod\n                                );\n                    }\n                }\n            }\n           \/\/\n            for (int cnt  = 0; cnt <= k; cnt++) {\n                System.arraycopy( dp1[cnt],0, dp0[cnt],0, dp0[cnt].length );\n                fill( dp1[cnt], 0 );\n            }\n        }\n        long ans = 0;\n        for (int last = 0; last <= n; last++) {\n            ans += dp0[k][last];\n        }\n        ans %= mod;\n        out.println( ans );\n    }\n\n\n}","prob_desc_sample_outputs":"[\"23\", \"32\", \"1\", \"2\"]","lang_cluster":"Java","code_uid":"7034a79a4cd606d3203901d172d723af","prob_desc_notes":null,"prob_desc_output_spec":"In a single line, print the answer to the problem modulo 1000000007 (109\u2009+\u20097).","prob_desc_output_to":"standard output","prob_desc_description":"Let's assume that set S consists of m distinct intervals [l1,\u2009r1], [l2,\u2009r2], ..., [lm,\u2009rm] (1\u2009\u2264\u2009li\u2009\u2264\u2009ri\u2009\u2264\u2009n; li,\u2009ri are integers).Let's assume that f(S) is the maximum number of intervals that you can choose from the set S, such that every two of them do not intersect. We assume that two intervals, [l1,\u2009r1] and [l2,\u2009r2], intersect if there is an integer x, which meets two inequalities: l1\u2009\u2264\u2009x\u2009\u2264\u2009r1 and l2\u2009\u2264\u2009x\u2009\u2264\u2009r2.Sereja wonders, how many sets S are there, such that f(S)\u2009=\u2009k? Count this number modulo 1000000007 (109\u2009+\u20097).","hidden_unit_tests":"[{\"input\": \"3 1\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"2 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"20 10\\r\\n\", \"output\": [\"169364726\"]}, {\"input\": \"50 49\\r\\n\", \"output\": [\"560578792\"]}, {\"input\": \"50 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 9\\r\\n\", \"output\": [\"391716853\"]}, {\"input\": \"100 10\\r\\n\", \"output\": [\"209177805\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"281603733\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"599757793\"]}, {\"input\": \"100 50\\r\\n\", \"output\": [\"820383341\"]}, {\"input\": \"99 60\\r\\n\", \"output\": [\"97903617\"]}, {\"input\": \"95 93\\r\\n\", \"output\": [\"483334618\"]}, {\"input\": \"400 399\\r\\n\", \"output\": [\"760864214\"]}, {\"input\": \"500 499\\r\\n\", \"output\": [\"582854781\"]}, {\"input\": \"500 500\\r\\n\", \"output\": [\"731931766\"]}, {\"input\": \"400 500\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"500 20\\r\\n\", \"output\": [\"211189748\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"14720\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"1024\"]}, {\"input\": \"4 1\\r\\n\", \"output\": [\"127\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"64\"]}]","length":170,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"7\\nNonZERO\", \"24\\nthis is zero answer text\", \"24\\nHarbour Space University\"]","prob_desc_input_spec":"The first line contains one integer number n (1\u2009\u2264\u2009n\u2009\u2264\u2009200) \u2014 length of the text. The second line contains text of single-space separated words s1,\u2009s2,\u2009...,\u2009si, consisting only of small and capital Latin letters.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"d3929a9acf1633475ab16f5dfbead13c","prob_desc_created_at":"1501773300","source_code":"import java.util.Scanner;\n\npublic class TextVolume {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scn = new Scanner(System.in);\n\t\tint n = scn.nextInt();\n\t\tscn.nextLine();\n\t\tString str = scn.nextLine();\n\t\tint max = 0;\n\t\tint cn = 0;\n\t\tfor(int i = 0;i<str.length();i++){\n\t\t\tchar ch = str.charAt(i);\n\t\t\tif(ch == ' '){\n\t\t\t\tcn=0;\n\t\t\t}\n\t\t\tif(ch>='A'&& ch<='Z'){\n\t\t\t\tcn++;\n\t\t\t\tif(cn>max){\n\t\t\t\t\tmax = cn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}","prob_desc_sample_outputs":"[\"5\", \"0\", \"1\"]","lang_cluster":"Java","code_uid":"9099019cfe3b76895eb2e8db3a967e3a","prob_desc_notes":"NoteIn the first example there is only one word, there are 5 capital letters in it.In the second example all of the words contain 0 capital letters.","prob_desc_output_spec":"Print one integer number \u2014 volume of text.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a text of single-space separated words, consisting of small and capital Latin letters.Volume of the word is number of capital letters in the word. Volume of the text is maximum volume of all words in the text.Calculate the volume of the given text.","hidden_unit_tests":"[{\"input\": \"7\\r\\nNonZERO\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"24\\r\\nthis is zero answer text\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"24\\r\\nHarbour Space University\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\nWM\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"200\\r\\nLBmJKQLCKUgtTxMoDsEerwvLOXsxASSydOqWyULsRcjMYDWdDCgaDvBfATIWPVSXlbcCLHPYahhxMEYUiaxoCebghJqvmRnaNHYTKLeOiaLDnATPZAOgSNfBzaxLymTGjfzvTegbXsAthTxyDTcmBUkqyGlVGZhoazQzVSoKbTFcCRvYsgSCwjGMxBfWEwMHuagTBxkz\\r\\n\", \"output\": [\"105\"]}, {\"input\": \"199\\r\\no A r v H e J q k J k v w Q F p O R y R Z o a K R L Z E H t X y X N y y p b x B m r R S q i A x V S u i c L y M n N X c C W Z m S j e w C w T r I S X T D F l w o k f t X u n W w p Z r A k I Y E h s g\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200\\r\\nhCyIdivIiISmmYIsCLbpKcTyHaOgTUQEwnQACXnrLdHAVFLtvliTEMlzBVzTesQbhXmcqvwPDeojglBMIjOXANfyQxCSjOJyO SIqOTnRzVzseGIDDYNtrwIusScWSuEhPyEmgQIVEzXofRptjeMzzhtUQxJgcUWILUhEaaRmYRBVsjoqgmyPIKwSajdlNPccOOtWrez\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1\\r\\ne\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\nA\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200\\r\\nABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ KLMNOPRSTU KLMNOPRSTU KLMNOPRSTU VWXYZABCDE KLMNOPRSTU KLMNOPRSTU KLMNOPRSTU KLMNOPRSTU KZ\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"200\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\", \"output\": [\"200\"]}, {\"input\": \"200\\r\\nffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"24\\r\\nHarbour Space UniversitY\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\naA AA\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\nas AS ASDA\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10\\r\\nas AS ASDZ\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3\\r\\na A\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"24\\r\\nHarbour space UniversitY\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\nas AS ASAa\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"15\\r\\naAb ABCDFGRHTJS\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"53\\r\\nsdfAZEZR AZE dfdf dsdRFGSDF ZZDZSD dfsd ERBGF dsfsdfR\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"10\\r\\nABC ABc AB\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10\\r\\nA c de CDE\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\nA AB\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"18\\r\\nHARbour Space UNIV\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"13\\r\\na b c d e f A\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"6\\r\\nA B CA\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\naa A\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\nA a\\r\\n\", \"output\": [\"1\"]}]","length":26,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\", \"4 10 2\\n2 3 8\\n3 4 7\"]","prob_desc_input_spec":"The first line contains three integers $$$n$$$, $$$h$$$, and $$$m$$$ ($$$1 \\leq n,h,m \\leq 50$$$)\u00a0\u2014 the number of spots, the maximum height, and the number of restrictions. Each of the next $$$m$$$ lines contains three integers $$$l_i$$$, $$$r_i$$$, and $$$x_i$$$ ($$$1 \\leq l_i \\leq r_i \\leq n$$$, $$$0 \\leq x_i \\leq h$$$)\u00a0\u2014 left and right limits (inclusive) of the $$$i$$$-th restriction and the maximum possible height in that range.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"f22b6dab443f63fb8d2d288b702f20ad","prob_desc_created_at":"1556989500","source_code":"import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class ZonesNew {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint h = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint r[][]= new int[m][3];\n\t\tint a[] = new int[n];\n\t\tArrays.fill(a,h);\n\t\tfor(int i=0;i<m;i++) {\n\t\t\tr[i][0] = sc.nextInt();\n\t\t\tr[i][1] = sc.nextInt();\n\t\t\tr[i][2] = sc.nextInt();\n\t\t\tfor(int j=r[i][0];j<=r[i][1];j++){\n\t\t\t\tif(a[j-1]>r[i][2])\n\t\t\t\ta[j-1]=r[i][2];\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tsum += a[i]*a[i];\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}","prob_desc_sample_outputs":"[\"14\", \"262\"]","lang_cluster":"Java","code_uid":"80b50076a6c38f13677152aff48c438d","prob_desc_notes":"NoteIn the first example, there are $$$3$$$ houses, the maximum height of a house is $$$3$$$, and there are $$$3$$$ restrictions. The first restriction says the tallest house between $$$1$$$ and $$$1$$$ must be at most $$$1$$$. The second restriction says the tallest house between $$$2$$$ and $$$2$$$ must be at most $$$3$$$. The third restriction says the tallest house between $$$3$$$ and $$$3$$$ must be at most $$$2$$$.In this case, it is optimal to build houses with heights $$$[1, 3, 2]$$$. This fits within all the restrictions. The total profit in this case is $$$1^2 + 3^2 + 2^2 = 14$$$.In the second example, there are $$$4$$$ houses, the maximum height of a house is $$$10$$$, and there are $$$2$$$ restrictions. The first restriction says the tallest house from $$$2$$$ to $$$3$$$ must be at most $$$8$$$. The second restriction says the tallest house from $$$3$$$ to $$$4$$$ must be at most $$$7$$$.In this case, it's optimal to build houses with heights $$$[10, 8, 7, 7]$$$. We get a profit of $$$10^2+8^2+7^2+7^2 = 262$$$. Note that there are two restrictions on house $$$3$$$ and both of them must be satisfied. Also, note that even though there isn't any explicit restrictions on house $$$1$$$, we must still limit its height to be at most $$$10$$$ ($$$h=10$$$).","prob_desc_output_spec":"Print a single integer, the maximum profit you can make.","prob_desc_output_to":"standard output","prob_desc_description":"You are planning to build housing on a street. There are $$$n$$$ spots available on the street on which you can build a house. The spots are labeled from $$$1$$$ to $$$n$$$ from left to right. In each spot, you can build a house with an integer height between $$$0$$$ and $$$h$$$.In each spot, if a house has height $$$a$$$, you will gain $$$a^2$$$ dollars from it.The city has $$$m$$$ zoning restrictions. The $$$i$$$-th restriction says that the tallest house from spots $$$l_i$$$ to $$$r_i$$$ (inclusive) must be at most $$$x_i$$$.You would like to build houses to maximize your profit. Determine the maximum profit possible.","hidden_unit_tests":"[{\"input\": \"3 3 3\\r\\n1 1 1\\r\\n2 2 3\\r\\n3 3 2\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"4 10 2\\r\\n2 3 8\\r\\n3 4 7\\r\\n\", \"output\": [\"262\"]}, {\"input\": \"50 50 1\\r\\n1 50 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50 50 50\\r\\n17 40 12\\r\\n33 36 47\\r\\n8 43 35\\r\\n25 29 42\\r\\n18 36 6\\r\\n25 35 18\\r\\n36 48 47\\r\\n17 40 13\\r\\n20 27 37\\r\\n32 32 28\\r\\n17 20 13\\r\\n4 14 6\\r\\n13 18 47\\r\\n18 45 28\\r\\n3 50 45\\r\\n6 6 6\\r\\n3 25 36\\r\\n28 48 42\\r\\n14 34 32\\r\\n28 41 35\\r\\n29 35 25\\r\\n25 48 24\\r\\n32 40 40\\r\\n18 38 44\\r\\n6 16 2\\r\\n1 36 7\\r\\n14 48 2\\r\\n18 29 40\\r\\n11 16 37\\r\\n8 40 19\\r\\n12 16 44\\r\\n44 46 21\\r\\n19 24 26\\r\\n24 45 44\\r\\n22 22 15\\r\\n6 15 32\\r\\n19 42 7\\r\\n21 33 20\\r\\n1 13 26\\r\\n16 27 40\\r\\n46 48 30\\r\\n21 39 1\\r\\n1 9 32\\r\\n14 34 20\\r\\n35 38 11\\r\\n19 47 23\\r\\n13 38 15\\r\\n28 29 28\\r\\n7 20 40\\r\\n2 21 46\\r\\n\", \"output\": [\"4384\"]}, {\"input\": \"50 50 50\\r\\n20 34 50\\r\\n10 36 27\\r\\n46 49 19\\r\\n15 22 21\\r\\n5 10 21\\r\\n40 47 0\\r\\n26 43 48\\r\\n15 34 5\\r\\n29 48 49\\r\\n2 45 25\\r\\n5 40 42\\r\\n1 27 0\\r\\n43 50 47\\r\\n5 19 23\\r\\n1 42 20\\r\\n18 50 16\\r\\n13 38 14\\r\\n14 30 22\\r\\n5 26 2\\r\\n32 46 15\\r\\n10 49 37\\r\\n33 37 24\\r\\n10 31 45\\r\\n16 45 37\\r\\n22 41 7\\r\\n23 49 29\\r\\n22 44 49\\r\\n3 44 22\\r\\n26 32 4\\r\\n30 40 19\\r\\n19 28 5\\r\\n6 34 14\\r\\n16 21 40\\r\\n12 43 46\\r\\n9 36 42\\r\\n2 19 39\\r\\n13 45 12\\r\\n2 30 6\\r\\n5 28 35\\r\\n18 45 7\\r\\n39 46 29\\r\\n29 43 33\\r\\n3 16 24\\r\\n20 40 24\\r\\n35 36 8\\r\\n2 14 8\\r\\n3 29 47\\r\\n31 32 0\\r\\n27 49 16\\r\\n1 37 45\\r\\n\", \"output\": [\"1111\"]}, {\"input\": \"50 50 50\\r\\n28 29 9\\r\\n33 43 30\\r\\n12 34 3\\r\\n9 12 26\\r\\n24 39 10\\r\\n12 47 35\\r\\n29 41 47\\r\\n43 44 49\\r\\n19 37 36\\r\\n11 18 46\\r\\n19 42 20\\r\\n9 40 47\\r\\n18 34 22\\r\\n11 20 44\\r\\n5 31 44\\r\\n29 40 0\\r\\n1 26 19\\r\\n7 50 4\\r\\n14 34 48\\r\\n43 48 21\\r\\n12 49 23\\r\\n6 40 47\\r\\n22 37 50\\r\\n39 48 29\\r\\n12 34 13\\r\\n5 10 25\\r\\n30 45 46\\r\\n26 32 29\\r\\n2 4 23\\r\\n7 39 19\\r\\n22 49 42\\r\\n11 29 31\\r\\n23 50 29\\r\\n12 32 47\\r\\n4 13 18\\r\\n24 46 20\\r\\n33 34 44\\r\\n24 35 41\\r\\n39 50 47\\r\\n14 24 49\\r\\n25 44 28\\r\\n23 23 42\\r\\n32 44 40\\r\\n25 42 3\\r\\n25 31 6\\r\\n35 47 18\\r\\n22 49 2\\r\\n38 43 23\\r\\n1 27 16\\r\\n19 23 43\\r\\n\", \"output\": [\"1786\"]}, {\"input\": \"50 50 50\\r\\n24 31 47\\r\\n2 5 10\\r\\n18 22 39\\r\\n6 48 29\\r\\n30 43 25\\r\\n9 26 19\\r\\n20 40 23\\r\\n27 49 42\\r\\n41 49 50\\r\\n28 39 42\\r\\n35 37 49\\r\\n17 40 40\\r\\n26 38 21\\r\\n8 38 40\\r\\n10 28 19\\r\\n30 41 9\\r\\n2 13 24\\r\\n29 42 36\\r\\n20 49 17\\r\\n3 48 1\\r\\n33 38 10\\r\\n5 37 20\\r\\n7 21 30\\r\\n35 38 22\\r\\n37 38 19\\r\\n16 43 47\\r\\n46 50 16\\r\\n4 13 36\\r\\n18 20 41\\r\\n26 31 19\\r\\n11 34 30\\r\\n20 23 23\\r\\n20 46 19\\r\\n10 43 49\\r\\n27 33 45\\r\\n37 45 27\\r\\n6 12 0\\r\\n38 47 27\\r\\n3 50 6\\r\\n25 41 41\\r\\n2 37 27\\r\\n25 49 24\\r\\n38 44 31\\r\\n31 36 7\\r\\n18 31 3\\r\\n6 33 2\\r\\n19 36 33\\r\\n45 50 48\\r\\n10 21 17\\r\\n8 41 42\\r\\n\", \"output\": [\"2711\"]}, {\"input\": \"50 50 50\\r\\n26 27 33\\r\\n8 29 15\\r\\n10 31 23\\r\\n7 38 33\\r\\n9 12 39\\r\\n3 18 2\\r\\n11 35 25\\r\\n8 10 33\\r\\n12 19 11\\r\\n9 44 39\\r\\n17 32 27\\r\\n17 49 9\\r\\n13 13 20\\r\\n3 9 36\\r\\n18 20 43\\r\\n24 48 19\\r\\n12 26 1\\r\\n39 49 18\\r\\n11 33 38\\r\\n7 49 7\\r\\n23 38 48\\r\\n20 22 46\\r\\n12 31 34\\r\\n21 41 15\\r\\n3 13 26\\r\\n26 30 18\\r\\n50 50 12\\r\\n20 39 18\\r\\n34 40 10\\r\\n35 45 21\\r\\n28 41 17\\r\\n17 29 40\\r\\n21 30 34\\r\\n16 34 0\\r\\n28 45 21\\r\\n4 36 8\\r\\n31 50 6\\r\\n10 48 12\\r\\n18 42 43\\r\\n43 47 32\\r\\n35 38 27\\r\\n19 26 5\\r\\n5 36 22\\r\\n33 38 38\\r\\n7 24 50\\r\\n20 23 12\\r\\n5 35 40\\r\\n2 7 19\\r\\n38 49 45\\r\\n17 39 40\\r\\n\", \"output\": [\"3477\"]}, {\"input\": \"50 50 50\\r\\n7 47 45\\r\\n22 24 8\\r\\n31 48 31\\r\\n36 47 13\\r\\n7 25 19\\r\\n2 2 17\\r\\n34 40 14\\r\\n27 33 50\\r\\n31 45 35\\r\\n4 7 4\\r\\n27 30 27\\r\\n4 41 27\\r\\n34 41 15\\r\\n2 12 17\\r\\n2 3 19\\r\\n25 47 47\\r\\n6 43 50\\r\\n4 47 23\\r\\n5 38 30\\r\\n12 43 18\\r\\n8 38 28\\r\\n6 11 13\\r\\n23 35 41\\r\\n2 39 41\\r\\n27 30 1\\r\\n28 49 46\\r\\n15 39 29\\r\\n18 29 22\\r\\n37 39 33\\r\\n7 45 40\\r\\n23 49 19\\r\\n8 12 46\\r\\n21 48 26\\r\\n22 45 27\\r\\n9 35 50\\r\\n10 43 5\\r\\n13 29 22\\r\\n7 36 12\\r\\n18 37 34\\r\\n17 18 3\\r\\n17 27 4\\r\\n44 47 39\\r\\n6 10 34\\r\\n31 48 1\\r\\n32 45 33\\r\\n39 41 43\\r\\n5 40 4\\r\\n8 50 11\\r\\n1 45 42\\r\\n30 35 31\\r\\n\", \"output\": [\"2960\"]}, {\"input\": \"50 50 50\\r\\n14 41 31\\r\\n28 49 13\\r\\n4 19 15\\r\\n34 41 16\\r\\n37 40 34\\r\\n10 25 1\\r\\n28 35 15\\r\\n2 42 43\\r\\n2 12 47\\r\\n16 25 26\\r\\n21 48 4\\r\\n13 37 22\\r\\n16 26 15\\r\\n30 49 12\\r\\n8 40 45\\r\\n32 33 6\\r\\n6 27 2\\r\\n25 35 5\\r\\n22 42 24\\r\\n6 13 49\\r\\n23 26 14\\r\\n27 42 38\\r\\n9 34 45\\r\\n1 33 35\\r\\n42 44 7\\r\\n5 7 42\\r\\n12 43 25\\r\\n5 42 4\\r\\n7 47 2\\r\\n7 10 40\\r\\n20 34 6\\r\\n2 21 12\\r\\n9 45 15\\r\\n19 45 29\\r\\n4 50 0\\r\\n1 2 12\\r\\n1 47 26\\r\\n8 16 23\\r\\n9 48 45\\r\\n23 28 20\\r\\n12 19 4\\r\\n27 37 46\\r\\n21 47 25\\r\\n33 49 5\\r\\n21 49 6\\r\\n14 32 1\\r\\n5 13 36\\r\\n7 23 34\\r\\n15 34 43\\r\\n2 24 29\\r\\n\", \"output\": [\"432\"]}, {\"input\": \"50 50 50\\r\\n14 39 43\\r\\n22 27 43\\r\\n9 11 0\\r\\n23 38 21\\r\\n13 32 23\\r\\n19 43 35\\r\\n27 29 15\\r\\n6 31 8\\r\\n19 20 35\\r\\n36 45 22\\r\\n20 26 34\\r\\n13 49 42\\r\\n13 37 40\\r\\n37 45 7\\r\\n16 41 19\\r\\n27 48 15\\r\\n15 41 8\\r\\n33 45 37\\r\\n6 33 45\\r\\n10 18 4\\r\\n12 35 27\\r\\n15 42 37\\r\\n25 28 50\\r\\n19 46 28\\r\\n7 19 12\\r\\n12 44 13\\r\\n1 12 21\\r\\n7 36 11\\r\\n19 29 21\\r\\n6 33 14\\r\\n32 41 44\\r\\n30 46 30\\r\\n1 47 30\\r\\n14 43 31\\r\\n18 37 27\\r\\n11 50 44\\r\\n26 26 7\\r\\n24 31 9\\r\\n9 13 5\\r\\n29 47 12\\r\\n6 17 3\\r\\n3 35 29\\r\\n29 41 42\\r\\n5 27 35\\r\\n14 45 3\\r\\n27 31 37\\r\\n20 33 43\\r\\n18 22 7\\r\\n12 35 44\\r\\n10 24 28\\r\\n\", \"output\": [\"6751\"]}, {\"input\": \"50 50 50\\r\\n18 30 29\\r\\n39 40 46\\r\\n19 45 35\\r\\n13 32 26\\r\\n11 28 38\\r\\n15 19 18\\r\\n25 32 15\\r\\n15 15 1\\r\\n36 40 48\\r\\n15 48 18\\r\\n7 47 12\\r\\n26 49 37\\r\\n1 8 40\\r\\n5 38 4\\r\\n13 30 18\\r\\n5 21 0\\r\\n9 32 37\\r\\n14 16 44\\r\\n24 45 15\\r\\n18 19 36\\r\\n1 48 14\\r\\n46 49 11\\r\\n2 28 4\\r\\n2 6 21\\r\\n11 49 20\\r\\n22 27 34\\r\\n17 17 43\\r\\n12 35 19\\r\\n33 46 38\\r\\n1 6 15\\r\\n44 45 31\\r\\n37 47 22\\r\\n35 44 20\\r\\n22 45 33\\r\\n28 41 3\\r\\n28 45 0\\r\\n2 47 13\\r\\n25 41 45\\r\\n1 28 14\\r\\n3 47 3\\r\\n15 41 2\\r\\n33 37 37\\r\\n39 45 33\\r\\n11 33 38\\r\\n3 42 50\\r\\n10 48 47\\r\\n3 38 49\\r\\n21 33 31\\r\\n9 41 19\\r\\n33 50 27\\r\\n\", \"output\": [\"1243\"]}, {\"input\": \"50 50 50\\r\\n13 24 16\\r\\n13 46 26\\r\\n28 37 19\\r\\n2 22 29\\r\\n1 2 2\\r\\n30 31 3\\r\\n16 23 42\\r\\n32 44 45\\r\\n11 44 9\\r\\n19 35 39\\r\\n25 44 41\\r\\n4 35 31\\r\\n33 38 39\\r\\n28 35 25\\r\\n17 26 43\\r\\n17 49 9\\r\\n22 40 42\\r\\n11 44 26\\r\\n29 48 36\\r\\n20 30 41\\r\\n11 32 0\\r\\n15 31 35\\r\\n27 30 34\\r\\n38 47 39\\r\\n23 24 25\\r\\n14 20 30\\r\\n10 25 40\\r\\n5 39 0\\r\\n5 10 7\\r\\n5 20 15\\r\\n3 10 18\\r\\n10 35 39\\r\\n27 45 9\\r\\n18 34 35\\r\\n5 15 30\\r\\n35 41 32\\r\\n23 35 20\\r\\n9 37 30\\r\\n4 39 1\\r\\n2 26 46\\r\\n9 27 1\\r\\n13 31 18\\r\\n10 26 24\\r\\n17 28 17\\r\\n4 42 48\\r\\n24 50 32\\r\\n3 19 29\\r\\n28 35 2\\r\\n20 29 20\\r\\n22 23 24\\r\\n\", \"output\": [\"2167\"]}, {\"input\": \"50 50 50\\r\\n15 21 1\\r\\n8 40 30\\r\\n25 34 4\\r\\n19 46 8\\r\\n24 32 16\\r\\n2 31 37\\r\\n18 18 43\\r\\n27 42 37\\r\\n7 28 48\\r\\n2 31 36\\r\\n43 45 19\\r\\n8 48 25\\r\\n4 26 13\\r\\n36 42 20\\r\\n15 26 18\\r\\n28 43 18\\r\\n7 32 47\\r\\n18 46 7\\r\\n9 39 5\\r\\n17 35 21\\r\\n21 24 38\\r\\n12 30 34\\r\\n18 49 38\\r\\n28 46 32\\r\\n39 41 31\\r\\n1 26 1\\r\\n14 29 35\\r\\n23 33 7\\r\\n23 32 25\\r\\n1 13 15\\r\\n17 20 5\\r\\n20 21 31\\r\\n11 43 24\\r\\n8 33 37\\r\\n6 19 6\\r\\n34 46 39\\r\\n15 44 25\\r\\n31 50 15\\r\\n11 46 11\\r\\n16 40 12\\r\\n6 8 1\\r\\n25 44 0\\r\\n22 28 15\\r\\n22 30 21\\r\\n30 44 45\\r\\n41 45 41\\r\\n22 35 36\\r\\n39 46 25\\r\\n2 12 21\\r\\n7 41 23\\r\\n\", \"output\": [\"1022\"]}, {\"input\": \"50 50 50\\r\\n17 17 39\\r\\n11 13 9\\r\\n9 43 39\\r\\n9 35 13\\r\\n23 39 31\\r\\n21 43 21\\r\\n16 17 43\\r\\n2 47 30\\r\\n23 49 9\\r\\n22 47 7\\r\\n20 34 48\\r\\n12 49 20\\r\\n13 29 12\\r\\n3 29 17\\r\\n4 30 42\\r\\n37 40 28\\r\\n16 50 24\\r\\n31 43 40\\r\\n6 26 26\\r\\n22 43 28\\r\\n7 41 24\\r\\n33 35 8\\r\\n17 23 43\\r\\n11 49 25\\r\\n21 42 37\\r\\n34 36 23\\r\\n15 44 31\\r\\n7 7 14\\r\\n4 41 44\\r\\n13 16 16\\r\\n28 36 17\\r\\n19 29 48\\r\\n7 40 14\\r\\n7 32 39\\r\\n1 42 33\\r\\n9 25 21\\r\\n15 48 30\\r\\n1 45 1\\r\\n22 45 21\\r\\n1 22 4\\r\\n47 50 0\\r\\n16 19 8\\r\\n22 38 32\\r\\n24 32 1\\r\\n31 37 43\\r\\n16 36 25\\r\\n5 41 17\\r\\n42 45 49\\r\\n23 32 48\\r\\n21 43 21\\r\\n\", \"output\": [\"94\"]}, {\"input\": \"50 50 50\\r\\n15 20 50\\r\\n11 36 39\\r\\n1 7 23\\r\\n11 25 16\\r\\n2 8 46\\r\\n44 47 5\\r\\n7 15 20\\r\\n6 35 23\\r\\n21 31 47\\r\\n14 42 3\\r\\n22 44 25\\r\\n7 12 15\\r\\n5 50 13\\r\\n29 29 38\\r\\n4 35 17\\r\\n1 23 37\\r\\n22 32 30\\r\\n17 25 21\\r\\n17 40 47\\r\\n5 31 8\\r\\n46 50 10\\r\\n21 45 32\\r\\n7 47 48\\r\\n9 48 17\\r\\n4 46 43\\r\\n20 42 19\\r\\n2 15 28\\r\\n31 34 48\\r\\n9 22 11\\r\\n4 38 16\\r\\n31 49 4\\r\\n14 34 14\\r\\n41 49 28\\r\\n6 38 41\\r\\n10 38 8\\r\\n16 26 26\\r\\n24 36 37\\r\\n9 17 37\\r\\n37 41 32\\r\\n19 39 47\\r\\n10 33 0\\r\\n20 46 41\\r\\n12 45 22\\r\\n26 34 5\\r\\n27 34 40\\r\\n23 33 10\\r\\n6 17 23\\r\\n3 9 20\\r\\n1 2 49\\r\\n20 39 19\\r\\n\", \"output\": [\"2327\"]}, {\"input\": \"50 50 50\\r\\n6 28 36\\r\\n12 22 44\\r\\n12 39 7\\r\\n19 50 20\\r\\n27 43 35\\r\\n6 12 38\\r\\n2 6 20\\r\\n15 24 15\\r\\n38 43 8\\r\\n21 22 49\\r\\n15 21 4\\r\\n20 20 8\\r\\n25 42 37\\r\\n22 40 34\\r\\n43 43 17\\r\\n17 21 22\\r\\n35 41 34\\r\\n10 41 2\\r\\n8 29 17\\r\\n9 24 38\\r\\n14 31 24\\r\\n2 10 32\\r\\n6 20 2\\r\\n41 42 11\\r\\n20 22 49\\r\\n2 7 40\\r\\n16 18 48\\r\\n8 10 4\\r\\n31 40 30\\r\\n4 7 16\\r\\n19 39 42\\r\\n1 8 6\\r\\n37 42 17\\r\\n11 34 43\\r\\n25 29 36\\r\\n6 35 8\\r\\n12 15 42\\r\\n14 35 48\\r\\n33 48 43\\r\\n34 41 38\\r\\n4 18 50\\r\\n10 22 23\\r\\n7 15 13\\r\\n24 40 35\\r\\n23 27 36\\r\\n9 50 19\\r\\n24 30 29\\r\\n8 10 44\\r\\n26 30 50\\r\\n5 23 19\\r\\n\", \"output\": [\"2979\"]}, {\"input\": \"50 50 50\\r\\n24 50 22\\r\\n26 27 22\\r\\n22 27 43\\r\\n16 48 24\\r\\n27 46 50\\r\\n2 34 22\\r\\n1 4 21\\r\\n33 48 7\\r\\n5 14 21\\r\\n37 43 19\\r\\n8 39 32\\r\\n20 21 4\\r\\n4 34 36\\r\\n12 23 29\\r\\n32 47 42\\r\\n11 32 31\\r\\n4 49 13\\r\\n3 16 35\\r\\n13 44 37\\r\\n17 29 45\\r\\n16 23 10\\r\\n25 33 5\\r\\n1 44 6\\r\\n28 49 30\\r\\n31 47 4\\r\\n13 44 11\\r\\n17 22 45\\r\\n24 40 37\\r\\n11 45 48\\r\\n4 26 17\\r\\n32 50 30\\r\\n2 10 23\\r\\n29 48 31\\r\\n30 50 19\\r\\n16 47 11\\r\\n5 48 14\\r\\n33 41 48\\r\\n8 27 34\\r\\n9 32 27\\r\\n45 47 5\\r\\n2 50 49\\r\\n8 48 31\\r\\n27 47 29\\r\\n27 46 39\\r\\n12 28 34\\r\\n4 25 5\\r\\n43 50 10\\r\\n13 19 16\\r\\n9 46 0\\r\\n41 45 16\\r\\n\", \"output\": [\"498\"]}, {\"input\": \"50 50 50\\r\\n28 33 44\\r\\n15 17 1\\r\\n25 40 10\\r\\n7 43 38\\r\\n13 23 9\\r\\n4 4 43\\r\\n25 26 43\\r\\n5 41 14\\r\\n1 49 40\\r\\n4 31 18\\r\\n41 45 22\\r\\n38 43 48\\r\\n23 30 45\\r\\n5 13 3\\r\\n1 47 13\\r\\n14 25 33\\r\\n27 32 40\\r\\n23 50 26\\r\\n2 25 20\\r\\n7 41 41\\r\\n31 41 47\\r\\n34 37 7\\r\\n6 37 14\\r\\n23 43 20\\r\\n14 49 31\\r\\n22 25 22\\r\\n12 30 36\\r\\n44 46 32\\r\\n5 48 34\\r\\n17 22 31\\r\\n39 48 14\\r\\n27 34 25\\r\\n20 41 24\\r\\n31 48 9\\r\\n19 30 11\\r\\n45 49 48\\r\\n1 28 35\\r\\n10 16 10\\r\\n36 37 46\\r\\n5 42 48\\r\\n15 50 24\\r\\n12 44 27\\r\\n14 27 9\\r\\n5 37 46\\r\\n33 48 3\\r\\n12 45 8\\r\\n5 15 37\\r\\n1 5 43\\r\\n46 47 4\\r\\n8 49 33\\r\\n\", \"output\": [\"3080\"]}, {\"input\": \"20 50 20\\r\\n4 5 18\\r\\n14 15 32\\r\\n6 13 46\\r\\n13 19 39\\r\\n2 8 18\\r\\n15 16 29\\r\\n2 8 9\\r\\n1 2 23\\r\\n1 8 8\\r\\n18 18 11\\r\\n10 16 3\\r\\n9 18 44\\r\\n9 19 31\\r\\n2 3 19\\r\\n4 19 12\\r\\n10 17 24\\r\\n9 13 20\\r\\n4 7 10\\r\\n12 20 24\\r\\n3 19 19\\r\\n\", \"output\": [\"1704\"]}, {\"input\": \"50 20 20\\r\\n4 15 1\\r\\n26 31 15\\r\\n28 40 5\\r\\n16 42 1\\r\\n10 26 10\\r\\n42 42 1\\r\\n21 49 4\\r\\n24 50 10\\r\\n7 32 12\\r\\n5 38 18\\r\\n36 41 14\\r\\n16 44 2\\r\\n23 33 4\\r\\n18 19 15\\r\\n14 21 14\\r\\n18 28 16\\r\\n29 38 13\\r\\n6 17 10\\r\\n6 44 2\\r\\n17 45 1\\r\\n\", \"output\": [\"1406\"]}, {\"input\": \"20 20 50\\r\\n10 17 9\\r\\n5 10 5\\r\\n9 18 5\\r\\n4 19 8\\r\\n10 18 4\\r\\n5 19 2\\r\\n9 11 0\\r\\n3 9 9\\r\\n11 12 6\\r\\n7 9 7\\r\\n6 19 15\\r\\n7 12 10\\r\\n5 17 18\\r\\n4 9 14\\r\\n11 11 9\\r\\n2 20 8\\r\\n2 16 9\\r\\n5 16 1\\r\\n1 2 5\\r\\n6 9 1\\r\\n8 13 15\\r\\n6 15 18\\r\\n7 13 7\\r\\n13 18 11\\r\\n1 16 17\\r\\n16 20 17\\r\\n2 19 10\\r\\n15 18 0\\r\\n2 14 11\\r\\n1 3 11\\r\\n2 3 3\\r\\n2 16 10\\r\\n6 20 7\\r\\n3 17 2\\r\\n8 13 11\\r\\n7 11 13\\r\\n1 13 14\\r\\n5 16 4\\r\\n2 3 14\\r\\n2 5 4\\r\\n4 10 6\\r\\n10 17 20\\r\\n9 13 4\\r\\n1 5 20\\r\\n7 13 6\\r\\n16 20 9\\r\\n9 16 16\\r\\n5 12 7\\r\\n2 18 14\\r\\n9 13 19\\r\\n\", \"output\": [\"102\"]}, {\"input\": \"20 50 20\\r\\n3 9 4\\r\\n4 7 11\\r\\n9 14 31\\r\\n1 6 17\\r\\n5 13 33\\r\\n17 19 11\\r\\n13 14 10\\r\\n4 12 16\\r\\n8 19 46\\r\\n8 19 7\\r\\n11 20 32\\r\\n3 18 39\\r\\n1 12 31\\r\\n4 16 15\\r\\n2 15 38\\r\\n1 2 33\\r\\n2 11 25\\r\\n7 14 17\\r\\n3 14 45\\r\\n15 18 50\\r\\n\", \"output\": [\"2204\"]}, {\"input\": \"50 20 20\\r\\n19 49 15\\r\\n8 29 12\\r\\n28 33 20\\r\\n5 40 14\\r\\n1 45 14\\r\\n15 50 17\\r\\n20 44 17\\r\\n11 18 15\\r\\n20 40 6\\r\\n16 21 6\\r\\n12 31 10\\r\\n29 49 5\\r\\n20 44 17\\r\\n16 41 10\\r\\n3 30 9\\r\\n8 36 10\\r\\n45 48 5\\r\\n6 27 12\\r\\n35 44 8\\r\\n21 42 16\\r\\n\", \"output\": [\"2727\"]}, {\"input\": \"20 20 50\\r\\n1 3 9\\r\\n2 20 19\\r\\n2 5 3\\r\\n2 8 17\\r\\n1 19 16\\r\\n1 19 1\\r\\n17 19 13\\r\\n2 6 6\\r\\n9 12 14\\r\\n15 15 3\\r\\n6 13 7\\r\\n11 17 6\\r\\n12 15 15\\r\\n4 16 5\\r\\n8 13 4\\r\\n6 12 6\\r\\n10 13 1\\r\\n2 20 15\\r\\n9 16 11\\r\\n1 13 16\\r\\n2 12 17\\r\\n13 17 13\\r\\n17 18 9\\r\\n5 6 11\\r\\n5 16 6\\r\\n3 16 0\\r\\n2 10 3\\r\\n2 17 6\\r\\n6 9 4\\r\\n4 11 2\\r\\n5 20 17\\r\\n5 20 9\\r\\n7 20 15\\r\\n5 11 20\\r\\n11 15 12\\r\\n6 18 8\\r\\n9 16 4\\r\\n2 17 14\\r\\n4 8 11\\r\\n8 15 8\\r\\n15 18 20\\r\\n7 14 15\\r\\n5 8 14\\r\\n11 13 20\\r\\n16 17 15\\r\\n1 14 13\\r\\n6 10 11\\r\\n8 19 19\\r\\n8 20 17\\r\\n3 19 2\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"20 50 20\\r\\n5 9 16\\r\\n17 17 15\\r\\n2 4 15\\r\\n6 20 22\\r\\n3 16 48\\r\\n11 13 46\\r\\n2 3 37\\r\\n7 9 8\\r\\n16 20 7\\r\\n11 19 3\\r\\n6 19 11\\r\\n3 18 34\\r\\n7 19 5\\r\\n7 17 37\\r\\n4 16 12\\r\\n13 16 42\\r\\n18 20 4\\r\\n3 8 50\\r\\n9 14 15\\r\\n17 19 5\\r\\n\", \"output\": [\"3556\"]}, {\"input\": \"50 20 20\\r\\n22 39 19\\r\\n23 37 18\\r\\n16 38 9\\r\\n30 49 15\\r\\n14 31 5\\r\\n1 29 16\\r\\n10 46 9\\r\\n27 40 16\\r\\n3 42 1\\r\\n33 38 6\\r\\n18 40 6\\r\\n3 34 5\\r\\n8 23 14\\r\\n5 9 14\\r\\n4 34 8\\r\\n1 48 16\\r\\n4 15 18\\r\\n9 46 18\\r\\n18 29 14\\r\\n25 47 20\\r\\n\", \"output\": [\"1951\"]}, {\"input\": \"20 20 50\\r\\n1 13 18\\r\\n1 18 9\\r\\n4 6 13\\r\\n2 7 17\\r\\n8 8 7\\r\\n5 11 17\\r\\n8 18 5\\r\\n8 18 11\\r\\n1 9 9\\r\\n6 15 12\\r\\n15 17 3\\r\\n2 15 10\\r\\n11 16 19\\r\\n2 17 13\\r\\n8 16 15\\r\\n6 7 0\\r\\n4 8 14\\r\\n5 8 0\\r\\n10 20 13\\r\\n6 12 3\\r\\n11 16 19\\r\\n4 14 20\\r\\n1 17 11\\r\\n7 15 7\\r\\n11 17 8\\r\\n6 17 7\\r\\n6 16 17\\r\\n5 16 3\\r\\n17 18 2\\r\\n6 14 14\\r\\n12 16 2\\r\\n2 11 16\\r\\n2 7 11\\r\\n1 14 4\\r\\n6 13 1\\r\\n1 17 10\\r\\n8 16 19\\r\\n9 13 16\\r\\n13 14 3\\r\\n8 19 12\\r\\n9 16 16\\r\\n5 10 17\\r\\n5 18 12\\r\\n1 17 15\\r\\n3 7 0\\r\\n17 18 4\\r\\n4 19 16\\r\\n6 18 9\\r\\n2 19 11\\r\\n1 4 11\\r\\n\", \"output\": [\"347\"]}, {\"input\": \"3 3 4\\r\\n1 3 1\\r\\n1 1 3\\r\\n2 2 3\\r\\n3 3 3\\r\\n\", \"output\": [\"3\"]}]","length":29,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3 2\\n50 85 250\\n10 15 25\", \"3 6\\n50 85 250\\n10 15 25\", \"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\"]","prob_desc_input_spec":"The first line contains two integers n and c (1\u2009\u2264\u2009n\u2009\u2264\u200950,\u20091\u2009\u2264\u2009c\u2009\u2264\u20091000)\u00a0\u2014 the number of problems and the constant representing the speed of loosing points. The second line contains n integers p1,\u2009p2,\u2009...,\u2009pn (1\u2009\u2264\u2009pi\u2009\u2264\u20091000,\u2009pi\u2009&lt;\u2009pi\u2009+\u20091)\u00a0\u2014 initial scores. The third line contains n integers t1,\u2009t2,\u2009...,\u2009tn (1\u2009\u2264\u2009ti\u2009\u2264\u20091000,\u2009ti\u2009&lt;\u2009ti\u2009+\u20091) where ti denotes the number of minutes one needs to solve the i-th problem.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"8c704de75ab85f9e2c04a926143c8b4a","prob_desc_created_at":"1459182900","source_code":"import java.util.Scanner;\n\npublic class A17 {\n\n\tpublic static void main(String[] args) {\n\t\t\/\/ TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint c = sc.nextInt();\n\t\tint[] score = new int[n];\n\t\tint[] minute = new int[n];\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tscore[i] = sc.nextInt();\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tminute[i] = sc.nextInt();\n\t\t}\n\n\t\tint Limak = 0;\n\t\tint l;\n\t\tint currmin = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcurrmin += minute[i];\n\t\t\tl = score[i] - (c * currmin);\n\n\t\t\tif (l > 0) {\n\t\t\t\tLimak += l;\n\t\t\t}\n\t\t}\n\n\t\tint Radewoosh = 0;\n\t\tint r;\n\t\tint curr = 0;\n\n\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\tcurr += minute[i];\n\t\t\tr = score[i] - (c * curr);\n\n\t\t\tif (r > 0) {\n\t\t\t\tRadewoosh += r;\n\t\t\t}\n\n\t\t}\n\n\t\tif (Radewoosh == Limak) {\n\t\t\tSystem.out.println(\"Tie\");\n\t\t} \n\t\telse\n\t\t\tSystem.out.println((Radewoosh > Limak) ? \"Radewoosh\" : \"Limak\");\n\n\t}\n\n}","prob_desc_sample_outputs":"[\"Limak\", \"Radewoosh\", \"Tie\"]","lang_cluster":"Java","code_uid":"11d23f879510f86a8c3e68563c6cfa6c","prob_desc_notes":"NoteIn the first sample, there are 3 problems. Limak solves them as follows:  Limak spends 10 minutes on the 1-st problem and he gets 50\u2009-\u2009c\u00b710\u2009=\u200950\u2009-\u20092\u00b710\u2009=\u200930 points.  Limak spends 15 minutes on the 2-nd problem so he submits it 10\u2009+\u200915\u2009=\u200925 minutes after the start of the contest. For the 2-nd problem he gets 85\u2009-\u20092\u00b725\u2009=\u200935 points.  He spends 25 minutes on the 3-rd problem so he submits it 10\u2009+\u200915\u2009+\u200925\u2009=\u200950 minutes after the start. For this problem he gets 250\u2009-\u20092\u00b750\u2009=\u2009150 points. So, Limak got 30\u2009+\u200935\u2009+\u2009150\u2009=\u2009215 points.Radewoosh solves problem in the reversed order:  Radewoosh solves 3-rd problem after 25 minutes so he gets 250\u2009-\u20092\u00b725\u2009=\u2009200 points.  He spends 15 minutes on the 2-nd problem so he submits it 25\u2009+\u200915\u2009=\u200940 minutes after the start. He gets 85\u2009-\u20092\u00b740\u2009=\u20095 points for this problem.  He spends 10 minutes on the 1-st problem so he submits it 25\u2009+\u200915\u2009+\u200910\u2009=\u200950 minutes after the start. He gets max(0,\u200950\u2009-\u20092\u00b750)\u2009=\u2009max(0,\u2009\u2009-\u200950)\u2009=\u20090 points. Radewoosh got 200\u2009+\u20095\u2009+\u20090\u2009=\u2009205 points in total. Limak has 215 points so Limak wins.In the second sample, Limak will get 0 points for each problem and Radewoosh will first solve the hardest problem and he will get 250\u2009-\u20096\u00b725\u2009=\u2009100 points for that. Radewoosh will get 0 points for other two problems but he is the winner anyway.In the third sample, Limak will get 2 points for the 1-st problem and 2 points for the 2-nd problem. Radewoosh will get 4 points for the 8-th problem. They won't get points for other problems and thus there is a tie because 2\u2009+\u20092\u2009=\u20094.","prob_desc_output_spec":"Print \"Limak\" (without quotes) if Limak will get more points in total. Print \"Radewoosh\" (without quotes) if Radewoosh will get more points in total. Print \"Tie\" (without quotes) if Limak and Radewoosh will get the same total number of points.","prob_desc_output_to":"standard output","prob_desc_description":"Limak and Radewoosh are going to compete against each other in the upcoming algorithmic contest. They are equally skilled but they won't solve problems in the same order.There will be n problems. The i-th problem has initial score pi and it takes exactly ti minutes to solve it. Problems are sorted by difficulty\u00a0\u2014 it's guaranteed that pi\u2009&lt;\u2009pi\u2009+\u20091 and ti\u2009&lt;\u2009ti\u2009+\u20091.A constant c is given too, representing the speed of loosing points. Then, submitting the i-th problem at time x (x minutes after the start of the contest) gives max(0,\u2009 pi\u2009-\u2009c\u00b7x) points.Limak is going to solve problems in order 1,\u20092,\u2009...,\u2009n (sorted increasingly by pi). Radewoosh is going to solve them in order n,\u2009n\u2009-\u20091,\u2009...,\u20091 (sorted decreasingly by pi). Your task is to predict the outcome\u00a0\u2014 print the name of the winner (person who gets more points at the end) or a word \"Tie\" in case of a tie.You may assume that the duration of the competition is greater or equal than the sum of all ti. That means both Limak and Radewoosh will accept all n problems.","hidden_unit_tests":"[{\"input\": \"3 2\\r\\n50 85 250\\r\\n10 15 25\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"3 6\\r\\n50 85 250\\r\\n10 15 25\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"8 1\\r\\n10 20 30 40 50 60 70 80\\r\\n8 10 58 63 71 72 75 76\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"4 1\\r\\n3 5 6 9\\r\\n1 2 4 8\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"4 1\\r\\n1 3 6 10\\r\\n1 5 7 8\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"4 1\\r\\n2 4 5 10\\r\\n2 3 9 10\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"18 4\\r\\n68 97 121 132 146 277 312 395 407 431 458 461 595 634 751 855 871 994\\r\\n1 2 3 4 9 10 13 21 22 29 31 34 37 38 39 41 48 49\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"50 1\\r\\n5 14 18 73 137 187 195 197 212 226 235 251 262 278 287 304 310 322 342 379 393 420 442 444 448 472 483 485 508 515 517 523 559 585 618 627 636 646 666 682 703 707 780 853 937 951 959 989 991 992\\r\\n30 84 113 173 199 220 235 261 266 277 300 306 310 312 347 356 394 396 397 409 414 424 446 462 468 487 507 517 537 566 594 643 656 660 662 668 706 708 773 774 779 805 820 827 868 896 929 942 961 995\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"4 1\\r\\n4 6 9 10\\r\\n2 3 4 5\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"4 1\\r\\n4 6 9 10\\r\\n3 4 5 7\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"4 1\\r\\n1 6 7 10\\r\\n2 7 8 10\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"4 1\\r\\n4 5 7 9\\r\\n1 4 5 8\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"50 1\\r\\n6 17 44 82 94 127 134 156 187 211 212 252 256 292 294 303 352 355 379 380 398 409 424 434 480 524 584 594 631 714 745 756 777 778 789 793 799 821 841 849 859 878 879 895 925 932 944 952 958 990\\r\\n15 16 40 42 45 71 99 100 117 120 174 181 186 204 221 268 289 332 376 394 403 409 411 444 471 487 499 539 541 551 567 589 619 623 639 669 689 722 735 776 794 822 830 840 847 907 917 927 936 988\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"50 10\\r\\n25 49 52 73 104 117 127 136 149 164 171 184 226 251 257 258 286 324 337 341 386 390 428 453 464 470 492 517 543 565 609 634 636 660 678 693 710 714 729 736 739 749 781 836 866 875 956 960 977 979\\r\\n2 4 7 10 11 22 24 26 27 28 31 35 37 38 42 44 45 46 52 53 55 56 57 59 60 61 64 66 67 68 69 71 75 76 77 78 79 81 83 85 86 87 89 90 92 93 94 98 99 100\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"50 10\\r\\n11 15 25 71 77 83 95 108 143 150 182 183 198 203 213 223 279 280 346 348 350 355 375 376 412 413 415 432 470 545 553 562 589 595 607 633 635 637 688 719 747 767 771 799 842 883 905 924 942 944\\r\\n1 3 5 6 7 10 11 12 13 14 15 16 19 20 21 23 25 32 35 36 37 38 40 41 42 43 47 50 51 54 55 56 57 58 59 60 62 63 64 65 66 68 69 70 71 72 73 75 78 80\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"32 6\\r\\n25 77 141 148 157 159 192 196 198 244 245 255 332 392 414 457 466 524 575 603 629 700 738 782 838 841 845 847 870 945 984 985\\r\\n1 2 4 5 8 9 10 12 13 14 15 16 17 18 20 21 22 23 24 26 28 31 38 39 40 41 42 43 45 47 48 49\\r\\n\", \"output\": [\"Radewoosh\"]}, {\"input\": \"5 1\\r\\n256 275 469 671 842\\r\\n7 9 14 17 26\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"2 1000\\r\\n1 2\\r\\n1 2\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"3 1\\r\\n1 50 809\\r\\n2 8 800\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"1 13\\r\\n866\\r\\n10\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"15 1\\r\\n9 11 66 128 199 323 376 386 393 555 585 718 935 960 971\\r\\n3 11 14 19 20 21 24 26 32 38 40 42 44 47 50\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"1 10\\r\\n546\\r\\n45\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"50 20\\r\\n21 43 51 99 117 119 158 167 175 190 196 244 250 316 335 375 391 403 423 428 451 457 460 480 487 522 539 559 566 584 598 602 604 616 626 666 675 730 771 787 828 841 861 867 886 889 898 970 986 991\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n\", \"output\": [\"Limak\"]}, {\"input\": \"50 21\\r\\n13 20 22 38 62 84 118 135 141 152 170 175 194 218 227 229 232 253 260 263 278 313 329 357 396 402 422 452 454 533 575 576 580 594 624 644 653 671 676 759 789 811 816 823 831 833 856 924 933 987\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"1 36\\r\\n312\\r\\n42\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"1 1000\\r\\n1\\r\\n1000\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"1 1\\r\\n1000\\r\\n1\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"50 35\\r\\n9 17 28 107 136 152 169 174 186 188 201 262 291 312 324 330 341 358 385 386 393 397 425 431 479 498 502 523 530 540 542 554 578 588 622 623 684 696 709 722 784 819 836 845 850 932 945 969 983 984\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n\", \"output\": [\"Tie\"]}, {\"input\": \"50 20\\r\\n12 113 116 120 138 156 167 183 185 194 211 228 234 261 278 287 310 317 346 361 364 397 424 470 496 522 527 536 611 648 668 704 707 712 717 752 761 766 815 828 832 864 872 885 889 901 904 929 982 993\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\r\\n\", \"output\": [\"Limak\"]}]","length":54,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 3\\nxyabd\", \"7 4\\nproblem\", \"2 2\\nab\", \"12 1\\nabaabbaaabbb\"]","prob_desc_input_spec":"The first line of input contains two integers\u00a0\u2014 $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 50$$$)\u00a0\u2013 the number of available stages and the number of stages to use in the rocket. The second line contains string $$$s$$$, which consists of exactly $$$n$$$ lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.","prob_desc_input_from":"standard input","lang":"Java 8","exec_outcome":"PASSED","src_uid":"56b13d313afef9dc6c6ba2758b5ea313","prob_desc_created_at":"1532617500","source_code":"import java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\n\npublic class Main{\n    public static void main(String[] args)throws IOException{\n\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\tPrintWriter out = new PrintWriter(System.out);\n\tString s[] = br.readLine().split(\" \");\n\tint n = Integer.parseInt(s[0]);\n\tint k = Integer.parseInt(s[1]);\n\tchar d[] = br.readLine().toCharArray();\n\tArrays.sort(d);\n\tint ans = Integer.MAX_VALUE;\n\tfor(int i = 0; i<n;i++){\n\t    int c = d[i]-'a'+1, p = 1;\n\t    char ul = d[i];\n\t    for(int j = i+1; j<n && p<k;j++){\n\t\tif(d[j]-ul>=2){\n\t\t    ul = d[j];\n\t\t    p++;\n\t\t    c+=d[j]-'a'+1;\n\t\t}\n\t\tif(p==k){\n\t\t    break;\n\t\t}\n\t    }\n\t    if(p==k){\n\t\tans = Math.min(ans,c);\n\t    }\n\t}\n\tout.println(ans==Integer.MAX_VALUE?-1:ans);\n\tout.close();\n    }\n}\n","prob_desc_sample_outputs":"[\"29\", \"34\", \"-1\", \"1\"]","lang_cluster":"Java","code_uid":"2fdfbe018fe0d4d0839ddd87ae28b037","prob_desc_notes":"NoteIn the first example, the following rockets satisfy the condition: \"adx\" (weight is $$$1+4+24=29$$$); \"ady\" (weight is $$$1+4+25=30$$$); \"bdx\" (weight is $$$2+4+24=30$$$); \"bdy\" (weight is $$$2+4+25=31$$$).Rocket \"adx\" has the minimal weight, so the answer is $$$29$$$.In the second example, target rocket is \"belo\". Its weight is $$$2+5+12+15=34$$$.In the third example, $$$n=k=2$$$, so the rocket must have both stages: 'a' and 'b'. This rocket doesn't satisfy the condition, because these letters are adjacent in the alphabet. Answer is -1.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the minimal total weight of the rocket or -1, if it is impossible to build the rocket at all.","prob_desc_output_to":"standard output","prob_desc_description":"Natasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string\u00a0\u2014 concatenation of letters, which correspond to the stages.There are $$$n$$$ stages available. The rocket must contain exactly $$$k$$$ of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet (skipping one letter in between, or even more). For example, after letter 'c' can't go letters 'a', 'b', 'c' and 'd', but can go letters 'e', 'f', ..., 'z'.For the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage 'a 'weighs one ton,' b 'weighs two tons, and' z'\u00a0\u2014 $$$26$$$ tons.Build the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.","hidden_unit_tests":"[{\"input\": \"5 3\\r\\nxyabd\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"7 4\\r\\nproblem\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"2 2\\r\\nab\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"12 1\\r\\nabaabbaaabbb\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 13\\r\\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"169\"]}, {\"input\": \"50 14\\r\\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 1\\r\\na\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 1\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 2\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"13 13\\r\\nuwgmkyqeiaocs\\r\\n\", \"output\": [\"169\"]}, {\"input\": \"13 13\\r\\nhzdxpbfvrltnj\\r\\n\", \"output\": [\"182\"]}, {\"input\": \"1 1\\r\\nn\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"10 8\\r\\nsmzeblyjqw\\r\\n\", \"output\": [\"113\"]}, {\"input\": \"20 20\\r\\ntzmvhskkyugkuuxpvtbh\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"30 15\\r\\nwjzolzzkfulwgioksfxmcxmnnjtoav\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"40 30\\r\\nxumfrflllrrgswehqtsskefixhcxjrxbjmrpsshv\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"50 31\\r\\nahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiabpz\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"10 7\\r\\niuiukrxcml\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"38 2\\r\\nvjzarfykmrsrvwbwfwldsulhxtykmjbnwmdufa\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"12 6\\r\\nfwseyrarkwcd\\r\\n\", \"output\": [\"61\"]}, {\"input\": \"2 2\\r\\nac\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 1\\r\\nc\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 2\\r\\nad\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 1\\r\\nac\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 3\\r\\nadjz\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"3 3\\r\\naoz\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"3 1\\r\\nzzz\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"2 1\\r\\nxz\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"5 1\\r\\naaddd\\r\\n\", \"output\": [\"1\"]}]","length":37,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"64 megabytes","difficulty":800.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"2\"]","prob_desc_input_spec":"The only line of the input contains a single integer n (2\u2009\u2264\u2009n\u2009\u2264\u20092\u00b71018) \u2014 the power in which you need to raise number 5.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"dcaff75492eafaf61d598779d6202c9d","prob_desc_created_at":"1455807600","source_code":"#include <stdio.h>\n#include <math.h>\nint main(){\n\t\tint i;\n\t\tscanf(\"%d\",&i);\n\t\tprintf(\"25\");\n\t\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"25\"]","lang_cluster":"C","code_uid":"ae3d1f11850895d2d6f7cd2ec2cd8273","prob_desc_notes":null,"prob_desc_output_spec":"Output the last two digits of 5n without spaces between them.","prob_desc_output_to":"standard output","prob_desc_description":"The HR manager was disappointed again. The last applicant failed the interview the same way as 24 previous ones. \"Do I give such a hard task?\" \u2014 the HR manager thought. \"Just raise number 5 to the power of n and get last two digits of the number. Yes, of course, n can be rather big, and one cannot find the power using a calculator, but we need people who are able to think, not just follow the instructions.\"Could you pass the interview in the machine vision company in IT City?","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"2000000000000000000\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"987654321012345678\\r\\n\", \"output\": [\"25\"]}]","length":8,"num_hidden_unit_tests":5}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1300.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"10\", \"3\"]","prob_desc_input_spec":"The first line contains a single integer k (2\u2009\u2264\u2009k\u2009\u2264\u200910) \u2014 the radix of the system.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"a705144ace798d6b41068aa284d99050","prob_desc_created_at":"1287904200","source_code":"#include <stdio.h>\n\nint tran(int a, int b){\n   int t;\n   int res = 0;\n   int pow = 1;\n   do {\n      t = a\/b;\n      res += pow *(a-(a\/b)*b);\n      a = t;\n      pow*=10;\n   } while(t>=b);\n   res +=pow*t;\n   return res;\n}\n\nint main(){\n   int b,i,j;\n   scanf(\"%d\",&b);\n   for(i = 1; i<b; i++){\n      for(j = 1; j<b; j++){\n\t printf(\"%d \",tran(i*j,b));\n      }\n      printf(\"\\n\");\n   }\n   return 0;\n}\n\n","prob_desc_sample_outputs":"[\"1  2  3  4  5  6  7  8  9\\n2  4  6  8 10 12 14 16 18\\n3  6  9 12 15 18 21 24 27\\n4  8 12 16 20 24 28 32 36\\n5 10 15 20 25 30 35 40 45\\n6 12 18 24 30 36 42 48 54\\n7 14 21 28 35 42 49 56 63\\n8 16 24 32 40 48 56 64 72\\n9 18 27 36 45 54 63 72 81\", \"1  2\\n2 11\"]","lang_cluster":"C","code_uid":"d35cee21519ef67532da37b92bf06310","prob_desc_notes":null,"prob_desc_output_spec":"Output the multiplication table for the system of notations with the radix k. The table must contain k\u2009-\u20091 rows and k\u2009-\u20091 columns. The element on the crossing of the i-th row and the j-th column is equal to the product of i and j in the system of notations with the radix k. Each line may have any number of spaces between the numbers (the extra spaces in the samples are put for clarity).","prob_desc_output_to":"standard output","prob_desc_description":"Petya studies positional notations. He has already learned to add and subtract numbers in the systems of notations with different radices and has moved on to a more complicated action \u2014 multiplication. To multiply large numbers one has to learn the multiplication table. Unfortunately, in the second grade students learn only the multiplication table of decimals (and some students even learn it in the first grade). Help Petya make a multiplication table for numbers in the system of notations with the radix k.","hidden_unit_tests":"[{\"input\": \"10\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9\\r\\n2 4 6 8 10 12 14 16 18\\r\\n3 6 9 12 15 18 21 24 27\\r\\n4 8 12 16 20 24 28 32 36\\r\\n5 10 15 20 25 30 35 40 45\\r\\n6 12 18 24 30 36 42 48 54\\r\\n7 14 21 28 35 42 49 56 63\\r\\n8 16 24 32 40 48 56 64 72\\r\\n9 18 27 36 45 54 63 72 81\", \"1 2 3 4 5 6 7 8 9 \\r\\n2 4 6 8 10 12 14 16 18 \\r\\n3 6 9 12 15 18 21 24 27 \\r\\n4 8 12 16 20 24 28 32 36 \\r\\n5 10 15 20 25 30 35 40 45 \\r\\n6 12 18 24 30 36 42 48 54 \\r\\n7 14 21 28 35 42 49 56 63 \\r\\n8 16 24 32 40 48 56 64 72 \\r\\n9 18 27 36 45 54 63 72 81\", \"1  2  3  4  5  6  7  8  9\\r\\n2  4  6  8 10 12 14 16 18\\r\\n3  6  9 12 15 18 21 24 27\\r\\n4  8 12 16 20 24 28 32 36\\r\\n5 10 15 20 25 30 35 40 45\\r\\n6 12 18 24 30 36 42 48 54\\r\\n7 14 21 28 35 42 49 56 63\\r\\n8 16 24 32 40 48 56 64 72\\r\\n9 18 27 36 45 54 63 72 81\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1  2\\r\\n2 11\", \"1 2\\r\\n2 11\", \"1 2 \\r\\n2 11\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"1 2 3 \\r\\n2 10 12 \\r\\n3 12 21\", \"1  2  3\\r\\n2 10 12\\r\\n3 12 21\", \"1 2 3\\r\\n2 10 12\\r\\n3 12 21\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"1 2 3 4 \\r\\n2 4 11 13 \\r\\n3 11 14 22 \\r\\n4 13 22 31\", \"1 2 3 4\\r\\n2 4 11 13\\r\\n3 11 14 22\\r\\n4 13 22 31\", \"1  2  3  4\\r\\n2  4 11 13\\r\\n3 11 14 22\\r\\n4 13 22 31\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"1 2 3 4 5\\r\\n2 4 10 12 14\\r\\n3 10 13 20 23\\r\\n4 12 20 24 32\\r\\n5 14 23 32 41\", \"1 2 3 4 5 \\r\\n2 4 10 12 14 \\r\\n3 10 13 20 23 \\r\\n4 12 20 24 32 \\r\\n5 14 23 32 41\", \"1  2  3  4  5\\r\\n2  4 10 12 14\\r\\n3 10 13 20 23\\r\\n4 12 20 24 32\\r\\n5 14 23 32 41\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"1 2 3 4 5 6\\r\\n2 4 6 11 13 15\\r\\n3 6 12 15 21 24\\r\\n4 11 15 22 26 33\\r\\n5 13 21 26 34 42\\r\\n6 15 24 33 42 51\", \"1 2 3 4 5 6 \\r\\n2 4 6 11 13 15 \\r\\n3 6 12 15 21 24 \\r\\n4 11 15 22 26 33 \\r\\n5 13 21 26 34 42 \\r\\n6 15 24 33 42 51\", \"1  2  3  4  5  6\\r\\n2  4  6 11 13 15\\r\\n3  6 12 15 21 24\\r\\n4 11 15 22 26 33\\r\\n5 13 21 26 34 42\\r\\n6 15 24 33 42 51\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"1  2  3  4  5  6  7\\r\\n2  4  6 10 12 14 16\\r\\n3  6 11 14 17 22 25\\r\\n4 10 14 20 24 30 34\\r\\n5 12 17 24 31 36 43\\r\\n6 14 22 30 36 44 52\\r\\n7 16 25 34 43 52 61\", \"1 2 3 4 5 6 7 \\r\\n2 4 6 10 12 14 16 \\r\\n3 6 11 14 17 22 25 \\r\\n4 10 14 20 24 30 34 \\r\\n5 12 17 24 31 36 43 \\r\\n6 14 22 30 36 44 52 \\r\\n7 16 25 34 43 52 61\", \"1 2 3 4 5 6 7\\r\\n2 4 6 10 12 14 16\\r\\n3 6 11 14 17 22 25\\r\\n4 10 14 20 24 30 34\\r\\n5 12 17 24 31 36 43\\r\\n6 14 22 30 36 44 52\\r\\n7 16 25 34 43 52 61\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 \\r\\n2 4 6 8 11 13 15 17 \\r\\n3 6 10 13 16 20 23 26 \\r\\n4 8 13 17 22 26 31 35 \\r\\n5 11 16 22 27 33 38 44 \\r\\n6 13 20 26 33 40 46 53 \\r\\n7 15 23 31 38 46 54 62 \\r\\n8 17 26 35 44 53 62 71\", \"1  2  3  4  5  6  7  8\\r\\n2  4  6  8 11 13 15 17\\r\\n3  6 10 13 16 20 23 26\\r\\n4  8 13 17 22 26 31 35\\r\\n5 11 16 22 27 33 38 44\\r\\n6 13 20 26 33 40 46 53\\r\\n7 15 23 31 38 46 54 62\\r\\n8 17 26 35 44 53 62 71\", \"1 2 3 4 5 6 7 8\\r\\n2 4 6 8 11 13 15 17\\r\\n3 6 10 13 16 20 23 26\\r\\n4 8 13 17 22 26 31 35\\r\\n5 11 16 22 27 33 38 44\\r\\n6 13 20 26 33 40 46 53\\r\\n7 15 23 31 38 46 54 62\\r\\n8 17 26 35 44 53 62 71\"]}]","length":28,"num_hidden_unit_tests":9}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\", \"5\"]","prob_desc_input_spec":"The only line of input contains a positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u200910) \u2014 the number of rows and columns of the table.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"2f650aae9dfeb02533149ced402b60dc","prob_desc_created_at":"1422705600","source_code":"#include \"stdio.h\"\nint main()\n{\n    int a[12][12],n,i,k;\n    scanf(\"%d\",&n);\n    for (i=1;i<=n;i++)\n    {\n        a[1][i] = 1;\n        a[i][1] = 1;\n    }\n    for (i=2;i<=n;i++)\n    {\n        for (k=2;k<=n;k++)\n        {\n            a[i][k] = a[i][k-1] + a[i-1][k];\n        }\n    }\n    printf(\"%d\",a[n][n]);\n    return 0;\n}","prob_desc_sample_outputs":"[\"1\", \"70\"]","lang_cluster":"C","code_uid":"9559569494ad3cd642690cba77a1d808","prob_desc_notes":"NoteIn the second test the rows of the table look as follows: {1,\u20091,\u20091,\u20091,\u20091},\u2009 {1,\u20092,\u20093,\u20094,\u20095},\u2009 {1,\u20093,\u20096,\u200910,\u200915},\u2009 {1,\u20094,\u200910,\u200920,\u200935},\u2009 {1,\u20095,\u200915,\u200935,\u200970}.","prob_desc_output_spec":"Print a single line containing a positive integer m \u2014 the maximum value in the table.","prob_desc_output_to":"standard output","prob_desc_description":"An n\u2009\u00d7\u2009n table a is defined as follows:  The first row and the first column contain ones, that is: ai,\u20091\u2009=\u2009a1,\u2009i\u2009=\u20091 for all i\u2009=\u20091,\u20092,\u2009...,\u2009n.  Each of the remaining numbers in the table is equal to the sum of the number above it and the number to the left of it. In other words, the remaining elements are defined by the formula ai,\u2009j\u2009=\u2009ai\u2009-\u20091,\u2009j\u2009+\u2009ai,\u2009j\u2009-\u20091. These conditions define all the values in the table.You are given a number n. You need to determine the maximum value in the n\u2009\u00d7\u2009n table defined by the rules above.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"70\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"252\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"924\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"12870\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"48620\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"3432\"]}]","length":20,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1100.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"2\"]","prob_desc_input_spec":"The only line of the input contains one integer n (0\u2009\u2264\u2009n\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"c046895a90f2e1381a7c1867020453bd","prob_desc_created_at":"1455807600","source_code":"#include<stdio.h>\nint main()\n{\n\tlong long int n;\n\tscanf(\"%lld\",&n);\n\n\n\tlong long int a=7+3*(n+2)*(n-1);\nprintf(\"%lld\\n\",a);\n\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"19\"]","lang_cluster":"C","code_uid":"d50bfb7d8fe860c1d048daf17a6bbe6f","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer \u2014 the number of hexagons situated not farther than n cells away from a given cell.","prob_desc_output_to":"standard output","prob_desc_description":"After a probationary period in the game development company of IT City Petya was included in a group of the programmers that develops a new turn-based strategy game resembling the well known \"Heroes of Might &amp; Magic\". A part of the game is turn-based fights of big squadrons of enemies on infinite fields where every cell is in form of a hexagon.Some of magic effects are able to affect several field cells at once, cells that are situated not farther than n cells away from the cell in which the effect was applied. The distance between cells is the minimum number of cell border crosses on a path from one cell to another.It is easy to see that the number of cells affected by a magic effect grows rapidly when n increases, so it can adversely affect the game performance. That's why Petya decided to write a program that can, given n, determine the number of cells that should be repainted after effect application, so that game designers can balance scale of the effects and the game performance. Help him to do it. Find the number of hexagons situated not farther than n cells away from a given cell.  ","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"749431\\r\\n\", \"output\": [\"1684942719577\"]}, {\"input\": \"748629743\\r\\n\", \"output\": [\"1681339478558627377\"]}, {\"input\": \"945234000\\r\\n\", \"output\": [\"2680401947103702001\"]}, {\"input\": \"900000000\\r\\n\", \"output\": [\"2430000002700000001\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"2999999997000000001\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"3000000003000000001\"]}]","length":12,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1200.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"1\", \"2\"]","prob_desc_input_spec":"The only line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091018) \u2014 the size of the field.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"816ec4cd9736f3113333ef05405b8e81","prob_desc_created_at":"1455807600","source_code":"#include<stdio.h>\nmain()\n{\n    int n,p,r,r2,t;\n    scanf(\"%d\",&n);\n    if (n%2==0)\n    {\n        r=n\/2*n\/2;\n        r2=n\/2*n\/2;\n    }\n    else\n    {\n        r=((n+1)\/2)*((n+1)\/2);\n        r2=((n-1)\/2)*((n-1)\/2);\n    }\n\n    t=r+r2;\n    if (t%2==0)\n    {\n        printf(\"2\");\n    }\n    else\n    {\n        printf(\"1\");\n    }\n\n}\n","prob_desc_sample_outputs":"[\"1\", \"2\"]","lang_cluster":"C","code_uid":"787f9cf314e2417907ed00b9a47e4caf","prob_desc_notes":null,"prob_desc_output_spec":"Output number 1, if the player making the first turn wins when both players play optimally, otherwise print number 2.","prob_desc_output_to":"standard output","prob_desc_description":"There is a legend in the IT City college. A student that failed to answer all questions on the game theory exam is given one more chance by his professor. The student has to play a game with the professor.The game is played on a square field consisting of n\u2009\u00d7\u2009n cells. Initially all cells are empty. On each turn a player chooses and paint an empty cell that has no common sides with previously painted cells. Adjacent corner of painted cells is allowed. On the next turn another player does the same, then the first one and so on. The player with no cells to paint on his turn loses.The professor have chosen the field size n and allowed the student to choose to be the first or the second player in the game. What should the student choose to win the game? Both players play optimally.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"999999999999999999\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"321392715309062180\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"95451113283177888\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"25496382240130775\\r\\n\", \"output\": [\"1\"]}]","length":27,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1400.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"5\"]","prob_desc_input_spec":"The only line of the input contains one integer n (5\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of east to west paths and north to south paths.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"92db14325cd8aee06b502c12d2e3dd81","prob_desc_created_at":"1455807600","source_code":"#include <stdio.h>\nint main (){\n\t    long long int n;\n\t\t     scanf(\"%lld\",&n);\n\t\t\t      printf(\"%lld\",n*(n-1)*(n-2)*(n-3)*(n-4)\/120*n*(n-1)*(n-2)*(n-3)*(n-4));\n\t\t\t\t\t    \n\t\t\t\t\t    return 0;\n}\n","prob_desc_sample_outputs":"[\"120\"]","lang_cluster":"C","code_uid":"ca7a34f46e5eef48abbd05d679a5ca19","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer \u2014 the number of ways to place the benches.","prob_desc_output_to":"standard output","prob_desc_description":"The city park of IT City contains n east to west paths and n north to south paths. Each east to west path crosses each north to south path, so there are n2 intersections.The city funded purchase of five benches. To make it seems that there are many benches it was decided to place them on as many paths as possible. Obviously this requirement is satisfied by the following scheme: each bench is placed on a cross of paths and each path contains not more than one bench.Help the park administration count the number of ways to place the benches.","hidden_unit_tests":"[{\"input\": \"5\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"4320\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"52920\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"1082161080\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"4594961280\"]}, {\"input\": \"72\\r\\n\", \"output\": [\"23491596420472320\"]}, {\"input\": \"83\\r\\n\", \"output\": [\"101159538130177920\"]}, {\"input\": \"95\\r\\n\", \"output\": [\"402852449038723320\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"613867215317368320\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"680185280130048000\"]}]","length":8,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1400.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"12345\"]","prob_desc_input_spec":"The only line of the input contains a positive integer five digit number for which the activation code should be found.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"51b1c216948663fff721c28d131bf18f","prob_desc_created_at":"1455807600","source_code":"#include <stdio.h>\n\n#define M\t100000\n\nint main() {\n\tint i, n, m;\n\n\tscanf(\"%d\", &n);\n\tn = n \/ 10000 * 10000 + (n \/ 100) % 10 * 1000 + n % 10 * 100 + (n \/ 10) % 10 * 10 + (n \/ 1000) % 10;\n\tm = 1;\n\tfor (i = 0; i < 5; i++)\n\t\tm = (long long) n * m % M;\n\tprintf(\"%05d\\n\", m);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"71232\"]","lang_cluster":"C","code_uid":"30ded1ddfc88047460c0b78ffedd5fde","prob_desc_notes":null,"prob_desc_output_spec":"Output exactly 5 digits without spaces between them \u2014 the found activation code of the program.","prob_desc_output_to":"standard output","prob_desc_description":"The protection of a popular program developed by one of IT City companies is organized the following way. After installation it outputs a random five digit number which should be sent in SMS to a particular phone number. In response an SMS activation code arrives.A young hacker Vasya disassembled the program and found the algorithm that transforms the shown number into the activation code. Note: it is clear that Vasya is a law-abiding hacker, and made it for a noble purpose \u2014 to show the developer the imperfection of their protection.The found algorithm looks the following way. At first the digits of the number are shuffled in the following order &lt;first digit&gt;&lt;third digit&gt;&lt;fifth digit&gt;&lt;fourth digit&gt;&lt;second digit&gt;. For example the shuffle of 12345 should lead to 13542. On the second stage the number is raised to the fifth power. The result of the shuffle and exponentiation of the number 12345 is 455\u00a0422\u00a0043\u00a0125\u00a0550\u00a0171\u00a0232. The answer is the 5 last digits of this result. For the number 12345 the answer should be 71232.Vasya is going to write a keygen program implementing this algorithm. Can you do the same?","hidden_unit_tests":"[{\"input\": \"12345\\r\\n\", \"output\": [\"71232\"]}, {\"input\": \"13542\\r\\n\", \"output\": [\"84443\"]}, {\"input\": \"71232\\r\\n\", \"output\": [\"10151\"]}, {\"input\": \"11111\\r\\n\", \"output\": [\"36551\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"00000\"]}, {\"input\": \"99999\\r\\n\", \"output\": [\"99999\"]}, {\"input\": \"91537\\r\\n\", \"output\": [\"27651\"]}, {\"input\": \"70809\\r\\n\", \"output\": [\"00000\"]}, {\"input\": \"41675\\r\\n\", \"output\": [\"61851\"]}, {\"input\": \"32036\\r\\n\", \"output\": [\"82432\"]}]","length":15,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1500.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"12\"]","prob_desc_input_spec":"The only line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091018) \u2014 the prediction on the number of people who will buy the game.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"e392be5411ffccc1df50e65ec1f5c589","prob_desc_created_at":"1455807600","source_code":"#include<stdio.h>\nint main()\n{\n\tlong long int n;\n\tscanf(\"%lld\",&n);\n\tn=n-n\/2-n\/3-n\/5-n\/7+n\/6+n\/10+n\/14+n\/15+n\/21+n\/35-n\/30-n\/105-n\/42-n\/70+n\/210;\n\tprintf(\"%lld\\n\",n);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"2\"]","lang_cluster":"C","code_uid":"be920453fabb02e87093ed0e72972756","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer showing how many numbers from 1 to n are not divisible by any number from 2 to 10.","prob_desc_output_to":"standard output","prob_desc_description":"IT City company developing computer games decided to upgrade its way to reward its employees. Now it looks the following way. After a new game release users start buying it actively, and the company tracks the number of sales with precision to each transaction. Every time when the next number of sales is not divisible by any number from 2 to 10 every developer of this game gets a small bonus.A game designer Petya knows that the company is just about to release a new game that was partly developed by him. On the basis of his experience he predicts that n people will buy the game during the first month. Now Petya wants to determine how many times he will get the bonus. Help him to know it.","hidden_unit_tests":"[{\"input\": \"12\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2519\\r\\n\", \"output\": [\"576\"]}, {\"input\": \"2521\\r\\n\", \"output\": [\"577\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"314159265\\r\\n\", \"output\": [\"71807832\"]}, {\"input\": \"718281828459045235\\r\\n\", \"output\": [\"164178703647781768\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"228571428571428571\"]}, {\"input\": \"987654321234567890\\r\\n\", \"output\": [\"225749559139329804\"]}, {\"input\": \"3628800\\r\\n\", \"output\": [\"829440\"]}, {\"input\": \"504000000000000000\\r\\n\", \"output\": [\"115200000000000000\"]}]","length":9,"num_hidden_unit_tests":10}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"512 4\", \"1000000000 9\"]","prob_desc_input_spec":"The first line of the input contains two integer numbers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 10^9$$$, $$$1 \\le k \\le 50$$$) \u2014 the number from which Tanya will subtract and the number of subtractions correspondingly.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"064162604284ce252b88050b4174ba55","prob_desc_created_at":"1567258500","source_code":"#include<stdio.h>\nint main(){\n\tint n,k;\n\tscanf(\"%d %d\",&n,&k);\n\twhile(k--){\n\t\tif(n%10) n=n-1;\n\t\telse n=n\/10;\n\t}\n\tprintf(\"%d\\n\",n);\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"50\", \"1\"]","lang_cluster":"C","code_uid":"f19b011c6873c3fb47da7985e814d181","prob_desc_notes":"NoteThe first example corresponds to the following sequence: $$$512 \\rightarrow 511 \\rightarrow 510 \\rightarrow 51 \\rightarrow 50$$$.","prob_desc_output_spec":"Print one integer number \u2014 the result of the decreasing $$$n$$$ by one $$$k$$$ times. It is guaranteed that the result will be positive integer number. ","prob_desc_output_to":"standard output","prob_desc_description":"Little girl Tanya is learning how to decrease a number by one, but she does it wrong with a number consisting of two or more digits. Tanya subtracts one from a number by the following algorithm:  if the last digit of the number is non-zero, she decreases the number by one;  if the last digit of the number is zero, she divides the number by 10 (i.e. removes the last digit). You are given an integer number $$$n$$$. Tanya will subtract one from it $$$k$$$ times. Your task is to print the result after all $$$k$$$ subtractions.It is guaranteed that the result will be positive integer number.","hidden_unit_tests":"[{\"input\": \"512 4\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1000000000 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"131203 11\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"999999999 50\\r\\n\", \"output\": [\"9999\"]}, {\"input\": \"999999999 49\\r\\n\", \"output\": [\"99990\"]}, {\"input\": \"131203 9\\r\\n\", \"output\": [\"130\"]}, {\"input\": \"900000000 16\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"909090909 50\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1001 2\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"5 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"1\"]}]","length":11,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 2 2\\n3 6 7 10\", \"5 2 1\\n100 100 100 100 100\"]","prob_desc_input_spec":"The first line contains three integers n,\u2009k,\u2009x\u00a0(1\u2009\u2264\u2009k\u2009\u2264\u2009n\u2009\u2264\u2009100,\u20091\u2009\u2264\u2009x\u2009\u2264\u200999) \u2014 the number of chores Luba has to do, the number of chores she can do in x units of time, and the number x itself. The second line contains n integer numbers ai\u00a0(2\u2009\u2264\u2009ai\u2009\u2264\u2009100) \u2014 the time Luba has to spend to do i-th chore. It is guaranteed that , and for each  ai\u2009\u2265\u2009ai\u2009-\u20091.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"92a233f8d9c73d9f33e4e6116b7d0a96","prob_desc_created_at":"1507817100","source_code":"#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n\tint i,temp=0,n,k,x,*arr;\n\tscanf(\"%d%d%d\",&n,&k,&x);\n\tarr=malloc(n*sizeof(int));\n\tfor(i=0;i<n;i++)\n\t{\n\t\tscanf(\"%d\",&arr[i]);\n\t}\n\tfor(i=n-k;i<n;i++)\n\t{\n\t\tarr[i]=x;\n\t}\n\tfor(i=0;i<n;i++)\n\t\ttemp+=arr[i];\n\tprintf(\"%d\\n\",temp);\n}","prob_desc_sample_outputs":"[\"13\", \"302\"]","lang_cluster":"C","code_uid":"f864b2603a11dfe8e99bd0234127d3a0","prob_desc_notes":"NoteIn the first example the best option would be to do the third and the fourth chore, spending x\u2009=\u20092 time on each instead of a3 and a4, respectively. Then the answer is 3\u2009+\u20096\u2009+\u20092\u2009+\u20092\u2009=\u200913.In the second example Luba can choose any two chores to spend x time on them instead of ai. So the answer is 100\u00b73\u2009+\u20092\u00b71\u2009=\u2009302.","prob_desc_output_spec":"Print one number \u2014 minimum time Luba needs to do all n chores.","prob_desc_output_to":"standard output","prob_desc_description":"Luba has to do n chores today. i-th chore takes ai units of time to complete. It is guaranteed that for every  the condition ai\u2009\u2265\u2009ai\u2009-\u20091 is met, so the sequence is sorted.Also Luba can work really hard on some chores. She can choose not more than k any chores and do each of them in x units of time instead of ai ().Luba is very responsible, so she has to do all n chores, and now she wants to know the minimum time she needs to do everything. Luba cannot do two chores simultaneously.","hidden_unit_tests":"[{\"input\": \"4 2 2\\r\\n3 6 7 10\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"5 2 1\\r\\n100 100 100 100 100\\r\\n\", \"output\": [\"302\"]}, {\"input\": \"1 1 1\\r\\n100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 1 99\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"9999\"]}, {\"input\": \"100 100 1\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 50 50\\r\\n51 51 52 53 55 55 55 55 56 56 56 57 57 58 58 59 59 59 60 60 61 61 62 62 63 64 64 64 64 65 65 65 65 66 66 66 67 68 68 68 69 69 70 70 70 70 71 71 71 71 71 71 72 72 76 76 76 76 77 79 79 81 81 81 81 82 82 82 82 83 84 85 86 87 87 88 88 88 89 89 89 90 90 90 91 91 91 92 92 93 95 95 96 96 96 97 97 98 99 100\\r\\n\", \"output\": [\"5618\"]}, {\"input\": \"100 100 1\\r\\n2 4 4 4 5 5 5 6 10 10 11 11 12 12 13 13 13 14 17 18 20 20 21 21 22 22 23 24 24 25 26 29 29 32 32 34 34 35 38 39 39 40 40 42 42 43 45 47 48 49 51 52 52 54 57 59 59 60 61 61 62 63 63 64 65 65 68 70 70 72 74 75 75 76 76 77 77 78 78 78 79 80 81 82 82 83 83 83 84 89 90 92 92 93 94 96 96 97 98 99\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 1 1\\r\\n3 3 5 7 8 8 8 9 9 9 11 13 14 15 18 18 19 20 21 22 22 25 27 27 29 31 32 33 33 34 36 37 37 38 40 42 44 44 46 47 47 48 48 48 50 50 51 51 54 54 54 55 55 56 56 56 60 61 62 62 63 64 65 65 68 70 70 71 71 71 71 75 75 76 76 79 79 79 79 81 81 82 82 86 86 86 86 88 90 90 92 96 97 97 98 98 98 98 100 100\\r\\n\", \"output\": [\"5202\"]}, {\"input\": \"100 50 49\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51\\r\\n\", \"output\": [\"4950\"]}, {\"input\": \"100 50 1\\r\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\r\\n\", \"output\": [\"151\"]}, {\"input\": \"100 1 1\\r\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"199\"]}]","length":20,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1100.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"3000\"]","prob_desc_input_spec":"The only line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091018) \u2014 the prediction on the number of people who will buy the game.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"8551308e5ff435e0fc507b89a912408a","prob_desc_created_at":"1455807600","source_code":"#include<stdio.h>\nint main()\n{\n\tlong long int i,j,n,l,a,k;\n\tscanf(\"%lld\",&n);\n\tk=2520;\n\ta=n\/k;\n\tprintf(\"%lld\\n\",a);\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"1\"]","lang_cluster":"C","code_uid":"57ea84cc35e8283d0afea7bee5d3b93f","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer showing how many numbers from 1 to n are divisible by all numbers from 2 to 10.","prob_desc_output_to":"standard output","prob_desc_description":"IT City company developing computer games invented a new way to reward its employees. After a new game release users start buying it actively, and the company tracks the number of sales with precision to each transaction. Every time when the next number of sales is divisible by all numbers from 2 to 10 every developer of this game gets a small bonus.A game designer Petya knows that the company is just about to release a new game that was partly developed by him. On the basis of his experience he predicts that n people will buy the game during the first month. Now Petya wants to determine how many times he will get the bonus. Help him to know it.","hidden_unit_tests":"[{\"input\": \"3000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2520\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2519\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2521\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"314159265\\r\\n\", \"output\": [\"124666\"]}, {\"input\": \"718281828459045235\\r\\n\", \"output\": [\"285032471610732\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"396825396825396\"]}, {\"input\": \"987654321234567890\\r\\n\", \"output\": [\"391926317950225\"]}, {\"input\": \"3628800\\r\\n\", \"output\": [\"1440\"]}, {\"input\": \"504000000000000000\\r\\n\", \"output\": [\"200000000000000\"]}]","length":10,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\nxxxiii\", \"5\\nxxoxx\", \"10\\nxxxxxxxxxx\"]","prob_desc_input_spec":"The first line contains integer $$$n$$$ $$$(3 \\le n \\le 100)$$$ \u2014 the length of the file name. The second line contains a string of length $$$n$$$ consisting of lowercase Latin letters only \u2014 the file name.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"8de14db41d0acee116bd5d8079cb2b02","prob_desc_created_at":"1582202100","source_code":"#include<stdio.h>\nint main()\n{\n    char str[100];\n    int i, count = 0, n;\n    scanf(\"%d\", &n);\n    scanf(\"%s\", str);\n    for(i = 0; i < n; i++)\n    {\n        if(str[i] == 'x' && str[i+1] == 'x' && str[i+2] == 'x')\n            count++;\n    }\n    printf(\"%d\", count);\n}\n","prob_desc_sample_outputs":"[\"1\", \"0\", \"8\"]","lang_cluster":"C","code_uid":"9a271369b5ff091a0774831dd472b695","prob_desc_notes":"NoteIn the first example Polycarp tried to send a file with name contains number $$$33$$$, written in Roman numerals. But he can not just send the file, because it name contains three letters \"x\" in a row. To send the file he needs to remove any one of this letters.","prob_desc_output_spec":"Print the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. If initially the file name dost not contain a forbidden substring \"xxx\", print 0.","prob_desc_output_to":"standard output","prob_desc_description":"You can not just take the file and send it. When Polycarp trying to send a file in the social network \"Codehorses\", he encountered an unexpected problem. If the name of the file contains three or more \"x\" (lowercase Latin letters \"x\") in a row, the system considers that the file content does not correspond to the social network topic. In this case, the file is not sent and an error message is displayed.Determine the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. Print 0 if the file name does not initially contain a forbidden substring \"xxx\".You can delete characters in arbitrary positions (not necessarily consecutive). If you delete a character, then the length of a string is reduced by $$$1$$$. For example, if you delete the character in the position $$$2$$$ from the string \"exxxii\", then the resulting string is \"exxii\".","hidden_unit_tests":"[{\"input\": \"6\\r\\nxxxiii\\r\\n\", \"output\": [\"1\\r\\n\", \"1\", \"1\\n\"]}, {\"input\": \"5\\r\\nxxoxx\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"10\\r\\nxxxxxxxxxx\\r\\n\", \"output\": [\"8\\n\", \"8\", \"8\\r\\n\"]}, {\"input\": \"100\\r\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\r\\n\", \"output\": [\"98\", \"98\\n\", \"98\\r\\n\"]}, {\"input\": \"99\\r\\nxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxa\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"3\\r\\nxxx\\r\\n\", \"output\": [\"1\\r\\n\", \"1\", \"1\\n\"]}, {\"input\": \"77\\r\\naaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxyyyzzz\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"100\\r\\nuxxxxxlmexxxxxxxwnxxexxxxxcxxfydxxxxxxvmdxxxxxxisxxxxxxxxidkxxxpxxxxxxxxmnuxxxxjxxxqcxxwmxxxxxxxxmrx\\r\\n\", \"output\": [\"41\", \"41\\r\\n\", \"41\\n\"]}, {\"input\": \"100\\r\\nxxxxxxxxxxxjtxxxxxxxxcxxxxxxcfxxxxzxxxxxxgxxxxxbxxxxbxxxxxxxxdycxxxxokixxxkizxxgcxxxxxxxxexxxxxfxxxc\\r\\n\", \"output\": [\"49\", \"49\\n\", \"49\\r\\n\"]}, {\"input\": \"100\\r\\nuxxxxxlmexxxxxxxwnxxexxxxxcxxfydxxxxxxvmdxxxxxxisxxxxxxxxidkxxxpxxxxxxxxmnuxxxxjxxxqcxxwmxxxxxwxxxxx\\r\\n\", \"output\": [\"41\", \"41\\r\\n\", \"41\\n\"]}, {\"input\": \"34\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"5\\r\\nfcyju\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"100\\r\\nihygyvdvyeifomhxhkhdkimquvgallbqharcyriyqkidnwykozuhvkwdldlztpabgyuflikychqpdenwzgtlzotyumjgdsrbxxxx\\r\\n\", \"output\": [\"2\", \"2\\n\", \"2\\r\\n\"]}]","length":14,"num_hidden_unit_tests":13}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n1001\", \"1\\n1\"]","prob_desc_input_spec":"The first line contains integer number n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the length of string s. The second line contains the string s consisting of characters \"0\" and \"1\". It is guaranteed that the string s is correct.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"ac244791f8b648d672ed3de32ce0074d","prob_desc_created_at":"1525099200","source_code":"#include <stdio.h>\n\nint main(void)\n{\n    int i, nz, no, n, x;\n    scanf(\"%d\\n\", &n);\n\n    nz = no = 0;\n\n    for (i = 0; i < n; i++) {\n        x = getchar();\n        if (x == '1') {\n            no++;\n        } else if (x == '0') {\n            nz++;\n        }\n    }\n\n    if (no >= 1) {\n        printf(\"1\");\n\n        for (i = 0; i < nz; i++) {\n            printf(\"0\");\n        }\n    } else {\n        printf(\"0\");\n    }\n\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"100\", \"1\"]","lang_cluster":"C","code_uid":"192012e7ff513754fd274147efbe0c8e","prob_desc_notes":"NoteIn the first example you can obtain the answer by the following sequence of operations: \"1001\"  \"1010\"  \"1100\"  \"100\".In the second example you can't obtain smaller answer no matter what operations you use.","prob_desc_output_spec":"Print one string \u2014 the minimum correct string that you can obtain from the given one.","prob_desc_output_to":"standard output","prob_desc_description":"String can be called correct if it consists of characters \"0\" and \"1\" and there are no redundant leading zeroes. Here are some examples: \"0\", \"10\", \"1001\".You are given a correct string s.You can perform two different operations on this string:   swap any pair of adjacent characters (for example, \"101\"  \"110\");  replace \"11\" with \"1\" (for example, \"110\"  \"10\"). Let val(s) be such a number that s is its binary representation.Correct string a is less than some other correct string b iff val(a)\u2009&lt;\u2009val(b).Your task is to find the minimum correct string that you can obtain from the given one using the operations described above. You can use these operations any number of times in any order (or even use no operations at all).","hidden_unit_tests":"[{\"input\": \"4\\r\\n1001\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n1110111100001111011111111010110011111111011110000111101101011100110110001011000000101010110101011100\\r\\n\", \"output\": [\"1000000000000000000000000000000000000000\"]}, {\"input\": \"100\\r\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\r\\n\", \"output\": [\"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1\\r\\n0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8\\r\\n10101010\\r\\n\", \"output\": [\"10000\"]}, {\"input\": \"2\\r\\n10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"3\\r\\n111\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n11100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"2\\r\\n11\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n110\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"50\\r\\n10010010000000000000000000000000000000001000000000\\r\\n\", \"output\": [\"10000000000000000000000000000000000000000000000\"]}]","length":30,"num_hidden_unit_tests":14}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 17 4\"]","prob_desc_input_spec":"The first line contains three positive integers k,\u2009n,\u2009w (1\u2009\u2009\u2264\u2009\u2009k,\u2009w\u2009\u2009\u2264\u2009\u20091000, 0\u2009\u2264\u2009n\u2009\u2264\u2009109), the cost of the first banana, initial number of dollars the soldier has and number of bananas he wants. ","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"e87d9798107734a885fd8263e1431347","prob_desc_created_at":"1432312200","source_code":"#include<stdio.h>\nint main()\n{\n    int i,k,n,w;\n    int sum=0;\n    scanf(\"%d%d%d\",&k,&n,&w);\n    for(i=1;i<=w;i++)\n    {\n        sum+=i*k;\n    }\n    if(sum>n)\n        {\n            printf(\"%d\\n\",sum-n);\n\n        }\n    else\n        printf(\"0\\n\");\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"13\"]","lang_cluster":"C","code_uid":"ddeb2120bdce3df809d4f0056d1880a2","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer \u2014 the amount of dollars that the soldier must borrow from his friend. If he doesn't have to borrow money, output 0.","prob_desc_output_to":"standard output","prob_desc_description":"A soldier wants to buy w bananas in the shop. He has to pay k dollars for the first banana, 2k dollars for the second one and so on (in other words, he has to pay i\u00b7k dollars for the i-th banana). He has n dollars. How many dollars does he have to borrow from his friend soldier to buy w bananas?","hidden_unit_tests":"[{\"input\": \"3 17 4\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"1 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 5 6\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"1 1000000000 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 0 1000\\r\\n\", \"output\": [\"500500000\"]}, {\"input\": \"859 453892 543\\r\\n\", \"output\": [\"126416972\"]}, {\"input\": \"1000 1000000000 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 500500000 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 500500001 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 500499999 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"634 87973 214\\r\\n\", \"output\": [\"14497197\"]}, {\"input\": \"432 10000 241\\r\\n\", \"output\": [\"12587552\"]}, {\"input\": \"111 111111111 111\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 43 3\\r\\n\", \"output\": [\"77\"]}]","length":19,"num_hidden_unit_tests":15}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 2\", \"4 4\", \"1 2\"]","prob_desc_input_spec":"First line of the input consists of two integers n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u20091000), separated by space \u2014 number of cards in each deck, and number of decks.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"0b9ce20c36e53d4702869660cbb53317","prob_desc_created_at":"1406480400","source_code":"#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define clr(ar) memset(ar, 0, sizeof(ar))\n#define read() freopen(\"lol.txt\", \"r\", stdin)\n\nint n, m;\ndouble binomial[1010][1010];\n\nvoid Pregenerate(){\n    int i, j;\n    for (i = 0; i < 1010; i++){\n        for (j = 0; j <= i; j++){\n            if (i == j || j == 0) binomial[i][j] = 1;\n            else binomial[i][j] = (binomial[i - 1][j] + binomial[i - 1][j - 1]);\n        }\n    }\n}\n\nint main(){\n    Pregenerate();\n    int i, j, k, l;\n\n    while (scanf(\"%d %d\", &n, &m) != EOF){\n        int r = (n * m);\n\n        double res = 0.0;\n        for (i = 1; i <= n; i++){\n            double x = (1.0 * i) \/ (1.0 * n);\n            double p = (x * x);\n\n            k = m, l = r;\n            for (j = 1; j <= i; j++, k--, l--){\n                double y = (1.0 * k) \/ (1.0 * l);\n                p *= y;\n            }\n\n            p *= binomial[n][i];\n\n            k = r - m;\n            for (j = i + 1; j <= n; j++, k--, l--){\n                double y = (1.0 * k) \/ (1.0 * l);\n                p *= y;\n            }\n            res += p;\n        }\n        res = res * n;\n\n        res += 1e-12;\n        printf(\"%0.9lf\\n\", res);\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"0.6666666666666666\", \"0.4000000000000000\", \"1.0000000000000000\"]","lang_cluster":"C","code_uid":"118d3ee0bd4136c2a64c011674e70593","prob_desc_notes":"NoteIn the first sample, with probability  Alex will perform the trick with two cards with the same value from two different decks. In this case the trick is guaranteed to succeed.With the remaining  probability he took two different cards, and the probability of pulling off the trick is .The resulting probability is ","prob_desc_output_spec":"On the only line of the output print one floating point number \u2013 probability of Alex successfully performing the trick. Relative or absolute error of your answer should not be higher than 10\u2009-\u20096.","prob_desc_output_to":"standard output","prob_desc_description":"Alex enjoys performing magic tricks. He has a trick that requires a deck of n cards. He has m identical decks of n different cards each, which have been mixed together. When Alex wishes to perform the trick, he grabs n cards at random and performs the trick with those. The resulting deck looks like a normal deck, but may have duplicates of some cards.The trick itself is performed as follows: first Alex allows you to choose a random card from the deck. You memorize the card and put it back in the deck. Then Alex shuffles the deck, and pulls out a card. If the card matches the one you memorized, the trick is successful.You don't think Alex is a very good magician, and that he just pulls a card randomly from the deck. Determine the probability of the trick being successful if this is the case.","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"0.666666666666667\", \"0.666666667\", \"0.6666666666666666\", \"0.666666666667\", \"0.6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667\", \"0.666667\", \"0.6666666667\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"0.4\", \"0.400000000\", \"0.400000000000000\", \"0.400000000000\", \"0.4000000000\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\", \"1.000000000000\", \"1.000000000000000\", \"1.000000000\", \"1.0000000000\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"0.500000000000000\", \"0.5\", \"0.500000000\", \"0.500000000000\", \"0.5000000000\"]}, {\"input\": \"10 10\\r\\n\", \"output\": [\"0.181818\", \"0.181818181818\", \"0.1818181818\", \"0.18181818181818182\", \"0.181818181818167\", \"0.1818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818\", \"0.181818182\"]}, {\"input\": \"1000 1000\\r\\n\", \"output\": [\"0.001998001998001998\", \"0.001998001998\", \"0.001998\", \"0.001998001998001998001998001998001998001998001998001998001998001998001998001998001998001998001998001998\", \"0.001998002008524\", \"0.001998002\", \"0.0019980020\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\", \"1.000000000000\", \"1.000000000000000\", \"1.000000000\", \"1.0000000000\"]}, {\"input\": \"987 123\\r\\n\", \"output\": [\"0.0020171\", \"0.002017095387\", \"0.002017095386649174\", \"0.002017095386649174023424785806923281072392502866757134344501584853507458575985338227267492225955543983\", \"0.002017095\", \"0.0020170954\", \"0.002017095386923\"]}, {\"input\": \"999 999\\r\\n\", \"output\": [\"0.002000000\", \"0.002\", \"0.002000000045759\", \"0.002000000000\", \"0.0020000000\"]}, {\"input\": \"1 999\\r\\n\", \"output\": [\"1\", \"1.000000000000\", \"1.000000000000000\", \"1.000000000\", \"1.0000000000\"]}, {\"input\": \"998 1\\r\\n\", \"output\": [\"0.001002\", \"0.001002004008016032064128256513026052104208416833667334669338677354709418837675350701402805611222444890\", \"0.001002004008016\", \"0.001002004008\", \"0.001002004\", \"0.0010020040\", \"0.001002004008016032\"]}, {\"input\": \"2 987\\r\\n\", \"output\": [\"0.7498732894069944\", \"0.749873\", \"0.749873289407\", \"0.749873289\", \"0.7498732894069944247339077546882919412062848454130765331981753674607197161682716675114039533705017739\", \"0.7498732894\", \"0.749873289407700\"]}, {\"input\": \"555 543\\r\\n\", \"output\": [\"0.003597050824344\", \"0.003597050814\", \"0.0035970508143694058\", \"0.0035970508\", \"0.003597050814369405840185362623344598630299643028436115865271305204409357526518169461586724431656142146\", \"0.003597051\", \"0.00359705\"]}, {\"input\": \"321 123\\r\\n\", \"output\": [\"0.006195654283721861\", \"0.00619565\", \"0.006195654284\", \"0.006195654283259\", \"0.006195654\", \"0.0061956543\", \"0.006195654283721861659897542332078926774628637112286351239201869821667226091908911999174354621318031120\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"0.700000000000000\", \"0.7\", \"0.700000000\", \"0.7000000000\", \"0.700000000000\"]}, {\"input\": \"461 1000\\r\\n\", \"output\": [\"0.004331530\", \"0.00433153\", \"0.004331529575\", \"0.004331529575124972\", \"0.0043315296\", \"0.004331529594870\", \"0.004331529575124971803313561142436214129872877839821401921063262501889287980772531355192920906341198391\"]}, {\"input\": \"678 231\\r\\n\", \"output\": [\"0.00294131\", \"0.002941310917942485362945884388165007234547318267702378176263486129089728558835343827603565453427591044\", \"0.002941310920100\", \"0.002941310918\", \"0.002941311\", \"0.0029413109\", \"0.0029413109179424854\"]}]","length":54,"num_hidden_unit_tests":17}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 6\\n10 12 10 7 5 22\"]","prob_desc_input_spec":"The first line contains space-separated integers n and m (2\u2009\u2264\u2009n\u2009\u2264\u2009m\u2009\u2264\u200950). The second line contains m space-separated integers f1,\u2009f2,\u2009...,\u2009fm (4\u2009\u2264\u2009fi\u2009\u2264\u20091000) \u2014 the quantities of pieces in the puzzles sold in the shop.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"7830aabb0663e645d54004063746e47f","prob_desc_created_at":"1376668800","source_code":"#include <stdio.h>\n#include <stdlib.h>\n \nint main(void){\n    int count[1001] = {0};      \/\/sorts the f array\n    int n, m, *f, i, j, min;\n \n    scanf(\" %d %d\", &n, &m);\n \n    f = (int*)malloc(m*sizeof(int));\n \n    for(i=0; i<m; scanf(\" %d\", &f[i]), count[f[i]]++, i++)\n        ;\n \n    j = 0;\n \n    for(i=0; i<1001; i++){\n        for(; count[i]>0; f[j]=i, count[i]--, j++)\n            ;\n    }\n \n    min = f[n-1] - f[0];\n \n    for(i=1; i<=(m-n); i++)\n        if((f[n+i-1] - f[i]) < min)\n            min = (f[n+i-1] - f[i]);\n \n    printf(\"%d\\n\", min);\n \n    return 0;\n}","prob_desc_sample_outputs":"[\"5\"]","lang_cluster":"C","code_uid":"072a5cb2c05edb6934a73fc4626e140e","prob_desc_notes":"NoteSample 1. The class has 4 students. The shop sells 6 puzzles. If Ms. Manana buys the first four puzzles consisting of 10, 12, 10 and 7 pieces correspondingly, then the difference between the sizes of the largest and the smallest puzzle will be equal to 5. It is impossible to obtain a smaller difference. Note that the teacher can also buy puzzles 1, 3, 4 and 5 to obtain the difference 5.","prob_desc_output_spec":"Print a single integer \u2014 the least possible difference the teacher can obtain.","prob_desc_output_to":"standard output","prob_desc_description":"The end of the school year is near and Ms. Manana, the teacher, will soon have to say goodbye to a yet another class. She decided to prepare a goodbye present for her n students and give each of them a jigsaw puzzle (which, as wikipedia states, is a tiling puzzle that requires the assembly of numerous small, often oddly shaped, interlocking and tessellating pieces).The shop assistant told the teacher that there are m puzzles in the shop, but they might differ in difficulty and size. Specifically, the first jigsaw puzzle consists of f1 pieces, the second one consists of f2 pieces and so on.Ms. Manana doesn't want to upset the children, so she decided that the difference between the numbers of pieces in her presents must be as small as possible. Let A be the number of pieces in the largest puzzle that the teacher buys and B be the number of pieces in the smallest such puzzle. She wants to choose such n puzzles that A\u2009-\u2009B is minimum possible. Help the teacher and find the least possible value of A\u2009-\u2009B.","hidden_unit_tests":"[{\"input\": \"4 6\\r\\n10 12 10 7 5 22\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 2\\r\\n4 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 10\\r\\n4 5 6 7 8 9 10 11 12 12\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 5\\r\\n818 136 713 59 946\\r\\n\", \"output\": [\"759\"]}, {\"input\": \"3 20\\r\\n446 852 783 313 549 965 40 88 86 617 479 118 768 34 47 826 366 957 463 903\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"2 25\\r\\n782 633 152 416 432 825 115 97 386 357 836 310 530 413 354 373 847 882 913 682 729 582 671 674 94\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 25\\r\\n226 790 628 528 114 64 239 279 619 39 894 763 763 847 525 93 882 697 999 643 650 244 159 884 190\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"2 50\\r\\n971 889 628 39 253 157 925 694 129 516 660 272 738 319 611 816 142 717 514 392 41 105 132 676 958 118 306 768 600 685 103 857 704 346 857 309 23 718 618 161 176 379 846 834 640 468 952 878 164 997\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"25 50\\r\\n582 146 750 905 313 509 402 21 488 512 32 898 282 64 579 869 37 996 377 929 975 697 666 837 311 205 116 992 533 298 648 268 54 479 792 595 152 69 267 417 184 433 894 603 988 712 24 414 301 176\\r\\n\", \"output\": [\"412\"]}, {\"input\": \"49 50\\r\\n58 820 826 960 271 294 473 102 925 318 729 672 244 914 796 646 868 6 893 882 726 203 528 498 271 195 355 459 721 680 547 147 631 116 169 804 145 996 133 559 110 257 771 476 576 251 607 314 427 886\\r\\n\", \"output\": [\"938\"]}, {\"input\": \"50 50\\r\\n374 573 323 744 190 806 485 247 628 336 491 606 702 321 991 678 337 579 86 240 993 208 668 686 855 205 363 177 719 249 896 919 782 434 59 647 787 996 286 216 636 212 546 903 958 559 544 126 608 993\\r\\n\", \"output\": [\"937\"]}, {\"input\": \"6 50\\r\\n6 8 7 8 5 4 4 5 7 8 6 5 7 4 7 7 7 8 6 4 6 6 8 8 7 7 8 7 5 8 5 4 4 7 8 4 4 6 6 6 8 7 4 7 6 6 5 8 4 7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"37 50\\r\\n14 5 11 17 8 20 19 16 20 11 17 20 16 9 14 14 13 18 11 20 8 8 8 5 19 17 6 18 10 20 9 7 12 6 14 17 4 4 10 13 7 4 11 6 20 19 12 12 15 19\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"40 50\\r\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"40 50\\r\\n17 20 43 26 41 37 14 8 30 35 30 24 43 8 42 9 41 50 41 35 27 32 35 43 28 36 31 16 5 7 23 16 14 29 8 39 12 16 36 18 49 39 33 37 38 6 6 27 23 17\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"2 2\\r\\n1000 4\\r\\n\", \"output\": [\"996\"]}, {\"input\": \"2 3\\r\\n4 502 1000\\r\\n\", \"output\": [\"498\"]}, {\"input\": \"3 3\\r\\n4 1000 4\\r\\n\", \"output\": [\"996\"]}]","length":31,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6 2 2\\n1 1 2 2 1 1\", \"1 1 1\\n1\"]","prob_desc_input_spec":"The first line of input contains three integers: n (1\u2009\u2264\u2009n\u2009\u2264\u2009100), k (1\u2009\u2264\u2009k\u2009\u2264\u2009100) and x (1\u2009\u2264\u2009x\u2009\u2264\u2009k). The next line contains n space-separated integers c1,\u2009c2,\u2009...,\u2009cn (1\u2009\u2264\u2009ci\u2009\u2264\u2009k). Number ci means that the i-th ball in the row has color ci. It is guaranteed that the initial row of balls will never contain three or more contiguous balls of the same color. ","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"d73d9610e3800817a3109314b1e6f88c","prob_desc_created_at":"1399822800","source_code":"#include<stdio.h>\nint main()\n{\n\tint i,j,n,k,x,a[100],b[100]={0},num,count=0,flag=0,max=-1,sum=0;\n\tscanf(\"%d%d%d\",&n,&k,&x);\n\tfor(i=0;i<n;i++)\n\t{\n\t\tscanf(\"%d\",&num);\n\t\tif(count>0)\n\t\t{\n\t\t\tif(a[count-1]==num)\n\t\t\t{\n\t\t\t\tb[count-1]++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ta[count]=num;\n\t\t\t\tb[count]++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta[count]=num;\n\t\t\tb[count]++;\n\t\t\tcount++;\n\t\t}\n\t}\n\tfor(i=0;i<count;i++)\n\t{\n\t\tif(x==a[i]&&b[i]==2)\n\t\t{\n\t\t\tsum=2;\n\t\t\tj=i-1;\n\t\t\tk=i+1;\n\t\t\tflag=0;\n\t\t\twhile(j>=0&&k<count&&flag==0)\n\t\t\t{\n\t\t\t\tif(a[j]==a[k]&&b[j]+b[k]>2)\n\t\t\t\t{\n\t\t\t\t\tsum+=b[j]+b[k];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tflag=1;\n\t\t\t\t}\n\t\t\t\tj--;\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\tif(max<sum)\n\t\t{\n\t\t\tmax=sum;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",max);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"6\", \"0\"]","lang_cluster":"C","code_uid":"b14f64cde08f10cc6e5491d302e339ce","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the maximum number of balls Iahub can destroy.","prob_desc_output_to":"standard output","prob_desc_description":"Iahub is training for the IOI. What is a better way to train than playing a Zuma-like game? There are n balls put in a row. Each ball is colored in one of k colors. Initially the row doesn't contain three or more contiguous balls with the same color. Iahub has a single ball of color x. He can insert his ball at any position in the row (probably, between two other balls). If at any moment there are three or more contiguous balls of the same color in the row, they are destroyed immediately. This rule is applied multiple times, until there are no more sets of 3 or more contiguous balls of the same color. For example, if Iahub has the row of balls [black, black, white, white, black, black] and a white ball, he can insert the ball between two white balls. Thus three white balls are destroyed, and then four black balls become contiguous, so all four balls are destroyed. The row will not contain any ball in the end, so Iahub can destroy all 6 balls.Iahub wants to destroy as many balls as possible. You are given the description of the row of balls, and the color of Iahub's ball. Help Iahub train for the IOI by telling him the maximum number of balls from the row he can destroy.","hidden_unit_tests":"[{\"input\": \"6 2 2\\r\\n1 1 2 2 1 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 1 1\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 2 1\\r\\n2 1 2 2 1 2 2 1 1 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"50 2 1\\r\\n1 1 2 2 1 2 1 1 2 2 1 2 1 2 1 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 1 2 2 1 1 2 2 1 2 1 1 2 1 1 2 2 1 1 2\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"75 5 5\\r\\n1 1 5 5 3 5 2 3 3 2 2 1 1 5 4 4 3 4 5 4 3 3 1 2 2 1 2 1 2 5 5 2 1 3 2 2 3 1 2 1 1 5 5 1 1 2 1 1 2 2 5 2 2 1 1 2 1 2 1 1 3 3 5 4 4 3 3 4 4 5 5 1 1 2 2\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100 3 2\\r\\n1 1 2 3 1 3 2 1 1 3 3 2 2 1 1 2 2 1 1 3 2 2 3 2 3 2 2 3 3 1 1 2 2 1 2 2 1 3 3 1 3 3 1 2 1 2 2 1 2 3 2 1 1 2 1 1 3 3 1 3 3 1 1 2 2 1 1 2 1 3 2 2 3 2 2 3 3 1 2 1 2 2 1 1 2 3 1 3 3 1 2 3 2 2 1 3 2 2 3 3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100 2 1\\r\\n2 2 1 2 1 2 1 2 2 1 1 2 1 1 2 1 1 2 2 1 1 2 1 1 2 1 2 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 1 2 1 1 2 2 1 2 1 1 2 2 1 1 2 1 2 1 2 1 2 2 1 2 1 1 2 1 2 1 1 2 1 1 2 1 1 2 2 1 2 2 1 1 2 1\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"100 2 2\\r\\n1 2 1 2 2 1 2 1 2 1 2 1 1 2 1 2 2 1 1 2 1 1 2 2 1 1 2 1 2 2 1 2 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 1 2 1 1 2 2 1 1 2 2 1 2 1 2 1 2 1 2 2 1 2 1 2 2 1 1 2 1 2 2 1 1 2 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 2 1 2 2\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"100 2 2\\r\\n1 2 1 1 2 1 2 2 1 2 1 2 1 2 1 2 1 2 2 1 1 2 2 1 2 1 1 2 2 1 1 2 1 2 1 2 1 1 2 1 1 2 1 2 2 1 1 2 2 1 1 2 1 2 2 1 1 2 1 2 1 2 2 1 2 2 1 1 2 1 2 2 1 2 2 1 2 1 1 2 1 2 2 1 2 2 1 2 1 2 1 2 1 1 2 2 1 1 2 2\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"100 2 2\\r\\n2 1 1 2 2 1 1 2 1 2 1 1 2 2 1 2 1 2 1 2 2 1 2 1 1 2 1 2 1 2 1 2 1 1 2 2 1 1 2 1 1 2 1 2 2 1 1 2 1 2 1 1 2 2 1 1 2 1 2 1 2 1 2 2 1 1 2 2 1 1 2 2 1 2 1 2 1 1 2 1 1 2 2 1 2 1 2 2 1 2 2 1 1 2 1 2 2 1 2 2\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"100 2 2\\r\\n1 2 2 1 2 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 2 2 1 1 2 2 1 1 2 1 1 2 2 1 2 1 2 1 2 1 2 1 1 2 2 1 1 2 2 1 1 2 2 1 2 2 1 1 2 1 2 2 1 2 2 1 2 2 1 2 2 1 1 2 2 1 2 1 2 1 2 1\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"100 2 2\\r\\n1 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 1 1 2 2 1 2 1 1 2 2 1 1 2 1 2 2 1 2 2 1 2 1 2 1 1 2 1 2 1 1 2 2 1 1 2 1 2 1 2 1 2 1 2 2 1 1 2 1 2 2 1 2 1 1 2 1 1 2 1 2 1 2 1 1 2 1 2 2 1 2 1 2 2 1 1 2 1 2 2 1 1 2 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"100 100 50\\r\\n15 44 5 7 75 40 52 82 78 90 48 32 16 53 69 2 21 84 7 21 21 87 29 8 42 54 10 21 38 55 54 88 48 63 3 17 45 82 82 91 7 11 11 24 24 79 1 32 32 38 41 41 4 4 74 17 26 26 96 96 3 3 50 50 96 26 26 17 17 74 74 4 41 38 38 32 1 1 79 79 24 11 11 7 7 91 91 82 45 45 97 9 74 60 32 91 61 64 100 26\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100 50 22\\r\\n15 2 18 15 48 35 46 33 32 39 39 5 5 27 27 50 50 47 47 10 10 6 3 3 7 8 7 17 17 29 14 10 10 46 13 13 31 32 31 22 22 32 31 31 32 13 13 46 46 10 10 14 14 29 29 17 7 7 8 3 6 6 10 47 50 50 27 5 5 39 39 21 47 4 40 47 21 28 21 21 40 27 34 17 3 36 5 7 21 14 25 49 40 34 32 13 23 29 2 4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100 3 3\\r\\n3 1 1 2 1 1 3 1 3 3 1 3 3 1 2 1 1 2 2 3 3 2 3 2 2 3 1 3 3 2 2 1 3 3 2 2 1 2 3 3 1 3 1 3 1 2 2 1 2 1 2 3 1 3 1 3 2 1 3 2 3 3 2 3 2 3 1 3 2 2 1 2 1 2 1 1 3 1 3 1 2 1 2 1 2 3 2 2 3 3 2 2 3 2 2 3 1 1 2 3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100 100 100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 2 2\\r\\n1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2\\r\\n\", \"output\": [\"98\"]}, {\"input\": \"6 20 10\\r\\n10 2 10 10 2 2\\r\\n\", \"output\": [\"5\"]}]","length":58,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n1 1 0 1\", \"6\\n0 1 0 0 1 0\", \"1\\n0\"]","prob_desc_input_spec":"The first line contains one integer number n (1\u2009\u2264\u2009n\u2009\u2264\u2009100). The second line contains n space-separated integer numbers s1,\u2009s2,\u2009...,\u2009sn (0\u2009\u2264\u2009si\u2009\u2264\u20091). 0 corresponds to an unsuccessful game, 1 \u2014 to a successful one.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"c7b1f0b40e310f99936d1c33e4816b95","prob_desc_created_at":"1504623900","source_code":"#include <stdio.h>\n\nint countzeroes(int x, int s[])\n{\n\tint count=0;\n\tfor(int j=0;j<=x;j++){\n\t\tif(s[j]==0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n\nint countones(int x, int s[])\n{\n\tint count=0;\n\tfor(int j=0;j<=x;j++){\n\t\tif(s[j]==1)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n\nint main(void) {\n\tint n,i;  \/\/n is the total number of games.\n\tscanf(\"%d\",&n);\n\t\n\tint s[n];\n\tfor(i=0;i<n;i++)\n\t\tscanf(\"%d\",&s[i]);\n\t\t\n\t\/*for(i=0;i<n;i++)\n\t\tprintf(\"%d\",s[i]); *\/\n\t\t\n\tint zeroes,ones;\n\tzeroes=countzeroes(n-1,s);\n\tones=countones(n-1,s);\n\t\n\tint zero[zeroes],x,y,counter=0;\n\tfor(i=0;i<n;i++){\n\t\tif(s[i]==0){\n\t\t\tx=countzeroes(i,s);\n\t\t\ty=ones-countones(i,s);\n\t\t\t\/\/printf(\"%d %d   %d\\n\",x,y,x+y);\n\t\t\tzero[counter]=x+y;\n\t\t\tcounter++;\n\t\t}\n\t}\n\t\n\t\/*for(i=0;i<zeroes;i++)\n\t\tprintf(\"%d\",zero[i]);\n\tprintf(\"\\n\");*\/\n\t\n\tint ans;\n\tif(zeroes>ones)\n\t\tans=zeroes;\n\telse\n\t\tans=ones;\n\t\n\t\/\/printf(\"ans is %d \\n\", ans);\n\t\t\n\tfor(i=0;i<zeroes;i++){\n\t\tif(zero[i]>ans)\n\t\t\tans=zero[i];\n\t}\n\t\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"4\", \"1\"]","lang_cluster":"C","code_uid":"d1d6257f91fbbd267127477970d88022","prob_desc_notes":null,"prob_desc_output_spec":"Print one integer \u2014 the maximum number of games Hideo can leave in his CV so that no unsuccessful game comes after a successful one.","prob_desc_output_to":"standard output","prob_desc_description":"Hideo Kojima has just quit his job at Konami. Now he is going to find a new place to work. Despite being such a well-known person, he still needs a CV to apply for a job.During all his career Hideo has produced n games. Some of them were successful, some were not. Hideo wants to remove several of them (possibly zero) from his CV to make a better impression on employers. As a result there should be no unsuccessful game which comes right after successful one in his CV.More formally, you are given an array s1,\u2009s2,\u2009...,\u2009sn of zeros and ones. Zero corresponds to an unsuccessful game, one \u2014 to a successful one. Games are given in order they were produced, and Hideo can't swap these values. He should remove some elements from this array in such a way that no zero comes right after one.Besides that, Hideo still wants to mention as much games in his CV as possible. Help this genius of a man determine the maximum number of games he can leave in his CV.","hidden_unit_tests":"[{\"input\": \"4\\r\\n1 1 0 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6\\r\\n0 1 0 0 1 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1\\r\\n0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n0 0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n1 1 0 1 1 0 0 0 0 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 1 1 0 0 0 1 0 0 1 0 1 1 0 1 0 0 1 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 1 0 1 1 1 0 0 1 1 0 0 0 0 1\\r\\n\", \"output\": [\"53\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"3\\r\\n1 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n1 1 0 0 0 1 1 0 0 0\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"90\\r\\n1 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 1 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 1 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0 1 0\\r\\n\", \"output\": [\"52\"]}, {\"input\": \"78\\r\\n0 0 1 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 1 0 1 1 1 0 1 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 1 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 0\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"4\\r\\n1 0 0 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2\\r\\n0 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\n0 1 0 0 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3\\r\\n1 0 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n1 1 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"16\\r\\n1 1 1 1 1 0 0 0 0 0 1 0 1 0 0 1\\r\\n\", \"output\": [\"9\"]}]","length":68,"num_hidden_unit_tests":18}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"\/\/usr\/\/\/local\/\/nginx\/sbin\"]","prob_desc_input_spec":"The first line of the input contains only lowercase Latin letters and character '\/'\u00a0\u2014 the path to some directory. All paths start with at least one character '\/'. The length of the given line is no more than 100 characters, it is not empty.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"6c2e658ac3c3d6b0569dd373806fa031","prob_desc_created_at":"1276875000","source_code":"#include <stdio.h> \n#include <string.h> \n\nchar buf[200]; \n\nint main()\n{ \n    int i,len,flag=0; \n \n    \n    scanf(\"%s\",buf); \n    \n    len =strlen(buf);\n    \n    for(i=0;i<len;i++)\n    { \n        if(buf[i]=='\/')\n        { \n            while(buf[i+1]=='\/')\n              i++; \n            if(buf[i+1])  \/*not null*\/\n            { \n                putchar('\/'); \n                flag=1; \n            } \n        } \n        else\n        { \n            putchar(buf[i]); \n            flag=1; \n        } \n    } \n    \n    if(flag==0)\n      putchar('\/'); \n    \n    puts(\"\"); \n    \n    return 0;\n}\n\/****** PCCA -Wed Aug 24 04:05:43 GMT 2011 *******\/","prob_desc_sample_outputs":"[\"\/usr\/local\/nginx\/sbin\"]","lang_cluster":"C","code_uid":"71ca5ebc3ce24361bdbfd8d7f73a3cef","prob_desc_notes":null,"prob_desc_output_spec":"The path in normalized form.","prob_desc_output_to":"standard output","prob_desc_description":"The new operating system BerOS has a nice feature. It is possible to use any number of characters '\/' as a delimiter in path instead of one traditional '\/'. For example, strings \/\/usr\/\/\/local\/\/nginx\/sbin\/\/ and \/usr\/local\/nginx\/\/\/sbin are equivalent. The character '\/' (or some sequence of such characters) at the end of the path is required only in case of the path to the root directory, which can be represented as single character '\/'.A path called normalized if it contains the smallest possible number of characters '\/'.Your task is to transform a given path to the normalized form.","hidden_unit_tests":"[{\"input\": \"\/\/usr\/\/\/local\/\/nginx\/sbin\\r\\n\", \"output\": [\"\/usr\/local\/nginx\/sbin\"]}, {\"input\": \"\/\/\/\/a\/\/b\/\/\/\/\/g\\r\\n\", \"output\": [\"\/a\/b\/g\"]}, {\"input\": \"\/a\/b\/c\\r\\n\", \"output\": [\"\/a\/b\/c\"]}, {\"input\": \"\/\\r\\n\", \"output\": [\"\/\"]}, {\"input\": \"\/\/\/\/\\r\\n\", \"output\": [\"\/\"]}, {\"input\": \"\/a\/\/aa\/a\/\/\\r\\n\", \"output\": [\"\/a\/aa\/a\"]}, {\"input\": \"\/aa\/\/b\/aa\\r\\n\", \"output\": [\"\/aa\/b\/aa\"]}, {\"input\": \"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\r\\n\", \"output\": [\"\/\"]}, {\"input\": \"\/opt\/\/\/pokerband\/\/\/srvb\/opt\/\/\/pokerband\/\/\/srvb\/\/\/\/pokerband\/\/\/srvb\/\\r\\n\", \"output\": [\"\/opt\/pokerband\/srvb\/opt\/pokerband\/srvb\/pokerband\/srvb\"]}, {\"input\": \"\/root\/pokerband\/trunk\/server\/game\/code\/src\/main\/java\/com\/uosipa\/pokerband\/gameserver\/game\/\\r\\n\", \"output\": [\"\/root\/pokerband\/trunk\/server\/game\/code\/src\/main\/java\/com\/uosipa\/pokerband\/gameserver\/game\"]}, {\"input\": \"\/root\/\/pokerband\/trunk\/server\/game\/code\/src\/\/\/main\/java\/com\/uosipa\/pokerband\/\/gameserver\/game\/\/\\r\\n\", \"output\": [\"\/root\/pokerband\/trunk\/server\/game\/code\/src\/main\/java\/com\/uosipa\/pokerband\/gameserver\/game\"]}, {\"input\": \"\/root\/\/pokerband\/trunk\/server\/game\/code\/src\/\/\/main\/java\/com\/uosipa\/pokerband\/\/gameserver\/game\/\/test\/\\r\\n\", \"output\": [\"\/root\/pokerband\/trunk\/server\/game\/code\/src\/main\/java\/com\/uosipa\/pokerband\/gameserver\/game\/test\"]}, {\"input\": \"\/root\/\/pokerband\/trunk\/server\/game\/code\/src\/\/\/main\/java\/com\/uosipa\/pokerband\/\/gameserver\/game\/\/testt\\r\\n\", \"output\": [\"\/root\/pokerband\/trunk\/server\/game\/code\/src\/main\/java\/com\/uosipa\/pokerband\/gameserver\/game\/testt\"]}, {\"input\": \"\/\/\/a\/\/a\/\/\/\/a\/a\/\/a\/\/a\/\/a\/\/\/\/\/\\r\\n\", \"output\": [\"\/a\/a\/a\/a\/a\/a\/a\"]}, {\"input\": \"\/zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\r\\n\", \"output\": [\"\/zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"]}, {\"input\": \"\/zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\/\\r\\n\", \"output\": [\"\/zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"]}, {\"input\": \"\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\\r\\n\", \"output\": [\"\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\/a\"]}, {\"input\": \"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/z\\r\\n\", \"output\": [\"\/z\"]}, {\"input\": \"\/z\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\r\\n\", \"output\": [\"\/z\"]}]","length":41,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"6\\n0 0 0 0 0\\n1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 0 1\", \"3\\n0 0 1 2 0\\n0 0 9 2 0\\n0 0 5 9 0\"]","prob_desc_input_spec":"The first line of input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009103)\u00a0\u2014 the number of points. The next n lines of input contain five integers ai,\u2009bi,\u2009ci,\u2009di,\u2009ei (|ai|,\u2009|bi|,\u2009|ci|,\u2009|di|,\u2009|ei|\u2009\u2264\u2009103) \u00a0\u2014 the coordinates of the i-th point. All points are distinct.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"c1cfe1f67217afd4c3c30a6327e0add9","prob_desc_created_at":"1504535700","source_code":"#include <stdio.h>\n\nint points[1010][5];\nint val[1010];\n\nint main()\n{\n\tint n, i, j, k, l, count = 0;\n\tfor (i = 0; i < 1010; i++) val[i] = -1;\n\tscanf(\"%d\", &n);\n\tfor (i = 0; i < n; i++) for (j = 0; j < 5; j++) scanf(\"%d\", &points[i][j]);\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (val[i] == -1)\n\t\t{\n\t\t\tint flag = 1;\n\t\t\tfor (j = 0; j < n; j++)\n\t\t\t{\n\t\t\t\tif (j != i)\n\t\t\t\t{\n\t\t\t\t\tfor (k = 0; k < n; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (k != i && k != j)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tfor (l = 0; l < 5; l++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsum += (points[j][l] - points[i][l]) * (points[k][l] - points[i][l]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sum > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tval[i] = 0;\n\t\t\t\t\t\t\t\tflag = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tval[j] = 0;\n\t\t\t\t\t\t\t\tval[k] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag == 1)\n\t\t\t{\n\t\t\t\tval[i] = 1;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\", count);\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (val[i] == 1) printf(\"%d\\n\", i + 1);\n\t}\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"1\\n1\", \"0\"]","lang_cluster":"C","code_uid":"ae9c8f6237f4901e85080a1f2c12f37b","prob_desc_notes":"NoteIn the first sample, the first point forms exactly a  angle with all other pairs of points, so it is good.In the second sample, along the cd plane, we can see the points look as follows:We can see that all angles here are acute, so no points are good.","prob_desc_output_spec":"First, print a single integer k\u00a0\u2014 the number of good points. Then, print k integers, each on their own line\u00a0\u2014 the indices of the good points in ascending order.","prob_desc_output_to":"standard output","prob_desc_description":"You are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.We will call point a bad if there are different points b and c, not equal to a, from the given set such that angle between vectors  and  is acute (i.e. strictly less than ). Otherwise, the point is called good.The angle between vectors  and  in 5-dimensional space is defined as , where  is the scalar product and  is length of .Given the list of points, print the indices of the good points in ascending order.","hidden_unit_tests":"[{\"input\": \"6\\r\\n0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 0 1 0 0\\r\\n0 0 0 1 0\\r\\n0 0 0 0 1\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"3\\r\\n0 0 1 2 0\\r\\n0 0 9 2 0\\r\\n0 0 5 9 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"2\\r\\n0 1 2 3 4\\r\\n5 6 7 8 9\\r\\n\", \"output\": [\"2\\r\\n1\\r\\n2\"]}, {\"input\": \"992\\r\\n-1000 -1000 1000 -30 -1000\\r\\n-1000 -1000 -1000 -1000 -50\\r\\n-30 1000 1000 -1000 1000\\r\\n-1000 -60 -1000 -1000 1000\\r\\n1000 -10 -1000 -1000 1000\\r\\n1000 1000 -1000 -60 -1000\\r\\n1000 1000 1000 0 -1000\\r\\n-30 1000 -1000 -1000 1000\\r\\n1000 1000 -1000 20 -1000\\r\\n1000 -1000 1000 -1000 -20\\r\\n-1000 -1000 1000 -20 -1000\\r\\n-1000 -10 -1000 1000 -1000\\r\\n-1000 20 -1000 -1000 -1000\\r\\n1000 1000 1000 0 1000\\r\\n40 1000 -1000 1000 1000\\r\\n1000 -1000 -40 -1000 1000\\r\\n-1000 1000 1000 -40 -1000\\r\\n1000 20 -1000 -1000 -1000\\r\\n-1000 -50 1000 -1000 -10...\", \"output\": [\"0\"]}, {\"input\": \"960\\r\\n-30 -1000 1000 1000 -1000\\r\\n1000 -1000 -20 1000 -1000\\r\\n1000 1000 1000 1000 -20\\r\\n-60 1000 1000 1000 1000\\r\\n-30 1000 1000 1000 1000\\r\\n-1000 -1000 50 -1000 -1000\\r\\n1000 -50 -1000 1000 1000\\r\\n20 1000 1000 1000 -1000\\r\\n1000 1000 1000 10 1000\\r\\n-1000 -1000 40 1000 1000\\r\\n10 -1000 -1000 1000 -1000\\r\\n1000 -1000 1000 -1000 30\\r\\n-1000 -1000 -20 -1000 -1000\\r\\n1000 -1000 -40 -1000 -1000\\r\\n-1000 -40 -1000 1000 -1000\\r\\n1000 1000 -1000 0 -1000\\r\\n1000 1000 -1000 -1000 40\\r\\n-1000 1000 -30 1000 1000\\r\\n1000 -1000 50 -1000 -1000\\r\\n1000 -...\", \"output\": [\"0\"]}, {\"input\": \"768\\r\\n715 -250 -245 715 -130\\r\\n325 -425 175 650 -650\\r\\n325 -25 60 455 -650\\r\\n65 125 545 -65 -455\\r\\n260 -325 -65 455 -195\\r\\n455 -550 -370 715 65\\r\\n325 325 65 -455 -650\\r\\n325 -200 480 390 -650\\r\\n-65 -200 -365 -195 455\\r\\n260 275 185 455 -195\\r\\n-65 125 545 -65 455\\r\\n455 200 365 195 65\\r\\n260 -775 170 -65 -195\\r\\n520 -500 -490 -195 -390\\r\\n-65 -725 50 650 455\\r\\n0 -250 -245 715 0\\r\\n-65 -50 120 910 455\\r\\n260 -200 480 390 -195\\r\\n-195 25 -60 -455 -260\\r\\n0 -50 120 910 0\\r\\n260 -875 410 130 -195\\r\\n195 100 -240 -195 260\\r\\n-65 225 305 -260 455\\r\\n...\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n0 -110 68 -51 -155\\r\\n-85 -110 68 -51 -155\\r\\n85 -70 51 68 -230\\r\\n0 -40 51 68 75\\r\\n0 5 -51 -68 -190\\r\\n85 0 0 0 0\\r\\n85 -115 -68 51 35\\r\\n85 -75 -187 34 -40\\r\\n-85 -110 -136 102 -155\\r\\n85 -110 -17 119 -155\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6\\r\\n-305 -390 638 -623 343\\r\\n479 755 -343 144 89\\r\\n-268 843 -461 989 -301\\r\\n-986 -274 347 -847 -728\\r\\n278 718 -372 -674 270\\r\\n-477 562 -489 -858 611\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n-705 38 170 -768 689\\r\\n-705 86 248 -768 709\\r\\n-705 86 170 -742 709\\r\\n-705 86 144 -768 709\\r\\n-705 86 170 -820 709\\r\\n-705 106 170 -768 661\\r\\n-822 86 170 -768 709\\r\\n-705 98 170 -768 714\\r\\n-705 86 170 -768 709\\r\\n-601 86 170 -768 709\\r\\n\", \"output\": [\"1\\r\\n9\"]}, {\"input\": \"11\\r\\n358 -724 -232 53 -520\\r\\n486 -554 -328 53 -220\\r\\n358 -554 -232 -372 -520\\r\\n358 -554 -232 308 -520\\r\\n868 -554 448 53 -520\\r\\n478 -554 -322 53 -600\\r\\n358 296 -232 53 -520\\r\\n256 -554 -368 53 -520\\r\\n230 -554 -136 53 -820\\r\\n-182 -554 173 53 -160\\r\\n358 -554 -232 53 -520\\r\\n\", \"output\": [\"1\\r\\n11\"]}, {\"input\": \"8\\r\\n-559 581 509 257 343\\r\\n-544 451 569 277 343\\r\\n-451 451 434 401 343\\r\\n-559 451 509 257 83\\r\\n-664 451 89 117 343\\r\\n-559 451 509 257 993\\r\\n-715 451 509 374 343\\r\\n-811 451 684 -79 343\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999\\r\\n-301 26 -665 194 -96\\r\\n-901 -537 578 418 152\\r\\n346 -572 111 785 -659\\r\\n-774 433 -503 655 -778\\r\\n-314 -17 493 869 -509\\r\\n548 -725 -570 -491 -325\\r\\n-957 448 -556 985 -810\\r\\n270 -748 -397 -488 -561\\r\\n-247 -96 494 -759 731\\r\\n91 -380 37 537 191\\r\\n-466 262 -76 -70 500\\r\\n206 160 698 -714 -277\\r\\n845 456 -813 316 514\\r\\n467 -950 286 310 735\\r\\n521 -141 -148 559 299\\r\\n-396 379 947 462 668\\r\\n570 -879 -520 -383 55\\r\\n705 350 -191 368 -39\\r\\n698 -23 987 237 -204\\r\\n-808 -190 559 4 -227\\r\\n563 -172 -987 -265 -908\\r\\n451 -117 -217 -849 239\\r\\n93...\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n8 8 8 8 8\\r\\n2 2 2 2 2\\r\\n0 0 0 0 0\\r\\n6 6 6 6 6\\r\\n7 7 7 7 7\\r\\n10 10 10 10 10\\r\\n9 9 9 9 9\\r\\n3 3 3 3 3\\r\\n1 1 1 1 1\\r\\n5 5 5 5 5\\r\\n4 4 4 4 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"7\\r\\n49 457 -650 325 -325\\r\\n0 0 325 325 0\\r\\n253 204 -325 0 -325\\r\\n204 -253 325 325 325\\r\\n408 -506 -325 -325 325\\r\\n49 457 -650 325 -650\\r\\n0 0 0 650 -325\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000\\r\\n89 -573 642 349 -32\\r\\n-619 -549 767 -674 414\\r\\n-405 -68 -629 -343 -734\\r\\n-889 220 -814 329 -336\\r\\n-887 396 -531 -800 -940\\r\\n-849 142 -700 705 -311\\r\\n258 584 -547 -661 -153\\r\\n-58 717 658 -477 456\\r\\n-375 -530 195 681 716\\r\\n-944 274 491 -475 215\\r\\n270 989 960 536 -990\\r\\n685 889 -386 -556 303\\r\\n557 -374 589 488 -65\\r\\n-159 224 -753 -277 577\\r\\n-67 -786 -495 -72 -811\\r\\n-429 -202 522 812 -249\\r\\n807 341 -773 -197 -585\\r\\n128 -943 -653 924 -492\\r\\n-602 815 180 -871 -939\\r\\n-583 863 915 -513 768\\r\\n774 791 -337 649 170\\r\\n-341 834 -528 ...\", \"output\": [\"0\"]}, {\"input\": \"1000\\r\\n0 0 0 0 0\\r\\n1 1 1 1 1\\r\\n2 2 2 2 2\\r\\n3 3 3 3 3\\r\\n4 4 4 4 4\\r\\n5 5 5 5 5\\r\\n6 6 6 6 6\\r\\n7 7 7 7 7\\r\\n8 8 8 8 8\\r\\n9 9 9 9 9\\r\\n10 10 10 10 10\\r\\n11 11 11 11 11\\r\\n12 12 12 12 12\\r\\n13 13 13 13 13\\r\\n14 14 14 14 14\\r\\n15 15 15 15 15\\r\\n16 16 16 16 16\\r\\n17 17 17 17 17\\r\\n18 18 18 18 18\\r\\n19 19 19 19 19\\r\\n20 20 20 20 20\\r\\n21 21 21 21 21\\r\\n22 22 22 22 22\\r\\n23 23 23 23 23\\r\\n24 24 24 24 24\\r\\n25 25 25 25 25\\r\\n26 26 26 26 26\\r\\n27 27 27 27 27\\r\\n28 28 28 28 28\\r\\n29 29 29 29 29\\r\\n30 30 30 30 30\\r\\n31 31 31 31 31\\r\\n32 32 32 32 32\\r\\n33 33 33 33 33\\r\\n34 34 34 34...\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n1 0 0 0 0\\r\\n-1 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 -1 0 0 0\\r\\n0 0 1 0 0\\r\\n0 0 -1 0 0\\r\\n0 0 0 1 0\\r\\n0 0 0 -1 0\\r\\n0 0 0 0 1\\r\\n0 0 0 0 -1\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\\r\\n11\"]}, {\"input\": \"4\\r\\n0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 1 1 0 0\\r\\n\", \"output\": [\"0\"]}]","length":57,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"64 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"8\"]","prob_desc_input_spec":"The first (and the only) input line contains integer number w (1\u2009\u2264\u2009w\u2009\u2264\u2009100) \u2014 the weight of the watermelon bought by the boys.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"230a3c4d7090401e5fa3c6b9d994cdf2","prob_desc_created_at":"1268395200","source_code":"#include <stdio.h>\n\nint main()\n{\n    int w;\n        scanf (\"%d\",&w);\n        if(w!=2 && w%2==0)\n        printf(\"YES\\n\");\n        else{\n        printf(\"NO\\n\");}\n    return 0;\n}\n\/* 1491891267270 *\/\n","prob_desc_sample_outputs":"[\"YES\"]","lang_cluster":"C","code_uid":"6659a13de99d72719b50774e3cb5b4ee","prob_desc_notes":"NoteFor example, the boys can divide the watermelon into two parts of 2 and 6 kilos respectively (another variant \u2014 two parts of 4 and 4 kilos).","prob_desc_output_spec":"Print YES, if the boys can divide the watermelon into two parts, each of them weighing even number of kilos; and NO in the opposite case.","prob_desc_output_to":"standard output","prob_desc_description":"One hot summer day Pete and his friend Billy decided to buy a watermelon. They chose the biggest and the ripest one, in their opinion. After that the watermelon was weighed, and the scales showed w kilos. They rushed home, dying of thirst, and decided to divide the berry, however they faced a hard problem.Pete and Billy are great fans of even numbers, that's why they want to divide the watermelon in such a way that each of the two parts weighs even number of kilos, at the same time it is not obligatory that the parts are equal. The boys are extremely tired and want to start their meal as soon as possible, that's why you should help them and find out, if they can divide the watermelon in the way they want. For sure, each of them should get a part of positive weight.","hidden_unit_tests":"[{\"input\": \"8\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"53\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"77\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"32\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}, {\"input\": \"44\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}, {\"input\": \"98\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"90\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}, {\"input\": \"67\\r\\n\", \"output\": [\"No\", \"NO\", \"no\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}, {\"input\": \"88\\r\\n\", \"output\": [\"YES\", \"Yes\", \"yes\"]}]","length":13,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\", \"2\"]","prob_desc_input_spec":"The only line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009109), the number at the beginning of the game.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"5e74750f44142624e6da41d4b35beb9a","prob_desc_created_at":"1522771500","source_code":"#include<stdio.h>\n\nint main()\n{\n    int n;\n    while (scanf(\"%d\",&n) != EOF)\n    {\n\n        if(n % 2 != 0)\n            printf(\"Ehab\\n\");\n        else\n            printf(\"Mahmoud\\n\");\n    }\n    return 0;\n}","prob_desc_sample_outputs":"[\"Ehab\", \"Mahmoud\"]","lang_cluster":"C","code_uid":"df428b663dcdbf7d103b64d6ed675250","prob_desc_notes":"NoteIn the first sample, Mahmoud can't choose any integer a initially because there is no positive even integer less than or equal to 1 so Ehab wins.In the second sample, Mahmoud has to choose a\u2009=\u20092 and subtract it from n. It's Ehab's turn and n\u2009=\u20090. There is no positive odd integer less than or equal to 0 so Mahmoud wins.","prob_desc_output_spec":"Output \"Mahmoud\" (without quotes) if Mahmoud wins and \"Ehab\" (without quotes) otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"Mahmoud and Ehab play a game called the even-odd game. Ehab chooses his favorite integer n and then they take turns, starting from Mahmoud. In each player's turn, he has to choose an integer a and subtract it from n such that:  1\u2009\u2264\u2009a\u2009\u2264\u2009n.  If it's Mahmoud's turn, a has to be even, but if it's Ehab's turn, a has to be odd. If the current player can't choose any number satisfying the conditions, he loses. Can you determine the winner if they both play optimally?","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"33333\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"123123123\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"22222221\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"22222220\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"536870912\\r\\n\", \"output\": [\"Mahmoud\"]}, {\"input\": \"536870913\\r\\n\", \"output\": [\"Ehab\"]}, {\"input\": \"536870911\\r\\n\", \"output\": [\"Ehab\"]}]","length":15,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"7\\nj......\", \"7\\n...feon\", \"7\\n.l.r.o.\"]","prob_desc_input_spec":"First line contains an integer n (6\u2009\u2264\u2009n\u2009\u2264\u20098) \u2013 the length of the string. Next line contains a string consisting of n characters, each of which is either a lower case english letter (indicating a known letter) or a dot character (indicating an empty cell in the crossword).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"ec3d15ff198d1e4ab9fd04dd3b12e6c0","prob_desc_created_at":"1406480400","source_code":"#include<stdio.h>\nint main()\n{\n    int n;\n    char s[10];\n    scanf(\"%d\",&n);\n    scanf(\"%s\",s);\n    if(n==6)\n        printf(\"espeon\");\n    else if(n==8)\n    {\n        printf(\"vaporeon\");\n    }\n    else\n    {\n        if(s[0]=='j' || s[1]=='o' || s[3]=='t')\n            printf(\"jolteon\");\n        else if(s[0]=='f' || (s[1]=='l' && s[2]=='a' && s[3]=='r') || (s[3]=='r' && (s[2]=='a' || s[1]=='l')))\n            printf(\"flareon\");\n        else if(s[0]=='u' || s[1]=='m' || s[2]=='b')\n            printf(\"umbreon\");\n        else if(s[0]=='l' || s[1]=='e' || s[3]=='f')\n            printf(\"leafeon\");\n        else if(s[0]=='g' || s[3]=='c')\n            printf(\"glaceon\");\n        else if(s[0]=='s' || s[1]=='y' || s[3]=='v')\n            printf(\"sylveon\");\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"jolteon\", \"leafeon\", \"flareon\"]","lang_cluster":"C","code_uid":"3beba271f46dc005d1b15b170113bf4a","prob_desc_notes":"NoteHere's a set of names in a form you can paste into your solution:[\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"]{\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"}","prob_desc_output_spec":"Print a name of the pokemon that Eevee can evolve into that matches the pattern in the input. Use lower case letters only to print the name (in particular, do not capitalize the first letter).","prob_desc_output_to":"standard output","prob_desc_description":"You are solving the crossword problem K from IPSC 2014. You solved all the clues except for one: who does Eevee evolve into? You are not very into pokemons, but quick googling helped you find out, that Eevee can evolve into eight different pokemons: Vaporeon, Jolteon, Flareon, Espeon, Umbreon, Leafeon, Glaceon, and Sylveon.You know the length of the word in the crossword, and you already know some letters. Designers of the crossword made sure that the answer is unambiguous, so you can assume that exactly one pokemon out of the 8 that Eevee evolves into fits the length and the letters given. Your task is to find it.","hidden_unit_tests":"[{\"input\": \"7\\r\\nj......\\r\\n\", \"output\": [\"jolteon\"]}, {\"input\": \"7\\r\\n...feon\\r\\n\", \"output\": [\"leafeon\"]}, {\"input\": \"7\\r\\n.l.r.o.\\r\\n\", \"output\": [\"flareon\"]}, {\"input\": \"6\\r\\n.s..o.\\r\\n\", \"output\": [\"espeon\"]}, {\"input\": \"7\\r\\n.mb....\\r\\n\", \"output\": [\"umbreon\"]}, {\"input\": \"7\\r\\nglaceon\\r\\n\", \"output\": [\"glaceon\"]}, {\"input\": \"7\\r\\n.y.....\\r\\n\", \"output\": [\"sylveon\"]}, {\"input\": \"8\\r\\n.a.o.e.n\\r\\n\", \"output\": [\"vaporeon\"]}, {\"input\": \"6\\r\\n......\\r\\n\", \"output\": [\"espeon\"]}, {\"input\": \"8\\r\\n........\\r\\n\", \"output\": [\"vaporeon\"]}, {\"input\": \"6\\r\\n..p...\\r\\n\", \"output\": [\"espeon\"]}, {\"input\": \"7\\r\\n.laceon\\r\\n\", \"output\": [\"glaceon\"]}, {\"input\": \"8\\r\\n..p.....\\r\\n\", \"output\": [\"vaporeon\"]}, {\"input\": \"7\\r\\n..lveon\\r\\n\", \"output\": [\"sylveon\"]}, {\"input\": \"7\\r\\n.l.ceon\\r\\n\", \"output\": [\"glaceon\"]}, {\"input\": \"7\\r\\n.l.c...\\r\\n\", \"output\": [\"glaceon\"]}, {\"input\": \"7\\r\\n..b....\\r\\n\", \"output\": [\"umbreon\"]}, {\"input\": \"7\\r\\n..areon\\r\\n\", \"output\": [\"flareon\"]}, {\"input\": \"7\\r\\n..ar...\\r\\n\", \"output\": [\"flareon\"]}, {\"input\": \"7\\r\\n..lv...\\r\\n\", \"output\": [\"sylveon\"]}]","length":30,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"httpsunrux\", \"ftphttprururu\"]","prob_desc_input_spec":"The first line contains a non-empty string that Vasya wrote out in his notebook. This line consists of lowercase English letters only.  It is guaranteed that the given string contains at most 50 letters. It is guaranteed that the given string can be obtained from some correct Internet resource address, described above.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"4c999b7854a8a08960b6501a90b3bba3","prob_desc_created_at":"1353339000","source_code":"#include<stdio.h>\n#include<stdlib.h>\n#include<ctype.h>\n#include<string.h>\n#define N 50\nint main(){\n    char opcion1[]= {\"http:\/\/\"};\n    char opcion2[]={\"ftp:\/\/\"};\n    char opcion3[]={\".ru\"};\n    char opcion4= '\/';\n\n    int i=0;\n    int subindice=0;\n    int j=0;\n    int bandera=0;\n    char direccion[N];\n    \n    \n    scanf(\"%s\",direccion);\n    if(direccion[0]== 'h'){\n        printf(\"%s\",opcion1);\n        i+=4;\n    }\n    else {\n        i+=3;\n        printf(\"%s\",opcion2);\n    }\n    while(direccion[i]!='\\0'){\n        if(direccion[i]=='r' && direccion[i+1]=='u' && bandera==1){\n            printf(\"%s\",opcion3);\n            i+=2;\n            if(direccion[i]!='\\0'){\n                printf(\"%c\",opcion4);\n                for(subindice=i; subindice<(strlen(direccion)); subindice++){\n                    printf(\"%c\",direccion[subindice]);\n                }\n                i=strlen(direccion);\n            }\n        }\n        else if (bandera==0){\n            if(direccion[i]=='r' && direccion[i+1]=='u'){\n                printf(\"%c\",direccion[i]);\n                i++;\n                printf(\"%c\",direccion[i]);\n                i++;\n                bandera=1;\n            }\n            for(subindice=i; subindice<strlen(direccion); subindice++){\n                if(direccion[i]== 'r' && direccion[i+1]=='u'){\n                    i=subindice;\n                    bandera=1;\n                    break;\n                }\n                else {\n                    printf(\"%c\",direccion[subindice]);\n                    i++;\n                }\n            }\n        }\n    }\n    return 0;\n}","prob_desc_sample_outputs":"[\"http:\/\/sun.ru\/x\", \"ftp:\/\/http.ru\/ruru\"]","lang_cluster":"C","code_uid":"5a99fed23bc37177677500f93fe95bdf","prob_desc_notes":"NoteIn the second sample there are two more possible answers: \"ftp:\/\/httpruru.ru\" and \"ftp:\/\/httpru.ru\/ru\".","prob_desc_output_spec":"Print a single line \u2014 the address of the Internet resource that Vasya liked. If there are several addresses that meet the problem limitations, you are allowed to print any of them.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya is an active Internet user. One day he came across an Internet resource he liked, so he wrote its address in the notebook. We know that the address of the written resource has format: &lt;protocol&gt;:\/\/&lt;domain&gt;.ru[\/&lt;context&gt;] where:  &lt;protocol&gt; can equal either \"http\" (without the quotes) or \"ftp\" (without the quotes),  &lt;domain&gt; is a non-empty string, consisting of lowercase English letters,  the \/&lt;context&gt; part may not be present. If it is present, then &lt;context&gt; is a non-empty string, consisting of lowercase English letters. If string &lt;context&gt; isn't present in the address, then the additional character \"\/\" isn't written. Thus, the address has either two characters \"\/\" (the ones that go before the domain), or three (an extra one in front of the context).When the boy came home, he found out that the address he wrote in his notebook had no punctuation marks. Vasya must have been in a lot of hurry and didn't write characters \":\", \"\/\", \".\".Help Vasya to restore the possible address of the recorded Internet resource.","hidden_unit_tests":"[{\"input\": \"httpsunrux\\r\\n\", \"output\": [\"http:\/\/sun.ru\/x\"]}, {\"input\": \"ftphttprururu\\r\\n\", \"output\": [\"ftp:\/\/http.ru\/ruru\"]}, {\"input\": \"httpuururrururruruurururrrrrurrurrurruruuruuu\\r\\n\", \"output\": [\"http:\/\/uu.ru\/rrururruruurururrrrrurrurrurruruuruuu\"]}, {\"input\": \"httpabuaruauabbaruru\\r\\n\", \"output\": [\"http:\/\/abua.ru\/auabbaruru\"]}, {\"input\": \"httpuurrruurruuruuruuurrrurururuurruuuuuuruurr\\r\\n\", \"output\": [\"http:\/\/uurr.ru\/urruuruuruuurrrurururuurruuuuuuruurr\"]}, {\"input\": \"httpruhhphhhpuhruruhhpruhhphruhhru\\r\\n\", \"output\": [\"http:\/\/ruhhphhhpuh.ru\/ruhhpruhhphruhhru\"]}, {\"input\": \"httpftprftprutprururftruruftptp\\r\\n\", \"output\": [\"http:\/\/ftprftp.ru\/tprururftruruftptp\"]}, {\"input\": \"httpfttpftpfttftpftpftppfrurururu\\r\\n\", \"output\": [\"http:\/\/fttpftpfttftpftpftppf.ru\/rururu\"]}, {\"input\": \"httpruhttttpruhttprupruhttpruhtturuhttphtruuru\\r\\n\", \"output\": [\"http:\/\/ruhttttp.ru\/httprupruhttpruhtturuhttphtruuru\"]}, {\"input\": \"httpsjkazaaghasjkasjkabruru\\r\\n\", \"output\": [\"http:\/\/sjkazaaghasjkasjkab.ru\/ru\"]}, {\"input\": \"httpftphttptphttphrururuhpftphtpftphtpftphtptpft\\r\\n\", \"output\": [\"http:\/\/ftphttptphttph.ru\/ruruhpftphtpftphtpftphtptpft\"]}, {\"input\": \"httpppppru\\r\\n\", \"output\": [\"http:\/\/pppp.ru\"]}, {\"input\": \"ftprrurururrurururuurrururruuru\\r\\n\", \"output\": [\"ftp:\/\/r.ru\/rururrurururuurrururruuru\"]}, {\"input\": \"ftpabaruru\\r\\n\", \"output\": [\"ftp:\/\/aba.ru\/ru\"]}, {\"input\": \"ftpruurruurururururuuruuur\\r\\n\", \"output\": [\"ftp:\/\/ruur.ru\/urururururuuruuur\"]}, {\"input\": \"ftphhphruhhpruhhpuhhpuruhhphruhhruhhpuhhru\\r\\n\", \"output\": [\"ftp:\/\/hhph.ru\/hhpruhhpuhhpuruhhphruhhruhhpuhhru\"]}, {\"input\": \"ftparua\\r\\n\", \"output\": [\"ftp:\/\/a.ru\/a\"]}, {\"input\": \"httpzru\\r\\n\", \"output\": [\"http:\/\/z.ru\"]}, {\"input\": \"httprrur\\r\\n\", \"output\": [\"http:\/\/r.ru\/r\"]}, {\"input\": \"ftprru\\r\\n\", \"output\": [\"ftp:\/\/r.ru\"]}]","length":62,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"... ... ...\\n... ... ...\\n... ... ...\\n\\n... ... ...\\n... ... ...\\n... x.. ...\\n\\n... ... ...\\n... ... ...\\n... ... ...\\n6 4\", \"xoo x.. x..\\nooo ... ...\\nooo ... ...\\n\\nx.. x.. x..\\n... ... ...\\n... ... ...\\n\\nx.. x.. x..\\n... ... ...\\n... ... ...\\n7 4\", \"o.. ... ...\\n... ... ...\\n... ... ...\\n\\n... xxx ...\\n... xox ...\\n... ooo ...\\n\\n... ... ...\\n... ... ...\\n... ... ...\\n5 5\"]","prob_desc_input_spec":"First 11 lines contains descriptions of table with 9 rows and 9 columns which are divided into 9 small fields by spaces and empty lines. Each small field is described by 9 characters without spaces and empty lines. character \"x\" (ASCII-code 120) means that the cell is occupied with chip of the first player, character \"o\" (ASCII-code 111) denotes a field occupied with chip of the second player, character \".\" (ASCII-code 46) describes empty cell. The line after the table contains two integers x and y (1\u2009\u2264\u2009x,\u2009y\u2009\u2264\u20099). They describe coordinates of the cell in table where the last move was done. Rows in the table are numbered from up to down and columns are numbered from left to right. It's guaranteed that cell where the last move was done is filled with \"x\" or \"o\". Also, it's guaranteed that there is at least one empty cell. It's not guaranteed that current state of game is reachable.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"8f0fad22f629332868c39969492264d3","prob_desc_created_at":"1514037900","source_code":"#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <stdlib.h>\n#define eps 1e-4\n#define PI acos(-1.0)\nchar s[10][15];\nint sti[4]={0,1,4,7},eni[4]={0,3,6,9};\nint stj[4]={0,0,4,8},enj[4]={0,2,6,10};\nvoid printall2()\n{\n\tfor (int i=1;i<=9;i++)\n\t{\n\t\tfor (int j=0;j<=10;j++)\n\t\t\tif (s[i][j]=='.') printf(\"!\");\n\t\t\telse printf(\"%c\",s[i][j]);\n\t\tprintf(\"\\n\");\n\t\tif (!(i%3)) printf(\"\\n\");\n\t}\n}\nvoid printall1()\n{\n\tfor (int i=1;i<=9;i++)\n\t{\n\t\tfor (int j=0;j<=10;j++)\n\t\t\tprintf(\"%c\",s[i][j]);\n\t\tprintf(\"\\n\");\n\t\tif (!(i%3)&&i!=9) printf(\"\\n\");\n\t}\n}\nint main()\n{\n\tfor (int i=1;i<=3;i++) gets(s[i]);\n\tgets(s[0]);\n\tfor (int i=4;i<=6;i++) gets(s[i]);\n\tgets(s[0]);\n\tfor (int i=7;i<=9;i++) gets(s[i]);\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tn%=3; m%=3; \n\tif (!n) n=3;\n\tif (!m) m=3;\n\tint flag=0;\n\tfor (int i=sti[n];i<=eni[n];i++)\n\t\tfor (int j=stj[m];j<=enj[m];j++)\n\t\t\tif (s[i][j]=='.')\n\t\t\t{\n\t\t\t\tflag++;\n\t\t\t\ts[i][j]='!';\n\t\t\t}\n\tif (flag) printall1();\n\telse printall2();\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"... ... ... \\n... ... ... \\n... ... ... \\n\\n... ... ... \\n... ... ... \\n... x.. ... \\n\\n!!! ... ... \\n!!! ... ... \\n!!! ... ...\", \"xoo x!! x!! \\nooo !!! !!! \\nooo !!! !!! \\n\\nx!! x!! x!! \\n!!! !!! !!! \\n!!! !!! !!! \\n\\nx!! x!! x!! \\n!!! !!! !!! \\n!!! !!! !!!\", \"o!! !!! !!! \\n!!! !!! !!! \\n!!! !!! !!! \\n\\n!!! xxx !!! \\n!!! xox !!! \\n!!! ooo !!! \\n\\n!!! !!! !!! \\n!!! !!! !!! \\n!!! !!! !!!\"]","lang_cluster":"C","code_uid":"60963d7db9b16b782869efad9cbe0603","prob_desc_notes":"NoteIn the first test case the first player made a move to lower left cell of central field, so the second player can put a chip only to cells of lower left field.In the second test case the last move was done to upper left cell of lower central field, however all cells in upper left field are occupied, so the second player can put his chip to any empty cell.In the third test case the last move was done to central cell of central field, so current player can put his chip to any cell of central field, which is already occupied, so he can move anywhere. Pay attention that this state of the game is unreachable.","prob_desc_output_spec":"Output the field in same format with characters \"!\" (ASCII-code 33) on positions where the current player can put his chip. All other cells should not be modified.","prob_desc_output_to":"standard output","prob_desc_description":"Two bears are playing tic-tac-toe via mail. It's boring for them to play usual tic-tac-toe game, so they are a playing modified version of this game. Here are its rules.The game is played on the following field.  Players are making moves by turns. At first move a player can put his chip in any cell of any small field. For following moves, there are some restrictions: if during last move the opposite player put his chip to cell with coordinates (xl,\u2009yl) in some small field, the next move should be done in one of the cells of the small field with coordinates (xl,\u2009yl). For example, if in the first move a player puts his chip to lower left cell of central field, then the second player on his next move should put his chip into some cell of lower left field (pay attention to the first test case). If there are no free cells in the required field, the player can put his chip to any empty cell on any field.You are given current state of the game and coordinates of cell in which the last move was done. You should find all cells in which the current player can put his chip.A hare works as a postman in the forest, he likes to foul bears. Sometimes he changes the game field a bit, so the current state of the game could be unreachable. However, after his changes the cell where the last move was done is not empty. You don't need to find if the state is unreachable or not, just output possible next moves according to the rules.","hidden_unit_tests":"[{\"input\": \"... ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... x.. ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n6 4\\r\\n\", \"output\": [\"... ... ...\\r\\n ... ... ...\\r\\n ... ... ...\\r\\n\\r\\n ... ... ...\\r\\n ... ... ...\\r\\n ... x.. ...\\r\\n\\r\\n !!! ... ...\\r\\n !!! ... ...\\r\\n !!! ... ...\", \"... ... ... \\r\\n... ... ... \\r\\n... ... ... \\r\\n\\r\\n... ... ... \\r\\n... ... ... \\r\\n... x.. ... \\r\\n\\r\\n!!! ... ... \\r\\n!!! ... ... \\r\\n!!! ... ...\", \"... ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... x.. ...\\r\\n\\r\\n!!! ... ...\\r\\n!!! ... ...\\r\\n!!! ... ...\"]}, {\"input\": \"xoo x.. x..\\r\\nooo ... ...\\r\\nooo ... ...\\r\\n\\r\\nx.. x.. x..\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\nx.. x.. x..\\r\\n... ... ...\\r\\n... ... ...\\r\\n7 4\\r\\n\", \"output\": [\"xoo x!! x!!\\r\\n ooo !!! !!!\\r\\n ooo !!! !!!\\r\\n\\r\\n x!! x!! x!!\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\\r\\n\\r\\n x!! x!! x!!\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\", \"xoo x!! x!!\\r\\nooo !!! !!!\\r\\nooo !!! !!!\\r\\n\\r\\nx!! x!! x!!\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\\r\\n\\r\\nx!! x!! x!!\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\", \"xoo x!! x!! \\r\\nooo !!! !!! \\r\\nooo !!! !!! \\r\\n\\r\\nx!! x!! x!! \\r\\n!!! !!! !!! \\r\\n!!! !!! !!! \\r\\n\\r\\nx!! x!! x!! \\r\\n!!! !!! !!! \\r\\n!!! !!! !!!\"]}, {\"input\": \"o.. ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\n... xxx ...\\r\\n... xox ...\\r\\n... ooo ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n5 5\\r\\n\", \"output\": [\"o!! !!! !!!\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\\r\\n\\r\\n !!! xxx !!!\\r\\n !!! xox !!!\\r\\n !!! ooo !!!\\r\\n\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\\r\\n !!! !!! !!!\", \"o!! !!! !!!\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\\r\\n\\r\\n!!! xxx !!!\\r\\n!!! xox !!!\\r\\n!!! ooo !!!\\r\\n\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\\r\\n!!! !!! !!!\", \"o!! !!! !!! \\r\\n!!! !!! !!! \\r\\n!!! !!! !!! \\r\\n\\r\\n!!! xxx !!! \\r\\n!!! xox !!! \\r\\n!!! ooo !!! \\r\\n\\r\\n!!! !!! !!! \\r\\n!!! !!! !!! \\r\\n!!! !!! !!!\"]}, {\"input\": \".o. .o. ..x\\r\\n..x .xx ..o\\r\\n... ... ...\\r\\n\\r\\n... ... xxo\\r\\n..x o.o oxo\\r\\n.x. .o. xoo\\r\\n\\r\\n... o.. ...\\r\\n..o .xx ..x\\r\\n... ... ...\\r\\n5 9\\r\\n\", \"output\": [\"!o! !o! !!x \\r\\n!!x !xx !!o \\r\\n!!! !!! !!! \\r\\n\\r\\n!!! !!! xxo \\r\\n!!x o!o oxo \\r\\n!x! !o! xoo \\r\\n\\r\\n!!! o!! !!! \\r\\n!!o !xx !!x \\r\\n!!! !!! !!!\", \"!o! !o! !!x\\r\\n!!x !xx !!o\\r\\n!!! !!! !!!\\r\\n\\r\\n!!! !!! xxo\\r\\n!!x o!o oxo\\r\\n!x! !o! xoo\\r\\n\\r\\n!!! o!! !!!\\r\\n!!o !xx !!x\\r\\n!!! !!! !!!\", \"!o! !o! !!x\\r\\n !!x !xx !!o\\r\\n !!! !!! !!!\\r\\n\\r\\n !!! !!! xxo\\r\\n !!x o!o oxo\\r\\n !x! !o! xoo\\r\\n\\r\\n !!! o!! !!!\\r\\n !!o !xx !!x\\r\\n !!! !!! !!!\"]}, {\"input\": \"... .o. ...\\r\\n... ... ...\\r\\n... ... ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... .x. ..x\\r\\n\\r\\n.x. ... ...\\r\\n..o ... .o.\\r\\n... o.o xx.\\r\\n1 5\\r\\n\", \"output\": [\"... !o! ... \\r\\n... !!! ... \\r\\n... !!! ... \\r\\n\\r\\n... ... ... \\r\\n... ... ... \\r\\n... .x. ..x \\r\\n\\r\\n.x. ... ... \\r\\n..o ... .o. \\r\\n... o.o xx.\", \"... !o! ...\\r\\n... !!! ...\\r\\n... !!! ...\\r\\n\\r\\n... ... ...\\r\\n... ... ...\\r\\n... .x. ..x\\r\\n\\r\\n.x. ... ...\\r\\n..o ... .o.\\r\\n... o.o xx.\", \"... !o! ...\\r\\n ... !!! ...\\r\\n ... !!! ...\\r\\n\\r\\n ... ... ...\\r\\n ... ... ...\\r\\n ... .x. ..x\\r\\n\\r\\n .x. ... ...\\r\\n ..o ... .o.\\r\\n ... o.o xx.\"]}, {\"input\": \"ooo oxx xxo\\r\\nx.x oox xox\\r\\noox xo. xxx\\r\\n\\r\\nxxo xxx o.o\\r\\nxoo xo. oxo\\r\\nooo xox ox.\\r\\n\\r\\nxoo xoo .oo\\r\\nxox xox ox.\\r\\noxx xox oxo\\r\\n1 3\\r\\n\", \"output\": [\"ooo oxx xxo \\r\\nx!x oox xox \\r\\noox xo! xxx \\r\\n\\r\\nxxo xxx o!o \\r\\nxoo xo! oxo \\r\\nooo xox ox! \\r\\n\\r\\nxoo xoo !oo \\r\\nxox xox ox! \\r\\noxx xox oxo\", \"ooo oxx xxo\\r\\nx!x oox xox\\r\\noox xo! xxx\\r\\n\\r\\nxxo xxx o!o\\r\\nxoo xo! oxo\\r\\nooo xox ox!\\r\\n\\r\\nxoo xoo !oo\\r\\nxox xox ox!\\r\\noxx xox oxo\", \"ooo oxx xxo\\r\\n x!x oox xox\\r\\n oox xo! xxx\\r\\n\\r\\n xxo xxx o!o\\r\\n xoo xo! oxo\\r\\n ooo xox ox!\\r\\n\\r\\n xoo xoo !oo\\r\\n xox xox ox!\\r\\n oxx xox oxo\"]}, {\"input\": \"... ... ...\\r\\n..o ... ..o\\r\\n... .x. ..x\\r\\n\\r\\nx.. ... ...\\r\\n.x. .ox oo.\\r\\n... .xo ..x\\r\\n\\r\\n... ... .ox\\r\\n... ox. ..x\\r\\n... ..o .o.\\r\\n2 3\\r\\n\", \"output\": [\"... ... ...\\r\\n ..o ... ..o\\r\\n ... .x. ..x\\r\\n\\r\\n x.. ... !!!\\r\\n .x. .ox oo!\\r\\n ... .xo !!x\\r\\n\\r\\n ... ... .ox\\r\\n ... ox. ..x\\r\\n ... ..o .o.\", \"... ... ...\\r\\n..o ... ..o\\r\\n... .x. ..x\\r\\n\\r\\nx.. ... !!!\\r\\n.x. .ox oo!\\r\\n... .xo !!x\\r\\n\\r\\n... ... .ox\\r\\n... ox. ..x\\r\\n... ..o .o.\", \"... ... ... \\r\\n..o ... ..o \\r\\n... .x. ..x \\r\\n\\r\\nx.. ... !!! \\r\\n.x. .ox oo! \\r\\n... .xo !!x \\r\\n\\r\\n... ... .ox \\r\\n... ox. ..x \\r\\n... ..o .o.\"]}, {\"input\": \"xox o.x xxo\\r\\nxox xox oxo\\r\\nxxx .xx xoo\\r\\n\\r\\nooo oox o.x\\r\\n.xx xx. oo.\\r\\nooo xox ooo\\r\\n\\r\\nooo oxo xox\\r\\nx.x xox xox\\r\\noxo x.o xxo\\r\\n1 7\\r\\n\", \"output\": [\"xox o!x xxo\\r\\n xox xox oxo\\r\\n xxx !xx xoo\\r\\n\\r\\n ooo oox o!x\\r\\n !xx xx! oo!\\r\\n ooo xox ooo\\r\\n\\r\\n ooo oxo xox\\r\\n x!x xox xox\\r\\n oxo x!o xxo\", \"xox o!x xxo\\r\\nxox xox oxo\\r\\nxxx !xx xoo\\r\\n\\r\\nooo oox o!x\\r\\n!xx xx! oo!\\r\\nooo xox ooo\\r\\n\\r\\nooo oxo xox\\r\\nx!x xox xox\\r\\noxo x!o xxo\", \"xox o!x xxo \\r\\nxox xox oxo \\r\\nxxx !xx xoo \\r\\n\\r\\nooo oox o!x \\r\\n!xx xx! oo! \\r\\nooo xox ooo \\r\\n\\r\\nooo oxo xox \\r\\nx!x xox xox \\r\\noxo x!o xxo\"]}, {\"input\": \"ox. x.o ..x\\r\\n... ..o .o.\\r\\n.o. ... x.o\\r\\n\\r\\nx.x .oo ...\\r\\n..o ox. .xx\\r\\n..x o.x .o.\\r\\n\\r\\n... ... .x.\\r\\nox. xx. .o.\\r\\n... ... ..o\\r\\n9 9\\r\\n\", \"output\": [\"ox. x.o ..x\\r\\n... ..o .o.\\r\\n.o. ... x.o\\r\\n\\r\\nx.x .oo ...\\r\\n..o ox. .xx\\r\\n..x o.x .o.\\r\\n\\r\\n... ... !x!\\r\\nox. xx. !o!\\r\\n... ... !!o\", \"ox. x.o ..x\\r\\n ... ..o .o.\\r\\n .o. ... x.o\\r\\n\\r\\n x.x .oo ...\\r\\n ..o ox. .xx\\r\\n ..x o.x .o.\\r\\n\\r\\n ... ... !x!\\r\\n ox. xx. !o!\\r\\n ... ... !!o\", \"ox. x.o ..x \\r\\n... ..o .o. \\r\\n.o. ... x.o \\r\\n\\r\\nx.x .oo ... \\r\\n..o ox. .xx \\r\\n..x o.x .o. \\r\\n\\r\\n... ... !x! \\r\\nox. xx. !o! \\r\\n... ... !!o\"]}, {\"input\": \"xx. oxx .xo\\r\\nxxx o.o xox\\r\\nxoo xoo xoo\\r\\n\\r\\nooo o.x xox\\r\\no.. xoo .xo\\r\\noxx .x. xoo\\r\\n\\r\\nooo oxo oxx\\r\\nxxx xox ..o\\r\\noo. oxx xx.\\r\\n3 8\\r\\n\", \"output\": [\"xx! oxx !xo\\r\\n xxx o!o xox\\r\\n xoo xoo xoo\\r\\n\\r\\n ooo o!x xox\\r\\n o!! xoo !xo\\r\\n oxx !x! xoo\\r\\n\\r\\n ooo oxo oxx\\r\\n xxx xox !!o\\r\\n oo! oxx xx!\", \"xx! oxx !xo \\r\\nxxx o!o xox \\r\\nxoo xoo xoo \\r\\n\\r\\nooo o!x xox \\r\\no!! xoo !xo \\r\\noxx !x! xoo \\r\\n\\r\\nooo oxo oxx \\r\\nxxx xox !!o \\r\\noo! oxx xx!\", \"xx! oxx !xo\\r\\nxxx o!o xox\\r\\nxoo xoo xoo\\r\\n\\r\\nooo o!x xox\\r\\no!! xoo !xo\\r\\noxx !x! xoo\\r\\n\\r\\nooo oxo oxx\\r\\nxxx xox !!o\\r\\noo! oxx xx!\"]}, {\"input\": \"... xo. o..\\r\\noo. ..o xx.\\r\\n..x x.. ..o\\r\\n\\r\\n.ox .xx ...\\r\\no.x xox xo.\\r\\nxox .xo ..o\\r\\n\\r\\n..o ... xxo\\r\\no.. .o. oxo\\r\\n..o x.. ..x\\r\\n8 9\\r\\n\", \"output\": [\"... xo. o.. \\r\\noo. ..o xx. \\r\\n..x x.. ..o \\r\\n\\r\\n.ox .xx !!! \\r\\no.x xox xo! \\r\\nxox .xo !!o \\r\\n\\r\\n..o ... xxo \\r\\no.. .o. oxo \\r\\n..o x.. ..x\", \"... xo. o..\\r\\n oo. ..o xx.\\r\\n ..x x.. ..o\\r\\n\\r\\n .ox .xx !!!\\r\\n o.x xox xo!\\r\\n xox .xo !!o\\r\\n\\r\\n ..o ... xxo\\r\\n o.. .o. oxo\\r\\n ..o x.. ..x\", \"... xo. o..\\r\\noo. ..o xx.\\r\\n..x x.. ..o\\r\\n\\r\\n.ox .xx !!!\\r\\no.x xox xo!\\r\\nxox .xo !!o\\r\\n\\r\\n..o ... xxo\\r\\no.. .o. oxo\\r\\n..o x.. ..x\"]}, {\"input\": \"oox xoo xxx\\r\\nooo xxo oxo\\r\\nxxx xoo xxo\\r\\n\\r\\noxo oxx xoo\\r\\nxoo oox xox\\r\\nxox oox oox\\r\\n\\r\\nxxo xoo oxo\\r\\noxx xxx xxx\\r\\noxo oxo oo.\\r\\n1 5\\r\\n\", \"output\": [\"oox xoo xxx\\r\\nooo xxo oxo\\r\\nxxx xoo xxo\\r\\n\\r\\noxo oxx xoo\\r\\nxoo oox xox\\r\\nxox oox oox\\r\\n\\r\\nxxo xoo oxo\\r\\noxx xxx xxx\\r\\noxo oxo oo!\", \"oox xoo xxx \\r\\nooo xxo oxo \\r\\nxxx xoo xxo \\r\\n\\r\\noxo oxx xoo \\r\\nxoo oox xox \\r\\nxox oox oox \\r\\n\\r\\nxxo xoo oxo \\r\\noxx xxx xxx \\r\\noxo oxo oo!\", \"oox xoo xxx\\r\\n ooo xxo oxo\\r\\n xxx xoo xxo\\r\\n\\r\\n oxo oxx xoo\\r\\n xoo oox xox\\r\\n xox oox oox\\r\\n\\r\\n xxo xoo oxo\\r\\n oxx xxx xxx\\r\\n oxo oxo oo!\"]}, {\"input\": \".oo x.o xoo\\r\\n.o. xxx .x.\\r\\n..o x.o xxx\\r\\n\\r\\n..o .oo .xx\\r\\n.x. xox o.o\\r\\n.xo o.o .x.\\r\\n\\r\\n.o. xo. xxx\\r\\n.xo o.. .xo\\r\\n..o ..o xox\\r\\n1 8\\r\\n\", \"output\": [\".oo x!o xoo \\r\\n.o. xxx .x. \\r\\n..o x!o xxx \\r\\n\\r\\n..o .oo .xx \\r\\n.x. xox o.o \\r\\n.xo o.o .x. \\r\\n\\r\\n.o. xo. xxx \\r\\n.xo o.. .xo \\r\\n..o ..o xox\", \".oo x!o xoo\\r\\n.o. xxx .x.\\r\\n..o x!o xxx\\r\\n\\r\\n..o .oo .xx\\r\\n.x. xox o.o\\r\\n.xo o.o .x.\\r\\n\\r\\n.o. xo. xxx\\r\\n.xo o.. .xo\\r\\n..o ..o xox\", \".oo x!o xoo\\r\\n .o. xxx .x.\\r\\n ..o x!o xxx\\r\\n\\r\\n ..o .oo .xx\\r\\n .x. xox o.o\\r\\n .xo o.o .x.\\r\\n\\r\\n .o. xo. xxx\\r\\n .xo o.. .xo\\r\\n ..o ..o xox\"]}, {\"input\": \"xxo xoo xxo\\r\\nooo ooo xxx\\r\\noox oxo oxx\\r\\n\\r\\noxo oxo xxx\\r\\nxoo oxx oxo\\r\\nxxx oxx ooo\\r\\n\\r\\noxx xoo xxo\\r\\nxxx oox xox\\r\\nxxo o.o oxo\\r\\n9 6\\r\\n\", \"output\": [\"xxo xoo xxo\\r\\n ooo ooo xxx\\r\\n oox oxo oxx\\r\\n\\r\\n oxo oxo xxx\\r\\n xoo oxx oxo\\r\\n xxx oxx ooo\\r\\n\\r\\n oxx xoo xxo\\r\\n xxx oox xox\\r\\n xxo o!o oxo\", \"xxo xoo xxo \\r\\nooo ooo xxx \\r\\noox oxo oxx \\r\\n\\r\\noxo oxo xxx \\r\\nxoo oxx oxo \\r\\nxxx oxx ooo \\r\\n\\r\\noxx xoo xxo \\r\\nxxx oox xox \\r\\nxxo o!o oxo\", \"xxo xoo xxo\\r\\nooo ooo xxx\\r\\noox oxo oxx\\r\\n\\r\\noxo oxo xxx\\r\\nxoo oxx oxo\\r\\nxxx oxx ooo\\r\\n\\r\\noxx xoo xxo\\r\\nxxx oox xox\\r\\nxxo o!o oxo\"]}, {\"input\": \"ox. o.x .o.\\r\\nxxo xoo .oo\\r\\n.xx oox o..\\r\\n\\r\\nxx. oox oxx\\r\\noox oxx xxo\\r\\nxo. oxo x.x\\r\\n\\r\\no.x .x. xx.\\r\\n.xo ox. ooo\\r\\n.ox xo. ..o\\r\\n6 2\\r\\n\", \"output\": [\"ox. o.x .o. \\r\\nxxo xoo .oo \\r\\n.xx oox o.. \\r\\n\\r\\nxx. oox oxx \\r\\noox oxx xxo \\r\\nxo. oxo x.x \\r\\n\\r\\no.x !x! xx. \\r\\n.xo ox! ooo \\r\\n.ox xo! ..o\", \"ox. o.x .o.\\r\\n xxo xoo .oo\\r\\n .xx oox o..\\r\\n\\r\\n xx. oox oxx\\r\\n oox oxx xxo\\r\\n xo. oxo x.x\\r\\n\\r\\n o.x !x! xx.\\r\\n .xo ox! ooo\\r\\n .ox xo! ..o\", \"ox. o.x .o.\\r\\nxxo xoo .oo\\r\\n.xx oox o..\\r\\n\\r\\nxx. oox oxx\\r\\noox oxx xxo\\r\\nxo. oxo x.x\\r\\n\\r\\no.x !x! xx.\\r\\n.xo ox! ooo\\r\\n.ox xo! ..o\"]}, {\"input\": \"oxo xoo ox.\\r\\nxxx xoo xxo\\r\\nxoo xxx xox\\r\\n\\r\\nxxx xxx xoo\\r\\nooo o.o oxx\\r\\nxxo ooo xxx\\r\\n\\r\\nooo oox ooo\\r\\nooo oxo xxx\\r\\nxxo xox xxo\\r\\n6 1\\r\\n\", \"output\": [\"oxo xoo ox!\\r\\n xxx xoo xxo\\r\\n xoo xxx xox\\r\\n\\r\\n xxx xxx xoo\\r\\n ooo o!o oxx\\r\\n xxo ooo xxx\\r\\n\\r\\n ooo oox ooo\\r\\n ooo oxo xxx\\r\\n xxo xox xxo\", \"oxo xoo ox! \\r\\nxxx xoo xxo \\r\\nxoo xxx xox \\r\\n\\r\\nxxx xxx xoo \\r\\nooo o!o oxx \\r\\nxxo ooo xxx \\r\\n\\r\\nooo oox ooo \\r\\nooo oxo xxx \\r\\nxxo xox xxo\", \"oxo xoo ox!\\r\\nxxx xoo xxo\\r\\nxoo xxx xox\\r\\n\\r\\nxxx xxx xoo\\r\\nooo o!o oxx\\r\\nxxo ooo xxx\\r\\n\\r\\nooo oox ooo\\r\\nooo oxo xxx\\r\\nxxo xox xxo\"]}, {\"input\": \".xo oxx xoo\\r\\nooo .xo xxx\\r\\noxo oox xoo\\r\\n\\r\\nx.o xoo xxx\\r\\nxo. oxo oxx\\r\\nx.x xoo o.o\\r\\n\\r\\nxoo xox oxx\\r\\nooo .x. .xx\\r\\nxox x.. xoo\\r\\n6 5\\r\\n\", \"output\": [\".xo oxx xoo\\r\\n ooo .xo xxx\\r\\n oxo oox xoo\\r\\n\\r\\n x.o xoo xxx\\r\\n xo. oxo oxx\\r\\n x.x xoo o.o\\r\\n\\r\\n xoo xox oxx\\r\\n ooo !x! .xx\\r\\n xox x!! xoo\", \".xo oxx xoo\\r\\nooo .xo xxx\\r\\noxo oox xoo\\r\\n\\r\\nx.o xoo xxx\\r\\nxo. oxo oxx\\r\\nx.x xoo o.o\\r\\n\\r\\nxoo xox oxx\\r\\nooo !x! .xx\\r\\nxox x!! xoo\", \".xo oxx xoo \\r\\nooo .xo xxx \\r\\noxo oox xoo \\r\\n\\r\\nx.o xoo xxx \\r\\nxo. oxo oxx \\r\\nx.x xoo o.o \\r\\n\\r\\nxoo xox oxx \\r\\nooo !x! .xx \\r\\nxox x!! xoo\"]}, {\"input\": \"oxo xox ooo\\r\\n.xo xxo oxx\\r\\nxxx oxo xxx\\r\\n\\r\\nxxo oxx .xx\\r\\nxo. xoo oxx\\r\\noxo oxx xox\\r\\n\\r\\nxoo ooo oox\\r\\nooo ooo xxo\\r\\nxxx x.o oxo\\r\\n2 2\\r\\n\", \"output\": [\"oxo xox ooo \\r\\n!xo xxo oxx \\r\\nxxx oxo xxx \\r\\n\\r\\nxxo oxx !xx \\r\\nxo! xoo oxx \\r\\noxo oxx xox \\r\\n\\r\\nxoo ooo oox \\r\\nooo ooo xxo \\r\\nxxx x!o oxo\", \"oxo xox ooo\\r\\n !xo xxo oxx\\r\\n xxx oxo xxx\\r\\n\\r\\n xxo oxx !xx\\r\\n xo! xoo oxx\\r\\n oxo oxx xox\\r\\n\\r\\n xoo ooo oox\\r\\n ooo ooo xxo\\r\\n xxx x!o oxo\", \"oxo xox ooo\\r\\n!xo xxo oxx\\r\\nxxx oxo xxx\\r\\n\\r\\nxxo oxx !xx\\r\\nxo! xoo oxx\\r\\noxo oxx xox\\r\\n\\r\\nxoo ooo oox\\r\\nooo ooo xxo\\r\\nxxx x!o oxo\"]}, {\"input\": \"xox xxx xoo\\r\\nxoo xxx oxo\\r\\nxoo oox xoo\\r\\n\\r\\noxo oox xox\\r\\noxo xox xox\\r\\noox xoo oox\\r\\n\\r\\no.o xox oox\\r\\noox xxo xxo\\r\\nxox xxx oxo\\r\\n3 4\\r\\n\", \"output\": [\"xox xxx xoo\\r\\n xoo xxx oxo\\r\\n xoo oox xoo\\r\\n\\r\\n oxo oox xox\\r\\n oxo xox xox\\r\\n oox xoo oox\\r\\n\\r\\n o!o xox oox\\r\\n oox xxo xxo\\r\\n xox xxx oxo\", \"xox xxx xoo \\r\\nxoo xxx oxo \\r\\nxoo oox xoo \\r\\n\\r\\noxo oox xox \\r\\noxo xox xox \\r\\noox xoo oox \\r\\n\\r\\no!o xox oox \\r\\noox xxo xxo \\r\\nxox xxx oxo\", \"xox xxx xoo\\r\\nxoo xxx oxo\\r\\nxoo oox xoo\\r\\n\\r\\noxo oox xox\\r\\noxo xox xox\\r\\noox xoo oox\\r\\n\\r\\no!o xox oox\\r\\noox xxo xxo\\r\\nxox xxx oxo\"]}, {\"input\": \"ooo xxx .x.\\r\\nxxo oox ooo\\r\\n.o. oox xxx\\r\\n\\r\\nxox oxx xxo\\r\\nxxx oxx oxx\\r\\noxx ooo ooo\\r\\n\\r\\n.oo xoo xo.\\r\\nxxo oox ooo\\r\\nxox xxx xxo\\r\\n5 1\\r\\n\", \"output\": [\"ooo xxx !x! \\r\\nxxo oox ooo \\r\\n!o! oox xxx \\r\\n\\r\\nxox oxx xxo \\r\\nxxx oxx oxx \\r\\noxx ooo ooo \\r\\n\\r\\n!oo xoo xo! \\r\\nxxo oox ooo \\r\\nxox xxx xxo\", \"ooo xxx !x!\\r\\nxxo oox ooo\\r\\n!o! oox xxx\\r\\n\\r\\nxox oxx xxo\\r\\nxxx oxx oxx\\r\\noxx ooo ooo\\r\\n\\r\\n!oo xoo xo!\\r\\nxxo oox ooo\\r\\nxox xxx xxo\", \"ooo xxx !x!\\r\\n xxo oox ooo\\r\\n !o! oox xxx\\r\\n\\r\\n xox oxx xxo\\r\\n xxx oxx oxx\\r\\n oxx ooo ooo\\r\\n\\r\\n !oo xoo xo!\\r\\n xxo oox ooo\\r\\n xox xxx xxo\"]}]","length":54,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3+2+1\", \"1+1+3+1+3\", \"2\"]","prob_desc_input_spec":"The first line contains a non-empty string s \u2014 the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2 and 3. String s is at most 100 characters long.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"76c7312733ef9d8278521cf09d3ccbc8","prob_desc_created_at":"1377531000","source_code":"#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n\tchar s[100], c[100], d[100];\n\tint i,j = 0, t;\n\tscanf(\"%s\", s);\n\n\t\/\/t copy\n\tfor (i = 0; i < strlen(s); ++i)\n\t{\n\n\t\tif (s[i] != '+')\n\t\t{\n\t\t\t\n\t\t\tc[j] = s[i];\n\t\t\tj++;\n\t\t\t\n\t\t}\n\t}\n\tc[j] = '\\0';\n\n\t\/\/arrange\n\tfor (j=0 ; j<(strlen(c)-1) ; j++)\n\t{\n\t\t\n\t\tfor (i=0 ; i<(strlen(c)-1) ; i++)\n\t\t{\n\t\t\t\n\t\t\tif (c[i+1] < c[i])\n\t\t\t{\n\t\t\t\t\n\t\t\t\tt = c[i];\n\t\t\t\tc[i] = c[i + 1];\n\t\t\t\tc[i + 1] = t;\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/print\n\tj = 0;\n\tfor (i = 0; (i < strlen(c)); ++i)\n\t{\n\t\td[j] = c[i];\n\t\tj++;\n\t\tif (i == strlen(c) - 1)\n\t\t{\n\t\t\td[j] = '\\0';\n\t\t\tbreak;\n\t\t}\n\t\td[j] = '+';\n\t\tj++;\n\t\t\n\t}\n\tprintf(\"%s\\n\", d);\n\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"1+2+3\", \"1+1+1+3+3\", \"2\"]","lang_cluster":"C","code_uid":"d0c330476c1fd5ff7490a2eb1412964f","prob_desc_notes":null,"prob_desc_output_spec":"Print the new sum that Xenia can count.","prob_desc_output_to":"standard output","prob_desc_description":"Xenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.The teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2 and 3. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+3.You've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.","hidden_unit_tests":"[{\"input\": \"3+2+1\\r\\n\", \"output\": [\"1+2+3\"]}, {\"input\": \"1+1+3+1+3\\r\\n\", \"output\": [\"1+1+1+3+3\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2+2+1+1+3\\r\\n\", \"output\": [\"1+1+2+2+3\"]}, {\"input\": \"2+1+2+2+2+3+1+3+1+2\\r\\n\", \"output\": [\"1+1+1+2+2+2+2+2+3+3\"]}, {\"input\": \"1+2+1+2+2+2+2+1+3+3\\r\\n\", \"output\": [\"1+1+1+2+2+2+2+2+3+3\"]}, {\"input\": \"2+3+3+1+2+2+2+1+1+2+1+3+2+2+3+3+2+2+3+3+3+1+1+1+3+3+3+2+1+3+2+3+2+1+1+3+3+3+1+2+2+1+2+2+1+2+1+3+1+1\\r\\n\", \"output\": [\"1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2+1+2+2+1+3+2+3+1+1+2+1+2+2+3+1+1+3+3+3+2+2+3+2+2+2+1+2+1+2+3+2+2+2+1+3+1+3+3+3+1+2+1+2+2+2+2+3+1+1\\r\\n\", \"output\": [\"1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3\"]}, {\"input\": \"2+2+1+1+1+3+1+1+3+3+2+3+1+3+1+1+3+1+1+2+2+2+2+1+2+1+2+1+1+1+3+1+3+2+3+2+3+3+1+1+1+2+3+2+1+3+1+3+2+2\\r\\n\", \"output\": [\"1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3+3\"]}, {\"input\": \"3+2+3+3+2+2+1+2+1+2+3+1+2+3+2+3+2+1+2+2+1+1+2+2+3+2+1+3+1+1+3+2+2+2+2+3+3+2+2+3+3+1+1+2+3+3+2+3+3+3\\r\\n\", \"output\": [\"1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1+1\\r\\n\", \"output\": [\"1+1\"]}, {\"input\": \"1+2\\r\\n\", \"output\": [\"1+2\"]}, {\"input\": \"1+3\\r\\n\", \"output\": [\"1+3\"]}, {\"input\": \"2+1\\r\\n\", \"output\": [\"1+2\"]}, {\"input\": \"2+2\\r\\n\", \"output\": [\"2+2\"]}, {\"input\": \"2+3\\r\\n\", \"output\": [\"2+3\"]}, {\"input\": \"3+1\\r\\n\", \"output\": [\"1+3\"]}, {\"input\": \"3+2\\r\\n\", \"output\": [\"2+3\"]}, {\"input\": \"3+3\\r\\n\", \"output\": [\"3+3\"]}]","length":59,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 3\", \"3 1\"]","prob_desc_input_spec":"In the only line you are given two integers a, b (0\u2009\u2264\u2009a,\u2009b\u2009\u2264\u2009100) \u2014 the number of even and odd steps, accordingly.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"ec5e3b3f5ee6a13eaf01b9a9a66ff037","prob_desc_created_at":"1485873300","source_code":"#include <stdio.h>\n\nint main(void) {\n\t\/\/ your code goes here\n\tint i,j;\n\tscanf(\"%d%d\",&i,&j);\n\t\n\tif(i==0&&j==0)\n\t{\n\t\tprintf(\"NO\");\n\t\t\n\t\n}\nelse\n{\n\tif((i-j)==1||(j-i)==1||i==j)\n\t{\n\n\n\t\n\t\tprintf(\"YES\");\n\t}\nelse\n{\n\tprintf(\"NO\");\t\n\t}\n}\n\treturn 0;\n\t\n}\n","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"C","code_uid":"9ef3ec3669844b35555c8a1386d977b7","prob_desc_notes":"NoteIn the first example one of suitable intervals is from 1 to 5. The interval contains two even steps\u00a0\u2014 2 and 4, and three odd: 1, 3 and 5.","prob_desc_output_spec":"In the only line print \"YES\", if the interval of steps described above exists, and \"NO\" otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"On her way to programming school tiger Dasha faced her first test \u2014 a huge staircase!  The steps were numbered from one to infinity. As we know, tigers are very fond of all striped things, it is possible that it has something to do with their color. So on some interval of her way she calculated two values \u2014 the number of steps with even and odd numbers. You need to check whether there is an interval of steps from the l-th to the r-th (1\u2009\u2264\u2009l\u2009\u2264\u2009r), for which values that Dasha has found are correct.","hidden_unit_tests":"[{\"input\": \"2 3\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"5 4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"9 9\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"85 95\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"89 25\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"74 73\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"62 39\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"57 57\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 0\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"98 100\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"99 100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 0\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 100\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"100 98\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 5\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"YES\"]}]","length":30,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 1\", \"4 2\", \"4 3\", \"4 0\"]","prob_desc_input_spec":"The only line contains two integers n,\u2009k (1\u2009\u2264\u2009n\u2009\u2264\u2009109,\u20090\u2009\u2264\u2009k\u2009\u2264\u2009106).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"6f6fc42a367cdce60d76fd1914e73f0c","prob_desc_created_at":"1455116400","source_code":"#include <stdio.h>\n#define M 1000000007\nint n,k,i,c,d;\nlong long y,z,u,v,r;\nint F(int a,int b){\n    int r=1;\n    for (;b;b>>=1,a=(long long)a*a%M){\n        if (b&1)r=(long long)r*a%M;\n    }\n    return r;\n}\nint main(){\n    scanf(\"%d%d\",&n,&k);\n    if (!k)r=n;\n    else{\n        if (n<=++k){for(i=1;i<=n;i++)r+=F(i,k-1);}\n        else{\n            for (u=v=1;i<=k;i++){u=(u*(n-i))%M;if (i)v=((v*-i)%M+M)%M;}\n            for (i=0,c=1,d=k;i<=k;i++,c++,d--){\n                z=(z+F(i,k-1))%M;\n                y=u*z%M*F(n-i,M-2)%M*F(v,M-2)%M;\n                v=v*c%M*F(d,M-2)%M;\n                if(i&1)y=M-y;\n                r+=y;\n            }\n        }\n    }\n    printf(\"%lld\\n\",r%M);\n}\n","prob_desc_sample_outputs":"[\"10\", \"30\", \"100\", \"4\"]","lang_cluster":"C","code_uid":"7a0181eece5c766955c7eb2233723b64","prob_desc_notes":null,"prob_desc_output_spec":"Print the only integer a \u2014 the remainder after dividing the value of the sum by the value 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"There are well-known formulas: , , . Also mathematicians found similar formulas for higher degrees.Find the value of the sum  modulo 109\u2009+\u20097 (so you should find the remainder after dividing the answer by the value 109\u2009+\u20097).","hidden_unit_tests":"[{\"input\": \"4 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"4 3\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"4 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10 0\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000 0\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"568830579\"]}, {\"input\": \"10000 100\\r\\n\", \"output\": [\"352711099\"]}, {\"input\": \"100 10000\\r\\n\", \"output\": [\"859998022\"]}, {\"input\": \"1000000000 1000000\\r\\n\", \"output\": [\"617381606\"]}, {\"input\": \"1000000 1000000\\r\\n\", \"output\": [\"997878755\"]}, {\"input\": \"999999 1000000\\r\\n\", \"output\": [\"504760730\"]}, {\"input\": \"77674473 447444\\r\\n\", \"output\": [\"838207299\"]}, {\"input\": \"333312494 795258\\r\\n\", \"output\": [\"393290476\"]}, {\"input\": \"761637147 673329\\r\\n\", \"output\": [\"223778667\"]}, {\"input\": \"335185991 514401\\r\\n\", \"output\": [\"412595240\"]}, {\"input\": \"203702132 355473\\r\\n\", \"output\": [\"229710810\"]}, {\"input\": \"1000000000 999935\\r\\n\", \"output\": [\"729344740\"]}]","length":29,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"7\\nABACABA\", \"5\\nZZZAA\"]","prob_desc_input_spec":"The first line of the input contains integer number $$$n$$$ ($$$2 \\le n \\le 100$$$) \u2014 the length of string $$$s$$$. The second line of the input contains the string $$$s$$$ consisting of $$$n$$$ capital Latin letters.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"e78005d4be93dbaa518f3b40cca84ab1","prob_desc_created_at":"1567258500","source_code":"#include <stdio.h>\nint main()\n{\n    int n, x, x2;\n    x2 = 0;\n    scanf(\"%d\", &n);\n    getchar();\n    char tree[102];\n    gets(tree);\n    char plant[3];\n    for (int i = 0; i < n; i++) {\n        x = 0;\n        for (int j = 0; j < n; j++) {\n            if (tree[j] == tree[i] && tree[j+1] == tree[i+1]) {\n                x++;\n            }\n        }\n        if (x > x2) {\n            x2 = x;\n            plant[0] = tree[i];\n            plant[1] = tree[i+1];\n        }\n    }\n    printf(\"%c%c\\n\", plant[0], plant[1]);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"AB\", \"ZZ\"]","lang_cluster":"C","code_uid":"dfe7123d75c5f4b7a0f46e63f159dc11","prob_desc_notes":"NoteIn the first example \"BA\" is also valid answer.In the second example the only two-gram \"ZZ\" can be printed because it contained in the string \"ZZZAA\" two times.","prob_desc_output_spec":"Print the only line containing exactly two capital Latin letters \u2014 any two-gram contained in the given string $$$s$$$ as a substring (i.e. two consecutive characters of the string) maximal number of times.","prob_desc_output_to":"standard output","prob_desc_description":"Two-gram is an ordered pair (i.e. string of length two) of capital Latin letters. For example, \"AZ\", \"AA\", \"ZA\" \u2014 three distinct two-grams.You are given a string $$$s$$$ consisting of $$$n$$$ capital Latin letters. Your task is to find any two-gram contained in the given string as a substring (i.e. two consecutive characters of the string) maximal number of times. For example, for string $$$s$$$ = \"BBAABBBA\" the answer is two-gram \"BB\", which contained in $$$s$$$ three times. In other words, find any most frequent two-gram.Note that occurrences of the two-gram can overlap with each other.","hidden_unit_tests":"[{\"input\": \"7\\r\\nABACABA\\r\\n\", \"output\": [\"BA\", \"AB\"]}, {\"input\": \"5\\r\\nZZZAA\\r\\n\", \"output\": [\"ZZ\"]}, {\"input\": \"26\\r\\nQWERTYUIOPASDFGHJKLZXCVBNM\\r\\n\", \"output\": [\"KL\", \"QW\", \"WE\", \"AS\"]}, {\"input\": \"2\\r\\nQA\\r\\n\", \"output\": [\"QA\"]}, {\"input\": \"2\\r\\nWW\\r\\n\", \"output\": [\"WW\"]}, {\"input\": \"11\\r\\nGGRRAATTZZZ\\r\\n\", \"output\": [\"ZZ\"]}, {\"input\": \"50\\r\\nNYQAHBYYOXLTRYQDMVENEMAQNBAKGLGQOLXNAIFNQTOCLNNQIA\\r\\n\", \"output\": [\"NQ\", \"YQ\"]}, {\"input\": \"100\\r\\nURXCAIZFIBNJTPCZHBQIBCILLPXZCFGMKKZMNPLCYGAVJVIBMCZEBSJWPSCPQDYCTTKPOKIJRSKIZPDGCHVOUTMPNECYORSFZFNC\\r\\n\", \"output\": [\"IB\"]}, {\"input\": \"100\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\", \"output\": [\"AA\"]}, {\"input\": \"10\\r\\nSQSQSQSQTG\\r\\n\", \"output\": [\"SQ\"]}, {\"input\": \"5\\r\\nAZAZA\\r\\n\", \"output\": [\"ZA\", \"AZ\"]}, {\"input\": \"15\\r\\nMIRZOYANOVECLOX\\r\\n\", \"output\": [\"AN\", \"IR\", \"MI\", \"NO\"]}, {\"input\": \"9\\r\\nEGORLETOV\\r\\n\", \"output\": [\"GO\", \"EG\", \"TO\"]}, {\"input\": \"8\\r\\nPUTINVOR\\r\\n\", \"output\": [\"PU\", \"IN\", \"UT\", \"NV\"]}, {\"input\": \"7\\r\\nKADUROV\\r\\n\", \"output\": [\"KA\", \"AD\"]}, {\"input\": \"6\\r\\nAZAZAZ\\r\\n\", \"output\": [\"AZ\"]}, {\"input\": \"3\\r\\nLOL\\r\\n\", \"output\": [\"OL\", \"LO\"]}, {\"input\": \"3\\r\\nKEK\\r\\n\", \"output\": [\"EK\", \"KE\"]}, {\"input\": \"5\\r\\nFUFEL\\r\\n\", \"output\": [\"UF\", \"EL\", \"FU\"]}, {\"input\": \"9\\r\\nMIKEPIDOR\\r\\n\", \"output\": [\"EP\", \"MI\", \"DO\", \"IK\"]}, {\"input\": \"9\\r\\nAAAAAAAAA\\r\\n\", \"output\": [\"AA\"]}, {\"input\": \"23\\r\\nAABBBAAACCCCCAAADDDDDDD\\r\\n\", \"output\": [\"DD\"]}]","length":26,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"42\", \"5\"]","prob_desc_input_spec":"The only line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u200910000).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"5d4f38ffd1849862623325fdbe06cd00","prob_desc_created_at":"1319893200","source_code":"#include<stdio.h>\nint main()\n{\n    int n,feet,tmp,inch;\n    scanf(\"%d\",&n);\n    inch=n\/3;\n    if(n%3==2)\n    {\n        inch++;\n    }\n    feet=inch\/12;\n    inch=inch%12;\n    printf(\"%d %d\\n\",feet,inch);\n    return 0;\n}","prob_desc_sample_outputs":"[\"1 2\", \"0 2\"]","lang_cluster":"C","code_uid":"3f0299e11fdc53176f19304052630533","prob_desc_notes":null,"prob_desc_output_spec":"Print two non-negative space-separated integers a and b, where a is the numbers of feet and b is the number of inches.","prob_desc_output_to":"standard output","prob_desc_description":"Lengths are measures in Baden in inches and feet. To a length from centimeters it is enough to know that an inch equals three centimeters in Baden and one foot contains 12 inches.You are given a length equal to n centimeters. Your task is to convert it to feet and inches so that the number of feet was maximum. The result should be an integer rounded to the closest value containing an integral number of inches.Note that when you round up, 1 cm rounds up to 0 inches and 2 cm round up to 1 inch.","hidden_unit_tests":"[{\"input\": \"42\\r\\n\", \"output\": [\"1 2\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"0 2\"]}, {\"input\": \"24\\r\\n\", \"output\": [\"0 8\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"0 3\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"0 3\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"0 4\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"0 4\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"2 9\"]}, {\"input\": \"120\\r\\n\", \"output\": [\"3 4\"]}, {\"input\": \"199\\r\\n\", \"output\": [\"5 6\"]}, {\"input\": \"501\\r\\n\", \"output\": [\"13 11\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"27 9\"]}, {\"input\": \"1233\\r\\n\", \"output\": [\"34 3\"]}, {\"input\": \"9876\\r\\n\", \"output\": [\"274 4\"]}, {\"input\": \"9999\\r\\n\", \"output\": [\"277 9\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"277 9\"]}, {\"input\": \"35\\r\\n\", \"output\": [\"1 0\"]}, {\"input\": \"71\\r\\n\", \"output\": [\"2 0\"]}]","length":15,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"5 1\", \"2 2\", \"3 2\", \"11 5\", \"37 63\"]","prob_desc_input_spec":"The first line contains two space-separated integers n and C, 1\u2009\u2264\u2009n\u2009\u2264\u2009500000, 1\u2009\u2264\u2009C\u2009\u2264\u2009200000.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"e63c70a9c96a94bce99618f2e695f83a","prob_desc_created_at":"1468137600","source_code":"#include <stdio.h>\n\nint mod_inv(int a, int p){\n\tint y = p-2;\n\tint res = 1;\n\twhile(y!=0){\n\t\tif(y&1){\n\t\t\tres = ((long long)res * a)%p;\n\t\t}\n\t\ta = ((long long)a*a)%p;\n\t\ty = y>>1;\n\t}\n\treturn res;\n}\n\nint main(void) {\n\t\/\/ your code goes here\n\tint n,c,i;\n\tscanf(\"%d %d\",&n,&c);\n\tint res = c;\n\tint prev = c;\n\tint p = 1000003;\n\tfor(i=2; i<=n ;i++){\n\t\tprev = ((((long long)(c+i-1)*prev)%p)*mod_inv(i,p))%p;\n\t\tres = (res + prev)%p;\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"5\", \"5\", \"9\", \"4367\", \"230574\"]","lang_cluster":"C","code_uid":"fb7b8635f517b1ff3e2474c13721e1a9","prob_desc_notes":"NoteThe number 106\u2009+\u20093 is prime.In the second sample case, the five walls are:             B        BB., .B, BB, B., and .BIn the third sample case, the nine walls are the five as in the second sample case and in addition the following four: B    BB    B  B        BB., .B, BB, and BB","prob_desc_output_spec":"Print the number of different walls that Heidi could build, modulo 106\u2009+\u20093.","prob_desc_output_to":"standard output","prob_desc_description":"Heidi the Cow is aghast: cracks in the northern Wall? Zombies gathering outside, forming groups, preparing their assault? This must not happen! Quickly, she fetches her HC2 (Handbook of Crazy Constructions) and looks for the right chapter:How to build a wall:  Take a set of bricks.  Select one of the possible wall designs. Computing the number of possible designs is left as an exercise to the reader.  Place bricks on top of each other, according to the chosen design. This seems easy enough. But Heidi is a Coding Cow, not a Constructing Cow. Her mind keeps coming back to point 2b. Despite the imminent danger of a zombie onslaught, she wonders just how many possible walls she could build with up to n bricks.A wall is a set of wall segments as defined in the easy version. How many different walls can be constructed such that the wall consists of at least 1 and at most n bricks? Two walls are different if there exist a column c and a row r such that one wall has a brick in this spot, and the other does not.Along with n, you will be given C, the width of the wall (as defined in the easy version). Return the number of different walls modulo 106\u2009+\u20093.","hidden_unit_tests":"[{\"input\": \"5 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"11 5\\r\\n\", \"output\": [\"4367\"]}, {\"input\": \"37 63\\r\\n\", \"output\": [\"230574\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"350000 140000\\r\\n\", \"output\": [\"453366\"]}, {\"input\": \"350000 160000\\r\\n\", \"output\": [\"155549\"]}, {\"input\": \"350000 180000\\r\\n\", \"output\": [\"708073\"]}, {\"input\": \"350000 200000\\r\\n\", \"output\": [\"504934\"]}, {\"input\": \"400000 140000\\r\\n\", \"output\": [\"956370\"]}, {\"input\": \"400000 160000\\r\\n\", \"output\": [\"480365\"]}, {\"input\": \"400000 180000\\r\\n\", \"output\": [\"376155\"]}, {\"input\": \"400000 200000\\r\\n\", \"output\": [\"388234\"]}, {\"input\": \"450000 140000\\r\\n\", \"output\": [\"175993\"]}, {\"input\": \"450000 160000\\r\\n\", \"output\": [\"926957\"]}, {\"input\": \"450000 180000\\r\\n\", \"output\": [\"135727\"]}, {\"input\": \"450000 200000\\r\\n\", \"output\": [\"997315\"]}, {\"input\": \"500000 140000\\r\\n\", \"output\": [\"775486\"]}, {\"input\": \"500000 160000\\r\\n\", \"output\": [\"298591\"]}, {\"input\": \"500000 180000\\r\\n\", \"output\": [\"901135\"]}, {\"input\": \"500000 200000\\r\\n\", \"output\": [\"781209\"]}]","length":29,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4\", \"6\"]","prob_desc_input_spec":"The first line of the input contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091000).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"62db589bad3b7023418107de05b7a8ee","prob_desc_created_at":"1284130800","source_code":"#include <stdio.h>\n#include <math.h>\n\nint p[]={2,3,5,7,11,13,17,19,23,29,31,37};\n\nint D[20];\nlong double m=1e100;\n\nvoid dfs(int n,int d,int l) {\n\tif (n==1) {\n\t\tint i,j;\n\t\tlong double s=1;\n\t\tfor (i=0;i<l;i++)\n\t\t\tfor (j=1;j<D[i];j++)\n\t\t\t\ts*=p[i];\n\t\tif (s<m) m=s;\n\t\treturn;\n\t}\n\twhile (d>1) {\n\t\tif (n%d==0) {\n\t\t\tD[l]=d;\n\t\t\tdfs(n\/d,d,l+1);\n\t\t}\n\t\td--;\n\t}\n}\nint main() {\n\tint i,j,n;\n\tscanf(\"%d\\n\",&n);\n\tdfs(n,n,0);\n\tprintf(\"%lld\\n\",(long long)m);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"6\", \"12\"]","lang_cluster":"C","code_uid":"301a4feefa5f14f671b49e7dc47a56ae","prob_desc_notes":null,"prob_desc_output_spec":"Output the smallest positive integer with exactly n divisors.","prob_desc_output_to":"standard output","prob_desc_description":"Given the number n, find the smallest positive integer which has exactly n divisors. It is guaranteed that for the given n the answer will not exceed 1018.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"144\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"240\"]}, {\"input\": \"47\\r\\n\", \"output\": [\"70368744177664\"]}, {\"input\": \"59\\r\\n\", \"output\": [\"288230376151711744\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"45360\"]}, {\"input\": \"159\\r\\n\", \"output\": [\"40532396646334464\"]}, {\"input\": \"265\\r\\n\", \"output\": [\"364791569817010176\"]}, {\"input\": \"312\\r\\n\", \"output\": [\"14192640\"]}, {\"input\": \"473\\r\\n\", \"output\": [\"259700248434180096\"]}, {\"input\": \"637\\r\\n\", \"output\": [\"46656000000\"]}, {\"input\": \"500\\r\\n\", \"output\": [\"62370000\"]}, {\"input\": \"720\\r\\n\", \"output\": [\"61261200\"]}, {\"input\": \"902\\r\\n\", \"output\": [\"324625310542725120\"]}, {\"input\": \"940\\r\\n\", \"output\": [\"199495389743677440\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"810810000\"]}, {\"input\": \"999\\r\\n\", \"output\": [\"757632231014400\"]}, {\"input\": \"118\\r\\n\", \"output\": [\"864691128455135232\"]}]","length":33,"num_hidden_unit_tests":22}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 5\", \"3 6\"]","prob_desc_input_spec":"The first line contains two integers a and m (1\u2009\u2264\u2009a,\u2009m\u2009\u2264\u2009105).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"f726133018e2149ec57e113860ec498a","prob_desc_created_at":"1415205000","source_code":"#include <stdio.h>\nint a,m,k,r;\nint main() {\n\tscanf(\"%d\",&a);\n\tscanf(\"%d\",&m);\n\tr=a%m;\n\twhile(k<20) {\n\t\tif(r%m==0) {\n\t\t\tprintf(\"Yes\\n\");\n\t\t\treturn 0;\n\t\t} \n\t\telse {\n\t\t\tr*=2;\n\t\t\t++k;\n\t\t}\n\t}\n\tprintf(\"No\\n\");\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"No\", \"Yes\"]","lang_cluster":"C","code_uid":"f08248021dd906032752a106b6c9dd95","prob_desc_notes":null,"prob_desc_output_spec":"Print \"Yes\" (without quotes) if the production will eventually stop, otherwise print \"No\".","prob_desc_output_to":"standard output","prob_desc_description":"One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce  (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. The board of directors are worried that the production by the given plan may eventually stop (that means that there will be \u0430 moment when the current number of details on the factory is divisible by m). Given the number of details a on the first day and number m check if the production stops at some moment.","hidden_unit_tests":"[{\"input\": \"1 5\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"3 6\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 8\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"3 24\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"100000 100000\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 99989\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"512 2\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"100 24\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"1 100000\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"100000 1\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"3 99929\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"99961 99971\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"1 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"4 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"3 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"32768 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"65535 65536\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"1 65535\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"98812 100000\\r\\n\", \"output\": [\"No\"]}, {\"input\": \"10 5\\r\\n\", \"output\": [\"Yes\"]}, {\"input\": \"6 8\\r\\n\", \"output\": [\"Yes\"]}]","length":19,"num_hidden_unit_tests":23}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 2 3 1 6\", \"4 2 3 1 7\", \"1 2 3 2 6\", \"1 1 2 1 1\"]","prob_desc_input_spec":"The first line contains integers a,\u2009b,\u2009w,\u2009x,\u2009c (1\u2009\u2264\u2009a\u2009\u2264\u20092\u00b7109,\u20091\u2009\u2264\u2009w\u2009\u2264\u20091000,\u20090\u2009\u2264\u2009b\u2009&lt;\u2009w,\u20090\u2009&lt;\u2009x\u2009&lt;\u2009w,\u20091\u2009\u2264\u2009c\u2009\u2264\u20092\u00b7109).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"a1db3dd9f8d0f0cad7bdeb1780707143","prob_desc_created_at":"1389972600","source_code":"#include <stdio.h>\nint main()\n{\n    long long a , b , w , x , c , times = 0 , m[10000] = {0} ;\n    scanf(\"%lld %lld %lld %lld %lld\", &a, &b, &w, &x, &c);\n    while( b > x)\n    {\n        if(c <= a)break;\n        b -= x ;\n        c--;\n        times++;\n    }\n    if(c <= a)\n    {\n        printf(\"%lld\\n\", times);\n        return 0;\n    }\n    long long st = 0 , aj = 0 , l ;\n    l = b ;\n    while(m[l]==0)\n    {\n        m[l] = 1 ;\n        st++;\n        if(l >= x) l -= x ;\n        else\n        {\n            aj++;\n            l = w -( x - l);\n        }\n    }\n    long long ns = 0 ;\n    if( c - a - aj  > 0)\n        ns = (c - a - aj) \/ (st - aj);\n    times += ns*st;\n    c = c - st*ns;\n    a = a - ns*aj;\n    while(c > a)\n    {\n        if(b >= x)\n        {\n            b -= x;\n            c--;\n            times++;\n        }\n        else\n        {\n            b = w - (x - b);\n            a--;c--;\n            times++;\n        }\n    }\n    printf(\"%lld\\n\", times);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"2\", \"4\", \"13\", \"0\"]","lang_cluster":"C","code_uid":"579a092a0421931530b2d957efc31eac","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the minimum time in seconds Alexander needs to get ahead of Arthur. You can prove that the described situation always occurs within the problem's limits.","prob_desc_output_to":"standard output","prob_desc_description":"Arthur and Alexander are number busters. Today they've got a competition. Arthur took a group of four integers a,\u2009b,\u2009w,\u2009x (0\u2009\u2264\u2009b\u2009&lt;\u2009w,\u20090\u2009&lt;\u2009x\u2009&lt;\u2009w) and Alexander took integer \u0441. Arthur and Alexander use distinct approaches to number bustings. Alexander is just a regular guy. Each second, he subtracts one from his number. In other words, he performs the assignment: c\u2009=\u2009c\u2009-\u20091. Arthur is a sophisticated guy. Each second Arthur performs a complex operation, described as follows: if b\u2009\u2265\u2009x, perform the assignment b\u2009=\u2009b\u2009-\u2009x, if b\u2009&lt;\u2009x, then perform two consecutive assignments a\u2009=\u2009a\u2009-\u20091;\u00a0b\u2009=\u2009w\u2009-\u2009(x\u2009-\u2009b).You've got numbers a,\u2009b,\u2009w,\u2009x,\u2009c. Determine when Alexander gets ahead of Arthur if both guys start performing the operations at the same time. Assume that Alexander got ahead of Arthur if c\u2009\u2264\u2009a.","hidden_unit_tests":"[{\"input\": \"4 2 3 1 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 2 3 1 7\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 2 3 2 6\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"1 1 2 1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 0 1000 999 2000000000\\r\\n\", \"output\": [\"1999999999000\"]}, {\"input\": \"10 1 6 4 20\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"10 3 6 5 30\\r\\n\", \"output\": [\"117\"]}, {\"input\": \"10 3 5 1 30\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"10 32 312 72 1000\\r\\n\", \"output\": [\"1287\"]}, {\"input\": \"1 102 123 27 2321\\r\\n\", \"output\": [\"2972\"]}, {\"input\": \"2000000000 159 1000 870 2000000000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"200000000 794 1000 117 2000000000\\r\\n\", \"output\": [\"2038505096\"]}, {\"input\": \"20000000 280 1000 25 2000000000\\r\\n\", \"output\": [\"2030769231\"]}, {\"input\": \"1999999999 47 1000 527 2000000000\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"19999 346 1000 141 2000000000\\r\\n\", \"output\": [\"2328265426\"]}, {\"input\": \"1 142 1000 673 2000000000\\r\\n\", \"output\": [\"6116207948\"]}, {\"input\": \"1 851 999 721 2000000000\\r\\n\", \"output\": [\"7187050354\"]}, {\"input\": \"1 504 998 900 2000000000\\r\\n\", \"output\": [\"20367346924\"]}, {\"input\": \"1 250 997 55 2000000000\\r\\n\", \"output\": [\"2116772823\"]}, {\"input\": \"1 2 3 2 2000000000\\r\\n\", \"output\": [\"5999999995\"]}, {\"input\": \"1 0 2 1 1232132\\r\\n\", \"output\": [\"2464262\"]}, {\"input\": \"1 999 1000 1 2000000000\\r\\n\", \"output\": [\"2002002001\"]}, {\"input\": \"1 999 1000 2 2000000000\\r\\n\", \"output\": [\"2004008015\"]}]","length":54,"num_hidden_unit_tests":23}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2\", \"3\"]","prob_desc_input_spec":"A single line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u20092000) \u2014 the number of buttons the lock has.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"6df251ac8bf27427a24bc23d64cb9884","prob_desc_created_at":"1359387000","source_code":"#include<stdio.h>\nint main()\n{\n    int n,i,l=0;\n    scanf(\"%d\",&n);\n    for(i=1;i<n;i++) l=l+(n-i)*i;\n    printf(\"%d\",l+n);\n}\n","prob_desc_sample_outputs":"[\"3\", \"7\"]","lang_cluster":"C","code_uid":"214c50ce4aee708818c9fc83db32749b","prob_desc_notes":"NoteConsider the first test sample. Manao can fail his first push and push the wrong button. In this case he will already be able to guess the right one with his second push. And his third push will push the second right button. Thus, in the worst-case scenario he will only need 3 pushes.","prob_desc_output_spec":"In a single line print the number of times Manao has to push a button in the worst-case scenario.","prob_desc_output_to":"standard output","prob_desc_description":"Manao is trying to open a rather challenging lock. The lock has n buttons on it and to open it, you should press the buttons in a certain order to open the lock. When you push some button, it either stays pressed into the lock (that means that you've guessed correctly and pushed the button that goes next in the sequence), or all pressed buttons return to the initial position. When all buttons are pressed into the lock at once, the lock opens.Consider an example with three buttons. Let's say that the opening sequence is: {2, 3, 1}. If you first press buttons 1 or 3, the buttons unpress immediately. If you first press button 2, it stays pressed. If you press 1 after 2, all buttons unpress. If you press 3 after 2, buttons 3 and 2 stay pressed. As soon as you've got two pressed buttons, you only need to press button 1 to open the lock.Manao doesn't know the opening sequence. But he is really smart and he is going to act in the optimal way. Calculate the number of times he's got to push a button in order to open the lock in the worst-case scenario.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"175\"]}, {\"input\": \"2000\\r\\n\", \"output\": [\"1333335000\"]}, {\"input\": \"1747\\r\\n\", \"output\": [\"888644743\"]}, {\"input\": \"889\\r\\n\", \"output\": [\"117099969\"]}, {\"input\": \"1999\\r\\n\", \"output\": [\"1331335999\"]}, {\"input\": \"914\\r\\n\", \"output\": [\"127259419\"]}, {\"input\": \"996\\r\\n\", \"output\": [\"164675486\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"833\"]}, {\"input\": \"50\\r\\n\", \"output\": [\"20875\"]}, {\"input\": \"91\\r\\n\", \"output\": [\"125671\"]}, {\"input\": \"92\\r\\n\", \"output\": [\"129858\"]}, {\"input\": \"256\\r\\n\", \"output\": [\"2796416\"]}, {\"input\": \"512\\r\\n\", \"output\": [\"22370048\"]}, {\"input\": \"666\\r\\n\", \"output\": [\"49235271\"]}, {\"input\": \"667\\r\\n\", \"output\": [\"49457383\"]}, {\"input\": \"314\\r\\n\", \"output\": [\"5160119\"]}, {\"input\": \"1241\\r\\n\", \"output\": [\"318541121\"]}, {\"input\": \"1500\\r\\n\", \"output\": [\"562501250\"]}, {\"input\": \"1837\\r\\n\", \"output\": [\"1033182073\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"166667500\"]}]","length":8,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"6 3\\n1 1 1 0 1 0\", \"5 2\\n0 0 0 1 0\"]","prob_desc_input_spec":"The first line of the input contains two integers n and a (1\u2009\u2264\u2009a\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of cities and the index of city where Limak lives. The second line contains n integers t1,\u2009t2,\u2009...,\u2009tn (0\u2009\u2264\u2009ti\u2009\u2264\u20091). There are ti criminals in the i-th city.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"4840d571d4ce6e1096bb678b6c100ae5","prob_desc_created_at":"1465403700","source_code":"#include<stdio.h>\nint main()\n{\nint n,i,j,pos,counter;\nint criminals[100];\ncounter=0;\nscanf(\"%d%d\",&n,&pos);\nfor(i=0;i<n;i++)\nscanf(\"%d\",&criminals[i]);\nif(criminals[pos-1]==1)\ncounter+=1;\nfor(j=1;j<=i;j++)\n{\nif((pos-1-j>=0)&&(pos-1+j<n)&&((criminals[pos-1-j]&criminals[pos-1+j])==1))\ncounter+=2;\nelse if((pos-1-j>=0)&&(pos-1+j>=n)&&(criminals[pos-1-j]==1))\ncounter+=1;\nelse if((pos-1-j<0)&&(pos-1+j<n)&&(criminals[pos-1+j]==1))\ncounter+=1;}\nprintf(\"%d\",counter);\nreturn 0;}","prob_desc_sample_outputs":"[\"3\", \"1\"]","lang_cluster":"C","code_uid":"0f7d73539239e586bb5c45a78404c2aa","prob_desc_notes":"NoteIn the first sample, there are six cities and Limak lives in the third one (blue arrow below). Criminals are in cities marked red.  Using the BCD gives Limak the following information:  There is one criminal at distance 0 from the third city\u00a0\u2014 Limak is sure that this criminal is exactly in the third city.  There is one criminal at distance 1 from the third city\u00a0\u2014 Limak doesn't know if a criminal is in the second or fourth city.  There are two criminals at distance 2 from the third city\u00a0\u2014 Limak is sure that there is one criminal in the first city and one in the fifth city.  There are zero criminals for every greater distance. So, Limak will catch criminals in cities 1, 3 and 5, that is 3 criminals in total.In the second sample (drawing below), the BCD gives Limak the information that there is one criminal at distance 2 from Limak's city. There is only one city at distance 2 so Limak is sure where a criminal is.  ","prob_desc_output_spec":"Print the number of criminals Limak will catch.","prob_desc_output_to":"standard output","prob_desc_description":"There are n cities in Bearland, numbered 1 through n. Cities are arranged in one long row. The distance between cities i and j is equal to |i\u2009-\u2009j|.Limak is a police officer. He lives in a city a. His job is to catch criminals. It's hard because he doesn't know in which cities criminals are. Though, he knows that there is at most one criminal in each city.Limak is going to use a BCD (Bear Criminal Detector). The BCD will tell Limak how many criminals there are for every distance from a city a. After that, Limak can catch a criminal in each city for which he is sure that there must be a criminal.You know in which cities criminals are. Count the number of criminals Limak will catch, after he uses the BCD.","hidden_unit_tests":"[{\"input\": \"6 3\\r\\n1 1 1 0 1 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5 2\\r\\n0 0 0 1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"9 3\\r\\n1 1 1 1 1 1 1 1 0\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"9 5\\r\\n1 0 1 0 1 0 1 0 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"20 17\\r\\n1 1 0 1 1 1 1 0 1 0 1 1 1 0 1 1 0 0 0 0\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"100 60\\r\\n1 1 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 0 0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 1 0 1 0 1 1 0 0 0 0 0 1 1 1 0 1 1 0 0 0 1 0 0 0 1 1 1 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 1 0 0\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"8 1\\r\\n1 0 1 1 0 0 1 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"11 11\\r\\n0 1 0 0 1 1 1 0 0 0 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"19 10\\r\\n0 1 1 0 1 0 0 1 1 0 0 1 0 1 0 0 1 0 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100 38\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 38\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 38\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"99 38\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"99 38\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"99 38\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"98 70\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"41\"]}, {\"input\": \"99 70\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"99 60\\r\\n0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 0 1 1 0 0 0 0 0 1 0 0 1 0 1 1 1 1 1 0 1 0 1 1 0 0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"98 24\\r\\n0 0 0 1 1 0 1 1 0 0 0 0 1 0 0 1 0 0 1 1 1 0 0 1 0 0 1 0 1 0 0 1 1 0 1 1 1 0 1 0 0 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 0 1 0 0 0 1 1 0 0 1 1 1 1 1 1 0 1 0 1 0 0 1 1\\r\\n\", \"output\": [\"39\"]}, {\"input\": \"100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100 1\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1\\r\\n0 1\\r\\n\", \"output\": [\"1\"]}]","length":21,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6 2\\n2 1 2 2 2 1\", \"8 4\\n1 1 2 1 1 1 2 1\", \"9 3\\n2 1 1 1 2 1 1 1 2\"]","prob_desc_input_spec":"The first line of the input contains a pair of integers n, k (1\u2009\u2264\u2009k\u2009\u2264\u2009n\u2009\u2264\u2009100), where n is the length of the array and the value n is divisible by k. The second line contains the sequence of elements of the given array a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u20092), ai is the i-th element of the array.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"5f94c2ecf1cf8fdbb6117cab801ed281","prob_desc_created_at":"1386493200","source_code":"#include<stdio.h>\nint h[1000];\nint main()\n{\n\tint n,k,i,j,t,top=0,a[1000],b[1000],s=0,max;\n\tscanf(\"%d %d\",&n,&k);\n\tfor(i=0;i<n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tfor(i=0;i<k;i++)\n\t{\n\t\tfor(j=0;j<n\/k;j++)\n\t\t{\n\t\t\tb[j]=a[i+k*j];\n\t\t}\n\t\tfor(j=1;j<999;j++)\n\t\t\th[j]=0;\n\t\tmax=0;\n\t\n\t\tfor(j=0;j<n\/k;j++)\n\t\t\th[b[j]]++;\n\t\tfor(j=1;j<999;j++)\n\t\t\tif(h[j]>max)\n\t\t\t\tmax=h[j];\n\t\ttop+=max;\n\t}\n\t\/\/if(n-top<0)\n\t\/\/\ttop=n;\n\t\/\/if(top<0)\n\t\/\/\ttop=0;\n\tprintf(\"%d\",n-top);\n\n\t\n\treturn 0;\n}\t\n","prob_desc_sample_outputs":"[\"1\", \"0\", \"3\"]","lang_cluster":"C","code_uid":"5812997c438ba70bc394144c6cc3ca17","prob_desc_notes":"NoteIn the first sample it is enough to change the fourth element from 2 to 1, then the array changes to [2,\u20091,\u20092,\u20091,\u20092,\u20091].In the second sample, the given array already is 4-periodic.In the third sample it is enough to replace each occurrence of number two by number one. In this case the array will look as [1,\u20091,\u20091,\u20091,\u20091,\u20091,\u20091,\u20091,\u20091] \u2014 this array is simultaneously 1-, 3- and 9-periodic.","prob_desc_output_spec":"Print the minimum number of array elements we need to change to make the array k-periodic. If the array already is k-periodic, then print 0.","prob_desc_output_to":"standard output","prob_desc_description":"This task will exclusively concentrate only on the arrays where all elements equal 1 and\/or 2.Array a is k-period if its length is divisible by k and there is such array b of length k, that a is represented by array b written exactly  times consecutively. In other words, array a is k-periodic, if it has period of length k.For example, any array is n-periodic, where n is the array length. Array [2,\u20091,\u20092,\u20091,\u20092,\u20091] is at the same time 2-periodic and 6-periodic and array [1,\u20092,\u20091,\u20091,\u20092,\u20091,\u20091,\u20092,\u20091] is at the same time 3-periodic and 9-periodic.For the given array a, consisting only of numbers one and two, find the minimum number of elements to change to make the array k-periodic. If the array already is k-periodic, then the required value equals 0.","hidden_unit_tests":"[{\"input\": \"6 2\\r\\n2 1 2 2 2 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8 4\\r\\n1 1 2 1 1 1 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"9 3\\r\\n2 1 1 1 2 1 1 1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 1\\r\\n2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1\\r\\n1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 2\\r\\n2 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 1\\r\\n1 2 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"2 1\\r\\n1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 1\\r\\n2 1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 3\\r\\n1 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 2\\r\\n2 1 2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 2\\r\\n2 2 2 1 1 2 2 2 2 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10 5\\r\\n2 2 1 2 1 1 2 1 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"20 4\\r\\n2 2 1 2 2 2 1 2 2 2 1 2 2 2 1 2 2 2 1 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 5\\r\\n2 2 1 1 1 2 1 1 1 1 2 2 1 1 2 2 2 1 1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"20 10\\r\\n1 2 2 2 2 1 1 1 2 1 1 2 2 2 2 1 2 2 2 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100 2\\r\\n2 2 1 2 1 2 1 2 1 2 1 2 1 2 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100 4\\r\\n1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 2 2 1 2 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 2 1 1 2 1 1 1 2 1 2 1 2 1 1 1 2 1 1 1 2 1 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"100 5\\r\\n2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 1 2 2 2 2 2 1 2 1 2 2 2 2 1 2 2 2 1 1 2 1 2 2 2 2 2 2 2 1 2 2 2\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"100 10\\r\\n2 1 1 1 1 2 2 2 1 1 2 1 1 2 1 2 1 2 1 1 2 1 1 1 1 2 1 2 1 1 2 1 1 1 1 2 2 2 1 1 2 1 1 1 1 2 1 2 1 1 2 1 1 1 1 2 1 2 2 1 2 1 1 1 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 1 2 1 1 1 1 2 1 2 1 1 2 1 1 1 2 2 1 2 1 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100 20\\r\\n2 2 2 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 2 2 2 1 2 1 2 1 1 1 1 2 2 2 2 1 2 1 1 2 2 2 2 1 2 1 2 1 2 1 1 2 1 2 2 2 1 2 2 2 2 2 2 2 2 1 2 1 1 1 1 2 2 2 2 2 1 1 2 2 1 2 2 1 2 1 2 1 2 1 1 2 2 1 2 2 1 1 1\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"100 25\\r\\n2 2 1 2 2 2 2 2 1 2 2 1 2 1 1 2 1 2 1 2 2 2 1 2 2 2 1 1 2 1 2 1 2 1 2 2 1 2 1 1 2 2 2 1 2 2 1 2 2 2 2 1 1 2 1 2 2 1 1 2 2 2 2 2 1 2 1 2 2 2 2 2 2 2 1 2 1 1 2 2 2 2 2 1 2 2 1 1 2 1 2 2 2 1 2 2 2 2 2 2\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"100 10\\r\\n2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1\\r\\n\", \"output\": [\"0\"]}]","length":34,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\", \"3\"]","prob_desc_input_spec":"The first and only line of the input contains a single integer n (3\u2009\u2264\u2009n\u2009\u2264\u200954321) - the number of vertices of the regular polygon drawn by Ari.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"efa8e7901a3084d34cfb1a6b18067f2b","prob_desc_created_at":"1446309000","source_code":"#include <stdio.h>\nint main(){\n    unsigned n;\n    scanf(\"%u\",&n);\n    printf(\"%u\\n\",(n-2)*(n-2));\n    return 0;\n}\n\n","prob_desc_sample_outputs":"[\"9\", \"1\"]","lang_cluster":"C","code_uid":"e43c03a280ad9566de9f944eb8bcf5ec","prob_desc_notes":"NoteOne of the possible solutions for the first sample is shown on the picture above.","prob_desc_output_spec":"Print the minimum number of jumps Ada should make to collect all the walnuts. Note, that she doesn't need to leave the polygon after.","prob_desc_output_to":"standard output","prob_desc_description":"Ari the monster always wakes up very early with the first ray of the sun and the first thing she does is feeding her squirrel.Ari draws a regular convex polygon on the floor and numbers it's vertices 1,\u20092,\u2009...,\u2009n in clockwise order. Then starting from the vertex 1 she draws a ray in the direction of each other vertex. The ray stops when it reaches a vertex or intersects with another ray drawn before. Ari repeats this process for vertex 2,\u20093,\u2009...,\u2009n (in this particular order). And then she puts a walnut in each region inside the polygon.  Ada the squirrel wants to collect all the walnuts, but she is not allowed to step on the lines drawn by Ari. That means Ada have to perform a small jump if she wants to go from one region to another. Ada can jump from one region P to another region Q if and only if P and Q share a side or a corner.Assuming that Ada starts from outside of the picture, what is the minimum number of jumps she has to perform in order to collect all the walnuts?","hidden_unit_tests":"[{\"input\": \"5\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"54321\\r\\n\", \"output\": [\"2950553761\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"54320\\r\\n\", \"output\": [\"2950445124\"]}, {\"input\": \"54319\\r\\n\", \"output\": [\"2950336489\"]}, {\"input\": \"54318\\r\\n\", \"output\": [\"2950227856\"]}, {\"input\": \"54317\\r\\n\", \"output\": [\"2950119225\"]}, {\"input\": \"54316\\r\\n\", \"output\": [\"2950010596\"]}, {\"input\": \"54315\\r\\n\", \"output\": [\"2949901969\"]}, {\"input\": \"54314\\r\\n\", \"output\": [\"2949793344\"]}, {\"input\": \"8153\\r\\n\", \"output\": [\"66438801\"]}, {\"input\": \"51689\\r\\n\", \"output\": [\"2671545969\"]}, {\"input\": \"16659\\r\\n\", \"output\": [\"277455649\"]}, {\"input\": \"47389\\r\\n\", \"output\": [\"2245527769\"]}, {\"input\": \"314\\r\\n\", \"output\": [\"97344\"]}, {\"input\": \"23481\\r\\n\", \"output\": [\"551263441\"]}, {\"input\": \"20380\\r\\n\", \"output\": [\"415262884\"]}, {\"input\": \"1994\\r\\n\", \"output\": [\"3968064\"]}]","length":8,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"0 1 1\\n1 0 1\\n1 1 0\", \"0 3 6\\n5 0 5\\n4 7 0\"]","prob_desc_input_spec":"The first three lines of the input contain the Little Elephant's notes. The first line contains elements of the first row of the magic square. The second line contains the elements of the second row, the third line is for the third row. The main diagonal elements that have been forgotten by the Elephant are represented by zeroes. It is guaranteed that the notes contain exactly three zeroes and they are all located on the main diagonal. It is guaranteed that all positive numbers in the table do not exceed 105.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"0c42eafb73d1e30f168958a06a0f9bca","prob_desc_created_at":"1356190200","source_code":"#include<stdio.h>\nint main()\n{\n    int x,y,z,i,j;\n    int a[3][3];\n    for(i=0;i<=2;i++)\n    for(j=0;j<=2;j++)\n    scanf(\"%d\",&a[i][j]);\n    y=(a[2][0]+a[2][1]+a[0][1]+a[0][2]-a[1][0]-a[1][2])\/2;\n    x=a[2][0]+a[2][1]-y;\n    z=a[1][0]+a[1][2]-x;\n    a[0][0]=x;\n    a[1][1]=y;\n    a[2][2]=z;\n    for(i=0;i<=2;i++)\n    {\n        for(j=0;j<=2;j++)\n        printf(\"%d \",a[i][j]);\n         printf(\"\\n\");\n    }\n   return 0;\n}","prob_desc_sample_outputs":"[\"1 1 1\\n1 1 1\\n1 1 1\", \"6 3 6\\n5 5 5\\n4 7 4\"]","lang_cluster":"C","code_uid":"451f1f98e7dccb514b975b54667c2063","prob_desc_notes":null,"prob_desc_output_spec":"Print three lines, in each line print three integers \u2014 the Little Elephant's magic square. If there are multiple magic squares, you are allowed to print any of them. Note that all numbers you print must be positive and not exceed 105. It is guaranteed that there exists at least one magic square that meets the conditions.","prob_desc_output_to":"standard output","prob_desc_description":"Little Elephant loves magic squares very much.A magic square is a 3\u2009\u00d7\u20093 table, each cell contains some positive integer. At that the sums of integers in all rows, columns and diagonals of the table are equal. The figure below shows the magic square, the sum of integers in all its rows, columns and diagonals equals 15.  The Little Elephant remembered one magic square. He started writing this square on a piece of paper, but as he wrote, he forgot all three elements of the main diagonal of the magic square. Fortunately, the Little Elephant clearly remembered that all elements of the magic square did not exceed 105. Help the Little Elephant, restore the original magic square, given the Elephant's notes.","hidden_unit_tests":"[{\"input\": \"0 1 1\\r\\n1 0 1\\r\\n1 1 0\\r\\n\", \"output\": [\"1 1 1 \\r\\n1 1 1 \\r\\n1 1 1\", \"1 1 1\\r\\n 1 1 1\\r\\n 1 1 1\", \"1 1 1\\r\\n1 1 1\\r\\n1 1 1\"]}, {\"input\": \"0 3 6\\r\\n5 0 5\\r\\n4 7 0\\r\\n\", \"output\": [\"6 3 6\\r\\n 5 5 5\\r\\n 4 7 4\", \"6 3 6\\r\\n5 5 5\\r\\n4 7 4\", \"6 3 6 \\r\\n5 5 5 \\r\\n4 7 4\"]}, {\"input\": \"0 4 4\\r\\n4 0 4\\r\\n4 4 0\\r\\n\", \"output\": [\"4 4 4\\r\\n 4 4 4\\r\\n 4 4 4\", \"4 4 4 \\r\\n4 4 4 \\r\\n4 4 4\", \"4 4 4\\r\\n4 4 4\\r\\n4 4 4\"]}, {\"input\": \"0 54 48\\r\\n36 0 78\\r\\n66 60 0\\r\\n\", \"output\": [\"69 54 48 \\r\\n36 57 78 \\r\\n66 60 45\", \"69 54 48\\r\\n36 57 78\\r\\n66 60 45\", \"69 54 48\\r\\n 36 57 78\\r\\n 66 60 45\"]}, {\"input\": \"0 17 14\\r\\n15 0 15\\r\\n16 13 0\\r\\n\", \"output\": [\"14 17 14\\r\\n 15 15 15\\r\\n 16 13 16\", \"14 17 14\\r\\n15 15 15\\r\\n16 13 16\", \"14 17 14 \\r\\n15 15 15 \\r\\n16 13 16\"]}, {\"input\": \"0 97 56\\r\\n69 0 71\\r\\n84 43 0\\r\\n\", \"output\": [\"57 97 56\\r\\n69 70 71\\r\\n84 43 83\", \"57 97 56\\r\\n 69 70 71\\r\\n 84 43 83\", \"57 97 56 \\r\\n69 70 71 \\r\\n84 43 83\"]}, {\"input\": \"0 1099 1002\\r\\n1027 0 1049\\r\\n1074 977 0\\r\\n\", \"output\": [\"1013 1099 1002 \\r\\n1027 1038 1049 \\r\\n1074 977 1063\", \"1013 1099 1002\\r\\n1027 1038 1049\\r\\n1074 977 1063\", \"1013 1099 1002\\r\\n 1027 1038 1049\\r\\n 1074 977 1063\"]}, {\"input\": \"0 98721 99776\\r\\n99575 0 99123\\r\\n98922 99977 0\\r\\n\", \"output\": [\"99550 98721 99776\\r\\n99575 99349 99123\\r\\n98922 99977 99148\", \"99550 98721 99776\\r\\n 99575 99349 99123\\r\\n 98922 99977 99148\", \"99550 98721 99776 \\r\\n99575 99349 99123 \\r\\n98922 99977 99148\"]}, {\"input\": \"0 6361 2304\\r\\n1433 0 8103\\r\\n7232 3175 0\\r\\n\", \"output\": [\"5639 6361 2304 \\r\\n1433 4768 8103 \\r\\n7232 3175 3897\", \"5639 6361 2304\\r\\n1433 4768 8103\\r\\n7232 3175 3897\", \"5639 6361 2304\\r\\n 1433 4768 8103\\r\\n 7232 3175 3897\"]}, {\"input\": \"0 99626 99582\\r\\n99766 0 99258\\r\\n99442 99398 0\\r\\n\", \"output\": [\"99328 99626 99582 \\r\\n99766 99512 99258 \\r\\n99442 99398 99696\", \"99328 99626 99582\\r\\n99766 99512 99258\\r\\n99442 99398 99696\", \"99328 99626 99582\\r\\n 99766 99512 99258\\r\\n 99442 99398 99696\"]}, {\"input\": \"0 99978 99920\\r\\n99950 0 99918\\r\\n99948 99890 0\\r\\n\", \"output\": [\"99904 99978 99920\\r\\n99950 99934 99918\\r\\n99948 99890 99964\", \"99904 99978 99920\\r\\n 99950 99934 99918\\r\\n 99948 99890 99964\", \"99904 99978 99920 \\r\\n99950 99934 99918 \\r\\n99948 99890 99964\"]}, {\"input\": \"0 840 666\\r\\n612 0 948\\r\\n894 720 0\\r\\n\", \"output\": [\"834 840 666\\r\\n612 780 948\\r\\n894 720 726\", \"834 840 666\\r\\n 612 780 948\\r\\n 894 720 726\", \"834 840 666 \\r\\n612 780 948 \\r\\n894 720 726\"]}, {\"input\": \"0 28 10\\r\\n12 0 24\\r\\n26 8 0\\r\\n\", \"output\": [\"16 28 10 \\r\\n12 18 24 \\r\\n26 8 20\", \"16 28 10\\r\\n12 18 24\\r\\n26 8 20\", \"16 28 10\\r\\n 12 18 24\\r\\n 26 8 20\"]}, {\"input\": \"0 120 83\\r\\n98 0 90\\r\\n105 68 0\\r\\n\", \"output\": [\"79 120 83\\r\\n98 94 90\\r\\n105 68 109\", \"79 120 83\\r\\n 98 94 90\\r\\n 105 68 109\", \"79 120 83 \\r\\n98 94 90 \\r\\n105 68 109\"]}, {\"input\": \"0 86900 85807\\r\\n85836 0 86842\\r\\n86871 85778 0\\r\\n\", \"output\": [\"86310 86900 85807\\r\\n 85836 86339 86842\\r\\n 86871 85778 86368\", \"86310 86900 85807\\r\\n85836 86339 86842\\r\\n86871 85778 86368\", \"86310 86900 85807 \\r\\n85836 86339 86842 \\r\\n86871 85778 86368\"]}, {\"input\": \"0 74 78\\r\\n78 0 74\\r\\n74 78 0\\r\\n\", \"output\": [\"76 74 78 \\r\\n78 76 74 \\r\\n74 78 76\", \"76 74 78\\r\\n 78 76 74\\r\\n 74 78 76\", \"76 74 78\\r\\n78 76 74\\r\\n74 78 76\"]}, {\"input\": \"0 505 681\\r\\n605 0 657\\r\\n581 757 0\\r\\n\", \"output\": [\"707 505 681 \\r\\n605 631 657 \\r\\n581 757 555\", \"707 505 681\\r\\n 605 631 657\\r\\n 581 757 555\", \"707 505 681\\r\\n605 631 657\\r\\n581 757 555\"]}, {\"input\": \"0 662 918\\r\\n822 0 854\\r\\n758 1014 0\\r\\n\", \"output\": [\"934 662 918 \\r\\n822 838 854 \\r\\n758 1014 742\", \"934 662 918\\r\\n 822 838 854\\r\\n 758 1014 742\", \"934 662 918\\r\\n822 838 854\\r\\n758 1014 742\"]}, {\"input\": \"0 93 95\\r\\n93 0 97\\r\\n95 97 0\\r\\n\", \"output\": [\"97 93 95\\r\\n93 95 97\\r\\n95 97 93\", \"97 93 95 \\r\\n93 95 97 \\r\\n95 97 93\", \"97 93 95\\r\\n 93 95 97\\r\\n 95 97 93\"]}, {\"input\": \"0 709 712\\r\\n719 0 695\\r\\n702 705 0\\r\\n\", \"output\": [\"700 709 712\\r\\n 719 707 695\\r\\n 702 705 714\", \"700 709 712\\r\\n719 707 695\\r\\n702 705 714\", \"700 709 712 \\r\\n719 707 695 \\r\\n702 705 714\"]}, {\"input\": \"0 7 6\\r\\n9 0 1\\r\\n4 3 0\\r\\n\", \"output\": [\"2 7 6\\r\\n9 5 1\\r\\n4 3 8\", \"2 7 6 \\r\\n9 5 1 \\r\\n4 3 8\", \"2 7 6\\r\\n 9 5 1\\r\\n 4 3 8\"]}, {\"input\": \"0 9 2\\r\\n3 0 7\\r\\n8 1 0\\r\\n\", \"output\": [\"4 9 2 \\r\\n3 5 7 \\r\\n8 1 6\", \"4 9 2\\r\\n3 5 7\\r\\n8 1 6\", \"4 9 2\\r\\n 3 5 7\\r\\n 8 1 6\"]}, {\"input\": \"0 1 43\\r\\n13 0 61\\r\\n31 73 0\\r\\n\", \"output\": [\"67 1 43\\r\\n 13 37 61\\r\\n 31 73 7\", \"67 1 43\\r\\n13 37 61\\r\\n31 73 7\", \"67 1 43 \\r\\n13 37 61 \\r\\n31 73 7\"]}, {\"input\": \"0 100000 100000\\r\\n100000 0 100000\\r\\n100000 100000 0\\r\\n\", \"output\": [\"100000 100000 100000 \\r\\n100000 100000 100000 \\r\\n100000 100000 100000\", \"100000 100000 100000\\r\\n100000 100000 100000\\r\\n100000 100000 100000\", \"100000 100000 100000\\r\\n 100000 100000 100000\\r\\n 100000 100000 100000\"]}]","length":22,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2200.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1 1 1\", \"3 1 4\"]","prob_desc_input_spec":"The first line will contain three integers integer k,\u2009pa,\u2009pb (1\u2009\u2264\u2009k\u2009\u2264\u20091\u2009000, 1\u2009\u2264\u2009pa,\u2009pb\u2009\u2264\u20091\u2009000\u2009000).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"0dc9f5d75143a2bc744480de859188b4","prob_desc_created_at":"1514562000","source_code":"#include <stdio.h>\n#define MOD 1000000007\n\nint K;\nlong long PA,PB,ans;\n\nlong long INV1,INV2;\nlong long f[1010][2010];\n\nlong long power(long long a,int b)\n{\n    long long y = 1;\n    for(;b;b>>=1)\n    {\n        if(b&1) y = y * a % MOD;\n        a = a * a % MOD;\n    }\n    return y;\n}\n\nint main()\n{\n    int i,j;\n    long long x,y;\n\n    scanf(\"%d%I64d%I64d\",&K,&PA,&PB);\n    INV1 = power(PA+PB,MOD-2);\n    INV2 = power(PB,MOD-2);\n\n    f[1][0] = 1;\n    for(i=1;i<=K;i++) for(j=(i==1);j<=2*K;j++)\n    {\n        if(j < K) f[i][j] = f[i-1][j] * PA % MOD * INV1 % MOD;\n        if(j >= i && j-i < K) f[i][j] = (f[i][j] + f[i][j-i] * PB % MOD * INV1) % MOD;\n    }\n\n    for(i=1;i<K;i++) for(j=K;j<=2*K;j++) ans = (ans + j*f[i][j]) % MOD;\n    for(i=0;i<K;i++) ans = (ans + (PA*INV2 + K+i) % MOD * f[K][i]) % MOD;\n\n    printf(\"%I64d\\n\",ans);\n    return 0;\n}","prob_desc_sample_outputs":"[\"2\", \"370000006\"]","lang_cluster":"C","code_uid":"3584f016d2305e91086d15839c9b3c30","prob_desc_notes":"NoteThe first sample, we will keep appending to our sequence until we get the subsequence 'ab' at least once. For instance, we get the sequence 'ab' with probability 1\/4, 'bbab' with probability 1\/16, and 'aab' with probability 1\/8. Note, it's impossible for us to end with a sequence like 'aabab', since we would have stopped our algorithm once we had the prefix 'aab'. The expected amount of times that 'ab' will occur across all valid sequences is 2. For the second sample, the answer is equal to .","prob_desc_output_spec":"Print a single integer, the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"You are given three integers k, pa and pb.You will construct a sequence with the following algorithm: Initially, start with the empty sequence. Each second, you do the following. With probability pa\u2009\/\u2009(pa\u2009+\u2009pb), add 'a' to the end of the sequence. Otherwise (with probability pb\u2009\/\u2009(pa\u2009+\u2009pb)), add 'b' to the end of the sequence.You stop once there are at least k subsequences that form 'ab'. Determine the expected number of times 'ab' is a subsequence in the resulting sequence. It can be shown that this can be represented by P\u2009\/\u2009Q, where P and Q are coprime integers, and . Print the value of .","hidden_unit_tests":"[{\"input\": \"1 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 1 4\\r\\n\", \"output\": [\"370000006\"]}, {\"input\": \"1000 123456 654321\\r\\n\", \"output\": [\"977760856\"]}, {\"input\": \"305 337309 378395\\r\\n\", \"output\": [\"174667130\"]}, {\"input\": \"108 531040 908573\\r\\n\", \"output\": [\"145579983\"]}, {\"input\": \"575 39377 68346\\r\\n\", \"output\": [\"899189133\"]}, {\"input\": \"66 199449 266025\\r\\n\", \"output\": [\"27912582\"]}, {\"input\": \"781 817338 452871\\r\\n\", \"output\": [\"711597307\"]}, {\"input\": \"99 534023 117289\\r\\n\", \"output\": [\"29694885\"]}, {\"input\": \"156 78149 46740\\r\\n\", \"output\": [\"114906561\"]}, {\"input\": \"57 339480 774350\\r\\n\", \"output\": [\"622654301\"]}, {\"input\": \"270 967166 795005\\r\\n\", \"output\": [\"530539317\"]}, {\"input\": \"628 446579 365440\\r\\n\", \"output\": [\"214808787\"]}, {\"input\": \"97 119368 2062\\r\\n\", \"output\": [\"2436614\"]}, {\"input\": \"757 869978 224540\\r\\n\", \"output\": [\"921904658\"]}, {\"input\": \"892 777143 664073\\r\\n\", \"output\": [\"527873013\"]}, {\"input\": \"177 2501 570142\\r\\n\", \"output\": [\"779148936\"]}, {\"input\": \"908 879494 944888\\r\\n\", \"output\": [\"114377456\"]}, {\"input\": \"734 32585 49636\\r\\n\", \"output\": [\"684730644\"]}, {\"input\": \"38 592277 400426\\r\\n\", \"output\": [\"499077928\"]}, {\"input\": \"192 42070 61266\\r\\n\", \"output\": [\"904814024\"]}, {\"input\": \"78 535199 331023\\r\\n\", \"output\": [\"684367478\"]}, {\"input\": \"842 171735 282219\\r\\n\", \"output\": [\"948183028\"]}, {\"input\": \"1000 1000000 1\\r\\n\", \"output\": [\"478180868\"]}]","length":42,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\", \"25\"]","prob_desc_input_spec":"The first line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009104) \u2014 the number of cubes given to Vanya.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"873a12edffc57a127fdfb1c65d43bdb0","prob_desc_created_at":"1417451400","source_code":"#include <stdio.h>\n\nint main(){\n\tint n,i;\n\tscanf(\"%d\",&n);\n\tfor(i=0;(i*(2*i*i+6*i+4))\/12<=n;i++);\n\tprintf(\"%d\",i-1);\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"1\", \"4\"]","lang_cluster":"C","code_uid":"72780ffdb100249a6f2316391d335a33","prob_desc_notes":"NoteIllustration to the second sample:   ","prob_desc_output_spec":"Print the maximum possible height of the pyramid in the single line.","prob_desc_output_to":"standard output","prob_desc_description":"Vanya got n cubes. He decided to build a pyramid from them. Vanya wants to build the pyramid as follows: the top level of the pyramid must consist of 1 cube, the second level must consist of 1\u2009+\u20092\u2009=\u20093 cubes, the third level must have 1\u2009+\u20092\u2009+\u20093\u2009=\u20096 cubes, and so on. Thus, the i-th level of the pyramid must have 1\u2009+\u20092\u2009+\u2009...\u2009+\u2009(i\u2009-\u20091)\u2009+\u2009i cubes.Vanya wants to know what is the maximum height of the pyramid that he can make using the given cubes.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"25\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4115\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"9894\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"7969\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"6560\\r\\n\", \"output\": [\"33\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"9880\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"9879\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"7770\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"7769\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"2925\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"220\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"219\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"3046\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"7590\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"1014\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"7142\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"9999\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"38\"]}]","length":9,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"12\", \"20\", \"10\"]","prob_desc_input_spec":"The only line contains n (1\u2009\u2264\u2009n\u2009\u2264\u200925) \u2014 the required sum of points.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"5802f52caff6015f21b80872274ab16c","prob_desc_created_at":"1312714800","source_code":"#include<stdio.h>\n\nint main()\n{\n    int total;\n\n    scanf(\"%d\",&total);\n\n    if( total<=10 || total>=22) \/\/ 10+11 is max\n        printf(\"0\\n\");\n    else\n    {\n        if( total == 20)\n        {\n                printf(\"15\\n\");\n        }\n        else\n        {\n            printf(\"4\\n\");\n        }\n    }\n    return 0;\n\n}\n\/****** PCCA -Fri Oct 07 12:57:29 GMT 2011 *******\/","prob_desc_sample_outputs":"[\"4\", \"15\", \"0\"]","lang_cluster":"C","code_uid":"28e2e30aa9e4cc317267ae61734ecb94","prob_desc_notes":"NoteIn the first sample only four two's of different suits can earn the required sum of points.In the second sample we can use all tens, jacks, queens and kings; overall it's 15 cards, as the queen of spades (as any other card) is only present once in the pack of cards and it's already in use.In the third sample there is no card, that would add a zero to the current ten points.","prob_desc_output_spec":"Print the numbers of ways to get the second card in the required way if the first card is the queen of spades.","prob_desc_output_to":"standard output","prob_desc_description":"One rainy gloomy evening when all modules hid in the nearby cafes to drink hot energetic cocktails, the Hexadecimal virus decided to fly over the Mainframe to look for a Great Idea. And she has found one!Why not make her own Codeforces, with blackjack and other really cool stuff? Many people will surely be willing to visit this splendid shrine of high culture.In Mainframe a standard pack of 52 cards is used to play blackjack. The pack contains cards of 13 values: 2, 3, 4, 5, 6, 7, 8, 9, 10, jacks, queens, kings and aces. Each value also exists in one of four suits: hearts, diamonds, clubs and spades. Also, each card earns some value in points assigned to it: cards with value from two to ten earn from 2 to 10 points, correspondingly. An ace can either earn 1 or 11, whatever the player wishes. The picture cards (king, queen and jack) earn 10 points. The number of points a card earns does not depend on the suit. The rules of the game are very simple. The player gets two cards, if the sum of points of those cards equals n, then the player wins, otherwise the player loses.The player has already got the first card, it's the queen of spades. To evaluate chances for victory, you should determine how many ways there are to get the second card so that the sum of points exactly equals n.","hidden_unit_tests":"[{\"input\": \"12\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"18\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"25\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"22\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"14\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"16\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"21\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"23\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"24\\r\\n\", \"output\": [\"0\"]}]","length":25,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\", \"5\\n16 23 8 15 4\", \"3\\n14 15 92\"]","prob_desc_input_spec":"The first line of input contains K (1\u2009\u2264\u2009K\u2009\u2264\u200925), the number of onsite finalists you know. The second line of input contains r1,\u2009r2,\u2009...,\u2009rK (1\u2009\u2264\u2009ri\u2009\u2264\u2009106), the qualifying ranks of the finalists you know. All these ranks are distinct.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"ef657588b4f2fe8b2ff5f8edc0ab8afd","prob_desc_created_at":"1505583300","source_code":"#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n    int n,*a,i,max,ans;\n\n    scanf(\"%d\",&n);\n\n    a = (int*)malloc(n*sizeof(int*));\n\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    max = a[0];\n\n    for(i=0;i<n;i++)\n    {\n        if(a[i]>max)\n            max = a[i];\n    }\n    if(max>25)\n        ans = max -25;\n    else\n        ans = 0;\n\n    printf(\"%d\",ans);\n}\n","prob_desc_sample_outputs":"[\"3\", \"0\", \"67\"]","lang_cluster":"C","code_uid":"d1d7f7532d5ffe675729b639b1274158","prob_desc_notes":"NoteIn the first example, you know all 25 onsite finalists. The contestants who ranked 1-st, 13-th, and 27-th must have declined, so the answer is 3.","prob_desc_output_spec":"Print the minimum possible number of contestants that declined the invitation to compete onsite.","prob_desc_output_to":"standard output","prob_desc_description":"This year, as in previous years, MemSQL is inviting the top 25 competitors from the Start[c]up qualification round to compete onsite for the final round. Not everyone who is eligible to compete onsite can afford to travel to the office, though. Initially the top 25 contestants are invited to come onsite. Each eligible contestant must either accept or decline the invitation. Whenever a contestant declines, the highest ranked contestant not yet invited is invited to take the place of the one that declined. This continues until 25 contestants have accepted invitations.After the qualifying round completes, you know K of the onsite finalists, as well as their qualifying ranks (which start at 1, there are no ties). Determine the minimum possible number of contestants that declined the invitation to compete onsite in the final round.","hidden_unit_tests":"[{\"input\": \"25\\r\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5\\r\\n16 23 8 15 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n14 15 92\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"1\\r\\n1000000\\r\\n\", \"output\": [\"999975\"]}, {\"input\": \"25\\r\\n1000000 999999 999998 999997 999996 999995 999994 999993 999992 999991 999990 999989 999988 999987 999986 999985 999984 999983 999982 999981 999980 999979 999978 999977 999976\\r\\n\", \"output\": [\"999975\"]}, {\"input\": \"25\\r\\n13 15 24 2 21 18 9 4 16 6 10 25 20 11 23 17 8 3 1 12 5 19 22 14 7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n17 11 7 13 18 12 14 5 16 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"22\\r\\n22 14 23 20 11 21 4 12 3 8 7 9 19 10 13 17 15 1 5 18 16 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"21\\r\\n6 21 24 3 10 23 14 2 26 12 8 1 15 13 9 5 19 20 4 16 22\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n100 60\\r\\n\", \"output\": [\"75\"]}, {\"input\": \"4\\r\\n999 581 787 236\\r\\n\", \"output\": [\"974\"]}, {\"input\": \"6\\r\\n198 397 732 1234 309 827\\r\\n\", \"output\": [\"1209\"]}, {\"input\": \"11\\r\\n6494 3961 1858 4351 8056 780 7720 6211 1961 8192 3621\\r\\n\", \"output\": [\"8167\"]}, {\"input\": \"14\\r\\n18809 9534 11652 6493 8929 9370 4125 23888 16403 3559 23649 19243 14289 17852\\r\\n\", \"output\": [\"23863\"]}, {\"input\": \"18\\r\\n24939 35558 47058 70307 26221 12866 3453 40422 47557 36322 40698 64060 10825 77777 48645 26124 4859 64222\\r\\n\", \"output\": [\"77752\"]}, {\"input\": \"24\\r\\n633483 654321 122445 481150 347578 37803 525083 151084 211073 358699 339420 452023 219553 119727 74852 66750 371279 405099 618894 649977 235337 607819 81649 649804\\r\\n\", \"output\": [\"654296\"]}, {\"input\": \"25\\r\\n58115 794098 753382 484882 238434 674285 690118 858677 196185 173301 349729 918792 600745 636016 122678 366783 137179 377098 917081 369620 449039 379412 503678 1000000 292099\\r\\n\", \"output\": [\"999975\"]}, {\"input\": \"2\\r\\n26 27\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n40 30 35\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"2\\r\\n46 45\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"3\\r\\n1 25 90\\r\\n\", \"output\": [\"65\"]}, {\"input\": \"5\\r\\n14 15 16 30 92\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"2\\r\\n1000 1001\\r\\n\", \"output\": [\"976\"]}, {\"input\": \"25\\r\\n3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28 2\\r\\n\", \"output\": [\"3\"]}]","length":29,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"0 0 0 0 0\\n0 0 0 0 1\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\", \"0 0 0 0 0\\n0 0 0 0 0\\n0 1 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\"]","prob_desc_input_spec":"The input consists of five lines, each line contains five integers: the j-th integer in the i-th line of the input represents the element of the matrix that is located on the intersection of the i-th row and the j-th column. It is guaranteed that the matrix consists of 24 zeroes and a single number one.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"8ba7cedc3f6ae478a0bb3f902440c8e9","prob_desc_created_at":"1358350200","source_code":"#include <stdio.h>\n\nint main() {\nint i,j,p,o,k;\nint flag = 0;\nint m[5][5];\nfor(i=0;i<5;i++)\n\tfor(j=0;j<5;j++)\n\tscanf(\"%d\",&m[i][j]);\nfor(i=0;i<5;i++)\n{\n\tfor(j=0;j<5;j++)\n\t{\n\t\tif(m[i][j]==1){\n\t\tflag = 1;\n\t\tbreak;\n\t\t}\n\t}\n\t\tif(flag == 1)\n\t\tbreak;\n\t\n}\n\n\tp=i-2;\n\tif(p<0)\n\tp*=-1;\n\to=j-2;\n\tif(o<0)\n\to*=-1;\n\tk= p+o;\n\tprintf(\"%d\",k);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"1\"]","lang_cluster":"C","code_uid":"6788053e6b71c5df5eebc3f1f610a4f0","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the minimum number of moves needed to make the matrix beautiful.","prob_desc_output_to":"standard output","prob_desc_description":"You've got a 5\u2009\u00d7\u20095 matrix, consisting of 24 zeroes and a single number one. Let's index the matrix rows by numbers from 1 to 5 from top to bottom, let's index the matrix columns by numbers from 1 to 5 from left to right. In one move, you are allowed to apply one of the two following transformations to the matrix:  Swap two neighboring matrix rows, that is, rows with indexes i and i\u2009+\u20091 for some integer i (1\u2009\u2264\u2009i\u2009&lt;\u20095).  Swap two neighboring matrix columns, that is, columns with indexes j and j\u2009+\u20091 for some integer j (1\u2009\u2264\u2009j\u2009&lt;\u20095). You think that a matrix looks beautiful, if the single number one of the matrix is located in its middle (in the cell that is on the intersection of the third row and the third column). Count the minimum number of moves needed to make the matrix beautiful.","hidden_unit_tests":"[{\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 1\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 1 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"0 1 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"0 0 1 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 1 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"0 0 0 0 1\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 1 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 1 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 1 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 1\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 1 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 1 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 1 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 1\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n1 0 0 0 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 1 0 0 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 1 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 1 0\\r\\n\", \"output\": [\"3\"]}]","length":33,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 2\", \"9 3\"]","prob_desc_input_spec":"The single line contains two integers n and m (1\u2009\u2264\u2009n\u2009\u2264\u2009100;\u00a02\u2009\u2264\u2009m\u2009\u2264\u2009100), separated by a space.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"42b25b7335ec01794fbb1d4086aa9dd0","prob_desc_created_at":"1408548600","source_code":"#include<stdio.h>\nint main()           \n{\n    int n,m,sum,d;\n    scanf(\"%d %d\",&n,&m);\n    sum=n;\n    rich:\n    d=n\/m;\n    if(d>0)\n    {\n    sum=sum+d;\n    if(((n%m)+d)>=m)\n    {\n    n=(n%m)+d;\n    goto rich;\n    }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"13\"]","lang_cluster":"C","code_uid":"4ddeb8bc7010671a1fde171d9c6c2c67","prob_desc_notes":"NoteIn the first sample Vasya spends the first two days wearing the socks that he had initially. Then on day three he puts on the socks that were bought on day two.In the second sample Vasya spends the first nine days wearing the socks that he had initially. Then he spends three days wearing the socks that were bought on the third, sixth and ninth days. Than he spends another day wearing the socks that were bought on the twelfth day.","prob_desc_output_spec":"Print a single integer \u2014 the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya has n pairs of socks. In the morning of each day Vasya has to put on a pair of socks before he goes to school. When he comes home in the evening, Vasya takes off the used socks and throws them away. Every m-th day (at days with numbers m,\u20092m,\u20093m,\u2009...) mom buys a pair of socks to Vasya. She does it late in the evening, so that Vasya cannot put on a new pair of socks before the next day. How many consecutive days pass until Vasya runs out of socks?","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"9 3\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 99\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"10 2\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"10 9\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"101\"]}, {\"input\": \"2 27\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"99 100\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"99 2\\r\\n\", \"output\": [\"197\"]}, {\"input\": \"100 3\\r\\n\", \"output\": [\"149\"]}, {\"input\": \"98 3\\r\\n\", \"output\": [\"146\"]}, {\"input\": \"100 2\\r\\n\", \"output\": [\"199\"]}, {\"input\": \"62 4\\r\\n\", \"output\": [\"82\"]}, {\"input\": \"99 10\\r\\n\", \"output\": [\"109\"]}, {\"input\": \"100 5\\r\\n\", \"output\": [\"124\"]}, {\"input\": \"80 80\\r\\n\", \"output\": [\"81\"]}, {\"input\": \"95 16\\r\\n\", \"output\": [\"101\"]}, {\"input\": \"75 16\\r\\n\", \"output\": [\"79\"]}, {\"input\": \"99 74\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"20 21\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"52 96\\r\\n\", \"output\": [\"52\"]}, {\"input\": \"24 5\\r\\n\", \"output\": [\"29\"]}]","length":20,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"6\\nURLLDR\", \"4\\nDLUU\", \"7\\nRLRLRLR\"]","prob_desc_input_spec":"The first line of the input contains a single positive integer, n (1\u2009\u2264\u2009n\u2009\u2264\u2009200)\u00a0\u2014 the number of commands. The next line contains n characters, each either 'U', 'R', 'D', or 'L'\u00a0\u2014 Calvin's source code.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"7bd5521531950e2de9a7b0904353184d","prob_desc_created_at":"1455384900","source_code":"#include<stdio.h>\n#include<string.h>\nmain()\n{\nint x=0,y=0,n,i,j,len,count=0;\nchar str[200];\nscanf(\"%d\\n\",&n);\nfor(i=0;i<n;i++)\nscanf(\"%c\\n\",&str[i]);\n\nstr[i]='\\0';\nlen=strlen(str);\n\nfor(i=0;i<len;i++)\n{\nx=0;y=0;\nfor(j=i;j<len;j++)\n{\n\nif(str[j]=='R')\nx=x+1;\n\nif(str[j]=='L')\nx=x-1;\n\nif(str[j]=='U')\ny=y+1;;\n\nif(str[j]=='D')\ny=y-1;\n\nif(x==0&&y==0)\ncount++;\n\n\n}\n\n}\nprintf(\"%d\",count);\n}\n","prob_desc_sample_outputs":"[\"2\", \"0\", \"12\"]","lang_cluster":"C","code_uid":"51039ed4ce4f1ea783770663b44e34b3","prob_desc_notes":"NoteIn the first case, the entire source code works, as well as the \"RL\" substring in the second and third characters.Note that, in the third case, the substring \"LR\" appears three times, and is therefore counted three times to the total result.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the number of contiguous substrings that Calvin can execute and return to his starting square.","prob_desc_output_to":"standard output","prob_desc_description":"Calvin the robot lies in an infinite rectangular grid. Calvin's source code contains a list of n commands, each either 'U', 'R', 'D', or 'L'\u00a0\u2014 instructions to move a single square up, right, down, or left, respectively. How many ways can Calvin execute a non-empty contiguous substrings of commands and return to the same square he starts in? Two substrings are considered different if they have different starting or ending indices.","hidden_unit_tests":"[{\"input\": \"6\\r\\nURLLDR\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\nDLUU\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"7\\r\\nRLRLRLR\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"1\\r\\nR\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\nURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDLURDL\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"200\\r\\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"20\\r\\nLDURLDURRLRUDLRRUDLU\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"140\\r\\nDLDLULULDRDDDLLUDRRDLLUULLDDLDLUURLDLDRDUDDLRRDURUUUUURLDUDDLLRRLLDRRRDDDDDUDUULLURRDLDULUDLLUUDRRLUDULUDUDULULUURURRDUURRDLULLURUDDDDRDRDRD\\r\\n\", \"output\": [\"125\"]}, {\"input\": \"194\\r\\nULLLDLLDRUUDURRULLRLUUURDRLLURDUDDUDLULRLDRUDURLDLRDLLLLUDDRRRULULULUDDULRURURLLDLDLDRUDUUDULRULDDRRLRDRULLDRULLLLRRDDLLLLULDRLUULRUUULDUUDLDLDUUUDDLDDRULDRRLUURRULLDULRRDLLRDURDLUUDUDLLUDDULDDD\\r\\n\", \"output\": [\"282\"]}, {\"input\": \"200\\r\\nDDDURLLUUULUDDURRDLLDDLLRLUULUULDDDLRRDLRRDUDURDUDRRLLDRDUDDLDDRDLURRRLLRDRRLLLRDDDRDRRLLRRLULRUULRLDLUDRRRDDUUURLLUDRLDUDRLLRLRRLUDLRULDUDDRRLLRLURDLRUDDDURLRDUDUUURLLULULRDRLDLDRURDDDLLRUDDRDUDDDLRU\\r\\n\", \"output\": [\"408\"]}, {\"input\": \"197\\r\\nDUUDUDUDUDUUDUUDUUUDDDDUUUDUUUDUUUUUDUUUDDUDDDUUDUDDDUUDDUUUUUUUDUDDDDDUUUUUDDDDDDUUUUDDUDDUDDDUDUUUDUUDUDUDUUUDUDDDDUUDDUDDDDUDDDUDUUUDUUDUUUDDDDUUUDUUDDUUUUUDDDDUUDUUDDDDUDDUUDUUUDDDDUDUUUDDDUUDU\\r\\n\", \"output\": [\"1995\"]}, {\"input\": \"200\\r\\nLLLLRLLRLLRRRRLLRRLRRLRRRLLLRRLRRRRLLRRLLRRRLRLRLRRLLRLLRRLLLRRRRLRLLRLLLRLLLRRLLLRLRLRRRRRRRLRRRLRLRLLLLRLRRRRRLRRLRLLLLRLLLRRLRRLLRLRLLLRRLLRRLRRRRRLRLRRLRLLRLLLLRLRRRLRRLRLLRLRRLRRRRRLRRLLLRRRRRLLR\\r\\n\", \"output\": [\"1368\"]}, {\"input\": \"184\\r\\nUUUDDUDDDDDUDDDDUDDUUUUUDDDUUDDUDUUDUUUDDUDDDDDDDDDDUDUDDUUDDDUUDDUDUDDDUUDUDUUUUDDUDUUUDDUDUUUUDUUDDUUDUUUDUDUDDUDUDDDUUDDDDUUUUUDDDUDUDUDUDUDUUUDUDDUUDDUDUUDUDUUUDUUDDDDUDDDDUDUUDUUD\\r\\n\", \"output\": [\"1243\"]}, {\"input\": \"187\\r\\nRLLRLRRLLRRLRRRRLLRLLRLLLLRRRLLLRLLLLRRLRLRRRRRRLLRRLRLLRRRLLRRLLLRRLRRLRLLLLRRRRLRRLLRRLRRRRLLLLRRLRLRLRRRRRLLRLRLRLRLRLRLLLRLLLLLRRRLLRLRRRLLLRRLLLLLRLLRLLLRRRLLLRRLRRRLLLRRLRLLRRLRLRLR\\r\\n\", \"output\": [\"1501\"]}, {\"input\": \"190\\r\\nUULLLUUULLLULLUULUUUUULUUULLULLULUULLUULLUUULULUULLUULLUUULULLLLLLULLLLLULUULLULLULLLUULUULLLUUUULLLLUUULLUUULLLULULUULULLUULULULUUULLUUUULLUUULULUULLLLULLLLLUULLUULULLULUUUUUULULLLULLUULUUU\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"46\\r\\nULUURRRRLDRDRDDDURRRLLLDDULLRRRRRLUDDLRDRULLLL\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"70\\r\\nUUDRLDRDRUDLLURURULRDULRRDULDUDDRUULLDDDDDRLLRDURRDULRDLRUUUDDLRUURRLD\\r\\n\", \"output\": [\"86\"]}, {\"input\": \"198\\r\\nURLLUDRDUUDRDLLRURULLRRLRRUULRLULUUDRRURLRUURRDRUUDRLRURLLULRDDDDDRDDRRRLRUDULLDDLLLUDRLDRUDRDLDUULLUUUULULLRLDDRDURDRURLULDRURLLDDULURULDLUUUUULDLURRLLDLULLDULRUURRLDLLUUURDLDDUDUULRLUDULLULDRDRLRL\\r\\n\", \"output\": [\"160\"]}, {\"input\": \"22\\r\\nDUDDDURURUDURRUDRDULUL\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"200\\r\\nUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUD\\r\\n\", \"output\": [\"10000\"]}, {\"input\": \"4\\r\\nRRDR\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6\\r\\nUULLLL\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\nDU\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"6\\r\\nUURRRR\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"101\\r\\nRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\\r\\n\", \"output\": [\"0\"]}]","length":40,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 1\", \"3 2\", \"6 3\"]","prob_desc_input_spec":"The only line of input contains two integers n and m, separated by a single space (1\u2009\u2264\u2009m\u2009\u2264\u2009n\u2009\u2264\u2009109) \u2014 the number of participants and the number of teams respectively. ","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"a081d400a5ce22899b91df38ba98eecc","prob_desc_created_at":"1413474000","source_code":"#include<stdio.h>\nint main()\n{\n    long long int n,m,r;\n    long long int max,min,d;\n    scanf(\"%lld%lld\",&n,&m);\n    max=((n-m)*(n-m+1))\/2;\n    d=n\/m;\n    r=n%m;\n    min=(m-r)*(((d)*(d-1))\/2LL)+r*(((d+1)*(d))\/2);\n    printf(\"%lld %lld\",min,max);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"10 10\", \"1 1\", \"3 6\"]","lang_cluster":"C","code_uid":"572ac819b675ffe9836bdf335961db32","prob_desc_notes":"NoteIn the first sample all the participants get into one team, so there will be exactly ten pairs of friends.In the second sample at any possible arrangement one team will always have two participants and the other team will always have one participant. Thus, the number of pairs of friends will always be equal to one.In the third sample minimum number of newly formed friendships can be achieved if participants were split on teams consisting of 2 people, maximum number can be achieved if participants were split on teams of 1, 1 and 4 people.","prob_desc_output_spec":"The only line of the output should contain two integers kmin and kmax \u2014 the minimum possible number of pairs of friends and the maximum possible number of pairs of friends respectively.","prob_desc_output_to":"standard output","prob_desc_description":"n participants of the competition were split into m teams in some manner so that each team has at least one participant. After the competition each pair of participants from the same team became friends.Your task is to write a program that will find the minimum and the maximum number of pairs of friends that could have formed by the end of the competition.","hidden_unit_tests":"[{\"input\": \"5 1\\r\\n\", \"output\": [\"10 10\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"6 3\\r\\n\", \"output\": [\"3 6\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"2 3\"]}, {\"input\": \"10 2\\r\\n\", \"output\": [\"20 36\"]}, {\"input\": \"10 6\\r\\n\", \"output\": [\"4 10\"]}, {\"input\": \"1000000000 1\\r\\n\", \"output\": [\"499999999500000000 499999999500000000\"]}, {\"input\": \"5000000 12\\r\\n\", \"output\": [\"1041664166668 12499942500066\"]}, {\"input\": \"1833 195\\r\\n\", \"output\": [\"7722 1342341\"]}, {\"input\": \"1000000000 1000000000\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"1000000000 1000000\\r\\n\", \"output\": [\"499500000000 499000500499500000\"]}, {\"input\": \"1000000000 32170\\r\\n\", \"output\": [\"15541930838100 499967831017438365\"]}, {\"input\": \"1000000 1000\\r\\n\", \"output\": [\"499500000 499000999500\"]}, {\"input\": \"1234 1123\\r\\n\", \"output\": [\"111 6216\"]}, {\"input\": \"599222887 298488\\r\\n\", \"output\": [\"601178656545 179355218158217800\"]}, {\"input\": \"999999999 500000000\\r\\n\", \"output\": [\"499999999 124999999750000000\"]}, {\"input\": \"1000000000 384842119\\r\\n\", \"output\": [\"845473643 189209609585784021\"]}, {\"input\": \"1000000000 2\\r\\n\", \"output\": [\"249999999500000000 499999998500000001\"]}, {\"input\": \"1000000000 999999999\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"38447 383\\r\\n\", \"output\": [\"1910550 724453080\"]}, {\"input\": \"100000000 99999799\\r\\n\", \"output\": [\"201 20301\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"0 0\"]}, {\"input\": \"10 10\\r\\n\", \"output\": [\"0 0\"]}]","length":13,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\"]","prob_desc_input_spec":"The first line contains a single integer n (0\u2009\u2264\u2009n\u2009\u2264\u20091000).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"1a335a9638523ca0315282a67e18eec7","prob_desc_created_at":"1301155200","source_code":"#include<stdio.h>\n#define MOD 1000003\n \nint power(int x,int y)\n{\n    if(y==0)\n    return 1;\n    int temp=x;\n    while(--y)\n    {\n        x*=temp;\n        x%=MOD;\n    }\n    return x;\n}\nint main()\n{\n    int y;\n    scanf(\"%d\",&y);\n    if(y==0)\n    {\n    printf(\"%d\",1);\n    return 0;\n    }\n    int res=power(3,y-1);\n    printf(\"%d\\n\",res);\n    return 0;\n}","prob_desc_sample_outputs":"[\"9\"]","lang_cluster":"C","code_uid":"b00ee8d6b0774ac21a19e733ecf8120a","prob_desc_notes":"NoteIf the box possesses the base of 23\u2009\u00d7\u200923 (as in the example), then the cookies will be put there in the following manner: ","prob_desc_output_spec":"Print the single number, equal to the number of empty cells in the box. The answer should be printed modulo 106\u2009+\u20093.","prob_desc_output_to":"standard output","prob_desc_description":"Fangy collects cookies. Once he decided to take a box and put cookies into it in some way. If we take a square k\u2009\u00d7\u2009k in size, divided into blocks 1\u2009\u00d7\u20091 in size and paint there the main diagonal together with cells, which lie above it, then the painted area will be equal to the area occupied by one cookie k in size. Fangy also has a box with a square base 2n\u2009\u00d7\u20092n, divided into blocks 1\u2009\u00d7\u20091 in size. In a box the cookies should not overlap, and they should not be turned over or rotated. See cookies of sizes 2 and 4 respectively on the figure:    To stack the cookies the little walrus uses the following algorithm. He takes out of the repository the largest cookie which can fit in some place in the box and puts it there. Everything could be perfect but alas, in the repository the little walrus has infinitely many cookies of size 2 and larger, and there are no cookies of size 1, therefore, empty cells will remain in the box. Fangy wants to know how many empty cells will be left in the end.","hidden_unit_tests":"[{\"input\": \"3\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"243\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"59049\"]}, {\"input\": \"14\\r\\n\", \"output\": [\"594320\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"782957\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"729\"]}, {\"input\": \"0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"691074\"]}, {\"input\": \"657\\r\\n\", \"output\": [\"874011\"]}, {\"input\": \"561\\r\\n\", \"output\": [\"842553\"]}, {\"input\": \"823\\r\\n\", \"output\": [\"858672\"]}, {\"input\": \"850\\r\\n\", \"output\": [\"557186\"]}, {\"input\": \"298\\r\\n\", \"output\": [\"999535\"]}, {\"input\": \"262\\r\\n\", \"output\": [\"946384\"]}, {\"input\": \"910\\r\\n\", \"output\": [\"678945\"]}, {\"input\": \"617\\r\\n\", \"output\": [\"247876\"]}, {\"input\": \"857\\r\\n\", \"output\": [\"562128\"]}, {\"input\": \"69\\r\\n\", \"output\": [\"327984\"]}, {\"input\": \"589\\r\\n\", \"output\": [\"889192\"]}, {\"input\": \"928\\r\\n\", \"output\": [\"794863\"]}, {\"input\": \"696\\r\\n\", \"output\": [\"695035\"]}, {\"input\": \"226\\r\\n\", \"output\": [\"376094\"]}]","length":28,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 1\", \"4 2\", \"5 3\", \"5 4\"]","prob_desc_input_spec":"The first line contains two integers n and k (4\u2009\u2264\u2009n\u2009\u2264\u20091000, 1\u2009\u2264\u2009k\u2009\u2264\u20094).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"96d839dc2d038f8ae95fc47c217b2e2f","prob_desc_created_at":"1510239900","source_code":"#include<stdio.h>\n\nlong long perm(int n, int i) {\n\tlong long sum = 1;\n\twhile (i--) sum = sum * n--;\n\treturn sum;\n}\n\nlong long comb(int n, int i) {\n\treturn perm(n, i) \/ perm(i, i);\n}\n\nint main() {\n\tint n, k;\n\tscanf(\"%d %d\", &n, &k);\n\tlong long dp[5], sum, tt, temp;\n\tdp[0] = 1;\n\tdp[1] = 1;\n\n\tfor (int i = 2; i <= k; i++) {\n\t\tsum = comb(n, i) * perm(i, i);\n\t\ttemp = 0;\n\t\tfor (int j = i - 1; j >= 0; j--) {\n\t\t\ttt = comb(n - j, i - j) - 1;\n\t\t\tsum -= (tt - temp) * dp[j];\n\t\t\ttemp += tt - temp;\n\t\t}\n\t\tdp[i] = sum;\n\t}\n\n\tprintf(\"%lld\", dp[k]);\n}","prob_desc_sample_outputs":"[\"1\", \"7\", \"31\", \"76\"]","lang_cluster":"C","code_uid":"e3a06b6e80fee93b7582e782e06953da","prob_desc_notes":null,"prob_desc_output_spec":"Print the number of almost identity permutations for given n and k.","prob_desc_output_to":"standard output","prob_desc_description":"A permutation p of size n is an array such that every integer from 1 to n occurs exactly once in this array.Let's call a permutation an almost identity permutation iff there exist at least n\u2009-\u2009k indices i (1\u2009\u2264\u2009i\u2009\u2264\u2009n) such that pi\u2009=\u2009i.Your task is to count the number of almost identity permutations for given numbers n and k.","hidden_unit_tests":"[{\"input\": \"4 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"5 4\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"200 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200 2\\r\\n\", \"output\": [\"19901\"]}, {\"input\": \"200 3\\r\\n\", \"output\": [\"2646701\"]}, {\"input\": \"200 4\\r\\n\", \"output\": [\"584811251\"]}, {\"input\": \"400 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"400 2\\r\\n\", \"output\": [\"79801\"]}, {\"input\": \"400 3\\r\\n\", \"output\": [\"21253401\"]}, {\"input\": \"400 4\\r\\n\", \"output\": [\"9477912501\"]}, {\"input\": \"600 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"600 2\\r\\n\", \"output\": [\"179701\"]}, {\"input\": \"600 3\\r\\n\", \"output\": [\"71820101\"]}, {\"input\": \"600 4\\r\\n\", \"output\": [\"48187303751\"]}, {\"input\": \"800 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"800 2\\r\\n\", \"output\": [\"319601\"]}, {\"input\": \"800 3\\r\\n\", \"output\": [\"170346801\"]}, {\"input\": \"800 4\\r\\n\", \"output\": [\"152620985001\"]}, {\"input\": \"1000 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000 2\\r\\n\", \"output\": [\"499501\"]}, {\"input\": \"1000 3\\r\\n\", \"output\": [\"332833501\"]}, {\"input\": \"1000 4\\r\\n\", \"output\": [\"373086956251\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"24\"]}]","length":32,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4\"]","prob_desc_input_spec":"The only line contains an integer n (2\u2009\u2264\u2009n\u2009\u2264\u20091012), the number of vertices in the graph.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"a98f0d924ea52cafe0048f213f075891","prob_desc_created_at":"1522771500","source_code":"#include<stdio.h>\n\nint main()\n{\n    long long int i=0,n,count=0,temp,mod,M=1;\n    scanf(\"%lld\",&n);\n    while(1)\n    {\n        \/\/ printf(\"%lld\\n\", i);\n        M=M*2;\n        mod=n%M;\n        temp=n\/M;\n        \/\/ printf(\"%lld %lld %lld\\n\",temp , mod,M);\n        if(mod>M\/2)\n            count+=(M\/2)*(temp+1);\n        else{\n                count+=(M\/2)*(temp);\n            }\n        if(temp<=0)\n            break;\n        i++;\n    }\n    printf(\"%lld\\n\", count);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"4\"]","lang_cluster":"C","code_uid":"a7c8faaea19ea8bdf4482ed8c4acf808","prob_desc_notes":"NoteIn the first sample:  The weight of the minimum spanning tree is 1+2+1=4.","prob_desc_output_spec":"The only line contains an integer x, the weight of the graph's minimum spanning tree.","prob_desc_output_to":"standard output","prob_desc_description":"Ehab is interested in the bitwise-xor operation and the special graphs. Mahmoud gave him a problem that combines both. He has a complete graph consisting of n vertices numbered from 0 to n\u2009-\u20091. For all 0\u2009\u2264\u2009u\u2009&lt;\u2009v\u2009&lt;\u2009n, vertex u and vertex v are connected with an undirected edge that has weight  (where  is the bitwise-xor operation). Can you find the weight of the minimum spanning tree of that graph?You can read about complete graphs in https:\/\/en.wikipedia.org\/wiki\/Complete_graphYou can read about the minimum spanning tree in https:\/\/en.wikipedia.org\/wiki\/Minimum_spanning_treeThe weight of the minimum spanning tree is the sum of the weights on the edges included in it.","hidden_unit_tests":"[{\"input\": \"4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000\\r\\n\", \"output\": [\"20140978692096\"]}, {\"input\": \"999999999999\\r\\n\", \"output\": [\"20140978692095\"]}, {\"input\": \"23131234\\r\\n\", \"output\": [\"293058929\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"877968\"]}, {\"input\": \"1024\\r\\n\", \"output\": [\"5120\"]}, {\"input\": \"536870912\\r\\n\", \"output\": [\"7784628224\"]}, {\"input\": \"536870911\\r\\n\", \"output\": [\"7784628223\"]}, {\"input\": \"536870913\\r\\n\", \"output\": [\"8321499136\"]}, {\"input\": \"123456789\\r\\n\", \"output\": [\"1680249144\"]}, {\"input\": \"200\\r\\n\", \"output\": [\"844\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"5052\"]}, {\"input\": \"12000\\r\\n\", \"output\": [\"84624\"]}, {\"input\": \"65536\\r\\n\", \"output\": [\"524288\"]}, {\"input\": \"1048576\\r\\n\", \"output\": [\"10485760\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"549755813888\\r\\n\", \"output\": [\"10720238370816\"]}, {\"input\": \"549755813887\\r\\n\", \"output\": [\"10720238370815\"]}, {\"input\": \"549755813889\\r\\n\", \"output\": [\"11269994184704\"]}]","length":25,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"20 4 5 2\", \"30 9 4 1\"]","prob_desc_input_spec":"The only line contains four integers $$$n$$$, $$$k$$$, $$$M$$$ and $$$D$$$ ($$$2 \\le n \\le 10^{18}$$$, $$$2 \\le k \\le n$$$, $$$1 \\le M \\le n$$$, $$$1 \\le D \\le \\min{(n, 1000)}$$$, $$$M \\cdot D \\cdot k \\ge n$$$)\u00a0\u2014 the number of candies, the number of people, the maximum number of candies given to a person at once, the maximum number of times a person can receive candies.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"ac2e795cd44061db8da13e3947ba791b","prob_desc_created_at":"1524677700","source_code":"#include<stdio.h>\n\nint main(){\n  int D;\n  long long n, k, M, ans = 0;\n  scanf(\"%lld%lld%lld%d\", &n, &k, &M, &D);\n  for(int i = 0; i < D; i++){\n    long long cur = n \/ (k * i + 1);\n    if(!cur) break;\n    if(cur > M) cur = M;\n    long long lmax = cur * (i + 1);\n    ans = ans > lmax ? ans : lmax;\n  }\n  printf(\"%lld\", ans);\n  return 0;\n}\n","prob_desc_sample_outputs":"[\"8\", \"4\"]","lang_cluster":"C","code_uid":"5b55c8b77e426588a8ec1d5fbbf71381","prob_desc_notes":"NoteIn the first example Arkady should choose $$$x = 4$$$. He will give $$$4$$$ candies to himself, $$$4$$$ candies to the second person, $$$4$$$ candies to the third person, then $$$4$$$ candies to the fourth person and then again $$$4$$$ candies to himself. No person is given candies more than $$$2$$$ times, and Arkady receives $$$8$$$ candies in total.Note that if Arkady chooses $$$x = 5$$$, he will receive only $$$5$$$ candies, and if he chooses $$$x = 3$$$, he will receive only $$$3 + 3 = 6$$$ candies as well as the second person, the third and the fourth persons will receive $$$3$$$ candies, and $$$2$$$ candies will be thrown away. He can't choose $$$x = 1$$$ nor $$$x = 2$$$ because in these cases he will receive candies more than $$$2$$$ times.In the second example Arkady has to choose $$$x = 4$$$, because any smaller value leads to him receiving candies more than $$$1$$$ time.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the maximum possible number of candies Arkady can give to himself. Note that it is always possible to choose some valid $$$x$$$.","prob_desc_output_to":"standard output","prob_desc_description":"$$$k$$$ people want to split $$$n$$$ candies between them. Each candy should be given to exactly one of them or be thrown away.The people are numbered from $$$1$$$ to $$$k$$$, and Arkady is the first of them. To split the candies, Arkady will choose an integer $$$x$$$ and then give the first $$$x$$$ candies to himself, the next $$$x$$$ candies to the second person, the next $$$x$$$ candies to the third person and so on in a cycle. The leftover (the remainder that is not divisible by $$$x$$$) will be thrown away.Arkady can't choose $$$x$$$ greater than $$$M$$$ as it is considered greedy. Also, he can't choose such a small $$$x$$$ that some person will receive candies more than $$$D$$$ times, as it is considered a slow splitting.Please find what is the maximum number of candies Arkady can receive by choosing some valid $$$x$$$.","hidden_unit_tests":"[{\"input\": \"20 4 5 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"30 9 4 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 2 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"42 20 5 29\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"1000000000000000000 135 1000000000000000 1000\\r\\n\", \"output\": [\"8325624421831635\"]}, {\"input\": \"100 33 100 100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"1000000000 1000000000 1000000000 1000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"1000000000 32428 1000000000 1000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"1000000000 324934 1000 1000\\r\\n\", \"output\": [\"4000\"]}, {\"input\": \"1000000000000000000 32400093004 10000000 1000\\r\\n\", \"output\": [\"40000000\"]}, {\"input\": \"885 2 160 842\\r\\n\", \"output\": [\"504\"]}, {\"input\": \"216 137 202 208\\r\\n\", \"output\": [\"202\"]}, {\"input\": \"72 66 28 9\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"294 4 13 8\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"9 2 2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"31 3 2 8\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"104 2 5 11\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1000000000000000000 1000000000000000000 1000 1000\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"1000000000000000000 100000000000000000 1 1000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"23925738098196565 23925738098196565 23925738098196565 1000\\r\\n\", \"output\": [\"23925738098196565\"]}, {\"input\": \"576460752303423488 576460752303423488 351082447248993993 1000\\r\\n\", \"output\": [\"351082447248993993\"]}, {\"input\": \"962768465676381898 72057594037927936 586039918340257175 256\\r\\n\", \"output\": [\"586039918340257175\"]}, {\"input\": \"1000000000000000000 1000000000000000000 10 1000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"23925738098196565 23925738098196565 1 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000000000 1000000000000000000 1 1000\\r\\n\", \"output\": [\"1\"]}]","length":16,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\", \"2\", \"3\", \"4\"]","prob_desc_input_spec":"The only line of the input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009109)\u00a0\u2014 number of stones Artem received on his birthday.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"a993069e35b35ae158d35d6fe166aaef","prob_desc_created_at":"1461515700","source_code":"#include <stdio.h>\n\nint main () {\n  int n;\n  scanf(\"%d\", &n);\n  printf(\"%d\\n\", 2*(n\/3) + (n%3 != 0));\n  return 0;\n}","prob_desc_sample_outputs":"[\"1\", \"1\", \"2\", \"3\"]","lang_cluster":"C","code_uid":"fb76560292d599efab4139172ca4faff","prob_desc_notes":"NoteIn the first sample, Artem can only give 1 stone to Masha.In the second sample, Atrem can give Masha 1 or 2 stones, though he can't give her 1 stone two times.In the third sample, Atrem can first give Masha 2 stones, a then 1 more stone.In the fourth sample, Atrem can first give Masha 1 stone, then 2 stones, and finally 1 stone again.","prob_desc_output_spec":"Print the maximum possible number of times Artem can give presents to Masha.","prob_desc_output_to":"standard output","prob_desc_description":"Little Artem got n stones on his birthday and now wants to give some of them to Masha. He knows that Masha cares more about the fact of receiving the present, rather than the value of that present, so he wants to give her stones as many times as possible. However, Masha remembers the last present she received, so Artem can't give her the same number of stones twice in a row. For example, he can give her 3 stones, then 1 stone, then again 3 stones, but he can't give her 3 stones and then again 3 stones right after that.How many times can Artem give presents to Masha?","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"102\\r\\n\", \"output\": [\"68\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"666666667\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"666666666\"]}, {\"input\": \"999999998\\r\\n\", \"output\": [\"666666665\"]}, {\"input\": \"999999997\\r\\n\", \"output\": [\"666666665\"]}, {\"input\": \"999999996\\r\\n\", \"output\": [\"666666664\"]}, {\"input\": \"999999995\\r\\n\", \"output\": [\"666666663\"]}, {\"input\": \"999999994\\r\\n\", \"output\": [\"666666663\"]}, {\"input\": \"999999993\\r\\n\", \"output\": [\"666666662\"]}, {\"input\": \"999999992\\r\\n\", \"output\": [\"666666661\"]}, {\"input\": \"999999991\\r\\n\", \"output\": [\"666666661\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"667\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"6667\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"66667\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"666667\"]}, {\"input\": \"10000000\\r\\n\", \"output\": [\"6666667\"]}, {\"input\": \"100000000\\r\\n\", \"output\": [\"66666667\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"5\"]}]","length":8,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 30\\n2 2 1\", \"3 20\\n2 1 1\"]","prob_desc_input_spec":"The first line contains two space separated integers n, d (1\u2009\u2264\u2009n\u2009\u2264\u2009100;\u00a01\u2009\u2264\u2009d\u2009\u2264\u200910000). The second line contains n space-separated integers: t1,\u2009t2,\u2009...,\u2009tn (1\u2009\u2264\u2009ti\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"b16f5f5c4eeed2a3700506003e8ea8ea","prob_desc_created_at":"1401895800","source_code":"#include<stdio.h>\nint main()\n{\n    int n,t,i,sum=0;\n    scanf(\"%d %d\",&n,&t);\n    int arr[n];\n\n\n    for(i=0;i<n;i++){\n            scanf(\"%d\",&arr[i]);\n            sum+=arr[i];\n    }\n    if(t-sum>=10*(n-1)) printf(\"%d\",(t-sum)\/5);\n    else printf(\"-1\");\n\n}\n","prob_desc_sample_outputs":"[\"5\", \"-1\"]","lang_cluster":"C","code_uid":"8ff97f61f6be01fc02c7863a0d47f6a5","prob_desc_notes":"NoteConsider the first example. The duration of the event is 30 minutes. There could be maximum 5 jokes in the following way:  First Churu cracks a joke in 5 minutes.  Then Devu performs the first song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now Devu performs second song for 2 minutes.  Then Churu cracks 2 jokes in 10 minutes.  Now finally Devu will perform his last song in 1 minutes.  Total time spent is 5\u2009+\u20092\u2009+\u200910\u2009+\u20092\u2009+\u200910\u2009+\u20091\u2009=\u200930 minutes.Consider the second example. There is no way of organizing Devu's all songs. Hence the answer is -1. ","prob_desc_output_spec":"If there is no way to conduct all the songs of Devu, output -1. Otherwise output the maximum number of jokes that Churu can crack in the grand event.","prob_desc_output_to":"standard output","prob_desc_description":"Devu is a renowned classical singer. He is invited to many big functions\/festivals. Recently he was invited to \"All World Classical Singing Festival\". Other than Devu, comedian Churu was also invited.Devu has provided organizers a list of the songs and required time for singing them. He will sing n songs, ith song will take ti minutes exactly. The Comedian, Churu will crack jokes. All his jokes are of 5 minutes exactly.People have mainly come to listen Devu. But you know that he needs rest of 10 minutes after each song. On the other hand, Churu being a very active person, doesn't need any rest.You as one of the organizers should make an optimal s\u0441hedule for the event. For some reasons you must follow the conditions:  The duration of the event must be no more than d minutes;  Devu must complete all his songs;  With satisfying the two previous conditions the number of jokes cracked by Churu should be as many as possible. If it is not possible to find a way to conduct all the songs of the Devu, output -1. Otherwise find out maximum number of jokes that Churu can crack in the grand event.","hidden_unit_tests":"[{\"input\": \"3 30\\r\\n2 2 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3 20\\r\\n2 1 1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"50 10000\\r\\n5 4 10 9 9 6 7 7 7 3 3 7 7 4 7 4 10 10 1 7 10 3 1 4 5 7 2 10 10 10 2 3 4 7 6 1 8 4 7 3 8 8 4 10 1 1 9 2 6 1\\r\\n\", \"output\": [\"1943\"]}, {\"input\": \"50 10000\\r\\n4 7 15 9 11 12 20 9 14 14 10 13 6 13 14 17 6 8 20 12 10 15 13 17 5 12 13 11 7 5 5 2 3 15 13 7 14 14 19 2 13 14 5 15 3 19 15 16 4 1\\r\\n\", \"output\": [\"1891\"]}, {\"input\": \"100 9000\\r\\n5 2 3 1 1 3 4 9 9 6 7 10 10 10 2 10 6 8 8 6 7 9 9 5 6 2 1 10 10 9 4 5 9 2 4 3 8 5 6 1 1 5 3 6 2 6 6 6 5 8 3 6 7 3 1 10 9 1 8 3 10 9 5 6 3 4 1 1 10 10 2 3 4 8 10 10 5 1 5 3 6 8 10 6 10 2 1 8 10 1 7 6 9 10 5 2 3 5 3 2\\r\\n\", \"output\": [\"1688\"]}, {\"input\": \"100 8007\\r\\n5 19 14 18 9 6 15 8 1 14 11 20 3 17 7 12 2 6 3 17 7 20 1 14 20 17 2 10 13 7 18 18 9 10 16 8 1 11 11 9 13 18 9 20 12 12 7 15 12 17 11 5 11 15 9 2 15 1 18 3 18 16 15 4 10 5 18 13 13 12 3 8 17 2 12 2 13 3 1 13 2 4 9 10 18 10 14 4 4 17 12 19 2 9 6 5 5 20 18 12\\r\\n\", \"output\": [\"1391\"]}, {\"input\": \"39 2412\\r\\n1 1 1 1 1 1 26 1 1 1 99 1 1 1 1 1 1 1 1 1 1 88 7 1 1 1 1 76 1 1 1 93 40 1 13 1 68 1 32\\r\\n\", \"output\": [\"368\"]}, {\"input\": \"39 2617\\r\\n47 1 1 1 63 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 70 1 99 63 1 1 1 1 1 1 1 1 64 1 1\\r\\n\", \"output\": [\"435\"]}, {\"input\": \"39 3681\\r\\n83 77 1 94 85 47 1 98 29 16 1 1 1 71 96 85 31 97 96 93 40 50 98 1 60 51 1 96 100 72 1 1 1 89 1 93 1 92 100\\r\\n\", \"output\": [\"326\"]}, {\"input\": \"45 894\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 28 28 1 1 1 1 1 1 1 1 1 1 1 1 1 1 99 3 1 1\\r\\n\", \"output\": [\"139\"]}, {\"input\": \"45 4534\\r\\n1 99 65 99 4 46 54 80 51 30 96 1 28 30 44 70 78 1 1 100 1 62 1 1 1 85 1 1 1 61 1 46 75 1 61 77 97 26 67 1 1 63 81 85 86\\r\\n\", \"output\": [\"514\"]}, {\"input\": \"72 3538\\r\\n52 1 8 1 1 1 7 1 1 1 1 48 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 40 1 1 38 1 1 1 1 1 1 1 1 1 1 1 35 1 93 79 1 1 1 1 1 1 1 1 1 51 1 1 1 1 1 1 1 1 1 1 1 1 96 1\\r\\n\", \"output\": [\"586\"]}, {\"input\": \"81 2200\\r\\n1 59 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 93 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 50 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"384\"]}, {\"input\": \"81 2577\\r\\n85 91 1 1 2 1 1 100 1 80 1 1 17 86 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 37 1 66 24 1 1 96 49 1 66 1 44 1 1 1 1 98 1 1 1 1 35 1 37 3 35 1 1 87 64 1 24 1 58 1 1 42 83 5 1 1 1 1 1 95 1 94 1 50 1 1\\r\\n\", \"output\": [\"174\"]}, {\"input\": \"81 4131\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"807\"]}, {\"input\": \"81 6315\\r\\n1 1 67 100 1 99 36 1 92 5 1 96 42 12 1 57 91 1 1 66 41 30 74 95 1 37 1 39 91 69 1 52 77 47 65 1 1 93 96 74 90 35 85 76 71 92 92 1 1 67 92 74 1 1 86 76 35 1 56 16 27 57 37 95 1 40 20 100 51 1 80 60 45 79 95 1 46 1 25 100 96\\r\\n\", \"output\": [\"490\"]}, {\"input\": \"96 1688\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 45 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 25 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 71 1 1 1 30 1 1 1\\r\\n\", \"output\": [\"284\"]}, {\"input\": \"96 8889\\r\\n1 1 18 1 1 1 1 1 1 1 1 1 99 1 1 1 1 88 1 45 1 1 1 1 1 1 1 1 1 1 1 1 1 1 96 1 1 1 1 21 1 1 1 1 1 1 1 73 1 1 1 1 1 10 1 1 1 1 1 1 1 46 43 1 1 1 1 1 98 1 1 1 1 1 1 6 1 1 1 1 1 74 1 25 1 55 1 1 1 13 1 1 54 1 1 1\\r\\n\", \"output\": [\"1589\"]}, {\"input\": \"10 100\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"100 10000\\r\\n54 46 72 94 79 83 91 54 73 3 24 55 54 31 28 20 19 6 25 19 47 23 1 70 15 87 51 39 54 77 55 5 60 3 15 99 56 88 22 78 79 21 38 27 28 86 7 88 12 59 55 70 25 1 70 49 1 45 69 72 50 17 4 56 8 100 90 34 35 20 61 76 88 79 4 74 65 68 75 26 40 72 59 94 10 67 96 85 29 90 47 24 44 1 66 93 55 36 1 99\\r\\n\", \"output\": [\"1017\"]}, {\"input\": \"100 6000\\r\\n41 31 23 17 24 78 26 96 93 48 46 2 49 33 35 9 73 100 34 48 83 36 33 69 43 24 3 74 8 81 27 33 94 38 77 9 76 90 62 90 21 67 22 22 12 2 17 27 61 18 72 85 59 65 71 38 90 75 74 66 60 47 58 50 90 95 75 10 5 100 97 29 83 88 65 26 93 90 22 98 36 55 70 38 50 92 88 72 99 96 25 14 74 16 25 92 67 94 77 96\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 1\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 6\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 5\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 3\\r\\n4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"3 24\\r\\n2 1 2\\r\\n\", \"output\": [\"-1\"]}]","length":16,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\\n10 5 0 -5 -10\", \"4\\n1 1 1 1\", \"3\\n5 1 -5\", \"2\\n900 1000\"]","prob_desc_input_spec":"The first line contains a single integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of days for which the average air temperature is known. The second line contains a sequence of integers t1,\u2009t2,\u2009...,\u2009tn (\u2009-\u20091000\u2009\u2264\u2009ti\u2009\u2264\u20091000)\u00a0\u2014 where ti is the average temperature in the i-th day.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"d04fa4322a1b300bdf4a56f09681b17f","prob_desc_created_at":"1505739900","source_code":"#include<stdio.h>\nint main()\n{\n    int a,b,c=0,i,j,n,s,t;\n\n    scanf(\"%d\",&n);\n    for(i=0,s=0;i<n;i++){\n        scanf(\"%d\",&a);\n        if(i>0){\n            t=a-b;\n            if(i>1&&s!=2){\n                if(t==c){\n                    s=1;\n\n                }\n                else\n                    s=2;\n            }\n            c=t;\n        }\n        b=a;\n    }\n    if(s==1||s==0)\n        printf(\"%d\\n\",(a+c));\n    else\n        printf(\"%d\\n\",a);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"-15\", \"1\", \"-5\", \"1100\"]","lang_cluster":"C","code_uid":"969c045e4841c36f5699cca02be358e9","prob_desc_notes":"NoteIn the first example the sequence of the average temperatures is an arithmetic progression where the first term is 10 and each following terms decreases by 5. So the predicted average temperature for the sixth day is \u2009-\u200910\u2009-\u20095\u2009=\u2009\u2009-\u200915.In the second example the sequence of the average temperatures is an arithmetic progression where the first term is 1 and each following terms equals to the previous one. So the predicted average temperature in the fifth day is 1.In the third example the average temperatures do not form an arithmetic progression, so the average temperature of the fourth day equals to the temperature of the third day and equals to \u2009-\u20095.In the fourth example the sequence of the average temperatures is an arithmetic progression where the first term is 900 and each the following terms increase by 100. So predicted average temperature in the third day is 1000\u2009+\u2009100\u2009=\u20091100.","prob_desc_output_spec":"Print the average air temperature in the (n\u2009+\u20091)-th day, which Vasya predicts according to his method. Note that the absolute value of the predicted temperature can exceed 1000.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya came up with his own weather forecasting method. He knows the information about the average air temperature for each of the last n days. Assume that the average air temperature for each day is integral.Vasya believes that if the average temperatures over the last n days form an arithmetic progression, where the first term equals to the average temperature on the first day, the second term equals to the average temperature on the second day and so on, then the average temperature of the next (n\u2009+\u20091)-th day will be equal to the next term of the arithmetic progression. Otherwise, according to Vasya's method, the temperature of the (n\u2009+\u20091)-th day will be equal to the temperature of the n-th day.Your task is to help Vasya predict the average temperature for tomorrow, i. e. for the (n\u2009+\u20091)-th day.","hidden_unit_tests":"[{\"input\": \"5\\r\\n10 5 0 -5 -10\\r\\n\", \"output\": [\"-15\"]}, {\"input\": \"4\\r\\n1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n5 1 -5\\r\\n\", \"output\": [\"-5\"]}, {\"input\": \"2\\r\\n900 1000\\r\\n\", \"output\": [\"1100\"]}, {\"input\": \"2\\r\\n1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n2 5 8\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"4\\r\\n4 1 -2 -5\\r\\n\", \"output\": [\"-8\"]}, {\"input\": \"10\\r\\n-1000 -995 -990 -985 -980 -975 -970 -965 -960 -955\\r\\n\", \"output\": [\"-950\"]}, {\"input\": \"11\\r\\n-1000 -800 -600 -400 -200 0 200 400 600 800 1000\\r\\n\", \"output\": [\"1200\"]}, {\"input\": \"31\\r\\n1000 978 956 934 912 890 868 846 824 802 780 758 736 714 692 670 648 626 604 582 560 538 516 494 472 450 428 406 384 362 340\\r\\n\", \"output\": [\"318\"]}, {\"input\": \"5\\r\\n1000 544 88 -368 -824\\r\\n\", \"output\": [\"-1280\"]}, {\"input\": \"100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"33\\r\\n456 411 366 321 276 231 186 141 96 51 6 -39 -84 -129 -174 -219 -264 -309 -354 -399 -444 -489 -534 -579 -624 -669 -714 -759 -804 -849 -894 -939 -984\\r\\n\", \"output\": [\"-1029\"]}, {\"input\": \"77\\r\\n-765 -742 -719 -696 -673 -650 -627 -604 -581 -558 -535 -512 -489 -466 -443 -420 -397 -374 -351 -328 -305 -282 -259 -236 -213 -190 -167 -144 -121 -98 -75 -52 -29 -6 17 40 63 86 109 132 155 178 201 224 247 270 293 316 339 362 385 408 431 454 477 500 523 546 569 592 615 638 661 684 707 730 753 776 799 822 845 868 891 914 937 960 983\\r\\n\", \"output\": [\"1006\"]}, {\"input\": \"3\\r\\n2 4 8\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"4\\r\\n4 1 -3 -5\\r\\n\", \"output\": [\"-5\"]}, {\"input\": \"10\\r\\n-1000 -995 -990 -984 -980 -975 -970 -965 -960 -955\\r\\n\", \"output\": [\"-955\"]}, {\"input\": \"11\\r\\n-999 -800 -600 -400 -200 0 200 400 600 800 1000\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"51\\r\\n-9 10 30 50 70 90 110 130 150 170 190 210 230 250 270 290 310 330 350 370 390 410 430 450 470 490 510 530 550 570 590 610 630 650 670 690 710 730 750 770 790 810 830 850 870 890 910 930 950 970 990\\r\\n\", \"output\": [\"990\"]}, {\"input\": \"100\\r\\n10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 207\\r\\n\", \"output\": [\"207\"]}, {\"input\": \"2\\r\\n1000 1000\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"2\\r\\n-1000 1000\\r\\n\", \"output\": [\"3000\"]}, {\"input\": \"2\\r\\n1000 -1000\\r\\n\", \"output\": [\"-3000\"]}, {\"input\": \"2\\r\\n-1000 -1000\\r\\n\", \"output\": [\"-1000\"]}, {\"input\": \"100\\r\\n-85 -80 -76 -72 -68 -64 -60 -56 -52 -48 -44 -40 -36 -32 -28 -24 -20 -16 -12 -8 -4 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284 288 292 296 300 304 308 312\\r\\n\", \"output\": [\"312\"]}, {\"input\": \"4\\r\\n1 2 4 5\\r\\n\", \"output\": [\"5\"]}]","length":28,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\", \"5 1 1 1 1 0 0 0 0 0 0 0 0 0\"]","prob_desc_input_spec":"The only line contains 14 integers $$$a_1, a_2, \\ldots, a_{14}$$$ ($$$0 \\leq a_i \\leq 10^9$$$)\u00a0\u2014 the number of stones in each hole. It is guaranteed that for any $$$i$$$ ($$$1\\leq i \\leq 14$$$) $$$a_i$$$ is either zero or odd, and there is at least one stone in the board.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"1ac11153e35509e755ea15f1d57d156b","prob_desc_created_at":"1525183500","source_code":"#include <stdio.h>\n\nint main()\n{\n\tlong long init[14], copy[14];\n\tlong long MAX = 0;\n\t\n\tint i;\n\tfor (i = 0; i < 14; i++) {\n\t\tscanf(\"%lli\", &init[i]);\n\t}\n\tfor (i = 0; i < 14; i++) {\n\t\tif (init[i] != 0) {\n\t\t\tint j;\n\t\t\tlong long score = 0;\n\t\t\t\n\t\t\tfor (j = 0; j < 14; j++) {\n\t\t\t\tcopy[j] = init[j];\n\t\t\t}\n            copy[i] = 0;\n\t\t\tfor (j = 0; j < 14; j++) {\n\t\t\t\tcopy[j] += init[i]\/14;\n\t\t\t}\n            int extr = init[i]%14;\n            for (j = 1; j <= extr; j++) {\n                copy[(i+j)%14]++;\n            }\n\t\t\tfor(j = 0; j < 14; j++){\n\t\t\t\tif (copy[j]%2 == 0) score += copy[j];\n\t\t\t}\n\t\t\tif (MAX < score) MAX = score;\n\t\t}\n\t}\n\tprintf(\"%lli\", MAX);\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"4\", \"8\"]","lang_cluster":"C","code_uid":"94c2688e8213a043b1cb27c5da30b862","prob_desc_notes":"NoteIn the first test case the board after the move from the hole with $$$7$$$ stones will look like 1 2 2 0 0 0 0 0 0 0 1 1 1 1. Then the player collects the even numbers and ends up with a score equal to $$$4$$$.","prob_desc_output_spec":"Output one integer, the maximum possible score after one move.","prob_desc_output_to":"standard output","prob_desc_description":"Mancala is a game famous in the Middle East. It is played on a board that consists of 14 holes.   Initially, each hole has $$$a_i$$$ stones. When a player makes a move, he chooses a hole which contains a positive number of stones. He takes all the stones inside it and then redistributes these stones one by one in the next holes in a counter-clockwise direction.Note that the counter-clockwise order means if the player takes the stones from hole $$$i$$$, he will put one stone in the $$$(i+1)$$$-th hole, then in the $$$(i+2)$$$-th, etc. If he puts a stone in the $$$14$$$-th hole, the next one will be put in the first hole.After the move, the player collects all the stones from holes that contain even number of stones. The number of stones collected by player is the score, according to Resli.Resli is a famous Mancala player. He wants to know the maximum score he can obtain after one move.","hidden_unit_tests":"[{\"input\": \"0 1 1 0 0 0 0 0 0 7 0 0 0 0\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"5 1 1 1 1 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 10001 1\\r\\n\", \"output\": [\"54294\"]}, {\"input\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 15\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 0 0 0 0 1 0 0 0 0 1 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 5 1 1 1 3 3 3 5 7 5 3 7 5\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"787 393 649 463 803 365 81 961 989 531 303 407 579 915\\r\\n\", \"output\": [\"7588\"]}, {\"input\": \"8789651 4466447 1218733 6728667 1796977 6198853 8263135 6309291 8242907 7136751 3071237 5397369 6780785 9420869\\r\\n\", \"output\": [\"81063456\"]}, {\"input\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 29\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"282019717 109496191 150951267 609856495 953855615 569750143 6317733 255875779 645191029 572053369 290936613 338480779 879775193 177172893\\r\\n\", \"output\": [\"5841732816\"]}, {\"input\": \"105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505 105413505\\r\\n\", \"output\": [\"120472578\"]}, {\"input\": \"404418821 993626161 346204297 122439813 461187221 628048227 625919459 628611733 938993057 701270099 398043779 684205961 630975553 575964835\\r\\n\", \"output\": [\"8139909016\"]}, {\"input\": \"170651077 730658441 824213789 583764177 129437345 717005779 675398017 314979709 380861369 265878463 746564659 797260041 506575735 335169317\\r\\n\", \"output\": [\"6770880638\"]}, {\"input\": \"622585025 48249287 678950449 891575125 637411965 457739735 829353393 235216425 284006447 875591469 492839209 296444305 513776057 810057753\\r\\n\", \"output\": [\"7673796644\"]}, {\"input\": \"475989857 930834747 786217439 927967137 489188151 869354161 276693267 56154399 131055697 509249443 143116853 426254423 44465165 105798821\\r\\n\", \"output\": [\"6172339560\"]}, {\"input\": \"360122921 409370351 226220005 604004145 85173909 600403773 624052991 138163383 729239967 189036661 619842883 270087537 749500483 243727913\\r\\n\", \"output\": [\"5848946922\"]}, {\"input\": \"997102881 755715147 273805839 436713689 547411799 72470207 522269145 647688957 137422311 422612659 197751751 679663349 821420227 387967237\\r\\n\", \"output\": [\"6900015198\"]}, {\"input\": \"690518849 754551537 652949719 760695679 491633619 477564457 11669279 700467439 470069297 782338983 718169393 884421719 24619427 215745577\\r\\n\", \"output\": [\"7635414974\"]}, {\"input\": \"248332749 486342237 662201929 917696895 555278549 252122023 850296207 463343655 832574345 954281071 168282553 825538865 996753493 461254663\\r\\n\", \"output\": [\"6400166934\"]}, {\"input\": \"590789361 636464947 404477303 337309187 476703809 426863069 120608741 703406277 645444697 761482231 996635839 33459441 677458865 483861751\\r\\n\", \"output\": [\"7294965518\"]}, {\"input\": \"297857621 238127103 749085829 139033277 597985489 202617713 982184715 183932743 278551059 297781685 330124279 338959601 682874531 187519685\\r\\n\", \"output\": [\"5201808164\"]}, {\"input\": \"1 1 1 1 1 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 1 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 0 0 0 0 0 0 0 0 0 0 0 0 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 0 0 0 0 0 0 0 0 0 0 0 1 1\\r\\n\", \"output\": [\"2\"]}]","length":36,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 2\", \"1 2\"]","prob_desc_input_spec":"The first line contains two integers w and h (1\u2009\u2264\u2009w,\u2009h\u2009\u2264\u20094000) \u2014 the rectangle's sizes.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"42454dcf7d073bf12030367eb094eb8c","prob_desc_created_at":"1336663800","source_code":"#include<stdio.h>\nint main()\n{\n\tlong long int c=0,w,h,n,m;\n\tscanf(\"%lld %lld\",&w,&h);\n\tif(w<2 || h<2)\n\t{\n\t\tprintf(\"0\\n\");\n\t\treturn 0;\n\t}\n\tfor(n=2;w>=n;n=n+2)\n\t{\n\t\tfor(m=2;h>=m;m=m+2)\n\t\t\tc=c+(h-(m-1))*(w-(n-1));\n\t}\n\tprintf(\"%lld\\n\",c);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"1\", \"0\"]","lang_cluster":"C","code_uid":"ff77a7d647936d5f41da8fe93f71e948","prob_desc_notes":"NoteIn the first example there exists only one such rhombus. Its vertices are located at points (1,\u20090), (2,\u20091), (1,\u20092), (0,\u20091).","prob_desc_output_spec":"Print a single number \u2014 the number of sought rhombi. Please do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.","prob_desc_output_to":"standard output","prob_desc_description":"You have two positive integers w and h. Your task is to count the number of rhombi which have the following properties:   Have positive area.  With vertices at integer points.  All vertices of the rhombi are located inside or on the border of the rectangle with vertices at points (0,\u20090), (w,\u20090), (w,\u2009h), (0,\u2009h). In other words, for all vertices (xi,\u2009yi) of the rhombus the following conditions should fulfill: 0\u2009\u2264\u2009xi\u2009\u2264\u2009w and 0\u2009\u2264\u2009yi\u2009\u2264\u2009h.  Its diagonals are parallel to the axis.  Count the number of such rhombi.Let us remind you that a rhombus is a quadrilateral whose four sides all have the same length.","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 4000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4000 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4000 4000\\r\\n\", \"output\": [\"16000000000000\"]}, {\"input\": \"15 10\\r\\n\", \"output\": [\"1400\"]}, {\"input\": \"7 9\\r\\n\", \"output\": [\"240\"]}, {\"input\": \"17 17\\r\\n\", \"output\": [\"5184\"]}, {\"input\": \"7 13\\r\\n\", \"output\": [\"504\"]}, {\"input\": \"9 14\\r\\n\", \"output\": [\"980\"]}, {\"input\": \"3 10\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"14 2\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"4 6\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"18 2858\\r\\n\", \"output\": [\"165405321\"]}, {\"input\": \"14 1274\\r\\n\", \"output\": [\"19882681\"]}, {\"input\": \"25 2986\\r\\n\", \"output\": [\"347731644\"]}, {\"input\": \"13 1402\\r\\n\", \"output\": [\"20638842\"]}, {\"input\": \"2955 21\\r\\n\", \"output\": [\"240130660\"]}, {\"input\": \"1665 27\\r\\n\", \"output\": [\"126136192\"]}, {\"input\": \"3671 19\\r\\n\", \"output\": [\"303215400\"]}, {\"input\": \"2541 25\\r\\n\", \"output\": [\"251810520\"]}, {\"input\": \"1913 3980\\r\\n\", \"output\": [\"3623063809200\"]}, {\"input\": \"3727 2044\\r\\n\", \"output\": [\"3627108561888\"]}, {\"input\": \"2437 460\\r\\n\", \"output\": [\"78542851800\"]}, {\"input\": \"1499 2172\\r\\n\", \"output\": [\"662525703000\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"0\"]}]","length":18,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1 1 1 1 1 1\", \"1 2 1 2 1 2\"]","prob_desc_input_spec":"The first and the single line of the input contains 6 space-separated integers a1,\u2009a2,\u2009a3,\u2009a4,\u2009a5 and a6 (1\u2009\u2264\u2009ai\u2009\u2264\u20091000) \u2014 the lengths of the sides of the hexagons in centimeters in the clockwise order. It is guaranteed that the hexagon with the indicated properties and the exactly such sides exists.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"382475475427f0e76c6b4ac6e7a02e21","prob_desc_created_at":"1437573600","source_code":"#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int a, b, c, d, e, f;\n    int res=0;\n    scanf(\"%d %d %d %d %d %d\", &a,&b,&c,&d,&e,&f);\n    res=(a+b+c)*(a+b+c)-a*a-c*c-e*e;\n    printf(\"%d\", res);\n    return 0;\n}","prob_desc_sample_outputs":"[\"6\", \"13\"]","lang_cluster":"C","code_uid":"46698cab6f1dc94409e29bb9f9df6dce","prob_desc_notes":"NoteThis is what Gerald's hexagon looks like in the first sample:And that's what it looks like in the second sample:","prob_desc_output_spec":"Print a single integer \u2014 the number of triangles with the sides of one 1 centimeter, into which the hexagon is split.","prob_desc_output_to":"standard output","prob_desc_description":"Gerald got a very curious hexagon for his birthday. The boy found out that all the angles of the hexagon are equal to . Then he measured the length of its sides, and found that each of them is equal to an integer number of centimeters. There the properties of the hexagon ended and Gerald decided to draw on it.He painted a few lines, parallel to the sides of the hexagon. The lines split the hexagon into regular triangles with sides of 1 centimeter. Now Gerald wonders how many triangles he has got. But there were so many of them that Gerald lost the track of his counting. Help the boy count the triangles.","hidden_unit_tests":"[{\"input\": \"1 1 1 1 1 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 2 1 2 1 2\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"2 4 5 3 3 6\\r\\n\", \"output\": [\"83\"]}, {\"input\": \"45 19 48 18 46 21\\r\\n\", \"output\": [\"6099\"]}, {\"input\": \"66 6 65 6 66 5\\r\\n\", \"output\": [\"5832\"]}, {\"input\": \"7 5 4 8 4 5\\r\\n\", \"output\": [\"175\"]}, {\"input\": \"3 2 1 4 1 2\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"7 1 7 3 5 3\\r\\n\", \"output\": [\"102\"]}, {\"input\": \"9 2 9 3 8 3\\r\\n\", \"output\": [\"174\"]}, {\"input\": \"1 6 1 5 2 5\\r\\n\", \"output\": [\"58\"]}, {\"input\": \"41 64 48 61 44 68\\r\\n\", \"output\": [\"17488\"]}, {\"input\": \"1 59 2 59 1 60\\r\\n\", \"output\": [\"3838\"]}, {\"input\": \"30 36 36 32 34 38\\r\\n\", \"output\": [\"7052\"]}, {\"input\": \"50 40 46 38 52 34\\r\\n\", \"output\": [\"11176\"]}, {\"input\": \"4 60 4 60 4 60\\r\\n\", \"output\": [\"4576\"]}, {\"input\": \"718 466 729 470 714 481\\r\\n\", \"output\": [\"2102808\"]}, {\"input\": \"131 425 143 461 95 473\\r\\n\", \"output\": [\"441966\"]}, {\"input\": \"125 7 128 8 124 11\\r\\n\", \"output\": [\"20215\"]}, {\"input\": \"677 303 685 288 692 296\\r\\n\", \"output\": [\"1365807\"]}, {\"input\": \"1 577 7 576 2 582\\r\\n\", \"output\": [\"342171\"]}, {\"input\": \"1000 1000 1000 1000 1000 1000\\r\\n\", \"output\": [\"6000000\"]}, {\"input\": \"1 1 1000 1 1 1000\\r\\n\", \"output\": [\"4002\"]}, {\"input\": \"1000 1000 1 1000 1000 1\\r\\n\", \"output\": [\"2004000\"]}, {\"input\": \"1000 1 1000 999 2 999\\r\\n\", \"output\": [\"2003997\"]}, {\"input\": \"1 1000 1 1 1000 1\\r\\n\", \"output\": [\"4002\"]}, {\"input\": \"888 888 888 887 889 887\\r\\n\", \"output\": [\"4729487\"]}]","length":12,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2\", \"3\"]","prob_desc_input_spec":"The input contains a single number n (2\u2009\u2264\u2009n\u2009\u2264\u2009109) \u2014 the size of the board.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"52e07d176aa1d370788f94ee2e61df93","prob_desc_created_at":"1417618800","source_code":"n;\nint main()\n{\n    while(~scanf(\"%d\",&n))\n    {\n        puts((n&1)?\"black\":\"white\\n1 2\");\n    }\n    return 0;\n}\n\n                                                                                              ","prob_desc_sample_outputs":"[\"white\\n1 2\", \"black\"]","lang_cluster":"C","code_uid":"bdd028cc4d9ddcafc72212c3440cf602","prob_desc_notes":"NoteIn the first sample test the white queen can capture the black queen at the first move, so the white player wins.In the second test from the statement if the white queen captures the green pawn located on the central vertical line, then it will be captured by the black queen during the next move. So the only move for the white player is to capture the green pawn located at (2,\u20091). Similarly, the black queen doesn't have any other options but to capture the green pawn located at (2,\u20093), otherwise if it goes to the middle vertical line, it will be captured by the white queen.During the next move the same thing happens \u2014 neither the white, nor the black queen has other options rather than to capture green pawns situated above them. Thus, the white queen ends up on square (3,\u20091), and the black queen ends up on square (3,\u20093). In this situation the white queen has to capture any of the green pawns located on the middle vertical line, after that it will be captured by the black queen. Thus, the player who plays for the black queen wins.","prob_desc_output_spec":"On the first line print the answer to problem \u2014 string \"white\" or string \"black\", depending on who wins if the both players play optimally.  If the answer is \"white\", then you should also print two integers r and c representing the cell (r,\u2009c), where the first player should make his first move to win. If there are multiple such cells, print the one with the minimum r. If there are still multiple squares, print the one with the minimum c.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya decided to learn to play chess. Classic chess doesn't seem interesting to him, so he plays his own sort of chess.The queen is the piece that captures all squares on its vertical, horizontal and diagonal lines. If the cell is located on the same vertical, horizontal or diagonal line with queen, and the cell contains a piece of the enemy color, the queen is able to move to this square. After that the enemy's piece is removed from the board. The queen cannot move to a cell containing an enemy piece if there is some other piece between it and the queen. There is an n\u2009\u00d7\u2009n chessboard. We'll denote a cell on the intersection of the r-th row and c-th column as (r,\u2009c). The square (1,\u20091) contains the white queen and the square (1,\u2009n) contains the black queen. All other squares contain green pawns that don't belong to anyone.The players move in turns. The player that moves first plays for the white queen, his opponent plays for the black queen.On each move the player has to capture some piece with his queen (that is, move to a square that contains either a green pawn or the enemy queen). The player loses if either he cannot capture any piece during his move or the opponent took his queen during the previous move. Help Vasya determine who wins if both players play with an optimal strategy on the board n\u2009\u00d7\u2009n.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"16\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"10006\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"99966246\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"999999997\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"900001\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"775681\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"666666\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}, {\"input\": \"12345\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"111111\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"346367\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"939698497\\r\\n\", \"output\": [\"black\"]}, {\"input\": \"999999996\\r\\n\", \"output\": [\"white\\n1 2\", \"white\\r\\n1 2\"]}]","length":11,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\", \"2\", \"3\", \"8\"]","prob_desc_input_spec":"The first line of the input will contain a single integer, n (1\u2009\u2264\u2009n\u2009\u2264\u2009100\u2009000).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"757cd804aba01dc4bc108cb0722f68dc","prob_desc_created_at":"1454087400","source_code":"#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    int a[110]={0};\n    int i;\n    for(i=1;;i++)\n    {\n        if(n==1) {break;}\n        int yushu,deshu;\n        yushu=n%2;\n        n=n\/2;\n        a[i]=yushu;\n        if(n==1) {i++;break;}\n    }\n    printf(\"%d\",i);\n    i--;\n    for(;i>=0;i--)\n        if(a[i]) printf(\" %d\",i);\n    printf(\"\\n\");\n}\n","prob_desc_sample_outputs":"[\"1\", \"2\", \"2 1\", \"4\"]","lang_cluster":"C","code_uid":"4f02fa2ddd80bf305cd42540824b572d","prob_desc_notes":"NoteIn the first sample, we only have a single slime with value 1. The final state of the board is just a single slime with value 1.In the second sample, we perform the following steps:Initially we place a single slime in a row by itself. Thus, row is initially 1.Then, we will add another slime. The row is now 1 1. Since two rightmost slimes have the same values, we should replace these slimes with one with value 2. Thus, the final state of the board is 2.In the third sample, after adding the first two slimes, our row is 2. After adding one more slime, the row becomes 2 1.In the last sample, the steps look as follows:   1  2  2 1  3  3 1  3 2  3 2 1  4 ","prob_desc_output_spec":"Output a single line with k integers, where k is the number of slimes in the row after you've finished the procedure described in the problem statement. The i-th of these numbers should be the value of the i-th slime from the left.","prob_desc_output_to":"standard output","prob_desc_description":"Your friend recently gave you some slimes for your birthday. You have n slimes all initially with value 1.You are going to play a game with these slimes. Initially, you put a single slime by itself in a row. Then, you will add the other n\u2009-\u20091 slimes one by one. When you add a slime, you place it at the right of all already placed slimes. Then, while the last two slimes in the row have the same value v, you combine them together to create a slime with value v\u2009+\u20091.You would like to see what the final state of the row is after you've added all n slimes. Please print the values of the slimes in the row from left to right.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"2 1\", \"2  1\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"17  16  11  10  8  6\", \"17 16 11 10 8 6\"]}, {\"input\": \"12345\\r\\n\", \"output\": [\"14  13  6  5  4  1\", \"14 13 6 5 4 1\"]}, {\"input\": \"32\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"70958\\r\\n\", \"output\": [\"17  13  11  9  6  4  3  2\", \"17 13 11 9 6 4 3 2\"]}, {\"input\": \"97593\\r\\n\", \"output\": [\"17 15 14 13 12 11 9 6 5 4 1\", \"17  15  14  13  12  11  9  6  5  4  1\"]}, {\"input\": \"91706\\r\\n\", \"output\": [\"17  15  14  11  10  6  5  4  2\", \"17 15 14 11 10 6 5 4 2\"]}, {\"input\": \"85371\\r\\n\", \"output\": [\"17 15 12 11 9 7 6 5 4 2 1\", \"17  15  12  11  9  7  6  5  4  2  1\"]}, {\"input\": \"97205\\r\\n\", \"output\": [\"17  15  14  13  12  10  9  8  6  5  3  1\", \"17 15 14 13 12 10 9 8 6 5 3 1\"]}, {\"input\": \"34768\\r\\n\", \"output\": [\"16  11  10  9  8  7  5\", \"16 11 10 9 8 7 5\"]}, {\"input\": \"12705\\r\\n\", \"output\": [\"14 13 9 8 6 1\", \"14  13  9  8  6  1\"]}, {\"input\": \"30151\\r\\n\", \"output\": [\"15 14 13 11 9 8 7 3 2 1\", \"15  14  13  11  9  8  7  3  2  1\"]}, {\"input\": \"4974\\r\\n\", \"output\": [\"13  10  9  7  6  4  3  2\", \"13 10 9 7 6 4 3 2\"]}, {\"input\": \"32728\\r\\n\", \"output\": [\"15  14  13  12  11  10  9  8  7  5  4\", \"15 14 13 12 11 10 9 8 7 5 4\"]}, {\"input\": \"8192\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"65536\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"32\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"256\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"4096\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"33301\\r\\n\", \"output\": [\"16  10  5  3  1\", \"16 10 5 3 1\"]}, {\"input\": \"16725\\r\\n\", \"output\": [\"15 9 7 5 3 1\", \"15  9  7  5  3  1\"]}, {\"input\": \"149\\r\\n\", \"output\": [\"8 5 3 1\", \"8  5  3  1\"]}, {\"input\": \"16277\\r\\n\", \"output\": [\"14 13 12 11 10 9 8 5 3 1\", \"14  13  12  11  10  9  8  5  3  1\"]}, {\"input\": \"99701\\r\\n\", \"output\": [\"17 16 11 9 7 6 5 3 1\", \"17  16  11  9  7  6  5  3  1\"]}]","length":24,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\\n.135\\n1247\\n3468\\n5789\", \"5\\n..1.\\n1111\\n..1.\\n..1.\", \"1\\n....\\n12.1\\n.2..\\n.2..\"]","prob_desc_input_spec":"The first line contains a single integer k (1\u2009\u2264\u2009k\u2009\u2264\u20095) \u2014 the number of panels Cucumber boy can press with his one hand. Next 4 lines contain 4 characters each (digits from 1 to 9, or period) \u2014 table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"5fdaf8ee7763cb5815f49c0c38398f16","prob_desc_created_at":"1386943200","source_code":"#include <stdio.h>\nint main()  \n{  \n    int k,i,a[10]={0};  \n    char s[5];  \n    scanf(\"%d\",&k);  \n    k=k*2;  \n    for(i=0;i<4;i++)  \n    {  \n        scanf(\"%s\",s);  \n        if(s[0]!='.')   \n        {  \n            a[s[0]-'0']++;  \n        }  \n        if(s[1]!='.')  \n        {  \n            a[s[1]-'0']++;  \n        }  \n        if(s[2]!='.')   \n        {  \n            a[s[2]-'0']++;  \n        }  \n        if(s[3]!='.')  \n        {  \n            a[s[3]-'0']++;  \n        }  \n    }  \n    for(i=0;i<10;i++)  \n    {     \n        if(a[i]>k)  \n        {  \n            printf(\"NO\\n\");  \n            return 0;  \n        }  \n    }  \n    printf(\"YES\\n\");  \n    return 0;  \n} ","prob_desc_sample_outputs":"[\"YES\", \"YES\", \"NO\"]","lang_cluster":"C","code_uid":"85ca2fd003e9c9c09d8313b482f19d89","prob_desc_notes":"NoteIn the third sample boy cannot press all panels in perfect timing. He can press all the panels in timing in time 1, but he cannot press the panels in time 2 in timing with his two hands.","prob_desc_output_spec":"Output \"YES\" (without quotes), if he is able to press all the panels in perfect timing. If not, output \"NO\" (without quotes).","prob_desc_output_to":"standard output","prob_desc_description":"Cucumber boy is fan of Kyubeat, a famous music game.Kyubeat has 16 panels for playing arranged in 4\u2009\u00d7\u20094 table. When a panel lights up, he has to press that panel.Each panel has a timing to press (the preffered time when a player should press it), and Cucumber boy is able to press at most k panels in a time with his one hand. Cucumber boy is trying to press all panels in perfect timing, that is he wants to press each panel exactly in its preffered time. If he cannot press the panels with his two hands in perfect timing, his challenge to press all the panels in perfect timing will fail.You are given one scene of Kyubeat's panel from the music Cucumber boy is trying. Tell him is he able to press all the panels in perfect timing.","hidden_unit_tests":"[{\"input\": \"1\\r\\n.135\\r\\n1247\\r\\n3468\\r\\n5789\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"5\\r\\n..1.\\r\\n1111\\r\\n..1.\\r\\n..1.\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1\\r\\n....\\r\\n12.1\\r\\n.2..\\r\\n.2..\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1\\r\\n....\\r\\n....\\r\\n....\\r\\n....\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1\\r\\n6981\\r\\n.527\\r\\n4163\\r\\n2345\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"5\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n9999\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2\\r\\n4444\\r\\n3333\\r\\n2222\\r\\n1111\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"3\\r\\n2123\\r\\n1232\\r\\n2321\\r\\n3213\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2\\r\\n1...\\r\\n.1..\\r\\n..1.\\r\\n...1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"2\\r\\n1.1.\\r\\n.1.1\\r\\n2.2.\\r\\n.222\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"1\\r\\n1..2\\r\\n.3.4\\r\\n567.\\r\\n.89.\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1\\r\\n1122\\r\\n3344\\r\\n5588\\r\\n6699\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"4\\r\\n1111\\r\\n1221\\r\\n1221\\r\\n1111\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"5\\r\\n3141\\r\\n5926\\r\\n5358\\r\\n9793\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"5\\r\\n5454\\r\\n4343\\r\\n3232\\r\\n2121\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"5\\r\\n1222\\r\\n2221\\r\\n2221\\r\\n1122\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"4\\r\\n...1\\r\\n..2.\\r\\n.3..\\r\\n4...\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1\\r\\n....\\r\\n5..5\\r\\n6..6\\r\\n7..7\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1\\r\\n9875\\r\\n8643\\r\\n7421\\r\\n531.\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1\\r\\n..1.\\r\\n..1.\\r\\n..1.\\r\\n..1.\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"3\\r\\n7777\\r\\n..7.\\r\\n.7..\\r\\n7...\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"4\\r\\n7777\\r\\n..7.\\r\\n.7..\\r\\n7...\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"4\\r\\n4.4.\\r\\n4.4.\\r\\n4444\\r\\n..4.\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"5\\r\\n4.4.\\r\\n4.4.\\r\\n4444\\r\\n..4.\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"3\\r\\n1.1.\\r\\n.1.1\\r\\n1.1.\\r\\n.1.1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2\\r\\n1131\\r\\n4412\\r\\n2569\\r\\n3478\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"2\\r\\n8888\\r\\n8888\\r\\n8888\\r\\n8888\\r\\n\", \"output\": [\"NO\"]}]","length":38,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1 1 1\", \"4 6 6\"]","prob_desc_input_spec":"The first and the single line contains three space-separated integers \u2014 the areas of the parallelepiped's faces. The area's values are positive (\u2009&gt;\u20090) and do not exceed 104. It is guaranteed that there exists at least one parallelepiped that satisfies the problem statement.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"c0a3290be3b87f3a232ec19d4639fefc","prob_desc_created_at":"1347809400","source_code":"#include <stdio.h>\nint gcd (int x, int y);\nint main(void){\n\tint a,b,c;\n\tint x,y,z;\n\tint sum=0;\n\tscanf(\"%d%d%d\",&a,&b,&c);\n\tfor (x=1; x<=a;x++)\n\t\tfor (y=1;x*y<=a;y++)\n\t\t\tfor(z=1;y*z<=b;z++)\n\t\t\t{\n\t\t\t\tif (x*y==a&&x*z==c&&y*z==b)\n\t\t\t\t{\n\t\t\t\t\tsum=x+y+z;\n\t\t\t\t\tgoto out;\n\t\t\t\t}\n\t\t\t}\n\tout:\n\tprintf(\"%d\",sum*4);\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"12\", \"28\"]","lang_cluster":"C","code_uid":"30bcfe077e809283219b399100421b1a","prob_desc_notes":"NoteIn the first sample the parallelepiped has sizes 1\u2009\u00d7\u20091\u2009\u00d7\u20091, in the second one\u00a0\u2014 2\u2009\u00d7\u20092\u2009\u00d7\u20093.","prob_desc_output_spec":"Print a single number \u2014 the sum of all edges of the parallelepiped.","prob_desc_output_to":"standard output","prob_desc_description":"You've got a rectangular parallelepiped with integer edge lengths. You know the areas of its three faces that have a common vertex. Your task is to find the sum of lengths of all 12 edges of this parallelepiped.","hidden_unit_tests":"[{\"input\": \"1 1 1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"4 6 6\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"20 10 50\\r\\n\", \"output\": [\"68\"]}, {\"input\": \"9 4 36\\r\\n\", \"output\": [\"56\"]}, {\"input\": \"324 9 36\\r\\n\", \"output\": [\"184\"]}, {\"input\": \"1333 93 129\\r\\n\", \"output\": [\"308\"]}, {\"input\": \"1022 584 112\\r\\n\", \"output\": [\"380\"]}, {\"input\": \"66 174 319\\r\\n\", \"output\": [\"184\"]}, {\"input\": \"912 276 1748\\r\\n\", \"output\": [\"444\"]}, {\"input\": \"65 156 60\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"1 10000 10000\\r\\n\", \"output\": [\"40008\"]}, {\"input\": \"1485 55 27\\r\\n\", \"output\": [\"332\"]}, {\"input\": \"152 108 4104\\r\\n\", \"output\": [\"528\"]}, {\"input\": \"1656 6900 1350\\r\\n\", \"output\": [\"740\"]}, {\"input\": \"12 14 42\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"615 18 1230\\r\\n\", \"output\": [\"856\"]}, {\"input\": \"680 60 408\\r\\n\", \"output\": [\"336\"]}, {\"input\": \"644 966 6\\r\\n\", \"output\": [\"1308\"]}, {\"input\": \"1 432 432\\r\\n\", \"output\": [\"1736\"]}, {\"input\": \"2239 2239 1\\r\\n\", \"output\": [\"8964\"]}, {\"input\": \"4106 8212 2\\r\\n\", \"output\": [\"16436\"]}, {\"input\": \"10000 10000 10000\\r\\n\", \"output\": [\"1200\"]}, {\"input\": \"3623 3623 1\\r\\n\", \"output\": [\"14500\"]}, {\"input\": \"9801 9801 9801\\r\\n\", \"output\": [\"1188\"]}, {\"input\": \"10000 1 10000\\r\\n\", \"output\": [\"40008\"]}, {\"input\": \"9 9 9\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"9801 9702 9702\\r\\n\", \"output\": [\"1184\"]}]","length":21,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n1 2 6\", \"10\\n1 2 3 4 5\"]","prob_desc_input_spec":"The first line of the input contains one integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100, n is even) \u2014 the size of the chessboard.  The second line of the input contains  integer numbers  (1\u2009\u2264\u2009pi\u2009\u2264\u2009n) \u2014 initial positions of the pieces. It is guaranteed that all the positions are distinct.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"0efe9afd8e6be9e00f7949be93f0ca1a","prob_desc_created_at":"1526913900","source_code":"#include <stdio.h>\nint v[51];\nint main(){\n    int n, i, aux, f, cn, s, s2;\n    s=s2=0;\n    scanf(\"%d\", &n);\n    cn=n\/2;\n    for(i=0; i<cn; i++)\n      scanf(\"%d\", &v[i]);\n    f=0;\n    while(f==0){\n      f=1;\n      for(i=0; i<cn-1; i++)\n        if(v[i]>v[i+1]){\n          aux=v[i];\n          v[i]=v[i+1];\n          v[i+1]=aux;\n          f=0;\n        }\n    }\n    for(i=1; i<=n; i+=2)\n      s=s+abs(v[(i-1)\/2]-i);\n    for(i=2; i<=n; i+=2)\n      s2=s2+abs(v[(i-2)\/2]-i);\n    if(s>s2)\n      printf(\"%d\", s2);\n    else\n      printf(\"%d\", s);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"2\", \"10\"]","lang_cluster":"C","code_uid":"ed1a2d330d155d04ccc924d5cb9af7d4","prob_desc_notes":"NoteIn the first example the only possible strategy is to move the piece at the position 6 to the position 5 and move the piece at the position 2 to the position 3. Notice that if you decide to place the pieces in the white cells the minimum number of moves will be 3.In the second example the possible strategy is to move  in 4 moves, then  in 3 moves,  in 2 moves and  in 1 move.","prob_desc_output_spec":"Print one integer \u2014 the minimum number of moves you have to make to place all the pieces in the cells of the same color.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a chessboard of size 1\u2009\u00d7\u2009n. It is guaranteed that n is even. The chessboard is painted like this: \"BWBW...BW\".Some cells of the board are occupied by the chess pieces. Each cell contains no more than one chess piece. It is known that the total number of pieces equals to .In one step you can move one of the pieces one cell to the left or to the right. You cannot move pieces beyond the borders of the board. You also cannot move pieces to the cells that are already occupied.Your task is to place all the pieces in the cells of the same color using the minimum number of moves (all the pieces must occupy only the black cells or only the white cells after all the moves are made).","hidden_unit_tests":"[{\"input\": \"6\\r\\n1 2 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n1 2 3 4 5\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"2\\r\\n2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n93 54 57 61 68 66 70 96 64 82 80 75 69 77 76 94 67 86 90 73 74 58 100 83 92 89 56 99 88 59 95 72 81 51 85 71 97 60 91 63 65 98 79 84 53 62 87 55 52 78\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"100\\r\\n41 13 29 11 25 15 6 23 28 50 48 17 3 9 44 24 5 19 34 22 33 32 20 16 35 37 4 10 46 2 39 40 47 49 36 42 1 30 43 21 14 7 18 45 31 8 12 26 27 38\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"96\\r\\n12 58 70 19 65 61 41 46 15 92 64 72 9 26 53 37 2 3 1 40 10 8 94 66 50 34 36 96 47 78 7 57 5 6 17 69 28 88 89 49 55 81 35 22 25 79 86 59\\r\\n\", \"output\": [\"152\"]}, {\"input\": \"10\\r\\n5 6 7 8 9\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"20\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"45\"]}, {\"input\": \"10\\r\\n6 7 8 9 10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"10\\r\\n9 8 7 6 5\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n1 5 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"12\\r\\n1 7 8 9 10 12\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n1 4 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"24\\r\\n10 21 15 3 11 4 18 24 16 22 14 9\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"20\\r\\n3 4 6 7 8 10 11 13 14 17\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10\\r\\n10 9 8 1 5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n84 10 26 79 58 93 67 85 7 2 99 4 47 45 75 22 32 82 65 53 63 49 42 52 12 69 86 46 25 76 40 15 13 78 8 81 62 28 60 21 27 80 98 56 3 36 54 16 50 43\\r\\n\", \"output\": [\"104\"]}, {\"input\": \"10\\r\\n1 7 8 9 10\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"10\\r\\n1 4 6 8 10\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"80\\r\\n41 70 18 53 32 79 51 49 21 27 47 65 50 15 62 60 5 40 14 25 64 9 19 58 38 76 66 52 17 34 13 2 80 43 3 42 33 36 6 72\\r\\n\", \"output\": [\"47\"]}, {\"input\": \"50\\r\\n27 42 41 4 10 45 44 26 49 50 17 28 2 36 18 39 23 12 21 24 19 29 22 40 37\\r\\n\", \"output\": [\"59\"]}, {\"input\": \"10\\r\\n2 3 4 5 6\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n3 5 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100\\r\\n9 63 62 88 3 67 54 33 79 51 71 80 37 46 43 57 69 17 34 6 18 40 59 83 76 86 8 55 90 89 45 42 28 98 30 38 77 91 73 58 23 61 41 65 64 93 14 44 16 24\\r\\n\", \"output\": [\"160\"]}, {\"input\": \"10\\r\\n1 6 7 8 9\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"6\\r\\n3 4 5\\r\\n\", \"output\": [\"2\"]}]","length":30,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 80\\n1 2 2 1\", \"4 1\\n1 2 2 1\", \"4 2\\n1 2 3 1\"]","prob_desc_input_spec":"The first line of input will contain two integers n and k (1\u2009\u2264\u2009n,\u2009k\u2009\u2264\u200980). The second line will contain n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009n) \u2013 the sequence of book requests.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"956228e31679caa9952b216e010f9773","prob_desc_created_at":"1495958700","source_code":"#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int n=0,i=0,j=0,book[81]={0},max=0,now[81]={0},time[81]={0},money=0,number=0,de=0,k=0,chose=0;\n    scanf(\"%d %d\",&n,&max);\n    for(i=0;i<n;i++)\n        scanf(\"%d\",&book[i]);\n    for(i=0;i<n;i++)\n    {\n        if(now[book[i]]==0 && number<max)\n        {\n            now[book[i]]=1;\n            money++;\n            number++;\n        }\n        else if(now[book[i]]==0 && number==max)\n        {\n            for(j=0;j<81;j++)\n                time[j]=0;\n            for(j=i;j<n;j++)\n            {\n                if(now[book[j]]==1 && time[book[j]]==0)\n                {\n                    time[book[j]]=1;\n                    de=book[j];\n                }\n            }\n            for(j=0;j<81;j++)\n            {\n                chose=0;\n                if(now[j]==1)\n                {\n                    \/\/but=now[j];\n                    for(k=i;k<n;k++)\n                    {\n                        if(j==book[k])\n                            chose=1;\n                    }\n                    if(chose==0)\n                        de=j;\n                }\n\n            }\n            now[de]=0;\n            now[book[i]]=1;\n            money++;\n        }\n    }\n    printf(\"%d\\n\",money);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"2\", \"3\", \"3\"]","lang_cluster":"C","code_uid":"30159d56c74a4cc26f3696b83306d718","prob_desc_notes":"NoteIn the first test case, Heidi is able to keep all books forever. Therefore, she only needs to buy the book 1 before the first day and the book 2 before the second day.In the second test case, she can only keep one book at a time. Therefore she will need to buy new books on the first, second and fourth day.In the third test case, before buying book 3 on the third day, she must decide which of the books 1 and 2 she should get rid of. Of course, she should keep the book 1, which will be requested on the fourth day.","prob_desc_output_spec":"On a single line print the minimum cost of buying books at the store so as to satisfy all requests.","prob_desc_output_to":"standard output","prob_desc_description":"Your search for Heidi is over \u2013 you finally found her at a library, dressed up as a human. In fact, she has spent so much time there that she now runs the place! Her job is to buy books and keep them at the library so that people can borrow and read them. There are n different books, numbered 1 through n.We will look at the library's operation during n consecutive days. Heidi knows in advance that on the i-th day (1\u2009\u2264\u2009i\u2009\u2264\u2009n) precisely one person will come to the library, request to borrow the book ai, read it in a few hours, and return the book later on the same day.Heidi desperately wants to please all her guests, so she will make sure to always have the book ai available in the library on the i-th day. During the night before the i-th day, she has the option of going to the bookstore (which operates at nights to avoid competition with the library) and buying any book for the price of 1 CHF. Of course, if she already has a book at the library, she does not need to buy it again. Initially, the library contains no books.There is a problem, though. The capacity of the library is k \u2013 this means that at any time, there can be at most k books at the library. If buying a new book would cause Heidi to have more than k books, she must first get rid of some book that she already has, in order to make room for the new book. If she later needs a book that she got rid of, she will need to buy that book again.You are given k and the sequence of requests for books a1,\u2009a2,\u2009...,\u2009an. What is the minimum cost (in CHF) of buying new books to satisfy all the requests?","hidden_unit_tests":"[{\"input\": \"4 80\\r\\n1 2 2 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 1\\r\\n1 2 2 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 2\\r\\n1 2 3 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"11 1\\r\\n1 2 3 5 1 10 10 1 1 3 5\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"5 2\\r\\n1 2 3 1 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"4 2\\r\\n1 2 3 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"80 4\\r\\n9 9 2 6 3 10 2 5 4 9 6 7 5 5 3 8 5 3 2 10 7 8 5 3 4 9 4 3 9 5 2 10 8 4 7 3 8 3 5 2 3 7 8 4 2 4 4 7 2 2 5 7 5 8 10 10 5 1 1 3 5 2 10 8 7 9 7 4 8 3 2 8 7 9 10 9 7 1 5 5\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"80 4\\r\\n10 19 20 18 16 7 13 18 15 5 7 13 16 8 14 8 3 15 19 19 7 13 17 9 18 16 4 14 10 18 1 3 5 3 20 18 9 4 17 19 13 20 16 12 15 5 5 18 17 16 4 5 20 10 18 4 7 19 10 15 8 15 17 3 10 16 19 2 6 6 3 12 10 7 15 3 17 15 6 8\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"80 4\\r\\n28 34 9 3 29 12 19 17 22 10 21 2 26 18 14 7 7 10 37 39 10 1 9 37 33 4 25 21 23 2 4 2 35 1 11 19 33 31 18 10 23 1 26 20 17 31 18 27 31 22 33 7 2 5 30 24 18 32 1 14 2 33 7 26 2 10 1 10 5 19 37 33 33 34 28 20 1 22 11 14\\r\\n\", \"output\": [\"58\"]}, {\"input\": \"80 4\\r\\n71 49 41 21 72 71 37 14 51 59 73 11 70 15 36 46 32 57 58 15 72 67 16 75 70 11 67 3 40 36 2 9 63 68 32 22 63 52 67 55 35 19 72 59 22 19 44 55 59 74 4 34 53 3 22 57 32 27 78 12 71 4 26 15 43 21 79 10 67 39 34 74 38 26 31 78 2 78 69 42\\r\\n\", \"output\": [\"62\"]}, {\"input\": \"80 8\\r\\n16 13 11 16 3 4 1 4 4 16 6 6 1 12 19 18 12 15 2 10 2 18 18 13 3 17 16 15 7 6 19 8 2 14 17 13 1 14 4 2 3 16 2 15 13 15 9 10 7 14 7 2 1 18 19 15 7 3 19 8 9 4 12 4 3 4 9 10 6 5 4 4 9 4 20 8 17 7 1 14\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"80 8\\r\\n5 17 39 25 40 34 11 23 7 16 20 35 31 14 18 17 32 10 40 9 17 23 5 33 2 9 21 22 8 11 22 7 28 36 3 10 12 21 20 29 25 5 12 30 8 21 18 19 1 29 9 4 19 5 15 36 38 37 10 27 15 13 6 22 31 5 40 30 21 39 23 21 39 32 37 28 29 11 34 16\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"80 8\\r\\n8 72 32 27 27 20 69 28 77 25 8 4 75 11 41 71 57 17 45 65 79 8 61 15 24 80 39 36 34 13 76 37 16 71 64 77 11 58 30 26 61 23 18 30 68 65 12 47 69 65 3 55 71 3 32 4 20 39 47 25 75 49 34 60 48 56 77 70 59 59 75 6 5 23 55 30 62 66 4 4\\r\\n\", \"output\": [\"57\"]}, {\"input\": \"80 12\\r\\n9 5 8 1 12 2 6 19 8 20 6 12 9 6 16 1 2 5 11 6 8 4 13 7 2 17 18 12 15 17 13 2 9 8 1 17 10 2 9 12 18 3 5 11 10 16 7 16 8 11 3 18 13 19 8 13 13 2 20 13 11 14 20 3 2 1 17 18 17 8 4 3 12 3 19 18 4 16 6 6\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"80 12\\r\\n27 12 25 30 13 27 12 17 35 25 1 28 35 16 23 20 38 1 37 2 35 29 16 26 37 4 23 39 24 2 16 21 39 21 23 38 33 9 38 22 40 36 23 39 1 2 4 14 22 26 32 4 31 38 4 5 4 15 35 12 5 32 37 38 11 14 16 26 36 38 2 40 10 15 33 38 36 20 35 12\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"80 12\\r\\n30 19 34 24 56 38 31 63 57 50 53 69 79 5 6 74 47 47 73 17 18 70 72 49 35 20 65 21 18 4 54 12 67 8 28 25 64 6 31 36 35 54 61 7 45 54 55 49 50 6 3 7 10 29 76 62 50 50 32 66 25 19 17 3 67 17 37 67 58 18 54 25 8 78 35 16 61 19 45 40\\r\\n\", \"output\": [\"55\"]}, {\"input\": \"80 16\\r\\n4 27 31 28 8 17 28 31 20 7 39 5 40 13 28 6 23 1 16 4 34 2 13 6 6 9 18 1 25 19 33 26 33 16 24 5 13 23 25 9 10 16 25 34 39 8 4 6 33 25 7 40 32 23 13 17 32 20 28 25 33 20 29 2 40 34 23 6 28 2 12 12 9 36 18 39 32 8 11 15\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"80 16\\r\\n31 26 40 46 75 35 63 29 2 49 51 14 4 65 10 4 8 72 44 67 57 60 69 21 52 40 37 54 27 12 31 24 21 59 61 80 11 76 58 7 77 10 55 9 11 36 7 41 61 13 2 28 28 77 22 57 54 62 65 80 78 32 72 64 41 69 36 46 50 5 48 53 6 76 76 65 57 7 29 67\\r\\n\", \"output\": [\"53\"]}, {\"input\": \"80 40\\r\\n34 71 32 39 65 8 13 4 7 4 18 66 20 12 57 74 58 50 30 27 31 48 1 6 63 63 7 32 56 48 42 35 45 55 52 76 52 26 40 15 8 38 73 47 55 75 17 22 36 59 28 19 6 79 58 7 40 66 48 39 71 67 55 61 71 24 60 39 63 6 47 70 8 10 68 49 49 67 53 15\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"80 60\\r\\n70 59 1 24 50 77 11 71 36 26 75 56 30 31 76 51 73 29 49 2 80 55 32 52 51 56 2 28 37 11 37 1 63 33 74 60 59 63 55 28 73 45 5 69 77 8 35 76 47 48 49 77 25 75 38 70 77 80 27 9 13 45 14 30 33 34 32 78 52 4 7 57 55 43 13 1 45 36 79 45\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"80 80\\r\\n73 32 65 26 35 2 10 73 80 64 67 14 40 34 15 59 8 71 5 9 49 63 32 51 23 1 13 9 34 6 80 31 32 60 31 27 65 20 21 74 26 51 17 11 19 37 4 50 73 22 71 55 76 7 51 21 50 63 6 75 66 55 37 62 10 45 52 21 42 18 80 12 7 28 54 50 9 5 25 42\\r\\n\", \"output\": [\"53\"]}, {\"input\": \"80 4\\r\\n1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"80 8\\r\\n1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"80 16\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 9 10 11 12\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"80 32\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 1 2 3 4 5 6 7 8 9 10 11 12 13 14\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"80 80\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80\\r\\n\", \"output\": [\"80\"]}]","length":53,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 2\", \"61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\"]","prob_desc_input_spec":"The only line of the input contains two integers a and b (1\u2009\u2264\u2009a\u2009\u2264\u2009b\u2009\u2264\u200910100).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"9c5b6d8a20414d160069010b2965b896","prob_desc_created_at":"1460824500","source_code":"\n#include<stdio.h>\n#include<string.h>\n\n\nint main() {\n\tlong long int a,i,b;\n\tchar s1[10001];\n\tchar s2[10001];\n\tfor(i=0;i<1001;i++)\n\t{\n\t\ts1[i]=' ';\n\t\ts2[i]=' ';\n\t}\n\tscanf(\"%s\",s1);\n\tscanf(\"%s\",s2);\n\tif(strcmp(s1,s2)==0)\n\tprintf(\"%s\\n\",s2);\n\telse\n\tprintf(\"1\\n\");\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"1\", \"61803398874989484820458683436563811772030917980576\"]","lang_cluster":"C","code_uid":"0f34b54d27154f66ad38f2ddfabd0843","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer\u00a0\u2014 greatest common divisor of all integers from a to b inclusive.","prob_desc_output_to":"standard output","prob_desc_description":"Greatest common divisor GCD(a,\u2009b) of two positive integers a and b is equal to the biggest integer d such that both integers a and b are divisible by d. There are many efficient algorithms to find greatest common divisor GCD(a,\u2009b), for example, Euclid algorithm. Formally, find the biggest integer d, such that all integers a,\u2009a\u2009+\u20091,\u2009a\u2009+\u20092,\u2009...,\u2009b are divisible by d. To make the problem even more complicated we allow a and b to be up to googol, 10100\u00a0\u2014 such number do not fit even in 64-bit integer type!","hidden_unit_tests":"[{\"input\": \"1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\\r\\n\", \"output\": [\"61803398874989484820458683436563811772030917980576\"]}, {\"input\": \"1 100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 100000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"12345 67890123456789123457\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8392739158839273915883927391588392739158839273915883927391588392739158839273915883927391588392739158 8392739158839273915883927391588392739158839273915883927391588392739158839273915883927391588392739158\\r\\n\", \"output\": [\"8392739158839273915883927391588392739158839273915883927391588392739158839273915883927391588392739158\"]}, {\"input\": \"1 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8328748239473982794239847237438782379810988324751 9328748239473982794239847237438782379810988324751\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1029398958432734901284327523909481928483573793 1029398958432734901284327523909481928483573794\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000 1000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\r\\n\", \"output\": [\"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"]}, {\"input\": \"11210171722243 65715435710585778347\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2921881079263974825226940825843 767693191032295360887755303860323261471\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8025352957265704896940312528736939363590612908210603 96027920417708260814607687034511406492969694925539085\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"23510978780782786207241069904470895053213996267165977112058175452757132930 210352653280909370107314249722987050753257161175393375412301228883856435481424\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8150070767079366215626260746398623663859344142817267779361251788637547414925170226504788118262 49924902262298336032630839998470954964895251605110946547855439236151401194070172107435992986913614\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"15943150466658398903 15943150466658398903\\r\\n\", \"output\": [\"15943150466658398903\"]}, {\"input\": \"410470228200245407491525399055972 410470228200245407491525399055972\\r\\n\", \"output\": [\"410470228200245407491525399055972\"]}, {\"input\": \"51894705655711504622197349350106792045098781545973899451307 51894705655711504622197349350106792045098781545973899451307\\r\\n\", \"output\": [\"51894705655711504622197349350106792045098781545973899451307\"]}, {\"input\": \"60353594589897438036015726222485085035927634677598681595162804007836722215668410 60353594589897438036015726222485085035927634677598681595162804007836722215668410\\r\\n\", \"output\": [\"60353594589897438036015726222485085035927634677598681595162804007836722215668410\"]}, {\"input\": \"761733780145118977868180796896376577405349682060892737466239031663476251177476275459280340045369535 761733780145118977868180796896376577405349682060892737466239031663476251177476275459280340045369535\\r\\n\", \"output\": [\"761733780145118977868180796896376577405349682060892737466239031663476251177476275459280340045369535\"]}, {\"input\": \"1 2000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"13 1928834874\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"87 2938984237482934238\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"213 413\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 4\\r\\n\", \"output\": [\"1\"]}]","length":22,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 2\", \"2 3\", \"3 3\"]","prob_desc_input_spec":"The first line of input contains two space-separated integers, n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"a4b9ce9c9f170a729a97af13e81b5fe4","prob_desc_created_at":"1406215800","source_code":"#include<stdio.h>\n\nint main(){\n\nint x , y;\nscanf(\"%d %d\",&x,&y);\nif(x%2 == 0 && y%2 ==0)\nprintf(\"Malvika\");\nelse if(x%2 ==1 && y%2 == 1)\nprintf(\"Akshat\");\nelse if (x%2 ==1){\nif (x<y)\nprintf(\"Akshat\");\nelse\nprintf(\"Malvika\");}\nelse if(y%2 ==1){\nif(y<x)\nprintf(\"Akshat\");\nelse\nprintf(\"Malvika\");\n}\n\nreturn 0;\n}","prob_desc_sample_outputs":"[\"Malvika\", \"Malvika\", \"Akshat\"]","lang_cluster":"C","code_uid":"5317b7e5892d27b93fbbf695b41f01a5","prob_desc_notes":"NoteExplanation of the first sample:The grid has four intersection points, numbered from 1 to 4.  If Akshat chooses intersection point 1, then he will remove two sticks (1\u2009-\u20092 and 1\u2009-\u20093). The resulting grid will look like this.  Now there is only one remaining intersection point (i.e. 4). Malvika must choose it and remove both remaining sticks. After her move the grid will be empty.In the empty grid, Akshat cannot make any move, hence he will lose.Since all 4 intersection points of the grid are equivalent, Akshat will lose no matter which one he picks.","prob_desc_output_spec":"Print a single line containing \"Akshat\" or \"Malvika\" (without the quotes), depending on the winner of the game.","prob_desc_output_to":"standard output","prob_desc_description":"After winning gold and silver in IOI 2014, Akshat and Malvika want to have some fun. Now they are playing a game on a grid made of n horizontal and m vertical sticks.An intersection point is any point on the grid which is formed by the intersection of one horizontal stick and one vertical stick.In the grid shown below, n\u2009=\u20093 and m\u2009=\u20093. There are n\u2009+\u2009m\u2009=\u20096 sticks in total (horizontal sticks are shown in red and vertical sticks are shown in green). There are n\u00b7m\u2009=\u20099 intersection points, numbered from 1 to 9.  The rules of the game are very simple. The players move in turns. Akshat won gold, so he makes the first move. During his\/her move, a player must choose any remaining intersection point and remove from the grid all sticks which pass through this point. A player will lose the game if he\/she cannot make a move (i.e. there are no intersection points remaining on the grid at his\/her move).Assume that both players play optimally. Who will win the game?","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"20 68\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"1 3\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"68 42\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"1 35\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"25 70\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"59 79\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"65 63\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"46 6\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"28 82\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"98 98\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"98 99\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"98 100\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"99 98\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"99 99\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"99 100\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"100 98\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"Akshat\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"Malvika\"]}, {\"input\": \"3 4\\r\\n\", \"output\": [\"Akshat\"]}]","length":24,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"13\", \"6\"]","prob_desc_input_spec":"The single line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091012) \u2014 the number of cards.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"ab4f9cb3bb0df6389a4128e9ff1207de","prob_desc_created_at":"1411745400","source_code":"#include<stdio.h>\n#define ll long long int\nll getcards(ll flo)\n{\n    return 3*flo*(flo+1)\/2-flo;\n}\n\/\/Another solution would be to calculate the number of rooms R i.e 3R-F everytime and then return the value.But it would become an O(n*sqrt(n));\nint main()\n{\n    ll n;\n    scanf(\"%lld\",&n);\n\n    ll floor;\n    ll rem=0;\n    for(floor=1;getcards(floor)<=n;floor++)\n    {\n        if((n+floor)%3==0)\n            rem++;\n    }\n\n    printf(\"%lld\",rem);\n\n    return 0;\n}   ","prob_desc_sample_outputs":"[\"1\", \"0\"]","lang_cluster":"C","code_uid":"e80f525dba37ecfc2560fa058dd9d802","prob_desc_notes":"NoteIn the first sample you can build only these two houses (remember, you must use all the cards):  Thus, 13 cards are enough only for two floor houses, so the answer is 1.The six cards in the second sample are not enough to build any house.","prob_desc_output_spec":"Print the number of distinct heights that the houses made of exactly n cards can have.","prob_desc_output_to":"standard output","prob_desc_description":"Polar bears Menshykov and Uslada from the zoo of St. Petersburg and elephant Horace from the zoo of Kiev decided to build a house of cards. For that they've already found a hefty deck of n playing cards. Let's describe the house they want to make:   The house consists of some non-zero number of floors.  Each floor consists of a non-zero number of rooms and the ceiling. A room is two cards that are leaned towards each other. The rooms are made in a row, each two adjoining rooms share a ceiling made by another card.  Each floor besides for the lowest one should contain less rooms than the floor below. Please note that the house may end by the floor with more than one room, and in this case they also must be covered by the ceiling. Also, the number of rooms on the adjoining floors doesn't have to differ by one, the difference may be more. While bears are practicing to put cards, Horace tries to figure out how many floors their house should consist of. The height of the house is the number of floors in it. It is possible that you can make a lot of different houses of different heights out of n cards. It seems that the elephant cannot solve this problem and he asks you to count the number of the distinct heights of the houses that they can make using exactly n cards.","hidden_unit_tests":"[{\"input\": \"13\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"26\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1000000000000\\r\\n\", \"output\": [\"272165\"]}, {\"input\": \"571684826707\\r\\n\", \"output\": [\"205784\"]}, {\"input\": \"178573947413\\r\\n\", \"output\": [\"115012\"]}, {\"input\": \"420182289478\\r\\n\", \"output\": [\"176421\"]}, {\"input\": \"663938115190\\r\\n\", \"output\": [\"221767\"]}, {\"input\": \"903398973606\\r\\n\", \"output\": [\"258685\"]}, {\"input\": \"149302282966\\r\\n\", \"output\": [\"105164\"]}, {\"input\": \"388763141382\\r\\n\", \"output\": [\"169697\"]}, {\"input\": \"71\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"98\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1312861\\r\\n\", \"output\": [\"312\"]}, {\"input\": \"1894100308\\r\\n\", \"output\": [\"11845\"]}, {\"input\": \"152\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"153\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"154\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"155\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"156\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"157\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"158\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"0\"]}]","length":24,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2500.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 6\\n1 2\\n2 1\", \"1 10000000\\n2\\n3\"]","prob_desc_input_spec":"The first line contains two integers n and m (1\u2009\u2264\u2009n\u2009\u2264\u200920;\u00a01\u2009\u2264\u2009m\u2009\u2264\u2009107; m is even). The next line contains n integers: a0, a1, ..., an\u2009-\u20091 (1\u2009\u2264\u2009ai\u2009\u2264\u200910). The next line contains n integers: b0, b1, ..., bn\u2009-\u20091 (1\u2009\u2264\u2009bi\u2009\u2264\u200910). The numbers are separated by spaces.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"f40900973f4ebeb6fdafd75ebe4e9601","prob_desc_created_at":"1380900600","source_code":"#include <stdio.h>\nint main()\n{\n\tlong n,m,f[100][100];\n\tint i,j,k,t,a[100],b[100];\n\tscanf(\"%ld%ld\",&n,&m);\n\tfor(i=0;i<n;i++) scanf(\"%d\",&a[i]);\n\tfor(i=0;i<n;i++) scanf(\"%d\",&b[i]);\n    for(i=n;i<4*n;i++){a[i]=a[i%n];b[i]=b[i%n];}\n\tfor(k=1;k<4*n;k+=2)\n     for(i=0;i<4*n-k;i++){\n\t\tj=i+k;\n\t\tif(j==i+1) f[i][j]=a[i]+b[j];\n\t\telse{\n\t\t   f[i][j]=f[i+1][j-1]+a[i]+b[j];\n\t\t   for(t=i+1;t<j;t+=2)\n\t\t\t   if(f[i][j]>f[i][t]+f[t+1][j]) f[i][j]=f[i][t]+f[t+1][j];\n\t\t}\n\t }\n    if(m<=4) printf(\"%ld\",f[0][n*m-1]);\n\telse{\n\t\tfor(i=t=0;i<2*n;i++) if(f[i][i+2*n-1]<f[t][t+2*n-1]) t=i;\n\t\tprintf(\"%ld\",f[t][t+2*n-1]*(m\/2-1)+f[0][2*n-1]);\n\t}\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"12\", \"25000000\"]","lang_cluster":"C","code_uid":"a8da3ec7a515df247720c66ef5608bf8","prob_desc_notes":"NoteIn the first test the optimal sequence is: ()()()()()(), the required number of ink liters is 12.","prob_desc_output_spec":"In a single line print the answer to the problem \u2014 the minimum required amount of ink in liters.","prob_desc_output_to":"standard output","prob_desc_description":"Jeff loves regular bracket sequences.Today Jeff is going to take a piece of paper and write out the regular bracket sequence, consisting of nm brackets. Let's number all brackets of this sequence from 0 to nm - 1 from left to right. Jeff knows that he is going to spend ai mod n liters of ink on the i-th bracket of the sequence if he paints it opened and bi mod n liters if he paints it closed.You've got sequences a, b and numbers n, m. What minimum amount of ink will Jeff need to paint a regular bracket sequence of length nm?Operation x mod y means taking the remainder after dividing number x by number y.","hidden_unit_tests":"[{\"input\": \"2 6\\r\\n1 2\\r\\n2 1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"1 10000000\\r\\n2\\r\\n3\\r\\n\", \"output\": [\"25000000\"]}, {\"input\": \"3 184\\r\\n3 2 8\\r\\n3 9 2\\r\\n\", \"output\": [\"1288\"]}, {\"input\": \"4 26\\r\\n10 2 5 9\\r\\n5 4 2 5\\r\\n\", \"output\": [\"444\"]}, {\"input\": \"3 76\\r\\n4 7 9\\r\\n10 1 1\\r\\n\", \"output\": [\"684\"]}, {\"input\": \"3 98\\r\\n6 1 9\\r\\n10 2 4\\r\\n\", \"output\": [\"1127\"]}, {\"input\": \"5 114\\r\\n7 5 8 10 10\\r\\n2 7 9 4 5\\r\\n\", \"output\": [\"3021\"]}, {\"input\": \"1 14\\r\\n7\\r\\n6\\r\\n\", \"output\": [\"91\"]}, {\"input\": \"5 142\\r\\n8 7 6 2 2\\r\\n8 2 6 1 7\\r\\n\", \"output\": [\"2703\"]}, {\"input\": \"1 184\\r\\n8\\r\\n8\\r\\n\", \"output\": [\"1472\"]}, {\"input\": \"2 1900670\\r\\n10 3\\r\\n9 6\\r\\n\", \"output\": [\"22808044\"]}, {\"input\": \"6 17656\\r\\n2 7 4 7 7 3\\r\\n3 5 3 6 9 10\\r\\n\", \"output\": [\"459064\"]}, {\"input\": \"16 3273408\\r\\n3 2 8 8 10 1 1 7 1 4 5 7 5 8 10 10\\r\\n4 4 3 4 7 9 5 1 7 10 7 2 7 9 4 5\\r\\n\", \"output\": [\"186584261\"]}, {\"input\": \"11 4532614\\r\\n7 3 4 1 8 3 5 2 8 10 9\\r\\n6 10 3 7 5 1 1 8 4 9 7\\r\\n\", \"output\": [\"201701323\"]}, {\"input\": \"7 3952828\\r\\n1 1 9 3 5 9 2\\r\\n3 5 6 2 7 9 4\\r\\n\", \"output\": [\"106726356\"]}, {\"input\": \"20 807878\\r\\n9 4 2 5 2 7 9 3 4 4 9 2 8 3 8 9 5 7 4 7\\r\\n8 4 8 7 10 4 10 6 8 1 7 9 3 10 2 2 6 7 3 9\\r\\n\", \"output\": [\"67053877\"]}, {\"input\": \"3 3684044\\r\\n8 6 4\\r\\n3 1 2\\r\\n\", \"output\": [\"38682465\"]}, {\"input\": \"9 7683580\\r\\n4 6 8 5 10 6 3 4 7\\r\\n6 7 3 10 3 10 1 4 10\\r\\n\", \"output\": [\"303501412\"]}, {\"input\": \"10 6007734\\r\\n4 7 6 7 4 3 4 7 7 6\\r\\n8 9 5 7 6 3 2 2 10 4\\r\\n\", \"output\": [\"270348030\"]}, {\"input\": \"7 859320\\r\\n10 1 4 9 2 5 5\\r\\n5 10 3 6 6 5 10\\r\\n\", \"output\": [\"23201650\"]}, {\"input\": \"20 10000000\\r\\n10 3 2 6 2 3 9 2 8 4 4 4 3 4 7 9 5 1 7 10\\r\\n9 6 2 8 3 2 8 10 6 3 2 8 8 10 1 1 7 1 4 5\\r\\n\", \"output\": [\"730000001\"]}, {\"input\": \"20 10000000\\r\\n7 10 9 2 9 7 6 10 3 7 5 1 1 8 4 9 7 9 6 8\\r\\n9 4 3 6 1 7 3 4 1 8 3 5 2 8 10 9 1 2 10 4\\r\\n\", \"output\": [\"780000008\"]}, {\"input\": \"20 10000000\\r\\n2 7 9 4 1 9 8 4 6 10 5 10 4 5 9 9 10 9 1 6\\r\\n5 9 2 9 8 9 1 10 1 9 5 6 4 9 1 10 3 9 9 7\\r\\n\", \"output\": [\"890000001\"]}, {\"input\": \"20 10000000\\r\\n6 7 3 9 10 10 1 9 4 6 8 5 10 6 3 4 7 8 6 6\\r\\n7 4 7 2 7 3 10 10 6 7 3 10 3 10 1 4 10 10 7 3\\r\\n\", \"output\": [\"920000004\"]}, {\"input\": \"20 10000000\\r\\n7 4 3 4 7 7 6 5 4 6 5 8 3 5 3 8 4 3 4 8\\r\\n7 6 3 2 2 10 4 3 5 7 9 9 8 5 4 9 4 3 3 4\\r\\n\", \"output\": [\"880000001\"]}, {\"input\": \"1 2\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"20 10000000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"200000000\"]}, {\"input\": \"20 10000000\\r\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\\r\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\\r\\n\", \"output\": [\"2000000000\"]}]","length":26,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2500.0,"prob_desc_time_limit":"1.5 seconds","prob_desc_sample_inputs":"[\"3 1\", \"3 2\", \"2 0\", \"2 2\"]","prob_desc_input_spec":"The first line contains integers n, k (1\u2009\u2264\u2009n\u2009\u2264\u2009500;\u00a00\u2009\u2264\u2009k\u2009\u2264\u2009500).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"111673158df2e37ac6c019bb99225ccb","prob_desc_created_at":"1398612600","source_code":"#include<stdio.h>\n#include<math.h>\n#define sqr(x) ((x)*(x))\n#define m0(x) memset(x,0,sizeof(x))\n#define m1(x) memset(x,63,sizeof(x))\n#define M 1000000007\n#define N 211111\n\n#define maxN 555\n\nint n, k;\nint dp[maxN][maxN], dp2[maxN][maxN];\nint w[maxN];\n\nint add(int x, int y) {\n\tx += y;\n\tif (x >= M) x-= M;\n\treturn (x);\n}\n\nint min(int a, int b)\n\t{\n\t\tif(a<b)return a;\n\t\telse return b;\n\t}\n\nint main(){\n\tscanf(\"%d %d\", &n, &k);\n\tw[0] = 1;\n\tint i,j,d;\n\tfor ( i = 1; i <= n; i++) w[i] = w[i - 1] * 2 % M;\n\tdp[0][0] = 1;\n\tfor ( i = 0; i < n; i++) {\n\t\tfor ( j = 0; j <= n; j++) for ( d = 0; d <= k + 1; d++) dp2[j][d] = 0;\n\t\tfor ( j = 0; j <= n; j++) for ( d = 0; d <= k + 1; d++) if (dp[j][d] > 0) {\n\t\t\tif (j > i) {\n\t\t\t\tint e = i + 1;\n\t\t\t\tint z = dp[j][d] * 1ll * w[e] % M;\n\t\t\t\tdp2[j][d]=(dp2[j][d], z);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint z = (w[i - j + 1] - 1 + M);\n\t\t\tif (z >= M) z -= M;\n\t\t\tz = z * 1ll * w[j] % M;\n\t\t\tz = z * 1ll * dp[j][d] % M;\n\t\t\tdp2[i + 1][min(d + 1, k + 1)]=add(dp2[i + 1][min(d + 1, k + 1)], z);\n\t\t\tz = dp[j][d] * 1ll * w[j] % M;\n\t\t\tdp2[j][d]=add(dp2[j][d], z);\n\t\t}\n\t\tfor ( j = 0; j <= n; j++) for (d = 0; d <= k + 1; d++) dp[j][d] = dp2[j][d];\n\t}\n\tint ans = 0;\n\tfor ( i = 0; i <= n; i++) ans=add(ans, dp[i][k]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n\n}\n","prob_desc_sample_outputs":"[\"23\", \"32\", \"1\", \"2\"]","lang_cluster":"C","code_uid":"6a458d4b764e5389439777dd06c2a41a","prob_desc_notes":null,"prob_desc_output_spec":"In a single line, print the answer to the problem modulo 1000000007 (109\u2009+\u20097).","prob_desc_output_to":"standard output","prob_desc_description":"Let's assume that set S consists of m distinct intervals [l1,\u2009r1], [l2,\u2009r2], ..., [lm,\u2009rm] (1\u2009\u2264\u2009li\u2009\u2264\u2009ri\u2009\u2264\u2009n; li,\u2009ri are integers).Let's assume that f(S) is the maximum number of intervals that you can choose from the set S, such that every two of them do not intersect. We assume that two intervals, [l1,\u2009r1] and [l2,\u2009r2], intersect if there is an integer x, which meets two inequalities: l1\u2009\u2264\u2009x\u2009\u2264\u2009r1 and l2\u2009\u2264\u2009x\u2009\u2264\u2009r2.Sereja wonders, how many sets S are there, such that f(S)\u2009=\u2009k? Count this number modulo 1000000007 (109\u2009+\u20097).","hidden_unit_tests":"[{\"input\": \"3 1\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"2 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"20 10\\r\\n\", \"output\": [\"169364726\"]}, {\"input\": \"50 49\\r\\n\", \"output\": [\"560578792\"]}, {\"input\": \"50 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 9\\r\\n\", \"output\": [\"391716853\"]}, {\"input\": \"100 10\\r\\n\", \"output\": [\"209177805\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"281603733\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"599757793\"]}, {\"input\": \"100 50\\r\\n\", \"output\": [\"820383341\"]}, {\"input\": \"99 60\\r\\n\", \"output\": [\"97903617\"]}, {\"input\": \"95 93\\r\\n\", \"output\": [\"483334618\"]}, {\"input\": \"400 399\\r\\n\", \"output\": [\"760864214\"]}, {\"input\": \"500 499\\r\\n\", \"output\": [\"582854781\"]}, {\"input\": \"500 500\\r\\n\", \"output\": [\"731931766\"]}, {\"input\": \"400 500\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"500 20\\r\\n\", \"output\": [\"211189748\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"14720\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"1024\"]}, {\"input\": \"4 1\\r\\n\", \"output\": [\"127\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"64\"]}]","length":57,"num_hidden_unit_tests":28}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 3\\nxyabd\", \"7 4\\nproblem\", \"2 2\\nab\", \"12 1\\nabaabbaaabbb\"]","prob_desc_input_spec":"The first line of input contains two integers\u00a0\u2014 $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 50$$$)\u00a0\u2013 the number of available stages and the number of stages to use in the rocket. The second line contains string $$$s$$$, which consists of exactly $$$n$$$ lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"56b13d313afef9dc6c6ba2758b5ea313","prob_desc_created_at":"1532617500","source_code":"#include <stdlib.h>\n#include<string.h>\n#include<stdio.h>\nint main (void)\n{\n    \n    int i, j, a, b;\n\tscanf(\"%d %d\",&a,&b);\n\tchar string[a], temp;\n    scanf(\"%s\",string);\n\n    for (i=0; i<a-1; i++)\n    {\n        for (j=i+1; j<a; j++)\n        {\n            if (string[i] > string[j])\n            {\n                temp = string[i];\n                string[i] = string[j];\n                string[j] = temp;\n            }\n        }\n    }\n    \n    int ar[a];\n    for(i=0;i<a;i++)\n    \tar[i]=string[i]-'a'+1;\n    \n    int sum=ar[0];\n    int flag = 1;\n    int temp2 = ar[0];\n    for(i=1; i<a;i++){\n    \tif(flag==b)\n\t\t\tbreak;\n    \tif(ar[i]-temp2>1){\n    \t\tsum+=ar[i];\n\t\t\ttemp2=ar[i];\n\t\t\tflag++;\n\t\t}\n\t}\n\t\n\tif(flag!=b)\n\t\tprintf(\"-1\");\n\telse\n\t\tprintf(\"%d\",sum);\n    \n    return 0;\n}\n","prob_desc_sample_outputs":"[\"29\", \"34\", \"-1\", \"1\"]","lang_cluster":"C","code_uid":"1f87c6b0a560cfe014b40ec50f926782","prob_desc_notes":"NoteIn the first example, the following rockets satisfy the condition: \"adx\" (weight is $$$1+4+24=29$$$); \"ady\" (weight is $$$1+4+25=30$$$); \"bdx\" (weight is $$$2+4+24=30$$$); \"bdy\" (weight is $$$2+4+25=31$$$).Rocket \"adx\" has the minimal weight, so the answer is $$$29$$$.In the second example, target rocket is \"belo\". Its weight is $$$2+5+12+15=34$$$.In the third example, $$$n=k=2$$$, so the rocket must have both stages: 'a' and 'b'. This rocket doesn't satisfy the condition, because these letters are adjacent in the alphabet. Answer is -1.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the minimal total weight of the rocket or -1, if it is impossible to build the rocket at all.","prob_desc_output_to":"standard output","prob_desc_description":"Natasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string\u00a0\u2014 concatenation of letters, which correspond to the stages.There are $$$n$$$ stages available. The rocket must contain exactly $$$k$$$ of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet (skipping one letter in between, or even more). For example, after letter 'c' can't go letters 'a', 'b', 'c' and 'd', but can go letters 'e', 'f', ..., 'z'.For the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage 'a 'weighs one ton,' b 'weighs two tons, and' z'\u00a0\u2014 $$$26$$$ tons.Build the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.","hidden_unit_tests":"[{\"input\": \"5 3\\r\\nxyabd\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"7 4\\r\\nproblem\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"2 2\\r\\nab\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"12 1\\r\\nabaabbaaabbb\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 13\\r\\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"169\"]}, {\"input\": \"50 14\\r\\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 1\\r\\na\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 1\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 2\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"13 13\\r\\nuwgmkyqeiaocs\\r\\n\", \"output\": [\"169\"]}, {\"input\": \"13 13\\r\\nhzdxpbfvrltnj\\r\\n\", \"output\": [\"182\"]}, {\"input\": \"1 1\\r\\nn\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"10 8\\r\\nsmzeblyjqw\\r\\n\", \"output\": [\"113\"]}, {\"input\": \"20 20\\r\\ntzmvhskkyugkuuxpvtbh\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"30 15\\r\\nwjzolzzkfulwgioksfxmcxmnnjtoav\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"40 30\\r\\nxumfrflllrrgswehqtsskefixhcxjrxbjmrpsshv\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"50 31\\r\\nahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiabpz\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"10 7\\r\\niuiukrxcml\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"38 2\\r\\nvjzarfykmrsrvwbwfwldsulhxtykmjbnwmdufa\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"12 6\\r\\nfwseyrarkwcd\\r\\n\", \"output\": [\"61\"]}, {\"input\": \"2 2\\r\\nac\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 1\\r\\nc\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 2\\r\\nad\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 1\\r\\nac\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 3\\r\\nadjz\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"3 3\\r\\naoz\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"3 1\\r\\nzzz\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"2 1\\r\\nxz\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"5 1\\r\\naaddd\\r\\n\", \"output\": [\"1\"]}]","length":48,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\\n1\", \"1\\n2\", \"2\\n3 5\"]","prob_desc_input_spec":"The first line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of Dima's friends. Dima himself isn't considered to be his own friend. The second line contains n positive integers, not exceeding 5, representing, how many fingers the Dima's friends will show.  The numbers in the lines are separated by a single space.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"ff6b3fd358c758324c19a26283ab96a4","prob_desc_created_at":"1360769400","source_code":"#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int n, m, ans, ans2, max, dima, total;\n    ans2 = 0;\n    ans = 0;\n    scanf(\"%d\", &n);\n    total = n+1;\n    while(n--){\n        scanf(\"%d\", &m);\n        ans = ans+m;\n    }\n    max = ans + 5;\n    dima = total + 1;\n    while(1){\n        if(dima>ans && dima<=max){\n            ans2++;\n        }\n        dima +=total;\n        if(dima>max) break;\n    }\n    ans2 = 5 - ans2;\n    printf(\"%d\\n\", ans2);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"2\", \"3\"]","lang_cluster":"C","code_uid":"c9f10c297ded1d7c1ce1da9e16f20c8e","prob_desc_notes":"NoteIn the first sample Dima can show 1, 3 or 5 fingers. If Dima shows 3 fingers, then the counting-out will go like that: Dima, his friend, Dima, his friend.In the second sample Dima can show 2 or 4 fingers.","prob_desc_output_spec":"In a single line print the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"Dima and his friends have been playing hide and seek at Dima's place all night. As a result, Dima's place got messy. In the morning they decided that they need to clean the place.To decide who exactly would clean the apartment, the friends want to play a counting-out game. First, all the guys stand in a circle, and then each of them shows some number of fingers on one hand (one to five), and then the boys count in a circle, starting from Dima, the number of people, respective to the total number of fingers shown. The person on who the countdown stops will clean the apartment.For example, if Dima and one of his friends played hide and seek, and 7 fingers were shown during the counting-out, then Dima would clean the place. If there were 2 or say, 8 fingers shown, then his friend would clean the place.Dima knows how many fingers each of his friends will show during the counting-out. Now he is interested in the number of ways to show some number of fingers on one hand (one to five), so that he did not have to clean the place. Help Dima.","hidden_unit_tests":"[{\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n3 5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1\\r\\n5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5\\r\\n4 4 3 5 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"6\\r\\n2 3 2 2 1 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"8\\r\\n2 2 5 3 4 3 3 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"7\\r\\n4 1 3 2 2 4 5\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3\\r\\n3 5 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"95\\r\\n4 2 3 4 4 5 2 2 4 4 3 5 3 3 3 5 4 2 5 4 2 1 1 3 4 2 1 3 5 4 2 1 1 5 1 1 2 2 4 4 5 4 5 5 2 1 2 2 2 4 5 5 2 4 3 4 4 3 5 2 4 1 5 4 5 1 3 2 4 2 2 1 5 3 1 5 3 4 3 3 2 1 2 2 1 3 1 5 2 3 1 1 2 5 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"31\\r\\n3 2 3 3 3 3 4 4 1 5 5 4 2 4 3 2 2 1 4 4 1 2 3 1 1 5 5 3 4 4 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"42\\r\\n3 1 2 2 5 1 2 2 4 5 4 5 2 5 4 5 4 4 1 4 3 3 4 4 4 4 3 2 1 3 4 5 5 2 1 2 1 5 5 2 4 4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"25\\r\\n4 5 5 5 3 1 1 4 4 4 3 5 4 4 1 4 4 1 2 4 2 5 4 5 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"73\\r\\n3 4 3 4 5 1 3 4 2 1 4 2 2 3 5 3 1 4 2 3 2 1 4 5 3 5 2 2 4 3 2 2 5 3 2 3 5 1 3 1 1 4 5 2 4 2 5 1 4 3 1 3 1 4 2 3 3 3 3 5 5 2 5 2 5 4 3 1 1 5 5 2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"46\\r\\n1 4 4 5 4 5 2 3 5 5 3 2 5 4 1 3 2 2 1 4 3 1 5 5 2 2 2 2 4 4 1 1 4 3 4 3 1 4 2 2 4 2 3 2 5 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"23\\r\\n5 2 1 1 4 2 5 5 3 5 4 5 5 1 1 5 2 4 5 3 4 4 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"6\\r\\n4 2 3 1 3 5\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"15\\r\\n5 5 5 3 5 4 1 3 3 4 3 4 1 4 4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"93\\r\\n1 3 1 4 3 3 5 3 1 4 5 4 3 2 2 4 3 1 4 1 2 3 3 3 2 5 1 3 1 4 5 1 1 1 4 2 1 2 3 1 1 1 5 1 5 5 1 2 5 4 3 2 2 4 4 2 5 4 5 5 3 1 3 1 2 1 3 1 1 2 3 4 4 5 5 3 2 1 3 3 5 1 3 5 4 4 1 3 3 4 2 3 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"96\\r\\n1 5 1 3 2 1 2 2 2 2 3 4 1 1 5 4 4 1 2 3 5 1 4 4 4 1 3 3 1 4 5 4 1 3 5 3 4 4 3 2 1 1 4 4 5 1 1 2 5 1 2 3 1 4 1 2 2 2 3 2 3 3 2 5 2 2 3 3 3 3 2 1 2 4 5 5 1 5 3 2 1 4 3 5 5 5 3 3 5 3 4 3 4 2 1 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"49\\r\\n1 4 4 3 5 2 2 1 5 1 2 1 2 5 1 4 1 4 5 2 4 5 3 5 2 4 2 1 3 4 2 1 4 2 1 1 3 3 2 3 5 4 3 4 2 4 1 4 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"73\\r\\n4 1 3 3 3 1 5 2 1 4 1 1 3 5 1 1 4 5 2 1 5 4 1 5 3 1 5 2 4 5 1 4 3 3 5 2 2 3 3 2 5 1 4 5 2 3 1 4 4 3 5 2 3 5 1 4 3 5 1 2 4 1 3 3 5 4 2 4 2 4 1 2 5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"41\\r\\n5 3 5 4 2 5 4 3 1 1 1 5 4 3 4 3 5 4 2 5 4 1 1 3 2 4 5 3 5 1 5 5 1 1 1 4 4 1 2 4 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n3 3 1 4 2 4 4 3 1 5 1 1 4 4 3 4 4 3 5 4 5 2 4 3 4 1 2 4 5 4 2 1 5 4 1 1 4 3 2 4 1 2 1 4 4 5 5 4 4 5 3 2 5 1 4 2 2 1 1 2 5 2 5 1 5 3 1 4 3 2 4 3 2 2 4 5 5 1 2 3 1 4 1 2 2 2 5 5 2 3 2 4 3 1 1 2 1 2 1 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n2 1 1 3 5 4 4 2 3 4 3 4 5 4 5 4 2 4 5 3 4 5 4 1 1 4 4 1 1 2 5 4 2 4 5 3 2 5 4 3 4 5 1 3 4 2 5 4 5 4 5 2 4 1 2 5 3 1 4 4 5 3 4 3 1 2 5 4 2 5 4 1 5 3 5 4 1 2 5 3 1 1 1 1 5 3 4 3 5 1 1 5 5 1 1 2 2 1 5 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n4 4 3 3 2 5 4 4 2 1 4 4 4 5 4 1 2 1 5 2 4 3 4 1 4 1 2 5 1 4 5 4 2 1 2 5 3 4 5 5 2 1 2 2 2 2 2 3 2 5 1 2 2 3 2 5 5 1 3 4 5 2 1 3 4 2 2 4 4 3 3 3 2 3 2 1 5 5 5 2 1 4 2 3 5 1 4 4 2 3 2 5 5 4 3 5 1 3 5 5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n4 4 2 5 4 2 2 3 4 4 3 2 3 3 1 3 4 3 3 4 1 3 1 4 5 3 4 3 1 1 1 3 3 2 3 4 3 4 2 2 1 5 1 4 5 1 1 1 3 3 1 1 3 2 5 4 2 5 2 4 5 4 4 1 1 2 1 1 4 5 1 1 5 3 3 2 5 5 5 1 4 1 4 1 1 3 2 3 4 4 2 5 5 2 5 1 1 3 5 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100\\r\\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\r\\n\", \"output\": [\"5\"]}]","length":27,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"89\", \"00\", \"73\"]","prob_desc_input_spec":"The only line of input contains exactly two digits representing number n (0\u2009\u2264\u2009n\u2009\u2264\u200999). Note that n may have a leading zero.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"76c8bfa6789db8364a8ece0574cd31f5","prob_desc_created_at":"1418488200","source_code":"#include<stdio.h>\nint cnt[2];\nint main()\n{\n    char ch[2];\n    cnt[0]++;\n    cnt[1]++;\n    scanf(\"%s\",&ch);\n    int i;\n    for(i=0; i<2; i++)\n    {\n        if(ch[i]=='0'||ch[i]=='2'||ch[i]=='6'||ch[i]=='9')\n        {\n            cnt[i]++;\n        }\n        else if(ch[i]=='1')\n        {\n            cnt[i]+=6;\n        }\n        else if(ch[i]=='2'||ch[i]=='4'||ch[i]=='3')\n        {\n            cnt[i]+=2;\n        }\n        else if(ch[i]=='5')\n        {\n            cnt[i]+=3;\n        }\n        else if(ch[i]=='7')\n        {\n            cnt[i]+=4;\n        }\n    }\n    printf(\"%d\",cnt[0]*cnt[1]);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"2\", \"4\", \"15\"]","lang_cluster":"C","code_uid":"faeecc1693661fe859502cbcefeba206","prob_desc_notes":"NoteIn the first sample the counter may be supposed to show 88 or 89.In the second sample the good integers are 00, 08, 80 and 88.In the third sample the good integers are 03,\u200908,\u200909,\u200933,\u200938,\u200939,\u200973,\u200978,\u200979,\u200983,\u200988,\u200989,\u200993,\u200998,\u200999.","prob_desc_output_spec":"In the only line of the output print the number of good integers.","prob_desc_output_to":"standard output","prob_desc_description":"Malek lives in an apartment block with 100 floors numbered from 0 to 99. The apartment has an elevator with a digital counter showing the floor that the elevator is currently on. The elevator shows each digit of a number with 7 light sticks by turning them on or off. The picture below shows how the elevator shows each digit.One day when Malek wanted to go from floor 88 to floor 0 using the elevator he noticed that the counter shows number 89 instead of 88. Then when the elevator started moving the number on the counter changed to 87. After a little thinking Malek came to the conclusion that there is only one explanation for this: One of the sticks of the counter was broken. Later that day Malek was thinking about the broken stick and suddenly he came up with the following problem.Suppose the digital counter is showing number n. Malek calls an integer x (0\u2009\u2264\u2009x\u2009\u2264\u200999) good if it's possible that the digital counter was supposed to show x but because of some(possibly none) broken sticks it's showing n instead. Malek wants to know number of good integers for a specific n. So you must write a program that calculates this number. Please note that the counter always shows two digits.","hidden_unit_tests":"[{\"input\": \"89\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"00\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"73\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"08\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"26\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"49\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"88\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"04\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"60\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"22\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"33\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"44\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"55\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"66\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"77\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"88\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"80\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"78\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"67\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"89\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"46\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"90\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"92\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"35\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"05\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"57\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"4\"]}]","length":35,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"11\", \"01\", \"1\"]","prob_desc_input_spec":"The first line of input contains a binary number x of lenght n, (1\u2009\u2264\u2009n\u2009\u2264\u2009100). This number may contain leading zeros.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"89b51a31e00424edd1385f2120028b9d","prob_desc_created_at":"1371992400","source_code":"#include <stdio.h>\n\nlong int pow2[220];\nconst long int mod = 1000000007L;\nchar s[110];\n\nint main() {\n\tlong int ans;\n\tint i, n;\n\tpow2[0] = 1L;\n\tfor(i = 1; i <= 220; i++) pow2[i] = (pow2[i-1]<<1)%mod;\n\tscanf(\"%s\", s);\n\tn = strlen(s);\n\tif(s[n-1] == '0') ans = 0;\n\telse ans = 1;\n\tfor(i = n-2; i >= 0; i--) {\n\t\tans = (ans<<1)%mod;\n\t\t\/\/printf(\"... %ld\\n\", ans);\n\t\tif(s[i] == '1') ans = (ans+pow2[(n-i-1)*2])%mod;\n\t}\n\tprintf(\"%ld\\n\", ans);\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"6\", \"2\", \"1\"]","lang_cluster":"C","code_uid":"44088d5369f5119530dac5c80c87127b","prob_desc_notes":null,"prob_desc_output_spec":"Print the complexity of the given dance assignent modulo 1000000007 (109\u2009+\u20097).","prob_desc_output_to":"standard output","prob_desc_description":"As a tradition, every year before IOI all the members of Natalia Fan Club are invited to Malek Dance Club to have a fun night together. Malek Dance Club has 2n members and coincidentally Natalia Fan Club also has 2n members. Each member of MDC is assigned a unique id i from 0 to 2n\u2009-\u20091. The same holds for each member of NFC.One of the parts of this tradition is one by one dance, where each member of MDC dances with a member of NFC. A dance pair is a pair of numbers (a,\u2009b) such that member a from MDC dances with member b from NFC.The complexity of a pairs' assignment is the number of pairs of dancing pairs (a,\u2009b) and (c,\u2009d) such that a\u2009&lt;\u2009c and b\u2009&gt;\u2009d.You are given a binary number of length n named x. We know that member i from MDC dances with member  from NFC. Your task is to calculate the complexity of this assignment modulo 1000000007 (109\u2009+\u20097).Expression  denotes applying \u00abXOR\u00bb to numbers x and y. This operation exists in all modern programming languages, for example, in C++ and Java it denotes as \u00ab^\u00bb, in Pascal \u2014 \u00abxor\u00bb.","hidden_unit_tests":"[{\"input\": \"11\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"01\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1111111111111111111111111111111111\\r\\n\", \"output\": [\"68817500\"]}, {\"input\": \"0000000000000000000000000000000000000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"11111111111111111111111111111111111000000000000000000000000000\\r\\n\", \"output\": [\"774857564\"]}, {\"input\": \"00000000000000000000111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"738177230\"]}, {\"input\": \"10100101000010011110101011011110001\\r\\n\", \"output\": [\"374541417\"]}, {\"input\": \"01010100001010111111001111001000101010010101000111011011111000\\r\\n\", \"output\": [\"629793317\"]}, {\"input\": \"10001010011010010101101010111001001001011110110101011000010100110\\r\\n\", \"output\": [\"276731670\"]}, {\"input\": \"00001100100101000111111100110010001101001000011110110000\\r\\n\", \"output\": [\"526794740\"]}, {\"input\": \"01100010011001101100001000000101001000101101000110011100101101111101010100000011101011100\\r\\n\", \"output\": [\"67141264\"]}, {\"input\": \"100111100\\r\\n\", \"output\": [\"80896\"]}, {\"input\": \"11110111000110101111100100111110000011\\r\\n\", \"output\": [\"448062885\"]}, {\"input\": \"1000101010000101111110100110011110000011000110001111001001000110110011110110111110100\\r\\n\", \"output\": [\"532893377\"]}, {\"input\": \"0110011110111000001101001010101000011011101001001101000000111101010101111101010011101001111010111001\\r\\n\", \"output\": [\"416862683\"]}, {\"input\": \"0111001111110010000001111100110100111110001100100001111111110000010010111010010010010111000110001111\\r\\n\", \"output\": [\"777947548\"]}, {\"input\": \"1000000001101010101011111001001101011100011000010000100101001111001000110100100001110001100001000001\\r\\n\", \"output\": [\"759144998\"]}, {\"input\": \"1101010110001010100110011011101011010100010001110100010011011100011011000101110001010101110001101011\\r\\n\", \"output\": [\"383088952\"]}, {\"input\": \"1000001010111011110011111110011001011111011001110011100101111110100110111001100001110000011101011011\\r\\n\", \"output\": [\"928069440\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"01\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"00\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"261536897\"]}, {\"input\": \"10110\\r\\n\", \"output\": [\"352\"]}, {\"input\": \"1100110010110011001011001100101100110010110011001111001100101100110010110011001011001100101100100010\\r\\n\", \"output\": [\"499547155\"]}]","length":23,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 -1\", \"1 3 1\", \"3 3 -1\"]","prob_desc_input_spec":"The only line contains three integers n, m and k (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u20091018, k is either 1 or -1).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"6b9eff690fae14725885cbc891ff7243","prob_desc_created_at":"1511099700","source_code":"#include <stdio.h>\n\n\/* http:\/\/codeforces.com\/contest\/894\/submission\/34556698 (Dukkha) *\/\n\n#define MD\t1000000007\n\nint power(int a, int b) {\n\tint p;\n\n\tif (b == 0)\n\t\treturn 1;\n\tp = power(a, b \/ 2);\n\tp = (long long) p * p % MD;\n\tif (b % 2 == 1)\n\t\tp = (long long) p * a % MD;\n\treturn p;\n}\n\nint main() {\n\tlong long n, m, k;\n\n\tscanf(\"%lld%lld%lld\", &n, &m, &k);\n\tprintf(\"%d\\n\", k == -1 && n % 2 != m % 2 ? 0 : power(2, (long long) ((n - 1) % (MD - 1)) * ((m - 1) % (MD - 1)) % (MD - 1)));\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"1\", \"1\", \"16\"]","lang_cluster":"C","code_uid":"4a88f31deda1f09b51bc9826e8c7fa16","prob_desc_notes":"NoteIn the first example the only way is to put -1 into the only block.In the second example the only way is to put 1 into every block.","prob_desc_output_spec":"Print a single number denoting the answer modulo 1000000007.","prob_desc_output_to":"standard output","prob_desc_description":"Ralph has a magic field which is divided into n\u2009\u00d7\u2009m blocks. That is to say, there are n rows and m columns on the field. Ralph can put an integer in each block. However, the magic field doesn't always work properly. It works only if the product of integers in each row and each column equals to k, where k is either 1 or -1.Now Ralph wants you to figure out the number of ways to put numbers in each block in such a way that the magic field works properly. Two ways are considered different if and only if there exists at least one block where the numbers in the first way and in the second way are different. You are asked to output the answer modulo 1000000007\u2009=\u2009109\u2009+\u20097.Note that there is no range of the numbers to put in the blocks, but we can prove that the answer is not infinity.","hidden_unit_tests":"[{\"input\": \"1 1 -1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 3 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 3 -1\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"2 7 1\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 4 -1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"173 69 -1\\r\\n\", \"output\": [\"814271739\"]}, {\"input\": \"110 142 1\\r\\n\", \"output\": [\"537040244\"]}, {\"input\": \"162 162 -1\\r\\n\", \"output\": [\"394042552\"]}, {\"input\": \"49 153 -1\\r\\n\", \"output\": [\"412796600\"]}, {\"input\": \"94 182 1\\r\\n\", \"output\": [\"33590706\"]}, {\"input\": \"106666666 233333333 1\\r\\n\", \"output\": [\"121241754\"]}, {\"input\": \"2 2 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"146 34 -1\\r\\n\", \"output\": [\"742752757\"]}, {\"input\": \"94 86 -1\\r\\n\", \"output\": [\"476913727\"]}, {\"input\": \"2529756051797760 2682355969139391 -1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3126690179932000 2474382898739836 -1\\r\\n\", \"output\": [\"917305624\"]}, {\"input\": \"3551499873841921 2512677762780671 -1\\r\\n\", \"output\": [\"350058339\"]}, {\"input\": \"3613456196418270 2872267429531501 1\\r\\n\", \"output\": [\"223552863\"]}, {\"input\": \"2886684369091916 3509787933422130 1\\r\\n\", \"output\": [\"341476979\"]}, {\"input\": \"3536041043537343 2416093514489183 1\\r\\n\", \"output\": [\"394974516\"]}, {\"input\": \"2273134852621270 2798005122439669 1\\r\\n\", \"output\": [\"901406364\"]}, {\"input\": \"2870150496178092 3171485931753811 -1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999999999999999999 1000000000000000000 1\\r\\n\", \"output\": [\"102810659\"]}, {\"input\": \"987654321987654321 666666666666666666 1\\r\\n\", \"output\": [\"279028602\"]}, {\"input\": \"1 2 -1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1 -1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000000000000000000 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000006 100000000000000000 1\\r\\n\", \"output\": [\"123624987\"]}]","length":25,"num_hidden_unit_tests":29}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\", \"2\"]","prob_desc_input_spec":"The single line of input contains one integer n (0\u2009\u2009\u2264\u2009\u2009n\u2009\u2009\u2264\u2009\u2009109).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"4b51b99d1dea367bf37dc5ead08ca48f","prob_desc_created_at":"1481034900","source_code":"#include <stdio.h>\nint main()\n{\n\n    int n,i;\n    scanf(\"%d\",&n);\n    if(n == 0)\n    {\n        printf(\"1\");\n    }\n    else\n    {\n        i = n%4;\n        switch(i)\n        {\n        case 1 :\n            printf(\"8\");\n            break;\n        case 2 :\n            printf(\"4\");\n            break;\n        case 3 :\n            printf(\"2\");\n            break;\n        case 0 :\n            printf(\"6\");\n            break;\n        }\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"8\", \"4\"]","lang_cluster":"C","code_uid":"81fbc0cb3c6fa3a95d82f3e118ef5759","prob_desc_notes":"NoteIn the first example, last digit of 13781\u2009=\u20091378 is 8.In the second example, last digit of 13782\u2009=\u20091378\u00b71378\u2009=\u20091898884 is 4.","prob_desc_output_spec":"Print single integer\u00a0\u2014 the last digit of 1378n.","prob_desc_output_to":"standard output","prob_desc_description":"There exists an island called Arpa\u2019s land, some beautiful girls live there, as ugly ones do.Mehrdad wants to become minister of Arpa\u2019s land. Arpa has prepared an exam. Exam has only one question, given n, print the last digit of 1378n.   Mehrdad has become quite confused and wants you to help him. Please help, although it's a naive cheat.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1378\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"13781378\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"51202278\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"999999998\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"999999997\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"12193721\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"989898989\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"14\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"16\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"999999996\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"999999995\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"999999994\\r\\n\", \"output\": [\"4\"]}]","length":31,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"10 5\", \"-10 5\"]","prob_desc_input_spec":"The first line contains two integers x,\u2009y (\u2009-\u2009109\u2009\u2264\u2009x,\u2009y\u2009\u2264\u2009109,\u2009x\u2009\u2260\u20090,\u2009y\u2009\u2260\u20090).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"e2f15a9d9593eec2e19be3140a847712","prob_desc_created_at":"1376062200","source_code":"#include <stdio.h>\n\nint main()\n{\n\tint x,y,x1,x2,y1,y2;\n\tscanf(\"%d %d\",&x,&y);\n\tif (x>0){\n\t\tx1=0;\n\t\ty2=0;\n\t\tif (y>0){\n\t\t\tx2=x+y;\n\t\t\ty1=x2;\n\t\t}\n\t\telse if (y<0){\n\t\t\ty1=y-x;\n\t\t\tx2=x-y;\n\t\t}\n\t}\n\telse if (x<0){\n\t\tx2=0;\n\t\ty1=0;\n\t\t\n\t\tif (y>0){\n\t\t\tx1=x-y;\n\t\t\ty2=y-x;\n\t\t}\n\t\telse if (y<0){\n\t\t\tx1=x+y;\n\t\t\ty2=x1;\n\t\t\t\n\t\t}\n\t}\n\tprintf(\"%d %d %d %d\",x1,y1,x2,y2);\n\treturn 0;\n}\n\n","prob_desc_sample_outputs":"[\"0 15 15 0\", \"-15 0 0 15\"]","lang_cluster":"C","code_uid":"1061753fd8fa45c51d8e083564e2cee4","prob_desc_notes":"NoteFigure to the first sample","prob_desc_output_spec":"Print in the single line four integers x1,\u2009y1,\u2009x2,\u2009y2 \u2014 the coordinates of the required points.","prob_desc_output_to":"standard output","prob_desc_description":"Vasily the bear has a favorite rectangle, it has one vertex at point (0,\u20090), and the opposite vertex at point (x,\u2009y). Of course, the sides of Vasya's favorite rectangle are parallel to the coordinate axes. Vasya also loves triangles, if the triangles have one vertex at point B\u2009=\u2009(0,\u20090). That's why today he asks you to find two points A\u2009=\u2009(x1,\u2009y1) and C\u2009=\u2009(x2,\u2009y2), such that the following conditions hold:  the coordinates of points: x1, x2, y1, y2 are integers. Besides, the following inequation holds: x1\u2009&lt;\u2009x2;  the triangle formed by point A, B and C is rectangular and isosceles ( is right);  all points of the favorite rectangle are located inside or on the border of triangle ABC;  the area of triangle ABC is as small as possible. Help the bear, find the required points. It is not so hard to proof that these points are unique.","hidden_unit_tests":"[{\"input\": \"10 5\\r\\n\", \"output\": [\"0 15 15 0\"]}, {\"input\": \"-10 5\\r\\n\", \"output\": [\"-15 0 0 15\"]}, {\"input\": \"20 -10\\r\\n\", \"output\": [\"0 -30 30 0\"]}, {\"input\": \"-10 -1000000000\\r\\n\", \"output\": [\"-1000000010 0 0 -1000000010\"]}, {\"input\": \"-1000000000 -1000000000\\r\\n\", \"output\": [\"-2000000000 0 0 -2000000000\"]}, {\"input\": \"1000000000 1000000000\\r\\n\", \"output\": [\"0 2000000000 2000000000 0\"]}, {\"input\": \"-123131 3123141\\r\\n\", \"output\": [\"-3246272 0 0 3246272\"]}, {\"input\": \"-23423 -243242423\\r\\n\", \"output\": [\"-243265846 0 0 -243265846\"]}, {\"input\": \"123112 4560954\\r\\n\", \"output\": [\"0 4684066 4684066 0\"]}, {\"input\": \"1321 -23131\\r\\n\", \"output\": [\"0 -24452 24452 0\"]}, {\"input\": \"1000000000 999999999\\r\\n\", \"output\": [\"0 1999999999 1999999999 0\"]}, {\"input\": \"54543 432423\\r\\n\", \"output\": [\"0 486966 486966 0\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"0 2 2 0\"]}, {\"input\": \"-1 -1\\r\\n\", \"output\": [\"-2 0 0 -2\"]}, {\"input\": \"-1 1\\r\\n\", \"output\": [\"-2 0 0 2\"]}, {\"input\": \"1 -1\\r\\n\", \"output\": [\"0 -2 2 0\"]}, {\"input\": \"42 -2\\r\\n\", \"output\": [\"0 -44 44 0\"]}, {\"input\": \"2 -435\\r\\n\", \"output\": [\"0 -437 437 0\"]}, {\"input\": \"76 -76\\r\\n\", \"output\": [\"0 -152 152 0\"]}, {\"input\": \"1000000000 1\\r\\n\", \"output\": [\"0 1000000001 1000000001 0\"]}, {\"input\": \"1000000000 -1\\r\\n\", \"output\": [\"0 -1000000001 1000000001 0\"]}, {\"input\": \"-1000000000 1\\r\\n\", \"output\": [\"-1000000001 0 0 1000000001\"]}, {\"input\": \"-1000000000 -1\\r\\n\", \"output\": [\"-1000000001 0 0 -1000000001\"]}, {\"input\": \"1000000000 -999999999\\r\\n\", \"output\": [\"0 -1999999999 1999999999 0\"]}, {\"input\": \"-1000000000 999999999\\r\\n\", \"output\": [\"-1999999999 0 0 1999999999\"]}, {\"input\": \"-1000000000 -999999999\\r\\n\", \"output\": [\"-1999999999 0 0 -1999999999\"]}, {\"input\": \"999999999 1000000000\\r\\n\", \"output\": [\"0 1999999999 1999999999 0\"]}, {\"input\": \"-999999999 1000000000\\r\\n\", \"output\": [\"-1999999999 0 0 1999999999\"]}, {\"input\": \"999999999 -1000000000\\r\\n\", \"output\": [\"0 -1999999999 1999999999 0\"]}, {\"input\": \"-999999999 -1000000000\\r\\n\", \"output\": [\"-1999999999 0 0 -1999999999\"]}]","length":36,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"WWWBWWBW\\nBBBBBBBB\\nWWWBWWBW\\nWWWBWWBW\\nWWWBWWBW\\nWWWBWWBW\\nWWWBWWBW\\nWWWBWWBW\", \"WWWWWWWW\\nBBBBBBBB\\nWWWWWWWW\\nWWWWWWWW\\nWWWWWWWW\\nWWWWWWWW\\nWWWWWWWW\\nWWWWWWWW\"]","prob_desc_input_spec":"The input file contains 8 lines, each of the lines contains 8 characters. The given matrix describes the client's requirements, W character stands for a white square, and B character \u2014 for a square painted black. It is guaranteed that client's requirments can be fulfilled with a sequence of allowed strokes (vertical\/column or horizontal\/row).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"8b6ae2190413b23f47e2958a7d4e7bc0","prob_desc_created_at":"1270136700","source_code":"#include<stdio.h>\nmain()\n{\n    char a[10][10];\n    int i,j,k=0,p=0,h=0,g=0;\n    for(i=0;i<8;i++)\n    gets(a[i]);\n    for(i=0;i<8;i++)\n    {  k=0;h=0;\n        for(j=0;j<8;j++)\n    {if(a[i][j]=='B') k++;\n     if(a[j][i]=='B') h++;}\n     if(k==8) p++;\n      if(h==8) g++;}\n    if(p==8 )\n     printf(\"%d\",p);\n     else \n     printf(\"%d\",p+g);\n\n\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"1\"]","lang_cluster":"C","code_uid":"2038eb03ee44f6331bacaa132e6ab222","prob_desc_notes":null,"prob_desc_output_spec":"Output the only number \u2014 the minimum amount of rows and columns that Kalevitch has to paint on the white chessboard to meet the client's requirements.","prob_desc_output_to":"standard output","prob_desc_description":"A famous Berland's painter Kalevitch likes to shock the public. One of his last obsessions is chess. For more than a thousand years people have been playing this old game on uninteresting, monotonous boards. Kalevitch decided to put an end to this tradition and to introduce a new attitude to chessboards.As before, the chessboard is a square-checkered board with the squares arranged in a 8\u2009\u00d7\u20098 grid, each square is painted black or white. Kalevitch suggests that chessboards should be painted in the following manner: there should be chosen a horizontal or a vertical line of 8 squares (i.e. a row or a column), and painted black. Initially the whole chessboard is white, and it can be painted in the above described way one or more times. It is allowed to paint a square many times, but after the first time it does not change its colour any more and remains black. Kalevitch paints chessboards neatly, and it is impossible to judge by an individual square if it was painted with a vertical or a horizontal stroke.Kalevitch hopes that such chessboards will gain popularity, and he will be commissioned to paint chessboards, which will help him ensure a comfortable old age. The clients will inform him what chessboard they want to have, and the painter will paint a white chessboard meeting the client's requirements.It goes without saying that in such business one should economize on everything \u2014 for each commission he wants to know the minimum amount of strokes that he has to paint to fulfill the client's needs. You are asked to help Kalevitch with this task.","hidden_unit_tests":"[{\"input\": \"WWWBWWBW\\r\\nBBBBBBBB\\r\\nWWWBWWBW\\r\\nWWWBWWBW\\r\\nWWWBWWBW\\r\\nWWWBWWBW\\r\\nWWWBWWBW\\r\\nWWWBWWBW\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"WWWWWWWW\\r\\nBBBBBBBB\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"WWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBW\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBWB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"BBBBBBBB\\r\\nWBBBWBBW\\r\\nBBBBBBBB\\r\\nWBBBWBBW\\r\\nWBBBWBBW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBWBBW\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"BBBBBBBB\\r\\nWBBWWWBB\\r\\nBBBBBBBB\\r\\nWBBWWWBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBWWWBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"BBBBBWWB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBWWB\\r\\nBBBBBWWB\\r\\nBBBBBWWB\\r\\nBBBBBWWB\\r\\nBBBBBWWB\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"WWWWBBBB\\r\\nWWWWBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWWWWBBBB\\r\\nWWWWBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"BBBBBBBB\\r\\nWBWWBBBW\\r\\nBBBBBBBB\\r\\nWBWWBBBW\\r\\nWBWWBBBW\\r\\nWBWWBBBW\\r\\nWBWWBBBW\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"WBWWBBBW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBWWBBBW\\r\\nWBWWBBBW\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"BBWWBBBW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBWWBBBW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"WWBWBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWWBWBBBB\\r\\nBBBBBBBB\\r\\nWWBWBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWWBWBBBB\\r\\nWWBWBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWWBWBBBB\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"WBBWBBBW\\r\\nWBBWBBBW\\r\\nWBBWBBBW\\r\\nWBBWBBBW\\r\\nWBBWBBBW\\r\\nBBBBBBBB\\r\\nWBBWBBBW\\r\\nWBBWBBBW\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"BBBWBBBW\\r\\nBBBWBBBW\\r\\nBBBWBBBW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBWBBBW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBWBBBB\\r\\nBBBWBBBB\\r\\nBBBWBBBB\\r\\nBBBBBBBB\\r\\nBBBWBBBB\\r\\nBBBWBBBB\\r\\nBBBWBBBB\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"BBBBBBBB\\r\\nWWWBBBBB\\r\\nWWWBBBBB\\r\\nBBBBBBBB\\r\\nWWWBBBBB\\r\\nWWWBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"WBBBBBWB\\r\\nBBBBBBBB\\r\\nWBBBBBWB\\r\\nWBBBBBWB\\r\\nWBBBBBWB\\r\\nWBBBBBWB\\r\\nWBBBBBWB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"WBBBWWBW\\r\\nWBBBWWBW\\r\\nBBBBBBBB\\r\\nWBBBWWBW\\r\\nBBBBBBBB\\r\\nWBBBWWBW\\r\\nWBBBWWBW\\r\\nWBBBWWBW\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"WBBBBWBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBBWBB\\r\\nWBBBBWBB\\r\\nBBBBBBBB\\r\\nWBBBBWBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBWBBW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBWBBW\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"BBBBBBBB\\r\\nBWBBBBBW\\r\\nBWBBBBBW\\r\\nBBBBBBBB\\r\\nBWBBBBBW\\r\\nBWBBBBBW\\r\\nBBBBBBBB\\r\\nBWBBBBBW\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBWWWW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWBBBWWWW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"BWBBBWWB\\r\\nBWBBBWWB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBBWWB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBWBWB\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"BWBBBBWW\\r\\nBWBBBBWW\\r\\nBWBBBBWW\\r\\nBWBBBBWW\\r\\nBBBBBBBB\\r\\nBWBBBBWW\\r\\nBWBBBBWW\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"WWBBWWBB\\r\\nBBBBBBBB\\r\\nWWBBWWBB\\r\\nWWBBWWBB\\r\\nWWBBWWBB\\r\\nBBBBBBBB\\r\\nWWBBWWBB\\r\\nWWBBWWBB\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"BWBBWWWW\\r\\nBWBBWWWW\\r\\nBWBBWWWW\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBWBBWWWW\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"7\"]}]","length":22,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3 5 6 1\\n1 2 3\", \"4 40 50 10\\n10 20 30 25\", \"5 25 35 10\\n10 10 20 10 20\"]","prob_desc_input_spec":"The first line contains four integers n, l, r, x (1\u2009\u2264\u2009n\u2009\u2264\u200915, 1\u2009\u2264\u2009l\u2009\u2264\u2009r\u2009\u2264\u2009109, 1\u2009\u2264\u2009x\u2009\u2264\u2009106) \u2014 the number of problems you have, the minimum and maximum value of total difficulty of the problemset and the minimum difference in difficulty between the hardest problem in the pack and the easiest one, respectively. The second line contains n integers c1,\u2009c2,\u2009...,\u2009cn (1\u2009\u2264\u2009ci\u2009\u2264\u2009106) \u2014 the difficulty of each problem.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"0d43104a0de924cdcf8e4aced5aa825d","prob_desc_created_at":"1433435400","source_code":"#include <stdio.h>\n\nint main()\n{\n    char n,i;\n    long l,r,x,j;\n    long min,max,sum,count=0;\n    char s;\n    scanf(\"%d%ld%ld%ld\",&n,&l,&r,&x);\n    long c[n];\n    for(i=0;i<n;i++)\n        scanf(\"%ld\",c+i);\n    long a=1L<<n;\n    for(j=1;j<a;j++){\n        min=1000000;\n        max=1;\n        sum=0;\n        s=0;\n        for(i=0;i<n;i++)\n            if(j&(1L<<i)){\n                if(c[i]<min)min=c[i];\n                if(c[i]>max)max=c[i];\n                sum+=c[i];\n                s++;\n            }\n        if(s>1 && sum>=l && sum<=r && (max-min)>=x)\n            count++;\n    }\n    printf(\"%ld\\n\",count);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"2\", \"2\", \"6\"]","lang_cluster":"C","code_uid":"ec7273655b380aae84c82dc54a11d90a","prob_desc_notes":"NoteIn the first example two sets are suitable, one consisting of the second and third problem, another one consisting of all three problems.In the second example, two sets of problems are suitable \u2014 the set of problems with difficulties 10 and 30 as well as the set of problems with difficulties 20 and 30.In the third example any set consisting of one problem of difficulty 10 and one problem of difficulty 20 is suitable.","prob_desc_output_spec":"Print the number of ways to choose a suitable problemset for the contest. ","prob_desc_output_to":"standard output","prob_desc_description":"You have n problems. You have estimated the difficulty of the i-th one as integer ci. Now you want to prepare a problemset for a contest, using some of the problems you've made.A problemset for the contest must consist of at least two problems. You think that the total difficulty of the problems of the contest must be at least l and at most r. Also, you think that the difference between difficulties of the easiest and the hardest of the chosen problems must be at least x.Find the number of ways to choose a problemset for the contest.","hidden_unit_tests":"[{\"input\": \"3 5 6 1\\r\\n1 2 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 40 50 10\\r\\n10 20 30 25\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5 25 35 10\\r\\n10 10 20 10 20\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"4 15 60 10\\r\\n10 20 30 25\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 10 20 1\\r\\n15\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 626451 11471247 246428\\r\\n369649 684428 303821 287098 422756 301599 720377 177567 515216 750602\\r\\n\", \"output\": [\"914\"]}, {\"input\": \"15 1415849 15540979 356865\\r\\n8352 960238 276753 259695 712845 945369 60023 920446 181269 392011 318488 857649 30681 740872 115749\\r\\n\", \"output\": [\"31485\"]}, {\"input\": \"7 1000 2000 1\\r\\n10 20 30 40 50 60 70\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 10 20 1\\r\\n4 6 4 6\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"4 10 20 1\\r\\n5 15 13 7\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 10 20 5\\r\\n5 10\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5 1098816 3969849 167639\\r\\n85627 615007 794045 530104 7091\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"13 700147 8713522 390093\\r\\n996812 94040 954140 545670 369698 423872 365802 784830 700267 960664 949252 84637 257447\\r\\n\", \"output\": [\"8026\"]}, {\"input\": \"15 4531977 20754263 137419\\r\\n637830 85299 755530 64382 896833 879525 331501 148182 741013 192101 112217 52165 702790 988594 587499\\r\\n\", \"output\": [\"6759\"]}, {\"input\": \"15 2572491 5084070 823435\\r\\n570344 78552 775918 501843 844935 71141 331498 636557 435494 715447 992666 831188 28969 171046 989614\\r\\n\", \"output\": [\"15078\"]}, {\"input\": \"15 4789415 23152928 233992\\r\\n502422 273992 449428 947379 700461 681985 857134 243310 478052 77769 936151 642380 464695 281772 964693\\r\\n\", \"output\": [\"10875\"]}, {\"input\": \"3 390224 390224 1\\r\\n264237 125987 288891\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7 1652707 1652707 1\\r\\n492387 684636 235422 332532 924898 499872 192988\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 501107 501107 1\\r\\n843967 30518 196518 619138 204862 690754 274071 550121 173607 359971\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"15 6627289 6627289 1\\r\\n683844 183950 184972 764255 211665 842336 790234 815301 914823 513046 93547 713159 554415 200951 388028\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"15 5083470 5083470 1\\r\\n978510 643688 591921 723137 573784 346171 920030 352119 528857 365128 627302 308557 716247 263519 654230\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"15 6558665 6558665 1\\r\\n572491 435494 916457 775918 823435 78552 501843 331498 71141 844935 636557 992666 570344 831188 715447\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 159699 10967276 3542\\r\\n998862 999751 995306 992648 992661 991407 997503 998809 999740 997669\\r\\n\", \"output\": [\"942\"]}, {\"input\": \"5 2815840 8479687 4082\\r\\n991137 992161 997887 998891 994990\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"15 2898377 6694755 721\\r\\n992733 999159 990076 996808 990975 993338 993234 994757 997873 993303 994409 993801 998027 990495 999287\\r\\n\", \"output\": [\"9819\"]}, {\"input\": \"6 20 70 1\\r\\n10 10 20 20 30 30\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"6 20 70 1\\r\\n10 10 10 10 10 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"15 1 1000000000 1\\r\\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150\\r\\n\", \"output\": [\"32752\"]}, {\"input\": \"6 30 40 1\\r\\n19 20 21 14 15 16\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"4 5 234 2\\r\\n10 9 12 11\\r\\n\", \"output\": [\"8\"]}]","length":31,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n4 1 7 8 3 8\\n1\"]","prob_desc_input_spec":"The first line of the input contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100), where n \u2014 the number of students shouted \"Fly, freebie, fly!\" The second line contains n positive integers ti (1\u2009\u2264\u2009ti\u2009\u2264\u20091000). The last line contains integer T (1\u2009\u2264\u2009T\u2009\u2264\u20091000) \u2014 the time interval during which the freebie was near the dormitory.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"086d07bd6f9031df09bd6a6e8fe8f25c","prob_desc_created_at":"1389906900","source_code":"#include<stdio.h>\n\nint selectSort(int *mas, int n){\n\tint tmp,i,j;\n\tint cur=0;\n\tfor (i=0;i<n;i++){\n\t\tfor (j=i;j<n;j++){\n\t\t\tif (mas[i]>mas[j]){\n\t\t\t\ttmp=mas[i];\n\t\t\t\tmas[i]=mas[j];\n\t\t\t\tmas[j]=tmp;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main(){\n\tint st[100];\n\tint n,i,j,max,count,t;\n\tscanf(\"%d\",&n);\n\tfor (i=0;i<n;i++){\n\t\tscanf(\"%d\",&st[i]);\n\t}\n\tscanf(\"%d\",&t);\n\tselectSort(st,n);\n\tprintf(\"\\n\");\n\tmax=1;\n\tfor (i=0;i<n-1;i++){\n\t\tcount=1;\n\t\tfor (j=i+1;j<n;j++){\n\t\t\tif (st[j]-st[i]<=t) count++;\n\t\t}\t\n\t\tif (max<count) max=count;\n\t}\n\tprintf(\"%d\\n\",max);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"3\"]","lang_cluster":"C","code_uid":"b1388f2a367633f228017db7d5e2fb2b","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the largest number of people who will pass exam tomorrow because of the freebie visit.","prob_desc_output_to":"standard output","prob_desc_description":"Everyone loves a freebie. Especially students.It is well-known that if in the night before exam a student opens window, opens the student's record-book and shouts loudly three times \"Fly, freebie, fly!\" \u2014 then flown freebie helps him to pass the upcoming exam.In the night before the exam on mathematical analysis n students living in dormitory shouted treasured words. The i-th student made a sacrament at the time ti, where ti is the number of seconds elapsed since the beginning of the night.It is known that the freebie is a capricious and willful lady. That night the freebie was near dormitory only for T seconds. Therefore, if for two students their sacrament times differ for more than T, then the freebie didn't visit at least one of them.Since all students are optimists, they really want to know what is the maximal number of students visited by the freebie can be.","hidden_unit_tests":"[{\"input\": \"6\\r\\n4 1 7 8 3 8\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\n4 2 1 5\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n4 7 1 3 8 5 2 1 8 4\\r\\n3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"8\\r\\n39 49 37 28 40 17 50 2\\r\\n10\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2\\r\\n1 1\\r\\n1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 1\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 1\\r\\n1000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 2\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n450 826\\r\\n1000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n3 1 1\\r\\n1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n3 1 2\\r\\n2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n3 4 3\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n3 4 3\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n63 69 36 40 74 31 86 42 81 95 60 55 98 98 2 16 84 37 61 47 81 91 85 62 85 32 79 74 65 48 39 60 97 90 59 76 98 73 58 5 16 54 59 42 9 27 95 24 9 6 42 49 64 61 22 27 43 60 39 87 99 57 5 62 48 67 81 36 27 87 41 88 5 33 43 81 82 65 46 52 43 68 85 75 81 99 30 56 67 55 92 4 3 3 66 32 30 45 22 88\\r\\n5\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"100\\r\\n97 29 39 42 68 100 44 54 6 70 17 100 52 85 67 1 43 49 1 47 98 35 5 38 37 73 84 20 13 15 78 65 29 92 20 40 38 11 12 100 24 94 29 92 83 47 25 63 23 85 85 93 61 60 35 40 96 50 19 15 28 19 98 59 42 14 54 65 2 53 38 9 15 69 43 63 63 8 55 12 81 57 69 21 57 11 99 45 23 31 59 2 16 61 43 36 12 39 42 13\\r\\n50\\r\\n\", \"output\": [\"62\"]}, {\"input\": \"100\\r\\n31 1 56 82 96 98 25 41 74 73 8 66 95 50 89 77 98 12 69 45 6 10 48 59 1 77 15 77 9 52 66 8 6 71 39 3 58 73 66 45 8 22 67 83 58 6 96 79 46 43 44 90 13 67 56 32 83 96 93 22 49 10 100 79 99 41 13 71 42 96 89 10 84 95 89 7 18 49 16 54 61 35 25 71 26 68 22 40 68 19 30 51 18 20 12 61 11 23 86 72\\r\\n1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100\\r\\n30 74 20 6 3 63 48 45 36 26 33 24 60 71 45 5 19 37 74 100 98 82 67 76 37 46 68 48 56 29 33 19 15 84 76 92 50 53 42 19 5 91 23 38 93 50 39 45 89 17 57 14 86 81 31 6 16 5 80 6 86 49 18 75 30 30 85 94 38 33 50 76 72 32 73 96 28 3 18 20 96 84 89 48 71 64 6 59 87 31 94 24 9 64 15 86 66 11 32 40\\r\\n90\\r\\n\", \"output\": [\"94\"]}, {\"input\": \"100\\r\\n398 82 739 637 913 962 680 125 963 931 311 680 20 530 795 126 881 666 226 323 594 416 176 6 820 317 866 723 831 432 139 706 608 218 963 550 592 544 874 927 763 468 121 424 91 956 42 442 883 66 299 654 964 730 160 615 515 255 709 278 224 223 304 292 41 450 445 556 477 327 647 518 90 470 894 837 655 495 612 113 746 610 751 486 116 933 314 348 736 58 219 429 976 773 678 642 696 522 161 422\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n760 621 622 793 66 684 411 813 474 404 304 934 319 411 99 965 722 156 681 400 481 462 571 726 696 244 124 350 403 566 564 641 381 494 703 3 348 213 343 390 27 660 46 591 990 931 477 823 890 21 936 267 282 753 599 269 387 443 622 673 473 745 646 224 911 7 155 880 332 932 51 994 144 666 789 691 323 738 192 372 191 246 903 666 929 252 132 614 11 938 298 286 309 596 210 18 143 760 759 584\\r\\n10\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100\\r\\n923 357 749 109 685 126 961 437 859 91 985 488 644 777 950 144 479 667 1 535 475 38 843 606 672 333 798 42 595 854 410 914 934 586 329 595 861 321 603 924 434 636 475 395 619 449 336 790 279 931 605 898 276 47 537 935 508 576 168 465 115 884 960 593 883 581 468 426 848 289 525 309 589 106 924 238 829 975 897 373 650 41 952 621 817 46 366 488 924 561 960 449 311 32 517 737 20 765 799 3\\r\\n100\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"100\\r\\n98 63 672 100 254 218 623 415 426 986 920 915 736 795 407 541 382 213 935 743 961 59 660 512 134 935 248 378 739 356 543 714 28 667 602 596 759 791 103 564 225 520 159 542 966 332 983 655 517 273 95 242 593 940 286 236 41 318 941 727 384 225 319 627 982 359 232 769 854 172 643 598 215 231 305 30 347 469 929 919 90 294 739 641 368 270 932 452 234 741 309 234 357 392 707 873 808 398 417 483\\r\\n1000\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n2 1 1 1 2 2 2 2 2 2 1 1 1 1 2 2 1 1 1 2 2 1 1 1 1 2 1 2 1 2 1 2 1 2 2 2 1 1 2 1 2 2 1 1 2 2 2 2 2 1 1 2 1 1 1 2 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 1 2 2 1 2 2 1 1 1 2 2 2 1 1 2 2 1 2 2 2 1 2 2 1 2 2\\r\\n1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n3 3 1 2 3 3 1 3 3 2 2 2 2 1 2 3 2 1 2 2 2 2 3 2 1 3 3 3 2 1 3 1 2 1 1 2 2 3 2 2 3 1 1 3 1 2 1 3 3 1 1 3 1 3 2 3 3 2 2 2 2 1 1 1 2 1 1 2 1 1 1 1 1 3 2 2 1 3 1 1 3 1 2 2 1 3 1 1 1 1 2 2 2 3 2 2 3 1 1 3\\r\\n1\\r\\n\", \"output\": [\"72\"]}, {\"input\": \"100\\r\\n2 1 3 4 1 1 4 1 3 2 1 4 4 4 4 4 3 2 1 1 2 2 1 3 3 1 1 1 2 3 4 3 1 1 1 4 2 2 2 2 4 1 2 4 2 2 4 3 3 4 1 2 4 1 3 4 1 2 1 2 1 3 3 2 1 1 4 2 1 3 3 2 3 4 1 2 2 4 2 1 4 3 4 3 1 4 3 1 2 3 3 3 2 4 1 1 4 1 2 3\\r\\n1\\r\\n\", \"output\": [\"55\"]}, {\"input\": \"100\\r\\n5 1 3 1 2 3 2 5 5 2 5 1 1 4 1 1 3 5 3 3 3 3 4 4 3 5 4 1 1 3 1 4 2 5 2 5 4 2 3 5 1 3 5 5 5 2 2 5 1 4 1 5 1 5 1 3 3 2 2 4 3 2 1 4 2 5 4 1 2 1 4 3 3 5 4 3 5 5 1 2 4 1 4 2 1 1 2 5 3 3 4 1 3 3 3 5 4 1 1 1\\r\\n1\\r\\n\", \"output\": [\"41\"]}, {\"input\": \"100\\r\\n1 7 8 10 9 4 2 1 6 5 10 6 3 1 10 1 8 4 3 1 7 4 3 7 4 9 1 3 3 5 10 3 7 10 10 10 3 6 2 8 1 3 3 6 2 8 3 7 8 3 4 1 6 4 4 2 10 6 2 10 10 1 7 8 8 1 9 8 7 8 5 2 5 9 2 5 7 10 3 9 8 3 9 4 3 8 6 8 2 8 9 6 7 10 7 9 6 4 4 8\\r\\n1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"1\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n1\\r\\n1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n849\\r\\n1\\r\\n\", \"output\": [\"1\"]}]","length":37,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"5 2\", \"7 4\"]","prob_desc_input_spec":"The single line contains two space-separated integers n and k (1\u2009\u2264\u2009n\u2009\u2264\u20091000,\u20091\u2009\u2264\u2009k\u2009\u2264\u2009min(8,\u2009n)) \u2014 the number of the houses and the number k from the statement.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"cc838bc14408f14f984a349fea9e9694","prob_desc_created_at":"1364916600","source_code":"#include<stdio.h>\nmain()\n{\n    long long i=1000000007;\n    long long n,k,j;\n    scanf(\"%lld%lld\",&n,&k);\n    long long x=n-k,m=1,y=1;\n    for(j=1;j<=x;j++)\n        m=(m*x)%i;\n    for(j=1;j<k;j++)\n      y=(y*k)%i;\n      m=(m*y)%i;\n    printf(\"%I64d\",m);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"54\", \"1728\"]","lang_cluster":"C","code_uid":"bdfebe67561a3f0c341a856cfe29a391","prob_desc_notes":null,"prob_desc_output_spec":"In a single line print a single integer \u2014 the answer to the problem modulo 1000000007 (109\u2009+\u20097).","prob_desc_output_to":"standard output","prob_desc_description":"Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1\u2009\u2264\u2009pi\u2009\u2264\u2009n).Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.We know that:  When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1.  When the penguin starts walking from any house indexed from k\u2009+\u20091 to n, inclusive, he definitely cannot walk to house number 1.  When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109\u2009+\u20097).","hidden_unit_tests":"[{\"input\": \"5 2\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"7 4\\r\\n\", \"output\": [\"1728\"]}, {\"input\": \"8 5\\r\\n\", \"output\": [\"16875\"]}, {\"input\": \"8 1\\r\\n\", \"output\": [\"823543\"]}, {\"input\": \"10 7\\r\\n\", \"output\": [\"3176523\"]}, {\"input\": \"12 8\\r\\n\", \"output\": [\"536870912\"]}, {\"input\": \"50 2\\r\\n\", \"output\": [\"628702797\"]}, {\"input\": \"100 8\\r\\n\", \"output\": [\"331030906\"]}, {\"input\": \"1000 8\\r\\n\", \"output\": [\"339760446\"]}, {\"input\": \"999 7\\r\\n\", \"output\": [\"490075342\"]}, {\"input\": \"685 7\\r\\n\", \"output\": [\"840866481\"]}, {\"input\": \"975 8\\r\\n\", \"output\": [\"531455228\"]}, {\"input\": \"475 5\\r\\n\", \"output\": [\"449471303\"]}, {\"input\": \"227 6\\r\\n\", \"output\": [\"407444135\"]}, {\"input\": \"876 8\\r\\n\", \"output\": [\"703293724\"]}, {\"input\": \"1000 1\\r\\n\", \"output\": [\"760074701\"]}, {\"input\": \"1000 2\\r\\n\", \"output\": [\"675678679\"]}, {\"input\": \"1000 3\\r\\n\", \"output\": [\"330155123\"]}, {\"input\": \"1000 4\\r\\n\", \"output\": [\"660270610\"]}, {\"input\": \"1000 5\\r\\n\", \"output\": [\"583047503\"]}, {\"input\": \"1000 6\\r\\n\", \"output\": [\"834332109\"]}, {\"input\": \"657 3\\r\\n\", \"output\": [\"771999480\"]}, {\"input\": \"137 5\\r\\n\", \"output\": [\"160909830\"]}, {\"input\": \"8 8\\r\\n\", \"output\": [\"2097152\"]}, {\"input\": \"9 8\\r\\n\", \"output\": [\"2097152\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"473 4\\r\\n\", \"output\": [\"145141007\"]}]","length":15,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 1\", \"1 2 2\", \"1 3 5\", \"6 2 9\"]","prob_desc_input_spec":"The first and only line of input contains three space-separated integers a, b and c (1\u2009\u2264\u2009a,\u2009b,\u2009c\u2009\u2264\u20095\u2009000)\u00a0\u2014 the number of islands in the red, blue and purple clusters, respectively.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"b6dc5533fbf285d5ef4cf60ef6300383","prob_desc_created_at":"1507296900","source_code":"#include <stdio.h>\nlong long dp[5001][5001],a,b,c;\nint main()\n{\n    scanf(\"%I64d%I64d%I64d\",&a,&b,&c);\n    for(int i=0;i<=5000;i++) dp[i][0]=dp[0][i]=1;\n    for(int i=1;i<=5000;i++)\n        for(int j=1;j<=5000;j++)\n            dp[i][j]=(dp[i-1][j]+(dp[i-1][j-1]*j)%998244353)%998244353;\n    printf(\"%I64d\\n\",(dp[a][b]*dp[a][c])%998244353*dp[b][c]%998244353);\n}","prob_desc_sample_outputs":"[\"8\", \"63\", \"3264\", \"813023575\"]","lang_cluster":"C","code_uid":"c20040376abb2e8db4408162e0577ada","prob_desc_notes":"NoteIn the first example, there are 3 bridges that can possibly be built, and no setup of bridges violates the restrictions. Thus the answer is 23\u2009=\u20098.In the second example, the upper two structures in the figure below are instances of valid ones, while the lower two are invalid due to the blue and purple clusters, respectively.  ","prob_desc_output_spec":"Output one line containing an integer\u00a0\u2014 the number of different ways to build bridges, modulo 998\u2009244\u2009353.","prob_desc_output_to":"standard output","prob_desc_description":"\u2014 This is not playing but duty as allies of justice, Nii-chan!\u2014 Not allies but justice itself, Onii-chan!With hands joined, go everywhere at a speed faster than our thoughts! This time, the Fire Sisters\u00a0\u2014 Karen and Tsukihi\u00a0\u2014 is heading for somewhere they've never reached\u00a0\u2014 water-surrounded islands!There are three clusters of islands, conveniently coloured red, blue and purple. The clusters consist of a, b and c distinct islands respectively.Bridges have been built between some (possibly all or none) of the islands. A bridge bidirectionally connects two different islands and has length 1. For any two islands of the same colour, either they shouldn't be reached from each other through bridges, or the shortest distance between them is at least 3, apparently in order to prevent oddities from spreading quickly inside a cluster.The Fire Sisters are ready for the unknown, but they'd also like to test your courage. And you're here to figure out the number of different ways to build all bridges under the constraints, and give the answer modulo 998\u2009244\u2009353. Two ways are considered different if a pair of islands exist, such that there's a bridge between them in one of them, but not in the other.","hidden_unit_tests":"[{\"input\": \"1 1 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 2 2\\r\\n\", \"output\": [\"63\"]}, {\"input\": \"1 3 5\\r\\n\", \"output\": [\"3264\"]}, {\"input\": \"6 2 9\\r\\n\", \"output\": [\"813023575\"]}, {\"input\": \"7 3 7\\r\\n\", \"output\": [\"807577560\"]}, {\"input\": \"135 14 39\\r\\n\", \"output\": [\"414849507\"]}, {\"input\": \"5000 5000 5000\\r\\n\", \"output\": [\"986778560\"]}, {\"input\": \"2 1 1\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"1 1 3\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"1 2 3\\r\\n\", \"output\": [\"156\"]}, {\"input\": \"4 1 2\\r\\n\", \"output\": [\"315\"]}, {\"input\": \"5 9 4\\r\\n\", \"output\": [\"661093467\"]}, {\"input\": \"4 2 5\\r\\n\", \"output\": [\"326151\"]}, {\"input\": \"9 4 10\\r\\n\", \"output\": [\"391175867\"]}, {\"input\": \"16 8 29\\r\\n\", \"output\": [\"349763770\"]}, {\"input\": \"17 46 45\\r\\n\", \"output\": [\"518654435\"]}, {\"input\": \"28 47 1\\r\\n\", \"output\": [\"517406193\"]}, {\"input\": \"94 87 10\\r\\n\", \"output\": [\"846321893\"]}, {\"input\": \"84 29 61\\r\\n\", \"output\": [\"391253501\"]}, {\"input\": \"179 856 377\\r\\n\", \"output\": [\"518957210\"]}, {\"input\": \"1925 1009 273\\r\\n\", \"output\": [\"207866159\"]}, {\"input\": \"1171 2989 2853\\r\\n\", \"output\": [\"234725427\"]}, {\"input\": \"3238 2923 4661\\r\\n\", \"output\": [\"636587126\"]}, {\"input\": \"1158 506 4676\\r\\n\", \"output\": [\"6109065\"]}, {\"input\": \"4539 2805 2702\\r\\n\", \"output\": [\"356944655\"]}, {\"input\": \"4756 775 3187\\r\\n\", \"output\": [\"56242066\"]}, {\"input\": \"4998 4998 4998\\r\\n\", \"output\": [\"259368717\"]}, {\"input\": \"4996 1 5000\\r\\n\", \"output\": [\"196902859\"]}, {\"input\": \"2048 4096 1024\\r\\n\", \"output\": [\"445542375\"]}, {\"input\": \"5000 1 1\\r\\n\", \"output\": [\"50020002\"]}]","length":11,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\", \"4 4\\n3 4 1 0\\n0 1 7 9\"]","prob_desc_input_spec":"The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 10$$$) representing the number of digits in the sequence you have and the number of keys on the keypad that have fingerprints. The next line contains $$$n$$$ distinct space-separated integers $$$x_1, x_2, \\ldots, x_n$$$ ($$$0 \\le x_i \\le 9$$$) representing the sequence. The next line contains $$$m$$$ distinct space-separated integers $$$y_1, y_2, \\ldots, y_m$$$ ($$$0 \\le y_i \\le 9$$$) \u2014 the keys with fingerprints.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"f9044a4b4c3a0c2751217d9b31cd0c72","prob_desc_created_at":"1529166900","source_code":"#include<stdio.h>\n#include<stdlib.h>\n\n\nint main()\n{\n  int n1,n2,a1[100],a2[100];\n  scanf(\"%d%d\",&n1,&n2);\n  for(int i=0;i<n1;i++)\n  {\n    scanf(\"%d\",&a1[i]);\n    \n  }\n\n  for(int i=0;i<n2;i++)\n  {\n    scanf(\"%d\",&a2[i]);\n  }\n\n\n  for(int i=0;i<n1;i++)\n  {\n    for(int j=0;j<n2;j++)\n    {\n      if(a1[i]==a2[j]) printf(\"%d \",a1[i]);\n    }\n  }\n}\n","prob_desc_sample_outputs":"[\"7 1 2\", \"1 0\"]","lang_cluster":"C","code_uid":"55d5486b8845fc3c33a6404d31e2fb79","prob_desc_notes":"NoteIn the first example, the only digits with fingerprints are $$$1$$$, $$$2$$$ and $$$7$$$. All three of them appear in the sequence you know, $$$7$$$ first, then $$$1$$$ and then $$$2$$$. Therefore the output is 7 1 2. Note that the order is important, and shall be the same as the order in the original sequence.In the second example digits $$$0$$$, $$$1$$$, $$$7$$$ and $$$9$$$ have fingerprints, however only $$$0$$$ and $$$1$$$ appear in the original sequence. $$$1$$$ appears earlier, so the output is 1 0. Again, the order is important.","prob_desc_output_spec":"In a single line print a space-separated sequence of integers representing the code. If the resulting sequence is empty, both printing nothing and printing a single line break is acceptable.","prob_desc_output_to":"standard output","prob_desc_description":"You are locked in a room with a door that has a keypad with 10 keys corresponding to digits from 0 to 9. To escape from the room, you need to enter a correct code. You also have a sequence of digits.Some keys on the keypad have fingerprints. You believe the correct code is the longest not necessarily contiguous subsequence of the sequence you have that only contains digits with fingerprints on the corresponding keys. Find such code.","hidden_unit_tests":"[{\"input\": \"7 3\\r\\n3 5 7 1 6 2 8\\r\\n1 2 7\\r\\n\", \"output\": [\"7 1 2\"]}, {\"input\": \"4 4\\r\\n3 4 1 0\\r\\n0 1 7 9\\r\\n\", \"output\": [\"1 0\"]}, {\"input\": \"9 4\\r\\n9 8 7 6 5 4 3 2 1\\r\\n2 4 6 8\\r\\n\", \"output\": [\"8 6 4 2\"]}, {\"input\": \"10 5\\r\\n3 7 1 2 4 6 9 0 5 8\\r\\n4 3 0 7 9\\r\\n\", \"output\": [\"3 7 4 9 0\"]}, {\"input\": \"5 5\\r\\n1 2 3 4 5\\r\\n6 7 8 9 0\\r\\n\", \"output\": [\"\"]}, {\"input\": \"10 10\\r\\n1 2 3 4 5 6 7 8 9 0\\r\\n4 5 6 7 1 2 3 0 9 8\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 0\"]}, {\"input\": \"1 1\\r\\n4\\r\\n4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3 7\\r\\n6 3 4\\r\\n4 9 0 1 7 8 6\\r\\n\", \"output\": [\"6 4\"]}, {\"input\": \"10 1\\r\\n9 0 8 1 7 4 6 5 2 3\\r\\n0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 1\\r\\n4 2 7 3 1 8\\r\\n9\\r\\n\", \"output\": [\"\"]}, {\"input\": \"5 10\\r\\n6 0 3 8 1\\r\\n3 1 0 5 4 7 2 8 9 6\\r\\n\", \"output\": [\"6 0 3 8 1\"]}, {\"input\": \"8 2\\r\\n7 2 9 6 1 0 3 4\\r\\n6 3\\r\\n\", \"output\": [\"6 3\"]}, {\"input\": \"5 4\\r\\n7 0 1 4 9\\r\\n0 9 5 3\\r\\n\", \"output\": [\"0 9\"]}, {\"input\": \"10 1\\r\\n9 6 2 0 1 8 3 4 7 5\\r\\n6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"10 2\\r\\n7 1 0 2 4 6 5 9 3 8\\r\\n3 2\\r\\n\", \"output\": [\"2 3\"]}, {\"input\": \"5 9\\r\\n3 7 9 2 4\\r\\n3 8 4 5 9 6 1 0 2\\r\\n\", \"output\": [\"3 9 2 4\"]}, {\"input\": \"10 6\\r\\n7 1 2 3 8 0 6 4 5 9\\r\\n1 5 8 2 3 6\\r\\n\", \"output\": [\"1 2 3 8 6 5\"]}, {\"input\": \"8 2\\r\\n7 4 8 9 2 5 6 1\\r\\n6 4\\r\\n\", \"output\": [\"4 6\"]}, {\"input\": \"10 2\\r\\n1 0 3 5 8 9 4 7 6 2\\r\\n0 3\\r\\n\", \"output\": [\"0 3\"]}, {\"input\": \"7 6\\r\\n9 2 8 6 1 3 7\\r\\n4 2 0 3 1 8\\r\\n\", \"output\": [\"2 8 1 3\"]}, {\"input\": \"1 6\\r\\n3\\r\\n6 8 2 4 5 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 8\\r\\n0\\r\\n9 2 4 8 1 5 0 7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 9\\r\\n7 3 9 4 1 0\\r\\n9 1 5 8 0 6 2 7 4\\r\\n\", \"output\": [\"7 9 4 1 0\"]}, {\"input\": \"10 2\\r\\n4 9 6 8 3 0 1 5 7 2\\r\\n0 1\\r\\n\", \"output\": [\"0 1\"]}, {\"input\": \"10 5\\r\\n5 2 8 0 9 7 6 1 4 3\\r\\n9 6 4 1 2\\r\\n\", \"output\": [\"2 9 6 1 4\"]}, {\"input\": \"6 3\\r\\n8 3 9 2 7 6\\r\\n5 4 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 10\\r\\n8 3 9 6\\r\\n4 9 6 2 7 0 8 1 3 5\\r\\n\", \"output\": [\"8 3 9 6\"]}, {\"input\": \"1 2\\r\\n1\\r\\n1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 6\\r\\n1 2 3\\r\\n4 5 6 1 2 3\\r\\n\", \"output\": [\"1 2 3\"]}, {\"input\": \"1 2\\r\\n2\\r\\n1 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 10\\r\\n9\\r\\n0 1 2 3 4 5 6 7 8 9\\r\\n\", \"output\": [\"9\"]}]","length":28,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 4\\n4 3 1 2\", \"5 5\\n5 4 3 2 1\"]","prob_desc_input_spec":"The first line of the input contains two space-separated integers n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009100), the number of the factory lights and the pushed buttons respectively. The next line contains m distinct space-separated integers b1,\u2009b2,\u2009...,\u2009bm\u00a0(1\u2009\u2264\u2009bi\u2009\u2264\u2009n). It is guaranteed that all lights will be turned off after pushing all buttons.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"2e44c8aabab7ef7b06bbab8719a8d863","prob_desc_created_at":"1396798800","source_code":"\/* Problem: 415A - Mashmokh and Lights *\/\n\/* Solver: Gusztav Szmolik *\/\n\n#include <stdio.h>\n\nint main ()\n    {\n    unsigned short n;\n    unsigned short m;\n    unsigned short i;\n    unsigned short l[100];\n    unsigned short b;\n    unsigned short j;\n    \n    if (scanf(\"%hu %hu\",&n,&m) != 2)\n        return -1;\n    if (n < 1 || n > 100 || m < 1 || m > 100)\n        return -1;\n    for (i = 0; i < n; i++)\n        l[i] = 0;\n    for (i = 0; i < m; i++)\n        {\n        if (scanf(\"%hu\",&b) != 1)\n            return -1;\n        if (b < 1 || b > n)\n            return -1;\n        for (j = b-1; j < n && !l[j]; j++)\n            l[j] = b;\n        }\n    if (!l[0])\n        return -1;\n    for (i = 0; i < n; i++)\n        printf ((i ? \" %hu\" : \"%hu\"),l[i]);\n    printf (\"\\n\");\n    return 0;\n    }\n","prob_desc_sample_outputs":"[\"1 1 3 4 4\", \"1 2 3 4 5\"]","lang_cluster":"C","code_uid":"eb1797326941df977bbc0d198ee885cf","prob_desc_notes":"NoteIn the first sample, after pressing button number 4, lights 4 and 5 are turned off and lights 1, 2 and 3 are still on. Then after pressing button number 3, light number 3 is turned off as well. Pressing button number 1 turns off lights number 1 and 2 as well so pressing button number 2 in the end has no effect. Thus button number 4 turned lights 4 and 5 off, button number 3 turned light 3 off and button number 1 turned light 1 and 2 off.","prob_desc_output_spec":"Output n space-separated integers where the i-th number is index of the button that turns the i-th light off.","prob_desc_output_to":"standard output","prob_desc_description":"Mashmokh works in a factory. At the end of each day he must turn off all of the lights. The lights on the factory are indexed from 1 to n. There are n buttons in Mashmokh's room indexed from 1 to n as well. If Mashmokh pushes button with index i, then each light with index not less than i that is still turned on turns off.Mashmokh is not very clever. So instead of pushing the first button he pushes some of the buttons randomly each night. He pushed m distinct buttons b1,\u2009b2,\u2009...,\u2009bm (the buttons were pushed consecutively in the given order) this night. Now he wants to know for each light the index of the button that turned this light off. Please note that the index of button bi is actually bi, not i.Please, help Mashmokh, print these indices.","hidden_unit_tests":"[{\"input\": \"5 4\\r\\n4 3 1 2\\r\\n\", \"output\": [\"1 1 3 4 4\", \"1\\r\\n1\\r\\n3\\r\\n4\\r\\n4\"]}, {\"input\": \"5 5\\r\\n5 4 3 2 1\\r\\n\", \"output\": [\"1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\", \"1 2 3 4 5\"]}, {\"input\": \"16 11\\r\\n8 5 12 10 14 2 6 3 15 9 1\\r\\n\", \"output\": [\"1\\r\\n2\\r\\n2\\r\\n2\\r\\n5\\r\\n5\\r\\n5\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\", \"1 2 2 2 5 5 5 8 8 8 8 8 8 8 8 8\"]}, {\"input\": \"79 22\\r\\n76 32 48 28 33 44 58 59 1 51 77 13 15 64 49 72 74 21 61 12 60 57\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 28 28 28 28 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 76 76 76 76\", \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n76\\r\\n76\\r\\n76\\r\\n76\"]}, {\"input\": \"25 19\\r\\n3 12 21 11 19 6 5 15 4 16 20 8 9 1 22 23 25 18 13\\r\\n\", \"output\": [\"1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\", \"1\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\"]}, {\"input\": \"48 8\\r\\n42 27 40 1 18 3 19 2\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 42 42 42 42 42 42 42\", \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n42\\r\\n42\\r\\n42\\r\\n42\\r\\n42\\r\\n42\\r\\n42\"]}, {\"input\": \"44 19\\r\\n13 20 7 10 9 14 43 17 18 39 21 42 37 1 33 8 35 4 6\\r\\n\", \"output\": [\"1 1 1 1 1 1 7 7 7 7 7 7 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13\", \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n7\\r\\n7\\r\\n7\\r\\n7\\r\\n7\\r\\n7\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\"]}, {\"input\": \"80 29\\r\\n79 51 28 73 65 39 10 1 59 29 7 70 64 3 35 17 24 71 74 2 6 49 66 80 13 18 60 15 12\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 79 79\", \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n28\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n79\\r\\n79\"]}, {\"input\": \"31 4\\r\\n8 18 30 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\", \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\"]}, {\"input\": \"62 29\\r\\n61 55 35 13 51 56 23 6 8 26 27 40 48 11 18 12 19 50 54 14 24 21 32 17 43 33 1 2 3\\r\\n\", \"output\": [\"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n6\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n13\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n35\\r\\n55\\r\\n55\\r\\n55\\r\\n55\\r\\n55\\r\\n55\\r\\n61\\r\\n61\", \"1 1 1 1 1 6 6 6 6 6 6 6 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 55 55 55 55 55 55 61 61\"]}, {\"input\": \"5 4\\r\\n2 3 4 1\\r\\n\", \"output\": [\"1 2 2 2 2\", \"1\\r\\n2\\r\\n2\\r\\n2\\r\\n2\"]}, {\"input\": \"39 37\\r\\n2 5 17 24 19 33 35 16 20 3 1 34 10 36 15 37 14 8 28 21 13 31 30 29 7 25 32 12 6 27 22 4 11 39 18 9 26\\r\\n\", \"output\": [\"1\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\", \"1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"]}, {\"input\": \"100 100\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n\", \"output\": [\"1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n12\\r\\n13\\r\\n14\\r\\n15\\r\\n16\\r\\n17\\r\\n18\\r\\n19\\r\\n20\\r\\n21\\r\\n22\\r\\n23\\r\\n24\\r\\n25\\r\\n26\\r\\n27\\r\\n28\\r\\n29\\r\\n30\\r\\n31\\r\\n32\\r\\n33\\r\\n34\\r\\n35\\r\\n36\\r\\n37\\r\\n38\\r\\n39\\r\\n40\\r\\n41\\r\\n42\\r\\n43\\r\\n44\\r\\n45\\r\\n46\\r\\n47\\r\\n48\\r\\n49\\r\\n50\\r\\n51\\r\\n52\\r\\n53\\r\\n54\\r\\n55\\r\\n56\\r\\n57\\r\\n58\\r\\n59\\r\\n60\\r\\n61\\r\\n62\\r\\n63\\r\\n64\\r\\n65\\r\\n66\\r\\n67\\r\\n68\\r\\n69\\r\\n70\\r\\n71\\r\\n72\\r\\n73\\r\\n74\\r\\n75\\r\\n76\\r\\n77\\r\\n78\\r\\n79\\r\\n80\\r\\n81\\r\\n82\\r\\n83\\r\\n84\\r\\n85\\r\\n86\\r\\n87\\r\\n88\\r\\n89\\r\\n90\\r\\n91\\r\\n92\\r\\n93\\r\\n94\\r\\n95\\r\\n96\\r\\n97\\r\\n98\\r\\n99\\r\\n100\", \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"]}, {\"input\": \"1 1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"18 3\\r\\n18 1 11\\r\\n\", \"output\": [\"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n18\", \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 18\"]}, {\"input\": \"67 20\\r\\n66 23 40 49 3 39 60 43 52 47 16 36 22 5 41 10 55 34 64 1\\r\\n\", \"output\": [\"1\\r\\n1\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n66\\r\\n66\", \"1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 66 66\"]}, {\"input\": \"92 52\\r\\n9 85 44 13 27 61 8 1 28 41 6 14 70 67 39 71 56 80 34 21 5 10 40 73 63 38 90 57 37 36 82 86 65 46 7 54 81 12 45 49 83 59 64 26 62 25 60 24 91 47 53 55\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\", \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n8\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\"]}, {\"input\": \"66 36\\r\\n44 62 32 29 3 15 47 30 50 42 35 2 33 65 10 13 56 12 1 16 7 36 39 11 25 28 20 52 46 38 37 8 61 49 48 14\\r\\n\", \"output\": [\"1\\r\\n2\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n29\\r\\n29\\r\\n29\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n32\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\", \"1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 29 29 29 32 32 32 32 32 32 32 32 32 32 32 32 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44\"]}, {\"input\": \"32 8\\r\\n27 23 1 13 18 24 17 26\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 23 23 23 23 27 27 27 27 27 27\", \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\\r\\n27\"]}, {\"input\": \"26 13\\r\\n1 14 13 2 4 24 21 22 16 3 10 12 6\\r\\n\", \"output\": [\"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\", \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"]}, {\"input\": \"31 20\\r\\n10 11 20 2 4 26 31 7 13 12 28 1 30 18 21 8 3 16 15 19\\r\\n\", \"output\": [\"1\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\\r\\n10\", \"1 2 2 2 2 2 2 2 2 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\"]}, {\"input\": \"86 25\\r\\n22 62 8 23 53 77 9 31 43 1 58 16 72 11 15 35 60 39 79 4 82 64 76 63 59\\r\\n\", \"output\": [\"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\\r\\n22\", \"1 1 1 1 1 1 1 8 8 8 8 8 8 8 8 8 8 8 8 8 8 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\"]}, {\"input\": \"62 54\\r\\n2 5 4 47 40 61 37 31 41 16 44 42 48 32 10 6 62 38 52 49 11 20 55 22 3 36 25 21 50 8 28 14 18 39 34 54 53 19 46 27 15 23 12 24 60 17 33 57 58 1 35 29 51 7\\r\\n\", \"output\": [\"1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\", \"1\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\"]}, {\"input\": \"57 19\\r\\n43 45 37 40 42 55 16 33 47 32 34 35 9 41 1 6 8 15 5\\r\\n\", \"output\": [\"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n16\\r\\n37\\r\\n37\\r\\n37\\r\\n37\\r\\n37\\r\\n37\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\\r\\n43\", \"1 1 1 1 1 1 1 1 9 9 9 9 9 9 9 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 37 37 37 37 37 37 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43\"]}, {\"input\": \"32 14\\r\\n4 7 13 1 25 22 9 27 6 28 30 2 14 21\\r\\n\", \"output\": [\"1 1 1 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\", \"1\\r\\n1\\r\\n1\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\"]}, {\"input\": \"57 12\\r\\n8 53 51 38 1 6 16 33 13 46 28 35\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\", \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n8\"]}, {\"input\": \"87 9\\r\\n57 34 78 1 52 67 56 6 54\\r\\n\", \"output\": [\"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n34\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\\r\\n57\", \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57\"]}, {\"input\": \"88 42\\r\\n85 45 52 14 63 53 70 71 16 86 66 47 12 22 10 72 4 31 3 69 11 77 17 25 46 75 23 1 21 84 44 20 18 33 48 88 41 83 67 61 73 34\\r\\n\", \"output\": [\"1 1 3 4 4 4 4 4 4 10 10 12 12 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 85 85 85 85\", \"1\\r\\n1\\r\\n3\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n10\\r\\n10\\r\\n12\\r\\n12\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n14\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n45\\r\\n85\\r\\n85\\r\\n85\\r\\n85\"]}, {\"input\": \"27 25\\r\\n9 21 17 5 16 3 23 7 12 4 14 11 13 1 15 19 27 8 20 10 22 25 6 18 26\\r\\n\", \"output\": [\"1 1 3 3 5 5 5 5 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\", \"1\\r\\n1\\r\\n3\\r\\n3\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\"]}, {\"input\": \"89 28\\r\\n5 22 79 42 16 35 66 48 57 55 1 37 29 31 40 38 45 62 41 87 64 89 81 13 60 44 71 82\\r\\n\", \"output\": [\"1 1 1 1 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\", \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\\r\\n5\"]}, {\"input\": \"17 4\\r\\n4 3 1 2\\r\\n\", \"output\": [\"1\\r\\n1\\r\\n3\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\\r\\n4\", \"1 1 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4\"]}]","length":36,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2\", \"10\"]","prob_desc_input_spec":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009105)\u00a0\u2014 the number of schools.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"dfe9446431325c73e88b58ba204d0e47","prob_desc_created_at":"1493909400","source_code":"#include <stdio.h>\n\nint main() {\n\tint n;\n\tscanf(\"%d\",&n);\n\tif(n%2==0)\n\t{\n\t    printf(\"%d\\n\",n\/2-1);\n\t}\n\telse \n\t{\n\t    printf(\"%d\\n\",n\/2);\n\t}\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"0\", \"4\"]","lang_cluster":"C","code_uid":"9be0bb2e592c085a62ca396ad5b82a16","prob_desc_notes":"NoteIn the first example we can buy a ticket between the schools that costs .","prob_desc_output_spec":"Print single integer: the minimum cost of tickets needed to visit all schools.","prob_desc_output_to":"standard output","prob_desc_description":"A few years ago Sajjad left his school and register to another one due to security reasons. Now he wishes to find Amir, one of his schoolmates and good friends.There are n schools numerated from 1 to n. One can travel between each pair of them, to do so, he needs to buy a ticket. The ticker between schools i and j costs  and can be used multiple times. Help Sajjad to find the minimum cost he needs to pay for tickets to visit all schools. He can start and finish in any school.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"43670\\r\\n\", \"output\": [\"21834\"]}, {\"input\": \"4217\\r\\n\", \"output\": [\"2108\"]}, {\"input\": \"17879\\r\\n\", \"output\": [\"8939\"]}, {\"input\": \"31809\\r\\n\", \"output\": [\"15904\"]}, {\"input\": \"40873\\r\\n\", \"output\": [\"20436\"]}, {\"input\": \"77859\\r\\n\", \"output\": [\"38929\"]}, {\"input\": \"53022\\r\\n\", \"output\": [\"26510\"]}, {\"input\": \"79227\\r\\n\", \"output\": [\"39613\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"49999\"]}, {\"input\": \"82801\\r\\n\", \"output\": [\"41400\"]}, {\"input\": \"5188\\r\\n\", \"output\": [\"2593\"]}, {\"input\": \"86539\\r\\n\", \"output\": [\"43269\"]}, {\"input\": \"12802\\r\\n\", \"output\": [\"6400\"]}, {\"input\": \"20289\\r\\n\", \"output\": [\"10144\"]}, {\"input\": \"32866\\r\\n\", \"output\": [\"16432\"]}, {\"input\": \"33377\\r\\n\", \"output\": [\"16688\"]}, {\"input\": \"31775\\r\\n\", \"output\": [\"15887\"]}, {\"input\": \"60397\\r\\n\", \"output\": [\"30198\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"49999\"]}, {\"input\": \"99999\\r\\n\", \"output\": [\"49999\"]}, {\"input\": \"99998\\r\\n\", \"output\": [\"49998\"]}, {\"input\": \"99997\\r\\n\", \"output\": [\"49998\"]}, {\"input\": \"99996\\r\\n\", \"output\": [\"49997\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}]","length":15,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"0 0 0 0 9\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n7 0 0 0 0\", \"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\"]","prob_desc_input_spec":"The input consists of five lines, each line contains five space-separated integers: the j-th number in the i-th line shows gij (0\u2009\u2264\u2009gij\u2009\u2264\u2009105). It is guaranteed that gii\u2009=\u20090 for all i. Assume that the students are numbered from 1 to 5.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"be6d4df20e9a48d183dd8f34531df246","prob_desc_created_at":"1400686200","source_code":"#include<stdio.h>\nint main()\n{\n    int x[6][6];\n    int i,j,k,l,m;\n    for(i=0;i<5;++i)\n    {\n        for(j=0;j<5;++j)\n            scanf(\"%d\",&x[i][j]);\n    }\n    int max=0;\n    for(i=0;i<5;++i)\n    {\n        for(j=0;j<5;++j)\n        {\n            if(i==j)\n                continue;\n            for(k=0;k<5;++k)\n            {\n                if(k==j || k==i)\n                    continue;\n                    for(l=0;l<5;++l)\n                    {\n                        if(l==k || l==j || l==i)\n                            continue;\n                        for(m=0;m<5;++m)\n                        {\n                            int temp=0;\n                            if(m==l || m==k || m==j || m==i)\n                                continue;\n                            temp=x[i][j]+x[j][i]+x[k][l]+x[l][k]+x[j][k]+x[k][j]+x[l][m]+x[m][l]+x[k][l]+x[l][k]+x[l][m]+x[m][l];\n                            \/\/printf(\"%d\\n\",temp);\n                            if(max<temp)\n                                max=temp;\n\n                        }\n                    }\n            }\n        }\n    }\n    printf(\"%d\",max);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"32\", \"620\"]","lang_cluster":"C","code_uid":"e40e73c16a57fbbfbcb77982030e15f0","prob_desc_notes":"NoteIn the first sample, the optimal arrangement of the line is 23154. In this case, the total happiness equals:(g23\u2009+\u2009g32\u2009+\u2009g15\u2009+\u2009g51)\u2009+\u2009(g13\u2009+\u2009g31\u2009+\u2009g54\u2009+\u2009g45)\u2009+\u2009(g15\u2009+\u2009g51)\u2009+\u2009(g54\u2009+\u2009g45)\u2009=\u200932.","prob_desc_output_spec":"Print a single integer \u2014 the maximum possible total happiness of the students.","prob_desc_output_to":"standard output","prob_desc_description":"Many students live in a dormitory. A dormitory is a whole new world of funny amusements and possibilities but it does have its drawbacks. There is only one shower and there are multiple students who wish to have a shower in the morning. That's why every morning there is a line of five people in front of the dormitory shower door. As soon as the shower opens, the first person from the line enters the shower. After a while the first person leaves the shower and the next person enters the shower. The process continues until everybody in the line has a shower.Having a shower takes some time, so the students in the line talk as they wait. At each moment of time the students talk in pairs: the (2i\u2009-\u20091)-th man in the line (for the current moment) talks with the (2i)-th one. Let's look at this process in more detail. Let's number the people from 1 to 5. Let's assume that the line initially looks as 23154 (person number 2 stands at the beginning of the line). Then, before the shower opens, 2 talks with 3, 1 talks with 5, 4 doesn't talk with anyone. Then 2 enters the shower. While 2 has a shower, 3 and 1 talk, 5 and 4 talk too. Then, 3 enters the shower. While 3 has a shower, 1 and 5 talk, 4 doesn't talk to anyone. Then 1 enters the shower and while he is there, 5 and 4 talk. Then 5 enters the shower, and then 4 enters the shower.We know that if students i and j talk, then the i-th student's happiness increases by gij and the j-th student's happiness increases by gji. Your task is to find such initial order of students in the line that the total happiness of all students will be maximum in the end. Please note that some pair of students may have a talk several times. In the example above students 1 and 5 talk while they wait for the shower to open and while 3 has a shower.","hidden_unit_tests":"[{\"input\": \"0 0 0 0 9\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n7 0 0 0 0\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"0 43 21 18 2\\r\\n3 0 21 11 65\\r\\n5 2 0 1 4\\r\\n54 62 12 0 99\\r\\n87 64 81 33 0\\r\\n\", \"output\": [\"620\"]}, {\"input\": \"0 4 2 4 9\\r\\n6 0 2 5 0\\r\\n2 5 0 6 3\\r\\n6 3 3 0 10\\r\\n0 3 1 3 0\\r\\n\", \"output\": [\"63\"]}, {\"input\": \"0 65 90 2 32\\r\\n69 0 9 97 67\\r\\n77 97 0 16 84\\r\\n18 50 94 0 63\\r\\n69 12 82 16 0\\r\\n\", \"output\": [\"947\"]}, {\"input\": \"0 70 10 0 0\\r\\n70 0 50 90 0\\r\\n10 50 0 80 0\\r\\n0 90 80 0 100\\r\\n0 0 0 100 0\\r\\n\", \"output\": [\"960\"]}, {\"input\": \"0 711 647 743 841\\r\\n29 0 109 38 682\\r\\n329 393 0 212 512\\r\\n108 56 133 0 579\\r\\n247 92 933 164 0\\r\\n\", \"output\": [\"6265\"]}, {\"input\": \"0 9699 6962 6645 7790\\r\\n9280 0 6215 8661 6241\\r\\n2295 7817 0 7373 9681\\r\\n693 6298 1381 0 4633\\r\\n7626 3761 694 4073 0\\r\\n\", \"output\": [\"93667\"]}, {\"input\": \"0 90479 71577 33797 88848\\r\\n45771 0 96799 78707 72708\\r\\n5660 26421 0 10991 22757\\r\\n78919 24804 90645 0 48665\\r\\n92787 43671 38727 17302 0\\r\\n\", \"output\": [\"860626\"]}, {\"input\": \"0 61256 85109 94834 32902\\r\\n55269 0 67023 1310 85444\\r\\n23497 84998 0 55618 80701\\r\\n30324 1713 62127 0 55041\\r\\n47799 52448 40072 28971 0\\r\\n\", \"output\": [\"822729\"]}, {\"input\": \"0 7686 20401 55871 74372\\r\\n29526 0 15486 2152 84700\\r\\n27854 30093 0 62418 14297\\r\\n43903 76036 36194 0 50522\\r\\n29743 9945 38831 75882 0\\r\\n\", \"output\": [\"605229\"]}, {\"input\": \"0 5271 65319 64976 13673\\r\\n80352 0 41169 66004 47397\\r\\n33603 44407 0 55079 36122\\r\\n4277 9834 92810 0 80276\\r\\n1391 1145 92132 51595 0\\r\\n\", \"output\": [\"744065\"]}, {\"input\": \"0 75763 33154 32389 12897\\r\\n5095 0 6375 61517 46063\\r\\n35354 82789 0 24814 310\\r\\n37373 45993 61355 0 76865\\r\\n24383 84258 71887 71430 0\\r\\n\", \"output\": [\"714904\"]}, {\"input\": \"0 89296 32018 98206 22395\\r\\n15733 0 69391 74253 50419\\r\\n80450 89589 0 20583 51716\\r\\n38629 93129 67730 0 69703\\r\\n44054 83018 21382 64478 0\\r\\n\", \"output\": [\"874574\"]}, {\"input\": \"0 14675 94714 27735 99544\\r\\n45584 0 43621 94734 66110\\r\\n72838 45781 0 47389 99394\\r\\n75870 95368 33311 0 63379\\r\\n21974 70489 53797 23747 0\\r\\n\", \"output\": [\"974145\"]}, {\"input\": \"0 9994 14841 63916 37926\\r\\n80090 0 90258 96988 18217\\r\\n674 69024 0 17641 54436\\r\\n35046 21380 14213 0 67188\\r\\n49360 19086 68337 70856 0\\r\\n\", \"output\": [\"801116\"]}, {\"input\": \"0 28287 52158 19163 10096\\r\\n93438 0 19260 88892 12429\\r\\n22525 60034 0 78163 18126\\r\\n11594 8506 56066 0 17732\\r\\n59561 82486 23419 57406 0\\r\\n\", \"output\": [\"654636\"]}, {\"input\": \"0 35310 30842 63415 91022\\r\\n30553 0 25001 38944 92355\\r\\n48906 33736 0 96880 80893\\r\\n80507 79652 45299 0 38212\\r\\n72488 77736 19203 56436 0\\r\\n\", \"output\": [\"953303\"]}, {\"input\": \"0 42865 18485 37168 43099\\r\\n41476 0 58754 73410 51163\\r\\n76093 44493 0 51611 93773\\r\\n87223 80979 58422 0 63327\\r\\n51215 63346 84797 52809 0\\r\\n\", \"output\": [\"864938\"]}, {\"input\": \"0 63580 51022 25392 84354\\r\\n39316 0 17516 63801 92440\\r\\n5447 2074 0 11758 4772\\r\\n26329 55642 62442 0 75330\\r\\n6164 83831 10741 15214 0\\r\\n\", \"output\": [\"738415\"]}, {\"input\": \"0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 1 1 1 0\\r\\n1 0 0 1 0\\r\\n0 1 0 0 1\\r\\n1 1 0 0 0\\r\\n1 0 0 1 0\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"0 3 6 9 8\\r\\n2 0 8 7 7\\r\\n4 6 0 6 1\\r\\n9 0 3 0 6\\r\\n6 5 0 2 0\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"0 97 67 53 6\\r\\n96 0 100 57 17\\r\\n27 79 0 66 16\\r\\n89 46 71 0 28\\r\\n27 26 27 12 0\\r\\n\", \"output\": [\"926\"]}, {\"input\": \"0 670 904 349 56\\r\\n446 0 941 590 993\\r\\n654 888 0 423 752\\r\\n16 424 837 0 433\\r\\n418 655 459 897 0\\r\\n\", \"output\": [\"9752\"]}, {\"input\": \"0 4109 129 1340 7124\\r\\n7815 0 8991 2828 909\\r\\n5634 799 0 5691 9604\\r\\n3261 7013 8062 0 5160\\r\\n2433 4742 694 4786 0\\r\\n\", \"output\": [\"69867\"]}, {\"input\": \"0 14299 32984 96001 30445\\r\\n77723 0 75669 14101 55389\\r\\n30897 9956 0 52675 29987\\r\\n36518 90812 92955 0 64020\\r\\n91242 50085 86272 62454 0\\r\\n\", \"output\": [\"783459\"]}, {\"input\": \"0 46183 30304 63049 13191\\r\\n37244 0 23076 12594 43885\\r\\n98470 1788 0 37335 7775\\r\\n33822 50804 27921 0 56734\\r\\n38313 67579 77714 46687 0\\r\\n\", \"output\": [\"666175\"]}, {\"input\": \"0 39037 87960 13497 38526\\r\\n5528 0 44220 23338 92550\\r\\n87887 86544 0 30269 82845\\r\\n24590 60325 90979 0 20186\\r\\n64959 69875 93564 68355 0\\r\\n\", \"output\": [\"950600\"]}, {\"input\": \"0 27677 88187 87515 82582\\r\\n98177 0 22852 28214 99977\\r\\n52662 14066 0 79760 68188\\r\\n56883 30561 91843 0 79777\\r\\n12461 14821 29284 54372 0\\r\\n\", \"output\": [\"878207\"]}, {\"input\": \"0 37330 91942 67667 42061\\r\\n1978 0 84218 17 10834\\r\\n11303 6279 0 48597 26591\\r\\n82688 5437 34983 0 92556\\r\\n79574 32231 23167 16637 0\\r\\n\", \"output\": [\"718057\"]}, {\"input\": \"0 3 0 0 0\\r\\n3 0 2 0 0\\r\\n0 2 0 1 0\\r\\n0 0 1 0 1\\r\\n0 0 0 1 0\\r\\n\", \"output\": [\"24\"]}]","length":43,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"++-+-\\n+-+-+\", \"+-+-\\n+-??\", \"+++\\n??-\"]","prob_desc_input_spec":"The first line contains a string s1 \u2014 the commands Drazil sends to Dreamoon, this string consists of only the characters in the set {'+', '-'}.  The second line contains a string s2 \u2014 the commands Dreamoon's smartphone recognizes, this string consists of only the characters in the set {'+', '-', '?'}. '?' denotes an unrecognized command. Lengths of two strings are equal and do not exceed 10.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"f7f68a15cfd33f641132fac265bc5299","prob_desc_created_at":"1413122400","source_code":"#include<stdio.h>\n#include<string.h>\n#include<math.h>\n\nchar x[11] = {'\\n'};\nchar y[11] = {'\\n'};\n\nint main()\n{\n    int s1=0,s2=0,s22,i,w=0,a,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,right=0;\n    float Ans,p1=1.0,r=1.0;\n    scanf(\"%s %s\",x,y);\n    for(i=0; i<strlen(x); i++)\n    {\n        if(x[i]=='+') s1++;\n        else s1--;\n    }\n    for(i=0; i<strlen(y); i++)\n    {\n        if(y[i]=='+') s2++;\n        else if(y[i]=='-') s2--;\n        else w++;\n    }\n    a=abs(s1-s2);\n    if(a>w) printf(\"0.000000000000\");\n    else if(w==0)\n    {\n        if(s1==s2) printf(\"1.000000000000\");\n        else printf(\"0.000000000000\");\n    }\n    else if(w==1) printf(\"0.500000000000\");\n    else if(w==2)\n    {\n        for(i1=0; i1<=1; i1++)\n        {\n            if(i1==0) b1=1;\n            else b1=-1;\n            for(i2=0; i2<=1; i2++)\n            {\n                if(i2==0) b2=1;\n                else b2=-1;\n                s22=s2;\n                s22+=b1+b2;\n                if(s1==s22) right++;\n            }\n        }\n        w=pow(2,w);\n        p1*=w;\n        r*=right;\n        Ans=r\/p1;\n        printf(\"%.11f\",Ans);\n    }\n    else if(w==3)\n    {\n        for(i1=0; i1<=1; i1++)\n        {\n            if(i1==0) b1=1;\n            else b1=-1;\n            for(i2=0; i2<=1; i2++)\n            {\n                if(i2==0) b2=1;\n                else b2=-1;\n                for(i3=0; i3<=1; i3++)\n                {\n                    if(i3==0) b3=1;\n                    else b3=-1;\n                    s22=s2;\n                    s22+=b1+b2+b3;\n                    if(s1==s22) right++;\n                }\n            }\n        }\n        w=pow(2,w);\n        p1*=w;\n        r*=right;\n        Ans=r\/p1;\n        printf(\"%.11f\",Ans);\n    }\n    else if(w==4)\n    {\n        for(i1=0; i1<=1; i1++)\n        {\n            if(i1==0) b1=1;\n            else b1=-1;\n            for(i2=0; i2<=1; i2++)\n            {\n                if(i2==0) b2=1;\n                else b2=-1;\n                for(i3=0; i3<=1; i3++)\n                {\n                    if(i3==0) b3=1;\n                    else b3=-1;\n                    for(i4=0; i4<=1; i4++)\n                    {\n                        if(i4==0) b4=1;\n                        else b4=-1;\n                        s22=s2;\n                        s22+=b1+b2+b3+b4;\n                        if(s1==s22) right++;\n                    }\n                }\n            }\n        }\n        w=pow(2,w);\n        p1*=w;\n        r*=right;\n        Ans=r\/p1;\n        printf(\"%.11f\",Ans);\n    }\n    else if(w==5)\n    {\n        for(i1=0; i1<=1; i1++)\n        {\n            if(i1==0) b1=1;\n            else b1=-1;\n            for(i2=0; i2<=1; i2++)\n            {\n                if(i2==0) b2=1;\n                else b2=-1;\n                for(i3=0; i3<=1; i3++)\n                {\n                    if(i3==0) b3=1;\n                    else b3=-1;\n                    for(i4=0; i4<=1; i4++)\n                    {\n                        if(i4==0) b4=1;\n                        else b4=-1;\n                        for(i5=0; i5<=1; i5++)\n                        {\n                            if(i5==0) b5=1;\n                            else b5=-1;\n                            s22=s2;\n                            s22+=b1+b2+b3+b4+b5;\n                            if(s1==s22) right++;\n                        }\n                    }\n                }\n            }\n        }\n        w=pow(2,w);\n        p1*=w;\n        r*=right;\n        Ans=r\/p1;\n        printf(\"%.11f\",Ans);\n    }\n    else if(w==6)\n    {\n        for(i1=0; i1<=1; i1++)\n        {\n            if(i1==0) b1=1;\n            else b1=-1;\n            for(i2=0; i2<=1; i2++)\n            {\n                if(i2==0) b2=1;\n                else b2=-1;\n                for(i3=0; i3<=1; i3++)\n                {\n                    if(i3==0) b3=1;\n                    else b3=-1;\n                    for(i4=0; i4<=1; i4++)\n                    {\n                        if(i4==0) b4=1;\n                        else b4=-1;\n                        for(i5=0; i5<=1; i5++)\n                        {\n                            if(i5==0) b5=1;\n                            else b5=-1;\n                            for(i6=0; i6<=1; i6++)\n                            {\n                                if(i6==0) b6=1;\n                                else b6=-1;\n                                s22=s2;\n                                s22+=b1+b2+b3+b4+b5+b6;\n                                if(s1==s22) right++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        w=pow(2,w);\n        p1*=w;\n        r*=right;\n        Ans=r\/p1;\n        printf(\"%.11f\",Ans);\n    }\n    else if(w==7)\n    {\n        for(i1=0; i1<=1; i1++)\n        {\n            if(i1==0) b1=1;\n            else b1=-1;\n            for(i2=0; i2<=1; i2++)\n            {\n                if(i2==0) b2=1;\n                else b2=-1;\n                for(i3=0; i3<=1; i3++)\n                {\n                    if(i3==0) b3=1;\n                    else b3=-1;\n                    for(i4=0; i4<=1; i4++)\n                    {\n                        if(i4==0) b4=1;\n                        else b4=-1;\n                        for(i5=0; i5<=1; i5++)\n                        {\n                            if(i5==0) b5=1;\n                            else b5=-1;\n                            for(i6=0; i6<=1; i6++)\n                            {\n                                if(i6==0) b6=1;\n                                else b6=-1;\n\n                                for(i7=0; i7<=1; i7++)\n                                {\n                                    if(i7==0) b7=1;\n                                    else b7=-1;\n                                    s22=s2;\n                                    s22+=b1+b2+b3+b4+b5+b6+b7;\n                                    if(s1==s22) right++;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        w=pow(2,w);\n        p1*=w;\n        r*=right;\n        Ans=r\/p1;\n        printf(\"%.11f\",Ans);\n    }\n    else if(w==8)\n    {\n        for(i1=0; i1<=1; i1++)\n        {\n            if(i1==0) b1=1;\n            else b1=-1;\n            for(i2=0; i2<=1; i2++)\n            {\n                if(i2==0) b2=1;\n                else b2=-1;\n                for(i3=0; i3<=1; i3++)\n                {\n                    if(i3==0) b3=1;\n                    else b3=-1;\n                    for(i4=0; i4<=1; i4++)\n                    {\n                        if(i4==0) b4=1;\n                        else b4=-1;\n                        for(i5=0; i5<=1; i5++)\n                        {\n                            if(i5==0) b5=1;\n                            else b5=-1;\n                            for(i6=0; i6<=1; i6++)\n                            {\n                                if(i6==0) b6=1;\n                                else b6=-1;\n\n                                for(i7=0; i7<=1; i7++)\n                                {\n                                    if(i7==0) b7=1;\n                                    else b7=-1;\n                                    for(i8=0; i8<=1; i8++)\n                                    {\n                                        if(i8==0) b8=1;\n                                        else b8=-1;\n                                        s22=s2;\n                                        s22+=b1+b2+b3+b4+b5+b6+b7+b8;\n                                        if(s1==s22) right++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        w=pow(2,w);\n        p1*=w;\n        r*=right;\n        Ans=r\/p1;\n        printf(\"%.11f\",Ans);\n    }\n    else if(w==9)\n    {\n        for(i1=0; i1<=1; i1++)\n        {\n            if(i1==0) b1=1;\n            else b1=-1;\n            for(i2=0; i2<=1; i2++)\n            {\n                if(i2==0) b2=1;\n                else b2=-1;\n                for(i3=0; i3<=1; i3++)\n                {\n                    if(i3==0) b3=1;\n                    else b3=-1;\n                    for(i4=0; i4<=1; i4++)\n                    {\n                        if(i4==0) b4=1;\n                        else b4=-1;\n                        for(i5=0; i5<=1; i5++)\n                        {\n                            if(i5==0) b5=1;\n                            else b5=-1;\n                            for(i6=0; i6<=1; i6++)\n                            {\n                                if(i6==0) b6=1;\n                                else b6=-1;\n                                for(i7=0; i7<=1; i7++)\n                                {\n                                    if(i7==0) b7=1;\n                                    else b7=-1;\n                                    for(i8=0; i8<=1; i8++)\n                                    {\n                                        if(i8==0) b8=1;\n                                        else b8=-1;\n                                        for(i9=0; i9<=1; i9++)\n                                        {\n                                            if(i9==0) b9=1;\n                                            else b9=-1;\n                                            s22=s2;\n                                            s22+=b1+b2+b3+b4+b5+b6+b7+b8+b9;\n                                            if(s1==s22) right++;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        w=pow(2,w);\n        p1*=w;\n        r*=right;\n        Ans=r\/p1;\n        printf(\"%.11f\",Ans);\n    }\n    else if(w==10)\n    {\n        for(i1=0; i1<=1; i1++)\n        {\n            if(i1==0) b1=1;\n            else b1=-1;\n            for(i2=0; i2<=1; i2++)\n            {\n                if(i2==0) b2=1;\n                else b2=-1;\n                for(i3=0; i3<=1; i3++)\n                {\n                    if(i3==0) b3=1;\n                    else b3=-1;\n                    for(i4=0; i4<=1; i4++)\n                    {\n                        if(i4==0) b4=1;\n                        else b4=-1;\n                        for(i5=0; i5<=1; i5++)\n                        {\n                            if(i5==0) b5=1;\n                            else b5=-1;\n                            for(i6=0; i6<=1; i6++)\n                            {\n                                if(i6==0) b6=1;\n                                else b6=-1;\n                                for(i7=0; i7<=1; i7++)\n                                {\n                                    if(i7==0) b7=1;\n                                    else b7=-1;\n                                    for(i8=0; i8<=1; i8++)\n                                    {\n                                        if(i8==0) b8=1;\n                                        else b8=-1;\n                                        for(i9=0; i9<=1; i9++)\n                                        {\n                                            if(i9==0) b9=1;\n                                            else b9=-1;\n                                            for(i10=0; i10<=1; i10++)\n                                            {\n                                                if(i10==0) b10=1;\n                                                else b10=-1;\n                                                s22=s2;\n                                                s22+=b1+b2+b3+b4+b5+b6+b7+b8+b9+b10;\n                                                if(s1==s22) right++;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        w=pow(2,w);\n        p1*=w;\n        r*=right;\n        Ans=r\/p1;\n        printf(\"%.11f\",Ans);\n    }\n\n\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"1.000000000000\", \"0.500000000000\", \"0.000000000000\"]","lang_cluster":"C","code_uid":"17bd872565bdd52879b0c210c0bad002","prob_desc_notes":"NoteFor the first sample, both s1 and s2 will lead Dreamoon to finish at the same position \u2009+\u20091. For the second sample, s1 will lead Dreamoon to finish at position 0, while there are four possibilites for s2: {\"+-++\", \"+-+-\", \"+--+\", \"+---\"} with ending position {+2, 0, 0, -2} respectively. So there are 2 correct cases out of 4, so the probability of finishing at the correct position is 0.5. For the third sample, s2 could only lead us to finish at positions {+1, -1, -3}, so the probability to finish at the correct position \u2009+\u20093 is 0.","prob_desc_output_spec":"Output a single real number corresponding to the probability. The answer will be considered correct if its relative or absolute error doesn't exceed 10\u2009-\u20099.","prob_desc_output_to":"standard output","prob_desc_description":"Dreamoon is standing at the position 0 on a number line. Drazil is sending a list of commands through Wi-Fi to Dreamoon's smartphone and Dreamoon follows them.Each command is one of the following two types:   Go 1 unit towards the positive direction, denoted as '+'  Go 1 unit towards the negative direction, denoted as '-' But the Wi-Fi condition is so poor that Dreamoon's smartphone reports some of the commands can't be recognized and Dreamoon knows that some of them might even be wrong though successfully recognized. Dreamoon decides to follow every recognized command and toss a fair coin to decide those unrecognized ones (that means, he moves to the 1 unit to the negative or positive direction with the same probability 0.5). You are given an original list of commands sent by Drazil and list received by Dreamoon. What is the probability that Dreamoon ends in the position originally supposed to be final by Drazil's commands?","hidden_unit_tests":"[{\"input\": \"++-+-\\r\\n+-+-+\\r\\n\", \"output\": [\"1\", \"1.000000000000\", \"1.000000000\", \"1.0\", \"1.00000000000\", \"1.0000000000\"]}, {\"input\": \"+-+-\\r\\n+-??\\r\\n\", \"output\": [\"0.5\", \"0.50000000000\", \"0.500000000\", \"0.500000000000\", \"0.5000000000\"]}, {\"input\": \"+++\\r\\n??-\\r\\n\", \"output\": [\"0.000000000000\", \"0.0000000000\", \"0\", \"0.00000000000\", \"0.0\", \"0.000000000\"]}, {\"input\": \"++++++++++\\r\\n+++??++?++\\r\\n\", \"output\": [\"0.1250000000\", \"0.125\", \"0.12500000000\", \"0.125000000\", \"0.125000000000\"]}, {\"input\": \"--+++---+-\\r\\n??????????\\r\\n\", \"output\": [\"0.205078125\", \"0.20507812500\", \"0.205078125000\", \"0.2050781250\"]}, {\"input\": \"+--+++--+-\\r\\n??????????\\r\\n\", \"output\": [\"0.24609375\", \"0.2460937500\", \"0.246093750\", \"0.246093750000\", \"0.24609375000\"]}, {\"input\": \"+\\r\\n+\\r\\n\", \"output\": [\"1\", \"1.000000000000\", \"1.000000000\", \"1.0\", \"1.00000000000\", \"1.0000000000\"]}, {\"input\": \"-\\r\\n?\\r\\n\", \"output\": [\"0.5\", \"0.50000000000\", \"0.500000000\", \"0.500000000000\", \"0.5000000000\"]}, {\"input\": \"+\\r\\n-\\r\\n\", \"output\": [\"0.000000000000\", \"0.0000000000\", \"0\", \"0.00000000000\", \"0.0\", \"0.000000000\"]}, {\"input\": \"-\\r\\n-\\r\\n\", \"output\": [\"1\", \"1.000000000000\", \"1.000000000\", \"1.0\", \"1.00000000000\", \"1.0000000000\"]}, {\"input\": \"-\\r\\n+\\r\\n\", \"output\": [\"0.000000000000\", \"0.0000000000\", \"0\", \"0.00000000000\", \"0.0\", \"0.000000000\"]}, {\"input\": \"+\\r\\n?\\r\\n\", \"output\": [\"0.5\", \"0.50000000000\", \"0.500000000\", \"0.500000000000\", \"0.5000000000\"]}, {\"input\": \"++++++++++\\r\\n++++++++++\\r\\n\", \"output\": [\"1\", \"1.000000000000\", \"1.000000000\", \"1.0\", \"1.00000000000\", \"1.0000000000\"]}, {\"input\": \"++++++++++\\r\\n++++-+++++\\r\\n\", \"output\": [\"0.000000000000\", \"0.0000000000\", \"0\", \"0.00000000000\", \"0.0\", \"0.000000000\"]}, {\"input\": \"----------\\r\\n++++++++++\\r\\n\", \"output\": [\"0.000000000000\", \"0.0000000000\", \"0\", \"0.00000000000\", \"0.0\", \"0.000000000\"]}, {\"input\": \"++++++++++\\r\\n++++??++++\\r\\n\", \"output\": [\"0.25\", \"0.2500000000\", \"0.250000000000\", \"0.25000000000\", \"0.250000000\"]}, {\"input\": \"----------\\r\\n+++?++++-+\\r\\n\", \"output\": [\"0.000000000000\", \"0.0000000000\", \"0\", \"0.00000000000\", \"0.0\", \"0.000000000\"]}, {\"input\": \"++++++++++\\r\\n++++++++?+\\r\\n\", \"output\": [\"0.5\", \"0.50000000000\", \"0.500000000\", \"0.500000000000\", \"0.5000000000\"]}, {\"input\": \"--++++--+\\r\\n?-+?-??+-\\r\\n\", \"output\": [\"0.25\", \"0.2500000000\", \"0.250000000000\", \"0.25000000000\", \"0.250000000\"]}, {\"input\": \"----------\\r\\n??????????\\r\\n\", \"output\": [\"0.000976562500\", \"0.00097656250\", \"0.000976562500000\", \"0.000976563\", \"9.765625E-4\", \"0.0009765625\"]}, {\"input\": \"+--++\\r\\n+--+-\\r\\n\", \"output\": [\"0.000000000000\", \"0.0000000000\", \"0\", \"0.00000000000\", \"0.0\", \"0.000000000\"]}, {\"input\": \"-----++---\\r\\n????????+?\\r\\n\", \"output\": [\"0.0175781250000\", \"0.01757812500\", \"0.017578125000\", \"0.0175781250\", \"0.017578125\"]}, {\"input\": \"------+--+\\r\\n??????????\\r\\n\", \"output\": [\"0.043945313\", \"0.0439453125000\", \"0.043945312500\", \"0.0439453125\", \"0.04394531250\"]}, {\"input\": \"---++--\\r\\n???????\\r\\n\", \"output\": [\"0.1640625000\", \"0.16406250000\", \"0.1640625\", \"0.164062500\", \"0.164062500000\"]}, {\"input\": \"-----++\\r\\n???????\\r\\n\", \"output\": [\"0.1640625000\", \"0.16406250000\", \"0.1640625\", \"0.164062500\", \"0.164062500000\"]}, {\"input\": \"+---+--\\r\\n???????\\r\\n\", \"output\": [\"0.1640625000\", \"0.16406250000\", \"0.1640625\", \"0.164062500\", \"0.164062500000\"]}, {\"input\": \"---+-+\\r\\n??????\\r\\n\", \"output\": [\"0.234375000\", \"0.23437500000\", \"0.234375\", \"0.2343750000\", \"0.234375000000\"]}, {\"input\": \"+++-+\\r\\n---++\\r\\n\", \"output\": [\"0.000000000000\", \"0.0000000000\", \"0\", \"0.00000000000\", \"0.0\", \"0.000000000\"]}, {\"input\": \"++-+--+\\r\\n?-?+??+\\r\\n\", \"output\": [\"0.375\", \"0.375000000000\", \"0.3750000000\", \"0.375000000\", \"0.37500000000\"]}, {\"input\": \"----+++--\\r\\n-+?+++?--\\r\\n\", \"output\": [\"0.000000000000\", \"0.0000000000\", \"0\", \"0.00000000000\", \"0.0\", \"0.000000000\"]}, {\"input\": \"+-----\\r\\n+?----\\r\\n\", \"output\": [\"0.5\", \"0.50000000000\", \"0.500000000\", \"0.500000000000\", \"0.5000000000\"]}]","length":406,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"10 30\\n10 35\\n05:20\", \"60 120\\n24 100\\n13:00\"]","prob_desc_input_spec":"The first line contains two integers a,\u2009ta (1\u2009\u2264\u2009a,\u2009ta\u2009\u2264\u2009120) \u2014 the frequency of the buses from the city A to the city B and the travel time. Both values are given in minutes. The second line contains two integers b,\u2009tb (1\u2009\u2264\u2009b,\u2009tb\u2009\u2264\u2009120) \u2014 the frequency of the buses from the city B to the city A and the travel time. Both values are given in minutes. The last line contains the departure time of Simion from the city A in the format hh:mm. It is guaranteed that there are a bus from the city A at that time. Note that the hours and the minutes are given with exactly two digits.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"1c4cf1c3cb464a483511a8a61f8685a7","prob_desc_created_at":"1461164400","source_code":"#include<stdio.h>\nint main()\n{\n\tint a,ta;\n\tscanf(\"%d%d\",&a,&ta);\n\tint b,tb;\n\tscanf(\"%d%d\",&b,&tb);\n\tint h,m;\n\tscanf(\"%d:%d\",&h,&m);\n\tint x,y,w=0,z=300;\n\tx=60*h+m;\n\ty=60*h+m+ta;\n\tjump:\n\t\tif(z+tb<x)\n\t\t{\n\t\t\tz=z+b;\n\t\t\tgoto jump;\n\t\t}\n\t\telse if(z+tb>x && z<y && z<1440)\n\t\t{\n\t\t\tw+=1;\n\t\t\tz=z+b;\n\t\t\tgoto jump;\n\t\t}\n\t\telse if(z>y)\n\t\t{\n\t\t\tgoto temp;\n\t\t}\n\t\telse if(z+tb==x || z==y)\n\t\t{\n\t\t\tz=z+b;\n\t\t\tgoto jump;\n\t\t}\n\t\ttemp:\n\t\tprintf(\"%d\\n\",w);\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"5\", \"9\"]","lang_cluster":"C","code_uid":"e83dc1a0f06ecbf461ed86962eef38d9","prob_desc_notes":"NoteIn the first example Simion departs form the city A at 05:20 AM and arrives to the city B at 05:50 AM. He will meet the first 5 buses from the city B that departed in the period [05:00 AM - 05:40 AM]. Also Simion will meet a bus in the city B at 05:50 AM, but he will not count it.Also note that the first encounter will be between 05:26 AM and 05:27 AM (if we suggest that the buses are go with the sustained speed).","prob_desc_output_spec":"Print the only integer z \u2014 the number of buses Simion will meet on the way. Note that you should not count the encounters in cities A and B.","prob_desc_output_to":"standard output","prob_desc_description":"Buses run between the cities A and B, the first one is at 05:00 AM and the last one departs not later than at 11:59 PM. A bus from the city A departs every a minutes and arrives to the city B in a ta minutes, and a bus from the city B departs every b minutes and arrives to the city A in a tb minutes.The driver Simion wants to make his job diverse, so he counts the buses going towards him. Simion doesn't count the buses he meet at the start and finish.You know the time when Simion departed from the city A to the city B. Calculate the number of buses Simion will meet to be sure in his counting.","hidden_unit_tests":"[{\"input\": \"10 30\\r\\n10 35\\r\\n05:20\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"60 120\\r\\n24 100\\r\\n13:00\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"30 60\\r\\n60 60\\r\\n22:30\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"30 60\\r\\n10 60\\r\\n23:30\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"5 45\\r\\n4 60\\r\\n21:00\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"1 1\\r\\n1 1\\r\\n10:28\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 1\\r\\n5 4\\r\\n18:40\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8 8\\r\\n1 1\\r\\n13:24\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"20 4\\r\\n1 20\\r\\n06:20\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"15 24\\r\\n23 6\\r\\n21:15\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"30 19\\r\\n21 4\\r\\n10:30\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"31 15\\r\\n36 25\\r\\n07:04\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"24 3\\r\\n54 9\\r\\n18:12\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"18 69\\r\\n62 54\\r\\n08:00\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"33 58\\r\\n70 78\\r\\n22:36\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"68 34\\r\\n84 78\\r\\n10:40\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"15 14\\r\\n32 65\\r\\n05:45\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"40 74\\r\\n100 42\\r\\n05:40\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"65 49\\r\\n24 90\\r\\n07:10\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 1\\r\\n1 1\\r\\n23:59\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"23 118\\r\\n118 20\\r\\n23:24\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 88\\r\\n17 38\\r\\n22:33\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"3 1\\r\\n2 3\\r\\n05:03\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n3 2\\r\\n08:44\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 3\\r\\n1 2\\r\\n21:43\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 28\\r\\n2 12\\r\\n05:12\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"60 120\\r\\n17 120\\r\\n23:00\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"1 55\\r\\n1 54\\r\\n23:59\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"66 75\\r\\n1 82\\r\\n06:06\\r\\n\", \"output\": [\"141\"]}, {\"input\": \"1 90\\r\\n1 88\\r\\n23:59\\r\\n\", \"output\": [\"88\"]}, {\"input\": \"1 120\\r\\n1 100\\r\\n23:59\\r\\n\", \"output\": [\"100\"]}]","length":37,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"BBBSSC\\n6 4 1\\n1 2 3\\n4\", \"BBC\\n1 10 1\\n1 10 1\\n21\", \"BSC\\n1 1 1\\n1 1 3\\n1000000000000\"]","prob_desc_input_spec":"The first line of the input contains a non-empty string that describes the recipe of \"Le Hamburger de Polycarpus\". The length of the string doesn't exceed 100, the string contains only letters 'B' (uppercase English B), 'S' (uppercase English S) and 'C' (uppercase English C). The second line contains three integers nb, ns, nc (1\u2009\u2264\u2009nb,\u2009ns,\u2009nc\u2009\u2264\u2009100) \u2014 the number of the pieces of bread, sausage and cheese on Polycarpus' kitchen. The third line contains three integers pb, ps, pc (1\u2009\u2264\u2009pb,\u2009ps,\u2009pc\u2009\u2264\u2009100) \u2014 the price of one piece of bread, sausage and cheese in the shop. Finally, the fourth line contains integer r (1\u2009\u2264\u2009r\u2009\u2264\u20091012) \u2014 the number of rubles Polycarpus has. Please, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"8126a4232188ae7de8e5a7aedea1a97e","prob_desc_created_at":"1386493200","source_code":"\/\/\n\/\/  codeforces3.c\n\/\/  SPOJEMC\n\/\/\n\/\/  Created by Nelson Isao Nauata Junior on 12\/7\/13.\n\/\/  Copyright (c) 2013 Nelson Isao Nauata Junior. All rights reserved.\n\/\/\n\n#include <stdio.h>\n#include <string.h>\n\nlong long int min(long long int *vec){\n    int i;\n    long long int min;\n    min = vec[0];\n    for(i = 0; i < 3; i++){\n        if(vec[i] < min && vec[i] != 0){\n            min = vec[i];\n        }\n    }\n    if(min == 0){\n        return -1;\n    }\n    else{\n        return min;\n    }   \n}\n\nint main(){\n    char recipe[1000];\n    long long int nb, ns, nc, i;\n    int pb, ps, pc;\n    long long int b, s, c, max;\n    long long int inf, sup, r_linha, mid, total, r, ratio, r_b, r_c, r_s, vec[3], NB, NC, NS;\n    \n    scanf(\"%s\", recipe);\n    scanf(\"%lld %lld %lld\", &nb, &ns, &nc);\n    scanf(\"%d %d %d\", &pb, &ps, &pc);\n    scanf(\"%lld\", &r);\n    \n    b= 0;\n    s = 0;\n    c = 0;\n    for(i = 0; i < strlen(recipe); i++){\n        if(recipe[i] == 'B'){\n            b++;\n        }\n        else if(recipe[i] == 'C'){\n            c++;\n        }\n        else{\n            s++;\n        }\n    }\n    \n    \n    if(b == 0){\n        nb = 0;\n        pb = 0;\n    }\n    if(c == 0){\n        nc = 0;\n        pc = 0;\n    }\n    if(s == 0){\n        ns = 0;\n        ps = 0;\n    }\n    total = 0;\n    \/\/printf(\"%lld %lld %lld\\n\", b, s, c);\n    while(nb || ns || nc){\n        nb -= b;\n        ns -= s;\n        nc -= c;\n        if(nb <= 0){\n            r += nb*pb;\n            nb = 0;\n        }\n        if(ns <= 0){\n            r += ns*ps;\n            ns = 0;\n        }\n        if(nc <= 0){\n            r += nc*pc;\n            nc = 0;\n        }\n        \/\/printf(\"%lld %lld %lld\\n\", nb, ns, nc);\n        if(r <= 0){\n            if(r == 0){\n                total++;\n            }\n            \/\/printf(\"%lld\\n\", r);\n            break;\n        }\n        total++;\n    }   \n    total += r\/(s*ps + c*pc + b*pb);\n    printf(\"%lld\\n\", total);\n    return 0;\n}","prob_desc_sample_outputs":"[\"2\", \"7\", \"200000000001\"]","lang_cluster":"C","code_uid":"4551fb137cfafdf21f92f257c43e9cb9","prob_desc_notes":null,"prob_desc_output_spec":"Print the maximum number of hamburgers Polycarpus can make. If he can't make any hamburger, print 0.","prob_desc_output_to":"standard output","prob_desc_description":"Polycarpus loves hamburgers very much. He especially adores the hamburgers he makes with his own hands. Polycarpus thinks that there are only three decent ingredients to make hamburgers from: a bread, sausage and cheese. He writes down the recipe of his favorite \"Le Hamburger de Polycarpus\" as a string of letters 'B' (bread), 'S' (sausage) \u0438 'C' (cheese). The ingredients in the recipe go from bottom to top, for example, recipe \"\u0412SCBS\" represents the hamburger where the ingredients go from bottom to top as bread, sausage, cheese, bread and sausage again.Polycarpus has nb pieces of bread, ns pieces of sausage and nc pieces of cheese in the kitchen. Besides, the shop nearby has all three ingredients, the prices are pb rubles for a piece of bread, ps for a piece of sausage and pc for a piece of cheese.Polycarpus has r rubles and he is ready to shop on them. What maximum number of hamburgers can he cook? You can assume that Polycarpus cannot break or slice any of the pieces of bread, sausage or cheese. Besides, the shop has an unlimited number of pieces of each ingredient.","hidden_unit_tests":"[{\"input\": \"BBBSSC\\r\\n6 4 1\\r\\n1 2 3\\r\\n4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"BBC\\r\\n1 10 1\\r\\n1 10 1\\r\\n21\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"BSC\\r\\n1 1 1\\r\\n1 1 3\\r\\n1000000000000\\r\\n\", \"output\": [\"200000000001\"]}, {\"input\": \"B\\r\\n1 1 1\\r\\n1 1 1\\r\\n381\\r\\n\", \"output\": [\"382\"]}, {\"input\": \"BSC\\r\\n3 5 6\\r\\n7 3 9\\r\\n100\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"BSC\\r\\n100 1 1\\r\\n100 1 1\\r\\n100\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"SBBCCSBB\\r\\n1 50 100\\r\\n31 59 21\\r\\n100000\\r\\n\", \"output\": [\"370\"]}, {\"input\": \"BBBBCCCCCCCCCCCCCCCCCCCCSSSSBBBBBBBBSS\\r\\n100 100 100\\r\\n1 1 1\\r\\n3628800\\r\\n\", \"output\": [\"95502\"]}, {\"input\": \"BBBBBBBBBBCCCCCCCCCCCCCCCCCCCCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\\r\\n10 20 40\\r\\n100 100 100\\r\\n200\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"BBBBBBBBBBCCCCCCCCCCCCCCCCCCCCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\\r\\n10 20 40\\r\\n100 100 100\\r\\n2000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"BBBBBBBBBBCCCCCCCCCCCCCCCCCCCCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\\r\\n10 20 40\\r\\n100 100 100\\r\\n300\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"BBBBBBBBBBCCCCCCCCCCCCCCCCCCCCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\\r\\n10 20 40\\r\\n100 100 100\\r\\n300000000\\r\\n\", \"output\": [\"42858\"]}, {\"input\": \"BBBBBBBBBBCCCCCCCCCCCCCCCCCCCCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\\r\\n10 20 40\\r\\n100 100 100\\r\\n914159265358\\r\\n\", \"output\": [\"130594181\"]}, {\"input\": \"SSSSSSSSSSBBBBBBBBBCCCCCCCCCCCCCCCCCCCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSBB\\r\\n31 53 97\\r\\n13 17 31\\r\\n914159265358\\r\\n\", \"output\": [\"647421579\"]}, {\"input\": \"BBBCSBSBBSSSSCCCCBBCSBBBBSSBBBCBSCCSSCSSCSBSSSCCCCBSCSSBSSSCCCBBCCCSCBCBBCCSCCCCSBBCCBBBBCCCCCCBSSCB\\r\\n91 87 17\\r\\n64 44 43\\r\\n958532915587\\r\\n\", \"output\": [\"191668251\"]}, {\"input\": \"CSSCBBCCCSBSCBBBCSBBBCBSBCSCBCSCBCBSBCBCSSBBSBBCBBBBSCSBBCCBCCBCBBSBSBCSCSBBSSBBCSSBCSCSCCSSBCBBCBSB\\r\\n56 34 48\\r\\n78 6 96\\r\\n904174875419\\r\\n\", \"output\": [\"140968956\"]}, {\"input\": \"CCSCCCSBBBSCBSCSCCSSBBBSSBBBSBBBCBCSSBCSCBBCCCBCBCBCCCSSBSBBCCCCCBBSCBSCBCBBCBBCSSBCSBSSCCSCCSCCBBBS\\r\\n33 73 67\\r\\n4 56 42\\r\\n886653164314\\r\\n\", \"output\": [\"277425898\"]}, {\"input\": \"SBCSSCBBSSBCSSBBBSSBSCBSSSCBBSBBBBCSBCSBSCBSCBSCBSBSSCCCCBSBCCBCBSCCCBSCCBSBBCBSSCCCCSBSBBBSSSBCSCBC\\r\\n94 16 85\\r\\n14 18 91\\r\\n836590091442\\r\\n\", \"output\": [\"217522127\"]}, {\"input\": \"BSCSBSCCSCSSCCCSBCSSBCBBSCCBSCCSSSSSSSSSCCSBSCCBBCBBSBSCCCCBCSBSBSSBBBBBSSBSSCBCCSSBSSSCBBCSBBSBCCCB\\r\\n67 54 8\\r\\n36 73 37\\r\\n782232051273\\r\\n\", \"output\": [\"154164772\"]}, {\"input\": \"CBBCBSBCCSCBSSCCBCSBCSBBSCBBCSCCBSCCSCSBBSSBSBSCBBSBBCSSSSBBBBSBBCBCSBBCBCSSBBCSBSCCSCSBCSCBSCCBBCSC\\r\\n71 71 52\\r\\n52 88 3\\r\\n654400055575\\r\\n\", \"output\": [\"137826467\"]}, {\"input\": \"CBBCBSBCCSCBSSCCBCSBCSBBSCBBCSCCBSCCSCSBBSBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCBBCSC\\r\\n100 1 1\\r\\n1 17 23\\r\\n954400055575\\r\\n\", \"output\": [\"1355681897\"]}, {\"input\": \"C\\r\\n100 100 100\\r\\n1 1 1\\r\\n1000000000000\\r\\n\", \"output\": [\"1000000000100\"]}, {\"input\": \"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\\r\\n100 100 100\\r\\n100 100 100\\r\\n1000000000000\\r\\n\", \"output\": [\"100000001\"]}, {\"input\": \"B\\r\\n100 100 100\\r\\n1 1 1\\r\\n1\\r\\n\", \"output\": [\"101\"]}, {\"input\": \"SC\\r\\n2 1 1\\r\\n1 1 1\\r\\n100000000000\\r\\n\", \"output\": [\"50000000001\"]}, {\"input\": \"B\\r\\n100 1 1\\r\\n1 1 1\\r\\n1000000000000\\r\\n\", \"output\": [\"1000000000100\"]}, {\"input\": \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\n1 1 1\\r\\n100 100 100\\r\\n1000000000000\\r\\n\", \"output\": [\"100000000\"]}, {\"input\": \"CC\\r\\n1 1 1\\r\\n100 100 100\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"B\\r\\n100 100 100\\r\\n1 1 1\\r\\n1000000000000\\r\\n\", \"output\": [\"1000000000100\"]}, {\"input\": \"BSC\\r\\n100 100 100\\r\\n1 1 1\\r\\n1000000000000\\r\\n\", \"output\": [\"333333333433\"]}, {\"input\": \"BSC\\r\\n100 100 100\\r\\n1 1 1\\r\\n1\\r\\n\", \"output\": [\"100\"]}]","length":100,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"512 megabytes","difficulty":2000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"8 1 1\", \"8 1 10\"]","prob_desc_input_spec":"The only line contains three integers n, x and y (1\u2009\u2264\u2009n\u2009\u2264\u2009107, 1\u2009\u2264\u2009x,\u2009y\u2009\u2264\u2009109) \u2014 the number of letters 'a' in the input file and the parameters from the problem statement.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"0f270af00be2a523515d5e7bd66800f6","prob_desc_created_at":"1471875000","source_code":"#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n    unsigned long long n, x, y;\n    unsigned long nl, xl, yl;\n\n    fscanf(stdin, \"%ld %ld %ld\", &nl, &xl, &yl);\n\n    n = (unsigned long long)nl;\n    x = (unsigned long long)xl;\n    y = (unsigned long long)yl;\n\n    unsigned long long* f = malloc(10000001*sizeof(unsigned long long));\n\n    f[1] = x;\n    f[2] = x < y? x + f[1] : y + f[1];\n\n    unsigned long long k;\n\n    for (unsigned long long m = 3; m < n+1; m++)\n    {\n        k = (m+1)\/2;\n        if (m % 2 == 1)\n            f[2*k-1] = f[k]+y+x < f[2*k-2]+x ? f[k]+y+x : f[2*k-2]+x;\n        else\n            f[2*k] = f[k]+y < f[2*k-2]+2*x ? f[k]+y : f[2*k-2]+2*x;\n    }\n    unsigned long pref = f[n] \/ 1000000000Lu;\n    unsigned long rest = f[n] % 1000000000Lu;\n    int digs = 9;\n    int pow10 = 100000000Lu;\n    while (digs > 1)\n    {\n        if (rest >= pow10)\n            break;\n        pow10 \/= 10;\n        digs = digs-1;\n    }\n    if (pref > 0)\n    {\n        if (9-digs == 0)\n            printf(\"%lu%lu\\n\", pref, rest);\n        else\n        {\n            char* zeros = malloc((9-digs+1)*sizeof(char));\n            for (int i = 0; i < 9-digs; i++) zeros[i] = '0';\n            zeros[9-digs] = 0;\n            printf(\"%lu%s%lu\\n\", pref, zeros, rest);\n        }\n    }\n    else\n        printf(\"%lu\\n\", rest);\n}\n","prob_desc_sample_outputs":"[\"4\", \"8\"]","lang_cluster":"C","code_uid":"71b8c989051c5d4dfb393b5f422038eb","prob_desc_notes":null,"prob_desc_output_spec":"Print the only integer t \u2014 the minimum amount of time needed to generate the input file.","prob_desc_output_to":"standard output","prob_desc_description":"zscoder wants to generate an input file for some programming competition problem.His input is a string consisting of n letters 'a'. He is too lazy to write a generator so he will manually generate the input in a text editor.Initially, the text editor is empty. It takes him x seconds to insert or delete a letter 'a' from the text file and y seconds to copy the contents of the entire text file, and duplicate it.zscoder wants to find the minimum amount of time needed for him to create the input file of exactly n letters 'a'. Help him to determine the amount of time needed to generate the input.","hidden_unit_tests":"[{\"input\": \"8 1 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"8 1 10\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"10 62 99\\r\\n\", \"output\": [\"384\"]}, {\"input\": \"88 417 591\\r\\n\", \"output\": [\"4623\"]}, {\"input\": \"57 5289 8444\\r\\n\", \"output\": [\"60221\"]}, {\"input\": \"382 81437847 324871127\\r\\n\", \"output\": [\"2519291691\"]}, {\"input\": \"244 575154303 436759189\\r\\n\", \"output\": [\"5219536421\"]}, {\"input\": \"85 902510038 553915152\\r\\n\", \"output\": [\"6933531064\"]}, {\"input\": \"1926 84641582 820814219\\r\\n\", \"output\": [\"7184606427\"]}, {\"input\": \"3768 561740421 232937477\\r\\n\", \"output\": [\"5042211408\"]}, {\"input\": \"2313 184063453 204869248\\r\\n\", \"output\": [\"2969009745\"]}, {\"input\": \"35896 278270961 253614967\\r\\n\", \"output\": [\"5195579310\"]}, {\"input\": \"483867 138842067 556741142\\r\\n\", \"output\": [\"10712805143\"]}, {\"input\": \"4528217 187553422 956731625\\r\\n\", \"output\": [\"21178755627\"]}, {\"input\": \"10000000 1000000000 1\\r\\n\", \"output\": [\"8000000023\"]}, {\"input\": \"10000000 1 100\\r\\n\", \"output\": [\"1757\"]}, {\"input\": \"10000000 1 1000000000\\r\\n\", \"output\": [\"10000000\"]}, {\"input\": \"10000000 1 1000\\r\\n\", \"output\": [\"14224\"]}, {\"input\": \"10000000 1 10\\r\\n\", \"output\": [\"214\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000000 998 998\\r\\n\", \"output\": [\"30938\"]}, {\"input\": \"9999999 987654321 123456789\\r\\n\", \"output\": [\"11728395036\"]}, {\"input\": \"9999999 1 2\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"10000000 1 1\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"11478 29358 26962\\r\\n\", \"output\": [\"556012\"]}, {\"input\": \"4314870 1000000000 1\\r\\n\", \"output\": [\"7000000022\"]}, {\"input\": \"7186329 608148870 290497442\\r\\n\", \"output\": [\"12762929866\"]}, {\"input\": \"9917781 1 1\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"7789084 807239576 813643932\\r\\n\", \"output\": [\"25165322688\"]}, {\"input\": \"58087 1 100000000\\r\\n\", \"output\": [\"58087\"]}, {\"input\": \"9999991 2 3\\r\\n\", \"output\": [\"88\"]}]","length":55,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 1 2 1 2\", \"3 3 1 1 1\", \"4 5 3 1 5\"]","prob_desc_input_spec":"The first line contains five integers s, v1, v2, t1, t2 (1\u2009\u2264\u2009s,\u2009v1,\u2009v2,\u2009t1,\u2009t2\u2009\u2264\u20091000)\u00a0\u2014 the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"10226b8efe9e3c473239d747b911a1ef","prob_desc_created_at":"1501511700","source_code":"#include<stdio.h>\nmain()\n{\n    int s,v1,v2,t1,t2;\n    scanf(\"%d\",&s);\n    scanf(\"%d %d %d %d\",&v1,&v2,&t1,&t2);\n\n    int ans1=v1*s+2*t1;\n    int ans2=v2*s+2*t2;\n\n    if(ans1<ans2) printf(\"First\\n\");\n    else if(ans1>ans2) printf(\"Second\\n\");\n    else printf(\"Friendship\\n\");\n\n    return 0;\n}","prob_desc_sample_outputs":"[\"First\", \"Second\", \"Friendship\"]","lang_cluster":"C","code_uid":"4bfaa4395d4907385dce471b89cbf8de","prob_desc_notes":"NoteIn the first example, information on the success of the first participant comes in 7 milliseconds, of the second participant\u00a0\u2014 in 14 milliseconds. So, the first wins.In the second example, information on the success of the first participant comes in 11 milliseconds, of the second participant\u00a0\u2014 in 5 milliseconds. So, the second wins.In the third example, information on the success of the first participant comes in 22 milliseconds, of the second participant\u00a0\u2014 in 22 milliseconds. So, it is be a draw.","prob_desc_output_spec":"If the first participant wins, print \"First\". If the second participant wins, print \"Second\". In case of a draw print \"Friendship\".","prob_desc_output_to":"standard output","prob_desc_description":"Two boys decided to compete in text typing on the site \"Key races\". During the competition, they have to type a text consisting of s characters. The first participant types one character in v1 milliseconds and has ping t1 milliseconds. The second participant types one character in v2 milliseconds and has ping t2 milliseconds.If connection ping (delay) is t milliseconds, the competition passes for a participant as follows:   Exactly after t milliseconds after the start of the competition the participant receives the text to be entered.  Right after that he starts to type it.  Exactly t milliseconds after he ends typing all the text, the site receives information about it. The winner is the participant whose information on the success comes earlier. If the information comes from both participants at the same time, it is considered that there is a draw.Given the length of the text and the information about participants, determine the result of the game.","hidden_unit_tests":"[{\"input\": \"5 1 2 1 2\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"3 3 1 1 1\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"4 5 3 1 5\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"1000 1000 1000 1000 1000\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"1 1 1 1 1\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"8 8 1 1 1\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"15 14 32 65 28\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"894 197 325 232 902\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"1 2 8 8 5\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"37 261 207 1 1000\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"29 344 406 900 1\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"1 2 8 9 8\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"2 9 8 8 9\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"213 480 811 134 745\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"2 313 856 964 421\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"1 10 2 6 10\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"2 7 6 2 3\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"637 324 69 612 998\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"13 849 819 723 918\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"9 5 7 8 7\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"6 5 7 10 4\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"61 464 623 89 548\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"641 31 29 161 802\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"3 3 1 6 9\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"2 3 9 8 2\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"485 117 368 567 609\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"4 202 512 995 375\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"424 41 41 909 909\\r\\n\", \"output\": [\"Friendship\"]}, {\"input\": \"884 913 263 641 265\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"12 462 8 311 327\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"436 306 266 493 580\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"69 1 2 1 2\\r\\n\", \"output\": [\"First\"]}]","length":16,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"255 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 10\", \"1 2 5\", \"2 3 9\"]","prob_desc_input_spec":"The only string contains three integers\u00a0\u2014 n, m and z (1\u2009\u2264\u2009n,\u2009m,\u2009z\u2009\u2264\u2009104).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"e7ad55ce26fc8610639323af1de36c2d","prob_desc_created_at":"1486042500","source_code":"#include <stdio.h>\n\nint gcd(int a, int b)\n{\n\tif(b == 0)\n\t{\n\t\treturn a;\n\t}\n\n\telse\n\t{\n\t\treturn gcd(b,a % b);\n\t}\n}\n\nint main()\n{\n\tint a,b,c,q = 0;\n\n\tscanf(\"%d %d %d\",&a,&b,&c);\n\n\tint lcm = a * b;\n\n\tint x = gcd(a,b);\n\n\tlcm \/= x;\n\n\tc \/= lcm;\n\n\tprintf(\"%d\\n\",c);\n\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"10\", \"2\", \"1\"]","lang_cluster":"C","code_uid":"fb25fb04d0459526449d4428f883adae","prob_desc_notes":"NoteTaymyr is a place in the north of Russia.In the first test the artists come each minute, as well as the calls, so we need to kill all of them.In the second test we need to kill artists which come on the second and the fourth minutes.In the third test\u00a0\u2014 only the artist which comes on the sixth minute. ","prob_desc_output_spec":"Print single integer\u00a0\u2014 the minimum number of artists that should be killed so that there are no artists in the room when Ilia calls.","prob_desc_output_to":"standard output","prob_desc_description":"Comrade Dujikov is busy choosing artists for Timofey's birthday and is recieving calls from Taymyr from Ilia-alpinist.Ilia-alpinist calls every n minutes, i.e. in minutes n, 2n, 3n and so on. Artists come to the comrade every m minutes, i.e. in minutes m, 2m, 3m and so on. The day is z minutes long, i.e. the day consists of minutes 1,\u20092,\u2009...,\u2009z. How many artists should be killed so that there are no artists in the room when Ilia calls? Consider that a call and a talk with an artist take exactly one minute.","hidden_unit_tests":"[{\"input\": \"1 1 10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1 2 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2 3 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 8 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7 9 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10000 10000 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"24 22 9235\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"74 8 417\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"972 1 203\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"550 1 754\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"860 1 884\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"358 2 809\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"33 27 216\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2940 1 9311\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4624 1 1953\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2696 2 7345\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3443 2 6701\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 613 2275\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 10000 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10000 1 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1 10000\\r\\n\", \"output\": [\"10000\"]}, {\"input\": \"34 27 10000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"2 2 9999\\r\\n\", \"output\": [\"4999\"]}, {\"input\": \"2 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 4 36\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"33 6 3005\\r\\n\", \"output\": [\"45\"]}, {\"input\": \"5 1 20\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 2 10\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2 1 100\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"10 20 10000\\r\\n\", \"output\": [\"500\"]}, {\"input\": \"8 12 12\\r\\n\", \"output\": [\"0\"]}]","length":33,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n3 2 1 2\", \"3\\n2 3 8\"]","prob_desc_input_spec":"The first line of input contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1\u2009\u2264\u2009ai\u2009\u2264\u2009100) denotes the number of cubes in the i-th column.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"ae20712265d4adf293e75d016b4b82d8","prob_desc_created_at":"1395502200","source_code":"#include<stdio.h>\nint box[100][100];\nint main()\n{\n    int n,i,j,t;\n    scanf(\"%d\",&n);\n    for(i=0; i<n; ++i)\n    {\n        scanf(\"%d\",&t);\n        for(j=0; j<t; ++j)\n            box[j][i] = 1;\n    }\n    for(t=0; t<n; ++t)\n        for(i=0; i<100; ++i)\n            for(j=0; j<n-1; ++j)\n                if(box[i][j]&&!box[i][j+1])\n                    box[i][j]=0,box[i][j+1]=1;\n    for(i=0; i<n; ++i)\n    {\n        t=0;\n        for(j=0; j<100; ++j)\n            if(box[j][i])\n                ++t;\n        printf(\"%d \",t);\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"1 2 2 3\", \"2 3 8\"]","lang_cluster":"C","code_uid":"472c04ada938ae8850f5a9c3685e667a","prob_desc_notes":"NoteThe first example case is shown on the figure. The top cube of the first column falls to the top of the last column; the top cube of the second column falls to the top of the third column; the middle cube of the first column falls to the top of the second column.In the second example case the gravity switch does not change the heights of the columns.","prob_desc_output_spec":"Output n integer numbers separated by spaces, where the i-th number is the amount of cubes in the i-th column after the gravity switch.","prob_desc_output_to":"standard output","prob_desc_description":"Little Chris is bored during his physics lessons (too easy), so he has built a toy box to keep himself occupied. The box is special, since it has the ability to change gravity.There are n columns of toy cubes in the box arranged in a line. The i-th column contains ai cubes. At first, the gravity in the box is pulling the cubes downwards. When Chris switches the gravity, it begins to pull all the cubes to the right side of the box. The figure shows the initial and final configurations of the cubes in the box: the cubes that have changed their position are highlighted with orange.  Given the initial configuration of the toy cubes in the box, find the amounts of cubes in each of the n columns after the gravity switch!","hidden_unit_tests":"[{\"input\": \"4\\r\\n3 2 1 2\\r\\n\", \"output\": [\"1 2 2 3\"]}, {\"input\": \"3\\r\\n2 3 8\\r\\n\", \"output\": [\"2 3 8\"]}, {\"input\": \"5\\r\\n2 1 2 1 2\\r\\n\", \"output\": [\"1 1 2 2 2\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n4 3\\r\\n\", \"output\": [\"3 4\"]}, {\"input\": \"6\\r\\n100 40 60 20 1 80\\r\\n\", \"output\": [\"1 20 40 60 80 100\"]}, {\"input\": \"10\\r\\n10 8 6 7 5 3 4 2 9 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10\"]}, {\"input\": \"10\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10\"]}, {\"input\": \"100\\r\\n82 51 81 14 37 17 78 92 64 15 8 86 89 8 87 77 66 10 15 12 100 25 92 47 21 78 20 63 13 49 41 36 41 79 16 87 87 69 3 76 80 60 100 49 70 59 72 8 38 71 45 97 71 14 76 54 81 4 59 46 39 29 92 3 49 22 53 99 59 52 74 31 92 43 42 23 44 9 82 47 7 40 12 9 3 55 37 85 46 22 84 52 98 41 21 77 63 17 62 91\\r\\n\", \"output\": [\"3 3 3 4 7 8 8 8 9 9 10 12 12 13 14 14 15 15 16 17 17 20 21 21 22 22 23 25 29 31 36 37 37 38 39 40 41 41 41 42 43 44 45 46 46 47 47 49 49 49 51 52 52 53 54 55 59 59 59 60 62 63 63 64 66 69 70 71 71 72 74 76 76 77 77 78 78 79 80 81 81 82 82 84 85 86 87 87 87 89 91 92 92 92 92 97 98 99 100 100\"]}, {\"input\": \"100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\"]}, {\"input\": \"10\\r\\n1 9 7 6 2 4 7 8 1 3\\r\\n\", \"output\": [\"1 1 2 3 4 6 7 7 8 9\"]}, {\"input\": \"20\\r\\n53 32 64 20 41 97 50 20 66 68 22 60 74 61 97 54 80 30 72 59\\r\\n\", \"output\": [\"20 20 22 30 32 41 50 53 54 59 60 61 64 66 68 72 74 80 97 97\"]}, {\"input\": \"30\\r\\n7 17 4 18 16 12 14 10 1 13 2 16 13 17 8 16 13 14 9 17 17 5 13 5 1 7 6 20 18 12\\r\\n\", \"output\": [\"1 1 2 4 5 5 6 7 7 8 9 10 12 12 13 13 13 13 14 14 16 16 16 17 17 17 17 18 18 20\"]}, {\"input\": \"40\\r\\n22 58 68 58 48 53 52 1 16 78 75 17 63 15 36 32 78 75 49 14 42 46 66 54 49 82 40 43 46 55 12 73 5 45 61 60 1 11 31 84\\r\\n\", \"output\": [\"1 1 5 11 12 14 15 16 17 22 31 32 36 40 42 43 45 46 46 48 49 49 52 53 54 55 58 58 60 61 63 66 68 73 75 75 78 78 82 84\"]}, {\"input\": \"70\\r\\n1 3 3 1 3 3 1 1 1 3 3 2 3 3 1 1 1 2 3 1 3 2 3 3 3 2 2 3 1 3 3 2 1 1 2 1 2 1 2 2 1 1 1 3 3 2 3 2 3 2 3 3 2 2 2 3 2 3 3 3 1 1 3 3 1 1 1 1 3 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"]}, {\"input\": \"90\\r\\n17 75 51 30 100 5 50 95 51 73 66 5 7 76 43 49 23 55 3 24 95 79 10 11 44 93 17 99 53 66 82 66 63 76 19 4 51 71 75 43 27 5 24 19 48 7 91 15 55 21 7 6 27 10 2 91 64 58 18 21 16 71 90 88 21 20 6 6 95 85 11 7 40 65 52 49 92 98 46 88 17 48 85 96 77 46 100 34 67 52\\r\\n\", \"output\": [\"2 3 4 5 5 5 6 6 6 7 7 7 7 10 10 11 11 15 16 17 17 17 18 19 19 20 21 21 21 23 24 24 27 27 30 34 40 43 43 44 46 46 48 48 49 49 50 51 51 51 52 52 53 55 55 58 63 64 65 66 66 66 67 71 71 73 75 75 76 76 77 79 82 85 85 88 88 90 91 91 92 93 95 95 95 96 98 99 100 100\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"]}, {\"input\": \"100\\r\\n1 1 1 1 2 1 1 1 1 1 2 2 1 1 2 1 2 1 1 1 2 1 1 2 1 2 1 1 2 2 2 1 1 2 1 1 1 2 2 2 1 1 1 2 1 2 2 1 2 1 1 2 2 1 2 1 2 1 2 2 1 1 1 2 1 1 2 1 2 1 2 2 2 1 2 1 2 2 2 1 2 2 1 1 1 1 2 2 2 2 2 2 2 1 1 1 2 1 2 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"]}, {\"input\": \"100\\r\\n2 1 1 1 3 2 3 3 2 3 3 1 3 3 1 3 3 1 1 1 2 3 1 2 3 1 2 3 3 1 3 1 1 2 3 2 3 3 2 3 3 1 2 2 1 2 3 2 3 2 2 1 1 3 1 3 2 1 3 1 3 1 3 1 1 3 3 3 2 3 2 2 2 2 1 3 3 3 1 2 1 2 3 2 1 3 1 3 2 1 3 1 2 1 2 3 1 3 2 3\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"]}, {\"input\": \"100\\r\\n7 4 5 5 10 10 5 8 5 7 4 5 4 6 8 8 2 6 3 3 10 7 10 8 6 2 7 3 9 7 7 2 4 5 2 4 9 5 10 1 10 5 10 4 1 3 4 2 6 9 9 9 10 6 2 5 6 1 8 10 4 10 3 4 10 5 5 4 10 4 5 3 7 10 2 7 3 6 9 6 1 6 5 5 4 6 6 4 4 1 5 1 6 6 6 8 8 6 2 6\\r\\n\", \"output\": [\"1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10\"]}, {\"input\": \"100\\r\\n12 10 5 11 13 12 14 13 7 15 15 12 13 19 12 18 14 10 10 3 1 10 16 11 19 8 10 15 5 10 12 16 11 13 11 15 14 12 16 8 11 8 15 2 18 2 14 13 15 20 8 8 4 12 14 7 10 3 9 1 7 19 6 7 2 14 8 20 7 17 18 20 3 18 18 9 6 10 4 1 4 19 9 13 3 3 12 11 11 20 8 2 13 6 7 12 1 4 17 3\\r\\n\", \"output\": [\"1 1 1 1 2 2 2 2 3 3 3 3 3 3 4 4 4 4 5 5 6 6 6 7 7 7 7 7 7 8 8 8 8 8 8 8 9 9 9 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17 18 18 18 18 18 19 19 19 19 20 20 20 20\"]}, {\"input\": \"100\\r\\n5 13 1 40 30 10 23 32 33 12 6 4 15 29 31 17 23 5 36 31 32 38 24 11 34 39 19 21 6 19 31 35 1 15 6 29 22 15 17 15 1 17 2 34 20 8 27 2 29 26 13 9 22 27 27 3 20 40 4 40 33 29 36 30 35 16 19 28 26 11 36 24 29 5 40 10 38 34 33 23 34 39 31 7 10 31 22 6 36 24 14 31 34 23 2 4 26 16 2 32\\r\\n\", \"output\": [\"1 1 1 2 2 2 2 3 4 4 4 5 5 5 6 6 6 6 7 8 9 10 10 10 11 11 12 13 13 14 15 15 15 15 16 16 17 17 17 19 19 19 20 20 21 22 22 22 23 23 23 23 24 24 24 26 26 26 27 27 27 28 29 29 29 29 29 30 30 31 31 31 31 31 31 32 32 32 33 33 33 34 34 34 34 34 35 35 36 36 36 36 38 38 39 39 40 40 40 40\"]}, {\"input\": \"100\\r\\n72 44 34 74 9 60 26 37 55 77 74 69 28 66 54 55 8 36 57 31 31 48 32 66 40 70 77 43 64 28 37 10 21 58 51 32 60 28 51 52 28 35 7 33 1 68 38 70 57 71 8 20 42 57 59 4 58 10 17 47 22 48 16 3 76 67 32 37 64 47 33 41 75 69 2 76 39 9 27 75 20 21 52 25 71 21 11 29 38 10 3 1 45 55 63 36 27 7 59 41\\r\\n\", \"output\": [\"1 1 2 3 3 4 7 7 8 8 9 9 10 10 10 11 16 17 20 20 21 21 21 22 25 26 27 27 28 28 28 28 29 31 31 32 32 32 33 33 34 35 36 36 37 37 37 38 38 39 40 41 41 42 43 44 45 47 47 48 48 51 51 52 52 54 55 55 55 57 57 57 58 58 59 59 60 60 63 64 64 66 66 67 68 69 69 70 70 71 71 72 74 74 75 75 76 76 77 77\"]}, {\"input\": \"100\\r\\n75 18 61 10 56 53 42 57 79 80 31 2 50 45 54 99 84 52 71 21 86 3 19 98 14 37 40 62 63 68 5 10 87 8 81 85 52 52 57 94 2 7 56 96 19 76 1 13 81 6 80 47 22 59 99 32 9 5 36 88 98 91 70 70 12 93 12 22 85 1 97 48 94 16 84 84 51 34 62 7 68 51 30 2 37 82 4 7 27 1 80 9 61 16 59 55 12 96 94 82\\r\\n\", \"output\": [\"1 1 1 2 2 2 3 4 5 5 6 7 7 7 8 9 9 10 10 12 12 12 13 14 16 16 18 19 19 21 22 22 27 30 31 32 34 36 37 37 40 42 45 47 48 50 51 51 52 52 52 53 54 55 56 56 57 57 59 59 61 61 62 62 63 68 68 70 70 71 75 76 79 80 80 80 81 81 82 82 84 84 84 85 85 86 87 88 91 93 94 94 94 96 96 97 98 98 99 99\"]}, {\"input\": \"100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"]}, {\"input\": \"100\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"]}, {\"input\": \"100\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n\", \"output\": [\"50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\"]}, {\"input\": \"49\\r\\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97\\r\\n\", \"output\": [\"1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97\"]}, {\"input\": \"30\\r\\n1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88\\r\\n\", \"output\": [\"1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88\"]}, {\"input\": \"100\\r\\n100 51 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 51 100\"]}, {\"input\": \"10\\r\\n100 90 80 70 60 50 40 30 20 10\\r\\n\", \"output\": [\"10 20 30 40 50 60 70 80 90 100\"]}, {\"input\": \"1\\r\\n10\\r\\n\", \"output\": [\"10\"]}]","length":27,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 2\", \"3 4 5\", \"4 1 1\"]","prob_desc_input_spec":"The single line of the input contains three space-separated integers a, b and c (1\u2009\u2264\u2009a,\u2009b,\u2009c\u2009\u2264\u2009106) \u2014 the valence numbers of the given atoms.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"b3b986fddc3770fed64b878fa42ab1bc","prob_desc_created_at":"1379172600","source_code":"#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n    int a,b,c;\n\n    scanf(\"%d %d %d\",&a,&b,&c);\n\n    int K = (a+b-c)\/2;\n    int K2 = (b+c-a)\/2;\n    if(K >= 0 && K2>= 0 && a- K >=0 && 2*(K + K2 + (a - K)) == (a + b + c))\n    {\n        printf(\"%d %d %d\\n\",K,K2,a-K);\n    }\n    else\n    {\n        printf(\"Impossible\\n\");\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"0 1 1\", \"1 3 2\", \"Impossible\"]","lang_cluster":"C","code_uid":"a366090ef07a4f4b509430f249fc8947","prob_desc_notes":"NoteThe first sample corresponds to the first figure. There are no bonds between atoms 1 and 2 in this case.The second sample corresponds to the second figure. There is one or more bonds between each pair of atoms.The third sample corresponds to the third figure. There is no solution, because an atom cannot form bonds with itself.The configuration in the fourth figure is impossible as each atom must have at least one atomic bond.","prob_desc_output_spec":"If such a molecule can be built, print three space-separated integers \u2014 the number of bonds between the 1-st and the 2-nd, the 2-nd and the 3-rd, the 3-rd and the 1-st atoms, correspondingly. If there are multiple solutions, output any of them. If there is no solution, print \"Impossible\" (without the quotes).","prob_desc_output_to":"standard output","prob_desc_description":"Mad scientist Mike is busy carrying out experiments in chemistry. Today he will attempt to join three atoms into one molecule.A molecule consists of atoms, with some pairs of atoms connected by atomic bonds. Each atom has a valence number \u2014 the number of bonds the atom must form with other atoms. An atom can form one or multiple bonds with any other atom, but it cannot form a bond with itself. The number of bonds of an atom in the molecule must be equal to its valence number.  Mike knows valence numbers of the three atoms. Find a molecule that can be built from these atoms according to the stated rules, or determine that it is impossible.","hidden_unit_tests":"[{\"input\": \"1 1 2\\r\\n\", \"output\": [\"0 1 1\"]}, {\"input\": \"3 4 5\\r\\n\", \"output\": [\"1 3 2\"]}, {\"input\": \"4 1 1\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1000000 1000000 1000000\\r\\n\", \"output\": [\"500000 500000 500000\"]}, {\"input\": \"3 11 8\\r\\n\", \"output\": [\"3 8 0\"]}, {\"input\": \"8 5 12\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1000000 500000 1\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1000000 500000 2\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"2 2 2\\r\\n\", \"output\": [\"1 1 1\"]}, {\"input\": \"3 3 3\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"4 4 4\\r\\n\", \"output\": [\"2 2 2\"]}, {\"input\": \"2 4 2\\r\\n\", \"output\": [\"2 2 0\"]}, {\"input\": \"10 5 14\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"10 5 15\\r\\n\", \"output\": [\"0 5 10\"]}, {\"input\": \"10 4 16\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"3 3 6\\r\\n\", \"output\": [\"0 3 3\"]}, {\"input\": \"9 95 90\\r\\n\", \"output\": [\"7 88 2\"]}, {\"input\": \"3 5 8\\r\\n\", \"output\": [\"0 5 3\"]}, {\"input\": \"5 8 13\\r\\n\", \"output\": [\"0 8 5\"]}, {\"input\": \"6 1 5\\r\\n\", \"output\": [\"1 0 5\"]}, {\"input\": \"59 54 56\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"246 137 940\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"7357 3578 9123\\r\\n\", \"output\": [\"906 2672 6451\"]}, {\"input\": \"93952 49553 83405\\r\\n\", \"output\": [\"30050 19503 63902\"]}, {\"input\": \"688348 726472 442198\\r\\n\", \"output\": [\"486311 240161 202037\"]}, {\"input\": \"602752 645534 784262\\r\\n\", \"output\": [\"232012 413522 370740\"]}, {\"input\": \"741349 48244 642678\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"655754 418251 468390\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"310703 820961 326806\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"1 1 3\\r\\n\", \"output\": [\"Impossible\"]}, {\"input\": \"5 1 4\\r\\n\", \"output\": [\"1 0 4\"]}]","length":21,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"5\", \"74\"]","prob_desc_input_spec":"The only line contains one integer n\u00a0(1\u2009\u2264\u2009n\u2009\u2264\u2009104) as we mentioned above.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"36a211f7814e77339eb81dc132e115e1","prob_desc_created_at":"1368363600","source_code":"#include <stdio.h>\n\nint gcd(int a, int b)\n{\n    int t;\n    while (b!=0) {\n        t=a%b;\n        a=b;\n        b=t;\n    }\n    return a;\n}\n\nint main (void)\n{\n    int n;\n    int res=0;\n    int i,j;\n    scanf (\"%d\",&n);\n\n    for (j=1;j <n; j++) {\n        for (i=j+1;i*i+j*j <= n;i++) {\n            if (gcd(i,j)==1 && ((i-j)&1)==1)\n                res += n\/(i*i+j*j);\n        }\n    }\n    printf (\"%d\",res);\n    return 0;\n\n}\n","prob_desc_sample_outputs":"[\"1\", \"35\"]","lang_cluster":"C","code_uid":"94313b1fac44d62bf651c4f5f672b448","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"In mathematics, the Pythagorean theorem \u2014 is a relation in Euclidean geometry among the three sides of a right-angled triangle. In terms of areas, it states: In any right-angled triangle, the area of the square whose side is the hypotenuse (the side opposite the right angle) is equal to the sum of the areas of the squares whose sides are the two legs (the two sides that meet at a right angle). The theorem can be written as an equation relating the lengths of the sides a, b and c, often called the Pythagorean equation:a2\u2009+\u2009b2\u2009=\u2009c2where c represents the length of the hypotenuse, and a and b represent the lengths of the other two sides.  Given n, your task is to count how many right-angled triangles with side-lengths a, b and c that satisfied an inequality 1\u2009\u2264\u2009a\u2009\u2264\u2009b\u2009\u2264\u2009c\u2009\u2264\u2009n.","hidden_unit_tests":"[{\"input\": \"5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"74\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"881\"]}, {\"input\": \"586\\r\\n\", \"output\": [\"472\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"362\\r\\n\", \"output\": [\"258\"]}, {\"input\": \"778\\r\\n\", \"output\": [\"653\"]}, {\"input\": \"194\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"906\\r\\n\", \"output\": [\"786\"]}, {\"input\": \"659\\r\\n\", \"output\": [\"535\"]}, {\"input\": \"75\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"787\\r\\n\", \"output\": [\"664\"]}, {\"input\": \"851\\r\\n\", \"output\": [\"730\"]}, {\"input\": \"563\\r\\n\", \"output\": [\"446\"]}, {\"input\": \"979\\r\\n\", \"output\": [\"862\"]}, {\"input\": \"395\\r\\n\", \"output\": [\"291\"]}, {\"input\": \"755\\r\\n\", \"output\": [\"634\"]}, {\"input\": \"171\\r\\n\", \"output\": [\"103\"]}, {\"input\": \"883\\r\\n\", \"output\": [\"759\"]}, {\"input\": \"400\\r\\n\", \"output\": [\"294\"]}, {\"input\": \"817\\r\\n\", \"output\": [\"693\"]}, {\"input\": \"177\\r\\n\", \"output\": [\"107\"]}, {\"input\": \"593\\r\\n\", \"output\": [\"476\"]}, {\"input\": \"305\\r\\n\", \"output\": [\"214\"]}, {\"input\": \"721\\r\\n\", \"output\": [\"595\"]}, {\"input\": \"785\\r\\n\", \"output\": [\"664\"]}, {\"input\": \"497\\r\\n\", \"output\": [\"383\"]}, {\"input\": \"913\\r\\n\", \"output\": [\"791\"]}, {\"input\": \"625\\r\\n\", \"output\": [\"507\"]}, {\"input\": \"334\\r\\n\", \"output\": [\"236\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"12471\"]}, {\"input\": \"9999\\r\\n\", \"output\": [\"12467\"]}]","length":30,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"0 0\", \"1 0\", \"0 1\", \"-1 -1\"]","prob_desc_input_spec":"The first line contains two space-separated integers x and y (|x|,\u2009|y|\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"2fb2a129e01efc03cfc3ad91dac88382","prob_desc_created_at":"1362411000","source_code":"#include<stdio.h>\nint main(){\n\tint xCord,yCord,turns;\n\tscanf (\"%d%d\",&xCord,&yCord);\n\tif(xCord==0 && yCord==0){\n\t\tturns = 0;\n\t}\n\n\telse if((yCord*-1)<=xCord && yCord>xCord){\n\t\tturns = 2+(yCord-1)*4;\n\t}\n\n\telse if(((xCord*-1)+1)<yCord && xCord>=yCord){\n\t\tturns = 1+(xCord-1)*4;\n\t}\n\n\telse if(yCord<xCord && xCord<=((yCord*-1)+1)){\n\t\tturns = yCord*-4;\n\t}\n\n\telse if((xCord*-1)>yCord && xCord<=yCord){\n\t\tturns = xCord*-4-1;\n\t}\n\tprintf (\"%d\\n\",turns);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"0\", \"0\", \"2\", \"3\"]","lang_cluster":"C","code_uid":"0a6b87e126ffef3e4ade581a6a4b34d2","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer, showing how many times Valera has to turn.","prob_desc_output_to":"standard output","prob_desc_description":"Valera the horse lives on a plane. The Cartesian coordinate system is defined on this plane. Also an infinite spiral is painted on the plane. The spiral consists of segments: [(0,\u20090),\u2009(1,\u20090)], [(1,\u20090),\u2009(1,\u20091)], [(1,\u20091),\u2009(\u2009-\u20091,\u20091)], [(\u2009-\u20091,\u20091),\u2009(\u2009-\u20091,\u2009\u2009-\u20091)], [(\u2009-\u20091,\u2009\u2009-\u20091),\u2009(2,\u2009\u2009-\u20091)], [(2,\u2009\u2009-\u20091),\u2009(2,\u20092)] and so on. Thus, this infinite spiral passes through each integer point of the plane.Valera the horse lives on the plane at coordinates (0,\u20090). He wants to walk along the spiral to point (x,\u2009y). Valera the horse has four legs, so he finds turning very difficult. Count how many times he will have to turn if he goes along a spiral from point (0,\u20090) to point (x,\u2009y).","hidden_unit_tests":"[{\"input\": \"0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-1 -1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10 10\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"0 6\\r\\n\", \"output\": [\"22\"]}, {\"input\": \"-7 -13\\r\\n\", \"output\": [\"52\"]}, {\"input\": \"37 -100\\r\\n\", \"output\": [\"400\"]}, {\"input\": \"99 100\\r\\n\", \"output\": [\"398\"]}, {\"input\": \"16 -32\\r\\n\", \"output\": [\"128\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-1 0\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3 -5\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"0 -1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 -1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"397\"]}, {\"input\": \"0 99\\r\\n\", \"output\": [\"394\"]}, {\"input\": \"-98 98\\r\\n\", \"output\": [\"390\"]}, {\"input\": \"-97 0\\r\\n\", \"output\": [\"387\"]}, {\"input\": \"-96 -96\\r\\n\", \"output\": [\"383\"]}, {\"input\": \"0 -95\\r\\n\", \"output\": [\"380\"]}, {\"input\": \"94 -94\\r\\n\", \"output\": [\"376\"]}, {\"input\": \"93 0\\r\\n\", \"output\": [\"369\"]}, {\"input\": \"17 25\\r\\n\", \"output\": [\"98\"]}, {\"input\": \"1 -84\\r\\n\", \"output\": [\"336\"]}, {\"input\": \"-5 44\\r\\n\", \"output\": [\"174\"]}, {\"input\": \"11 -15\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"42 9\\r\\n\", \"output\": [\"165\"]}, {\"input\": \"-81 3\\r\\n\", \"output\": [\"323\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"397\"]}, {\"input\": \"2 -1\\r\\n\", \"output\": [\"4\"]}]","length":26,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2\", \"4\"]","prob_desc_input_spec":"The first line contains the only integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009107) \u2014 the required length of the cyclic path.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"77627cc366a22e38da412c3231ac91a8","prob_desc_created_at":"1332516600","source_code":"#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint expmod(int a, int b, int n) {\n  if(b == 0)\n    return 1;\n  else {\n    long long res = expmod(a, b\/2, n);\n    res = (res*res) % n;\n    if(b%2 == 1)\n      res = (res*a) % n;\n    return (int) res;\n  }\n}\n\nint main()\n{\n    int n;\n    unsigned long long int mod, i;\n    mod = 1000000007;\n    scanf(\"%d\", &n);\n    i = 1;\n\n    int A = 0;\n    int B = 1;\n    while (i <=n){\n       int nB = A * 3LL % mod;\n        int nA = (A * 2LL + B) % mod;\n        B = nB;\n        A = nA;\n        i++;\n    }\n    printf(\"%d\\n\", B);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"21\"]","lang_cluster":"C","code_uid":"2bf049bd3057f01c91e70611df417489","prob_desc_notes":"NoteThe required paths in the first sample are:   D\u2009-\u2009A\u2009-\u2009D  D\u2009-\u2009B\u2009-\u2009D  D\u2009-\u2009C\u2009-\u2009D ","prob_desc_output_spec":"Print the only integer \u2014 the required number of ways modulo 1000000007 (109\u2009+\u20097).","prob_desc_output_to":"standard output","prob_desc_description":"You are given a tetrahedron. Let's mark its vertices with letters A, B, C and D correspondingly.  An ant is standing in the vertex D of the tetrahedron. The ant is quite active and he wouldn't stay idle. At each moment of time he makes a step from one vertex to another one along some edge of the tetrahedron. The ant just can't stand on one place.You do not have to do much to solve the problem: your task is to count the number of ways in which the ant can go from the initial vertex D to itself in exactly n steps. In other words, you are asked to find out the number of different cyclic paths with the length of n from vertex D to itself. As the number can be quite large, you should print it modulo 1000000007 (109\u2009+\u20097). ","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"183\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"546\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"1641\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"4920\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"14763\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"3587226\"]}, {\"input\": \"30\\r\\n\", \"output\": [\"782663359\"]}, {\"input\": \"10000000\\r\\n\", \"output\": [\"192336614\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"721510432\"]}, {\"input\": \"300\\r\\n\", \"output\": [\"327873818\"]}, {\"input\": \"900\\r\\n\", \"output\": [\"295068084\"]}, {\"input\": \"1500\\r\\n\", \"output\": [\"451187545\"]}, {\"input\": \"3000\\r\\n\", \"output\": [\"645417275\"]}, {\"input\": \"5000\\r\\n\", \"output\": [\"755610910\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"723907367\"]}, {\"input\": \"50000\\r\\n\", \"output\": [\"969527595\"]}, {\"input\": \"90000\\r\\n\", \"output\": [\"548978368\"]}, {\"input\": \"99999\\r\\n\", \"output\": [\"909741855\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"729225554\"]}, {\"input\": \"300000\\r\\n\", \"output\": [\"93822635\"]}, {\"input\": \"800000\\r\\n\", \"output\": [\"178940616\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"266233856\"]}, {\"input\": \"4000000\\r\\n\", \"output\": [\"882155933\"]}, {\"input\": \"9000000\\r\\n\", \"output\": [\"295060537\"]}, {\"input\": \"9999999\\r\\n\", \"output\": [\"730778875\"]}, {\"input\": \"9999998\\r\\n\", \"output\": [\"576926295\"]}, {\"input\": \"31\\r\\n\", \"output\": [\"347990060\"]}]","length":36,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 6\", \"9 7\", \"1 1\"]","prob_desc_input_spec":"The only line of input contains two integers r and g, separated by a single space \u2014 the number of available red and green blocks respectively (0\u2009\u2264\u2009r,\u2009g\u2009\u2264\u20092\u00b7105, r\u2009+\u2009g\u2009\u2265\u20091).","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"34b6286350e3531c1fbda6b0c184addc","prob_desc_created_at":"1413474000","source_code":"#include <stdio.h>\n\n#define MAX 200010\n#define MOD 1000000007\n\nint n, m, h, sum[1010], dp[MAX][2];\n\nvoid Pregenerate(){\n    int i, j, l, res, x = 0;\n    for (i = h; i >= 0; i--){\n        sum[i] = x;\n        x += i;\n    }\n\n    for (l = 0; l <= h; l++){\n        for (i = n; i >= 0; i--){\n            j = sum[l] - i;\n            if (i > sum[l]) continue;\n            if (j > m) continue;\n\n\n            if (!l) res = 1;\n            else{\n                res = 0;\n                if ((i + l) <= n) res = res + dp[i + l][(l - 1) & 1];\n                if ((j + l) <= m) res = res + dp[i][(l - 1) & 1];\n            }\n\n            if (res >= MOD) res -= MOD;\n            dp[i][l & 1] = res;\n        }\n    }\n}\n\nint main(){\n    int i, j;\n\n    while (scanf(\"%d %d\", &n, &m) != EOF){\n        for (h = 0; h <= 1000; h++){\n            int x = (h * (h + 1)) >> 1;\n            if (x > (n + m)){\n                h--;\n                break;\n            }\n        }\n\n        Pregenerate();\n        int res = dp[0][h & 1];\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"2\", \"6\", \"2\"]","lang_cluster":"C","code_uid":"cefe7915f525f4d9f914332da1b12fc1","prob_desc_notes":"NoteThe image in the problem statement shows all possible red-green towers for the first sample.","prob_desc_output_spec":"Output the only integer \u2014 the number of different possible red-green towers of height h modulo\u00a0109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"There are r red and g green blocks for construction of the red-green tower. Red-green tower can be built following next rules:  Red-green tower is consisting of some number of levels;  Let the red-green tower consist of n levels, then the first level of this tower should consist of n blocks, second level \u2014 of n\u2009-\u20091 blocks, the third one \u2014 of n\u2009-\u20092 blocks, and so on \u2014 the last level of such tower should consist of the one block. In other words, each successive level should contain one block less than the previous one;  Each level of the red-green tower should contain blocks of the same color.  Let h be the maximum possible number of levels of red-green tower, that can be built out of r red and g green blocks meeting the rules above. The task is to determine how many different red-green towers having h levels can be built out of the available blocks.Two red-green towers are considered different if there exists some level, that consists of red blocks in the one tower and consists of green blocks in the other tower.You are to write a program that will find the number of different red-green towers of height h modulo\u00a0109\u2009+\u20097.","hidden_unit_tests":"[{\"input\": \"4 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"9 7\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2 19\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"18 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100000 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 100000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"6 6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"10 10\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"200000 200000\\r\\n\", \"output\": [\"206874596\"]}, {\"input\": \"0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 200000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200000 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"199396 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"199395 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 199397\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"121147 78249\\r\\n\", \"output\": [\"64290784\"]}, {\"input\": \"78250 121147\\r\\n\", \"output\": [\"981737243\"]}, {\"input\": \"121146 78249\\r\\n\", \"output\": [\"832902708\"]}, {\"input\": \"199585 199586\\r\\n\", \"output\": [\"438320405\"]}, {\"input\": \"199586 199586\\r\\n\", \"output\": [\"876640810\"]}, {\"input\": \"199585 199585\\r\\n\", \"output\": [\"199771918\"]}, {\"input\": \"107344 159729\\r\\n\", \"output\": [\"849320920\"]}, {\"input\": \"2954 1977\\r\\n\", \"output\": [\"835530858\"]}, {\"input\": \"25580 17318\\r\\n\", \"output\": [\"263898876\"]}, {\"input\": \"89671 32487\\r\\n\", \"output\": [\"654128709\"]}, {\"input\": \"38 36\\r\\n\", \"output\": [\"612\"]}, {\"input\": \"136749 183300\\r\\n\", \"output\": [\"906576609\"]}, {\"input\": \"10000 10000\\r\\n\", \"output\": [\"885988055\"]}, {\"input\": \"200000 199999\\r\\n\", \"output\": [\"396481680\"]}]","length":52,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2\", \"10\"]","prob_desc_input_spec":"The input consists of a single line containing a positive integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009105) \u2014 the number of employees in Fafa's company.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"89f6c1659e5addbf909eddedb785d894","prob_desc_created_at":"1519058100","source_code":"#include<stdio.h>\n\nint main()\n{\n    int n,i,c=0;\n    scanf(\"%d\",&n);\n    for(i=1; i<n; i++)\n    {\n        if((n-i)%i==0)\n        {\n            c++;\n        }\n    }\n    printf(\"%d\",c);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"1\", \"3\"]","lang_cluster":"C","code_uid":"c3c62fb520927bdc67f52fe89b0bbf1f","prob_desc_notes":"NoteIn the second sample Fafa has 3 ways:  choose only 1 employee as a team leader with 9 employees under his responsibility.  choose 2 employees as team leaders with 4 employees under the responsibility of each of them.  choose 5 employees as team leaders with 1 employee under the responsibility of each of them. ","prob_desc_output_spec":"Print a single integer representing the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"Fafa owns a company that works on huge projects. There are n employees in Fafa's company. Whenever the company has a new project to start working on, Fafa has to divide the tasks of this project among all the employees.Fafa finds doing this every time is very tiring for him. So, he decided to choose the best l employees in his company as team leaders. Whenever there is a new project, Fafa will divide the tasks among only the team leaders and each team leader will be responsible of some positive number of employees to give them the tasks. To make this process fair for the team leaders, each one of them should be responsible for the same number of employees. Moreover, every employee, who is not a team leader, has to be under the responsibility of exactly one team leader, and no team leader is responsible for another team leader.Given the number of employees n, find in how many ways Fafa could choose the number of team leaders l in such a way that it is possible to divide employees between them evenly.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"1024\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"99999\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"10007\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4096\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"65536\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"40320\\r\\n\", \"output\": [\"95\"]}, {\"input\": \"30030\\r\\n\", \"output\": [\"63\"]}, {\"input\": \"161\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"777\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"121\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"25\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"40000\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"99990\\r\\n\", \"output\": [\"47\"]}, {\"input\": \"98765\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"56789\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"13579\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"97531\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"12345\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"54321\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"83160\\r\\n\", \"output\": [\"127\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"21\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"3\"]}]","length":16,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n1100\", \"4\\n1111\"]","prob_desc_input_spec":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of bits in the cell. The second line contains a string consisting of n characters \u2014 the initial state of the cell. The first character denotes the state of the first bit of the cell. The second character denotes the second least significant bit and so on. The last character denotes the state of the most significant bit.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"54cb2e987f2cc06c02c7638ea879a1ab","prob_desc_created_at":"1410103800","source_code":"#include<stdio.h>\nint main() {\n\tint n,a = 0,i,j,h,sayac=0;\n\tscanf(\"%d\",&n);\n\tchar d[n],k;\n\tfor(i = 1 ; i <= n ; i++)\n\t{\n\t\tscanf(\" %c\",&k);\n\t\tif(k == '0')\n\t\t{\n\t\t\ta = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tprintf(\"%d\",a + n * (a == 0));\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"4\"]","lang_cluster":"C","code_uid":"41463b29894c07b12d5088d64955eb7c","prob_desc_notes":"NoteIn the first sample the cell ends up with value 0010, in the second sample \u2014 with 0000.","prob_desc_output_spec":"Print a single integer \u2014 the number of bits in the cell which change their state after we add 1 to the cell.","prob_desc_output_to":"standard output","prob_desc_description":"Sergey is testing a next-generation processor. Instead of bytes the processor works with memory cells consisting of n bits. These bits are numbered from 1 to n. An integer is stored in the cell in the following way: the least significant bit is stored in the first bit of the cell, the next significant bit is stored in the second bit, and so on; the most significant bit is stored in the n-th bit.Now Sergey wants to test the following instruction: \"add 1 to the value of the cell\". As a result of the instruction, the integer that is written in the cell must be increased by one; if some of the most significant bits of the resulting number do not fit into the cell, they must be discarded.Sergey wrote certain values \u200b\u200bof the bits in the cell and is going to add one to its value. How many bits of the cell will change after the operation?","hidden_unit_tests":"[{\"input\": \"4\\r\\n1100\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\n1111\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1\\r\\n0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n00\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n01\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n10\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n11\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n0000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"20\\r\\n11111111110110001100\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"50\\r\\n01011110100010000001010000100001001101001101101011\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"60\\r\\n111111111101111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"60\\r\\n111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"66\\r\\n111111010010011001110011000111000100011110011001111110011111111101\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"90\\r\\n000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"91\\r\\n1011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"92\\r\\n11111111101011111011111111111111111111111011101111111111011111111111111101111111101011111101\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"100\\r\\n0001011110100011001100100010111001000001111101101001001001001011110100101101010000000110100101110010\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n1011001110001000011111110011000100001110010110111101110110011011011000010100110001111100000010110010\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100\\r\\n1101111011001111111111110011110111101110111111111111111111111111111111011111111111110111111111111111\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000\\r\\n\", \"output\": [\"96\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111110011000110110001010101100100100001000010010010010000100110000010101\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"55\\r\\n1111111111111111111111111111111111111111111110111111111\\r\\n\", \"output\": [\"46\"]}, {\"input\": \"100\\r\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"91\\r\\n0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\r\\n\", \"output\": [\"1\"]}]","length":17,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"a\", \"hi\"]","prob_desc_input_spec":"The first line of input will be a single string s (1\u2009\u2264\u2009|s|\u2009\u2264\u200920). String s consists only of lowercase English letters. ","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"556684d96d78264ad07c0cdd3b784bc9","prob_desc_created_at":"1435163400","source_code":"#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <math.h>\n#include <time.h>\n\n#define lli long long int\n#define MAX INT_MAX\n#define sd second\n#define fs first\n#define endll '\\n'\n#define PI acos(-1)\n#define mp make_pair\n#define pb push_back\n#define best 1000000007\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define ROF(i,a,b) for(int i=a;i>b;i--)\n#define buyuk(a,b) (a<b)? b:a\n#define kucuk(a,b) (a<b)? a:b\n#define ort(a,b) (a+b)\/2\n#define carp(a,b) (a)*(b)\nchar a[25];\n\n\tint main () {\n\t\tscanf(\"%s\",a);\n\t\tprintf(\"%d\",((int)strlen(a)+1)*25 + 1);\n\n}\n\n","prob_desc_sample_outputs":"[\"51\", \"76\"]","lang_cluster":"C","code_uid":"fc25010fffc5e2297f0d6a3a8a992e4f","prob_desc_notes":"NoteIn the first case, we can make 'ab','ac',...,'az','ba','ca',...,'za', and 'aa', producing a total of 51 distinct photo booklets. ","prob_desc_output_spec":"Output a single integer equal to the number of distinct photobooks Kyoya Ootori can make.","prob_desc_output_to":"standard output","prob_desc_description":"Kyoya Ootori is selling photobooks of the Ouran High School Host Club. He has 26 photos, labeled \"a\" to \"z\", and he has compiled them into a photo booklet with some photos in some order (possibly with some photos being duplicated). A photo booklet can be described as a string of lowercase letters, consisting of the photos in the booklet in order. He now wants to sell some \"special edition\" photobooks, each with one extra photo inserted anywhere in the book. He wants to make as many distinct photobooks as possible, so he can make more money. He asks Haruhi, how many distinct photobooks can he make by inserting one extra photo into the photobook he already has?Please help Haruhi solve this problem.","hidden_unit_tests":"[{\"input\": \"a\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"hi\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"y\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"kgan\\r\\n\", \"output\": [\"126\"]}, {\"input\": \"zoabkyuvus\\r\\n\", \"output\": [\"276\"]}, {\"input\": \"spyemhyznjieyhhbk\\r\\n\", \"output\": [\"451\"]}, {\"input\": \"xulsyfkuizjauadjjopu\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"e\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"zv\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"jgv\\r\\n\", \"output\": [\"101\"]}, {\"input\": \"zsfo\\r\\n\", \"output\": [\"126\"]}, {\"input\": \"jselr\\r\\n\", \"output\": [\"151\"]}, {\"input\": \"dwemig\\r\\n\", \"output\": [\"176\"]}, {\"input\": \"mddoxsf\\r\\n\", \"output\": [\"201\"]}, {\"input\": \"jgirkrmi\\r\\n\", \"output\": [\"226\"]}, {\"input\": \"spkxurcum\\r\\n\", \"output\": [\"251\"]}, {\"input\": \"fykkiubdkt\\r\\n\", \"output\": [\"276\"]}, {\"input\": \"fznbcxsxygs\\r\\n\", \"output\": [\"301\"]}, {\"input\": \"qcrvrdqcbtou\\r\\n\", \"output\": [\"326\"]}, {\"input\": \"qktrbjzrqgmlr\\r\\n\", \"output\": [\"351\"]}, {\"input\": \"foamodbvptlxxg\\r\\n\", \"output\": [\"376\"]}, {\"input\": \"ydzpjhsidipricw\\r\\n\", \"output\": [\"401\"]}, {\"input\": \"lpfpndmjfvqejdgf\\r\\n\", \"output\": [\"426\"]}, {\"input\": \"ofkvparuvjtggnmab\\r\\n\", \"output\": [\"451\"]}, {\"input\": \"xxncfutrtxcwdzwbgs\\r\\n\", \"output\": [\"476\"]}, {\"input\": \"zovhffccflkgqncsdte\\r\\n\", \"output\": [\"501\"]}, {\"input\": \"cskgsxywlvfeicoueglr\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"gggggggggggggggggggg\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"qdqdddqddqqddqddqdqd\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"takttttaakaaktakttkt\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"coccoooogogcgocccmcg\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"kskkskkkssksssk\\r\\n\", \"output\": [\"401\"]}, {\"input\": \"lllllllllllllll\\r\\n\", \"output\": [\"401\"]}]","length":29,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1 0 0\\n0 0 0\\n0 0 1\", \"1 0 1\\n8 8 8\\n2 0 3\"]","prob_desc_input_spec":"The input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.","prob_desc_input_from":"standard input","lang":"GNU C","exec_outcome":"PASSED","src_uid":"b045abf40c75bb66a80fd6148ecc5bd6","prob_desc_created_at":"1361374200","source_code":"#include<stdio.h>\nint main()\n{\nint A[3][3],i,j,B[3][3];\nfor(i=0;i<3;i++)\n{\nfor(j=0;j<3;j++)\n{\nA[i][j]=1;\n}\n}\nfor(i=0;i<3;i++)\n{\nfor(j=0;j<3;j++)\n{\nscanf(\"%d\",&B[i][j]);\n}\n}\nfor(i=0;i<3;i++)\n{\nfor(j=0;j<3;j++)\n{\nif(B[i][j]%2==1)\n{\nif(A[i][j]==1)\n{\nA[i][j]=0;\n}\nelse\n{\nA[i][j]=1;\n}\nif(j!=2)\n{\nif(A[i][j+1]==0)\n{\nA[i][j+1]=1;\n}\nelse\n{\nA[i][j+1]=0;\n}\n}\nif(i!=2)\n{\nif(A[i+1][j]==0)\n{\nA[i+1][j]=1;\n}\nelse\n{\nA[i+1][j]=0;\n}\n}\nif(j!=0)\n{\nif(A[i][j-1]==0)\n{\nA[i][j-1]=1;\n}\nelse\n{\nA[i][j-1]=0;\n}\n}\nif(i!=0)\n{\nif(A[i-1][j]==0)\n{\nA[i-1][j]=1;\n}\nelse\n{\nA[i-1][j]=0;\n}\n}\n}\n}\n}\nfor(i=0;i<3;i++)\n{\nfor(j=0;j<3;j++)\n{\nprintf(\"%d\",A[i][j]);\n}\nprintf(\"\\n\");\n}\nreturn 0;\n}","prob_desc_sample_outputs":"[\"001\\n010\\n100\", \"010\\n011\\n100\"]","lang_cluster":"C","code_uid":"9eb0145b88725f3a5534a3e0ed3f4075","prob_desc_notes":null,"prob_desc_output_spec":"Print three lines, each containing three characters. The j-th character of the i-th line is \"1\" if and only if the corresponding light is switched on, otherwise it's \"0\".","prob_desc_output_to":"standard output","prob_desc_description":"Lenny is playing a game on a 3\u2009\u00d7\u20093 grid of lights. In the beginning of the game all lights are switched on. Pressing any of the lights will toggle it and all side-adjacent lights. The goal of the game is to switch all the lights off. We consider the toggling as follows: if the light was switched on then it will be switched off, if it was switched off then it will be switched on.Lenny has spent some time playing with the grid and by now he has pressed each light a certain number of times. Given the number of times each light is pressed, you have to print the current state of each light.","hidden_unit_tests":"[{\"input\": \"1 0 0\\r\\n0 0 0\\r\\n0 0 1\\r\\n\", \"output\": [\"001\\r\\n010\\r\\n100\"]}, {\"input\": \"1 0 1\\r\\n8 8 8\\r\\n2 0 3\\r\\n\", \"output\": [\"010\\r\\n011\\r\\n100\"]}, {\"input\": \"13 85 77\\r\\n25 50 45\\r\\n65 79 9\\r\\n\", \"output\": [\"000\\r\\n010\\r\\n000\"]}, {\"input\": \"96 95 5\\r\\n8 84 74\\r\\n67 31 61\\r\\n\", \"output\": [\"011\\r\\n011\\r\\n101\"]}, {\"input\": \"24 54 37\\r\\n60 63 6\\r\\n1 84 26\\r\\n\", \"output\": [\"110\\r\\n101\\r\\n011\"]}, {\"input\": \"23 10 40\\r\\n15 6 40\\r\\n92 80 77\\r\\n\", \"output\": [\"101\\r\\n100\\r\\n000\"]}, {\"input\": \"62 74 80\\r\\n95 74 93\\r\\n2 47 95\\r\\n\", \"output\": [\"010\\r\\n001\\r\\n110\"]}, {\"input\": \"80 83 48\\r\\n26 0 66\\r\\n47 76 37\\r\\n\", \"output\": [\"000\\r\\n000\\r\\n010\"]}, {\"input\": \"32 15 65\\r\\n7 54 36\\r\\n5 51 3\\r\\n\", \"output\": [\"111\\r\\n101\\r\\n001\"]}, {\"input\": \"22 97 12\\r\\n71 8 24\\r\\n100 21 64\\r\\n\", \"output\": [\"100\\r\\n001\\r\\n100\"]}, {\"input\": \"46 37 13\\r\\n87 0 50\\r\\n90 8 55\\r\\n\", \"output\": [\"111\\r\\n011\\r\\n000\"]}, {\"input\": \"57 43 58\\r\\n20 82 83\\r\\n66 16 52\\r\\n\", \"output\": [\"111\\r\\n010\\r\\n110\"]}, {\"input\": \"45 56 93\\r\\n47 51 59\\r\\n18 51 63\\r\\n\", \"output\": [\"101\\r\\n011\\r\\n100\"]}, {\"input\": \"47 66 67\\r\\n14 1 37\\r\\n27 81 69\\r\\n\", \"output\": [\"001\\r\\n001\\r\\n110\"]}, {\"input\": \"26 69 69\\r\\n85 18 23\\r\\n14 22 74\\r\\n\", \"output\": [\"110\\r\\n001\\r\\n010\"]}, {\"input\": \"10 70 65\\r\\n94 27 25\\r\\n74 66 30\\r\\n\", \"output\": [\"111\\r\\n010\\r\\n100\"]}, {\"input\": \"97 1 74\\r\\n15 99 1\\r\\n88 68 86\\r\\n\", \"output\": [\"001\\r\\n011\\r\\n000\"]}, {\"input\": \"36 48 42\\r\\n45 41 66\\r\\n26 64 1\\r\\n\", \"output\": [\"001\\r\\n111\\r\\n010\"]}, {\"input\": \"52 81 97\\r\\n29 77 71\\r\\n66 11 2\\r\\n\", \"output\": [\"100\\r\\n100\\r\\n111\"]}, {\"input\": \"18 66 33\\r\\n19 49 49\\r\\n48 46 26\\r\\n\", \"output\": [\"011\\r\\n100\\r\\n000\"]}, {\"input\": \"68 79 52\\r\\n51 39 100\\r\\n29 14 26\\r\\n\", \"output\": [\"110\\r\\n000\\r\\n111\"]}, {\"input\": \"91 69 77\\r\\n91 26 64\\r\\n91 88 57\\r\\n\", \"output\": [\"001\\r\\n011\\r\\n110\"]}, {\"input\": \"16 69 64\\r\\n48 21 80\\r\\n81 51 51\\r\\n\", \"output\": [\"010\\r\\n101\\r\\n111\"]}, {\"input\": \"96 14 2\\r\\n100 18 12\\r\\n65 34 89\\r\\n\", \"output\": [\"111\\r\\n010\\r\\n010\"]}, {\"input\": \"93 95 90\\r\\n8 59 42\\r\\n53 13 19\\r\\n\", \"output\": [\"100\\r\\n001\\r\\n111\"]}, {\"input\": \"71 84 18\\r\\n100 19 67\\r\\n9 76 15\\r\\n\", \"output\": [\"010\\r\\n010\\r\\n001\"]}, {\"input\": \"38 93 85\\r\\n21 88 64\\r\\n4 96 25\\r\\n\", \"output\": [\"111\\r\\n011\\r\\n000\"]}, {\"input\": \"75 20 20\\r\\n60 5 78\\r\\n77 4 69\\r\\n\", \"output\": [\"011\\r\\n001\\r\\n000\"]}, {\"input\": \"65 70 96\\r\\n19 6 83\\r\\n33 37 82\\r\\n\", \"output\": [\"100\\r\\n000\\r\\n011\"]}, {\"input\": \"11 13 60\\r\\n17 13 46\\r\\n42 21 39\\r\\n\", \"output\": [\"000\\r\\n011\\r\\n101\"]}, {\"input\": \"0 0 0\\r\\n0 0 0\\r\\n0 0 0\\r\\n\", \"output\": [\"111\\r\\n111\\r\\n111\"]}, {\"input\": \"0 0 0\\r\\n0 1 0\\r\\n0 0 0\\r\\n\", \"output\": [\"101\\r\\n000\\r\\n101\"]}, {\"input\": \"0 0 0\\r\\n0 0 0\\r\\n0 0 1\\r\\n\", \"output\": [\"111\\r\\n110\\r\\n100\"]}]","length":89,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"64 megabytes","difficulty":800.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"2\"]","prob_desc_input_spec":"The only line of the input contains a single integer n (2\u2009\u2264\u2009n\u2009\u2264\u20092\u00b71018) \u2014 the power in which you need to raise number 5.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"dcaff75492eafaf61d598779d6202c9d","prob_desc_created_at":"1455807600","source_code":"#include <iostream>\nint main(){std::cout<<\"25\\n\";return 0;}\n\/\/1534","prob_desc_sample_outputs":"[\"25\"]","lang_cluster":"C++","code_uid":"1b292e35610de715cc299275f718a033","prob_desc_notes":null,"prob_desc_output_spec":"Output the last two digits of 5n without spaces between them.","prob_desc_output_to":"standard output","prob_desc_description":"The HR manager was disappointed again. The last applicant failed the interview the same way as 24 previous ones. \"Do I give such a hard task?\" \u2014 the HR manager thought. \"Just raise number 5 to the power of n and get last two digits of the number. Yes, of course, n can be rather big, and one cannot find the power using a calculator, but we need people who are able to think, not just follow the instructions.\"Could you pass the interview in the machine vision company in IT City?","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"2000000000000000000\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"987654321012345678\\r\\n\", \"output\": [\"25\"]}]","length":3,"num_hidden_unit_tests":5}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2\\n6\\n5\"]","prob_desc_input_spec":"The first line contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of testcases. The i-th of the following n lines contains one integer xi (1\u2009\u2264\u2009xi\u2009\u2264\u2009100) \u2014 the number of chicken chunks Ivan wants to eat.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"cfd1182be98fb5f0c426f8b68e48d452","prob_desc_created_at":"1513091100","source_code":"#include<iostream>\nusing namespace std;\nint main()\n{\n\tint n,l,jc;\n\tcin>>l;\n\tfor(int o=0;o<l;o++)\n\t{\n\t\tjc=0;\n\t\tcin>>n;\n\t\tfor(int i=0;i<=n\/3;i++)\n\t\t{\n\t\t\tfor(int j=0;j<=n\/7;j++)\n\t\t\t{\n\t\t\t\tif((i*3)+(j*7)==n)\n\t\t\t\t{\n\t\t\t\t\tcout<<\"YES\"<<endl;\n\t\t\t\t\tjc=1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(jc)break;\n\t\t\t}\n\t\t\tif(jc)break;\n\t\t}\t\n\t\tif(jc==0)cout<<\"NO\"<<endl;\n\t}\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"YES\\nNO\"]","lang_cluster":"C++","code_uid":"bfe6928ec6639ddceaf1b6753b956bad","prob_desc_notes":"NoteIn the first example Ivan can buy two small portions.In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.","prob_desc_output_spec":"Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.","prob_desc_output_to":"standard output","prob_desc_description":"Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one \u2014 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.Help Ivan to answer this question for several values of x!","hidden_unit_tests":"[{\"input\": \"2\\r\\n6\\r\\n5\\r\\n\", \"output\": [\"YES\\r\\nNO\"]}, {\"input\": \"100\\r\\n1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n12\\r\\n13\\r\\n14\\r\\n15\\r\\n16\\r\\n17\\r\\n18\\r\\n19\\r\\n20\\r\\n21\\r\\n22\\r\\n23\\r\\n24\\r\\n25\\r\\n26\\r\\n27\\r\\n28\\r\\n29\\r\\n30\\r\\n31\\r\\n32\\r\\n33\\r\\n34\\r\\n35\\r\\n36\\r\\n37\\r\\n38\\r\\n39\\r\\n40\\r\\n41\\r\\n42\\r\\n43\\r\\n44\\r\\n45\\r\\n46\\r\\n47\\r\\n48\\r\\n49\\r\\n50\\r\\n51\\r\\n52\\r\\n53\\r\\n54\\r\\n55\\r\\n56\\r\\n57\\r\\n58\\r\\n59\\r\\n60\\r\\n61\\r\\n62\\r\\n63\\r\\n64\\r\\n65\\r\\n66\\r\\n67\\r\\n68\\r\\n69\\r\\n70\\r\\n71\\r\\n72\\r\\n73\\r\\n74\\r\\n75\\r\\n76\\r\\n77\\r\\n78\\r\\n79\\r\\n80\\r\\n81\\r\\n82\\r\\n83\\r\\n84\\r\\n85\\r\\n86\\r\\n87\\r\\n88\\r\\n89\\r\\n90\\r\\n91\\r\\n92\\r\\n93\\r\\n94\\r\\n95\\r\\n96\\r\\n97\\r\\n98\\r\\n99\\r\\n100\\r\\n\", \"output\": [\"NO\\r\\nNO\\r\\nYES\\r\\nNO\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nNO\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\"]}, {\"input\": \"3\\r\\n6\\r\\n6\\r\\n6\\r\\n\", \"output\": [\"YES\\r\\nYES\\r\\nYES\"]}, {\"input\": \"47\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"NO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\\r\\nNO\"]}, {\"input\": \"3\\r\\n1\\r\\n52\\r\\n76\\r\\n\", \"output\": [\"NO\\r\\nYES\\r\\nYES\"]}, {\"input\": \"87\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n\", \"output\": [\"YES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\"]}, {\"input\": \"3\\r\\n3\\r\\n2\\r\\n1\\r\\n\", \"output\": [\"YES\\r\\nNO\\r\\nNO\"]}, {\"input\": \"100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n100\\r\\n\", \"output\": [\"YES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\\r\\nYES\"]}]","length":28,"num_hidden_unit_tests":8}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1300.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"10\", \"3\"]","prob_desc_input_spec":"The first line contains a single integer k (2\u2009\u2264\u2009k\u2009\u2264\u200910) \u2014 the radix of the system.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"a705144ace798d6b41068aa284d99050","prob_desc_created_at":"1287904200","source_code":"#include <iostream>\n\nusing namespace std;\nint report(int n,int j){\n    int d, conv=0,pot=1,x;\n    x=n;\n    while(x>0){\n        d=x%j;\n        x=x\/j;\n        conv=conv+d*pot;\n        pot *=10;\n    }\n    return conv;\n    \n}\nint main()\n{\n    int n,j=1;\n    cin>>n;\n    while(j!=n){\n        for(int i=1;i<n;i++){\n            cout<<report(i*j,n)<<\" \";\n        }\n        cout<<endl;\n        j++;\n    }\n    return 0;\n}","prob_desc_sample_outputs":"[\"1  2  3  4  5  6  7  8  9\\n2  4  6  8 10 12 14 16 18\\n3  6  9 12 15 18 21 24 27\\n4  8 12 16 20 24 28 32 36\\n5 10 15 20 25 30 35 40 45\\n6 12 18 24 30 36 42 48 54\\n7 14 21 28 35 42 49 56 63\\n8 16 24 32 40 48 56 64 72\\n9 18 27 36 45 54 63 72 81\", \"1  2\\n2 11\"]","lang_cluster":"C++","code_uid":"1218a09e34d065349669a5fda0605941","prob_desc_notes":null,"prob_desc_output_spec":"Output the multiplication table for the system of notations with the radix k. The table must contain k\u2009-\u20091 rows and k\u2009-\u20091 columns. The element on the crossing of the i-th row and the j-th column is equal to the product of i and j in the system of notations with the radix k. Each line may have any number of spaces between the numbers (the extra spaces in the samples are put for clarity).","prob_desc_output_to":"standard output","prob_desc_description":"Petya studies positional notations. He has already learned to add and subtract numbers in the systems of notations with different radices and has moved on to a more complicated action \u2014 multiplication. To multiply large numbers one has to learn the multiplication table. Unfortunately, in the second grade students learn only the multiplication table of decimals (and some students even learn it in the first grade). Help Petya make a multiplication table for numbers in the system of notations with the radix k.","hidden_unit_tests":"[{\"input\": \"10\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9\\r\\n2 4 6 8 10 12 14 16 18\\r\\n3 6 9 12 15 18 21 24 27\\r\\n4 8 12 16 20 24 28 32 36\\r\\n5 10 15 20 25 30 35 40 45\\r\\n6 12 18 24 30 36 42 48 54\\r\\n7 14 21 28 35 42 49 56 63\\r\\n8 16 24 32 40 48 56 64 72\\r\\n9 18 27 36 45 54 63 72 81\", \"1 2 3 4 5 6 7 8 9 \\r\\n2 4 6 8 10 12 14 16 18 \\r\\n3 6 9 12 15 18 21 24 27 \\r\\n4 8 12 16 20 24 28 32 36 \\r\\n5 10 15 20 25 30 35 40 45 \\r\\n6 12 18 24 30 36 42 48 54 \\r\\n7 14 21 28 35 42 49 56 63 \\r\\n8 16 24 32 40 48 56 64 72 \\r\\n9 18 27 36 45 54 63 72 81\", \"1  2  3  4  5  6  7  8  9\\r\\n2  4  6  8 10 12 14 16 18\\r\\n3  6  9 12 15 18 21 24 27\\r\\n4  8 12 16 20 24 28 32 36\\r\\n5 10 15 20 25 30 35 40 45\\r\\n6 12 18 24 30 36 42 48 54\\r\\n7 14 21 28 35 42 49 56 63\\r\\n8 16 24 32 40 48 56 64 72\\r\\n9 18 27 36 45 54 63 72 81\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1  2\\r\\n2 11\", \"1 2\\r\\n2 11\", \"1 2 \\r\\n2 11\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"1 2 3 \\r\\n2 10 12 \\r\\n3 12 21\", \"1  2  3\\r\\n2 10 12\\r\\n3 12 21\", \"1 2 3\\r\\n2 10 12\\r\\n3 12 21\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"1 2 3 4 \\r\\n2 4 11 13 \\r\\n3 11 14 22 \\r\\n4 13 22 31\", \"1 2 3 4\\r\\n2 4 11 13\\r\\n3 11 14 22\\r\\n4 13 22 31\", \"1  2  3  4\\r\\n2  4 11 13\\r\\n3 11 14 22\\r\\n4 13 22 31\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"1 2 3 4 5\\r\\n2 4 10 12 14\\r\\n3 10 13 20 23\\r\\n4 12 20 24 32\\r\\n5 14 23 32 41\", \"1 2 3 4 5 \\r\\n2 4 10 12 14 \\r\\n3 10 13 20 23 \\r\\n4 12 20 24 32 \\r\\n5 14 23 32 41\", \"1  2  3  4  5\\r\\n2  4 10 12 14\\r\\n3 10 13 20 23\\r\\n4 12 20 24 32\\r\\n5 14 23 32 41\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"1 2 3 4 5 6\\r\\n2 4 6 11 13 15\\r\\n3 6 12 15 21 24\\r\\n4 11 15 22 26 33\\r\\n5 13 21 26 34 42\\r\\n6 15 24 33 42 51\", \"1 2 3 4 5 6 \\r\\n2 4 6 11 13 15 \\r\\n3 6 12 15 21 24 \\r\\n4 11 15 22 26 33 \\r\\n5 13 21 26 34 42 \\r\\n6 15 24 33 42 51\", \"1  2  3  4  5  6\\r\\n2  4  6 11 13 15\\r\\n3  6 12 15 21 24\\r\\n4 11 15 22 26 33\\r\\n5 13 21 26 34 42\\r\\n6 15 24 33 42 51\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"1  2  3  4  5  6  7\\r\\n2  4  6 10 12 14 16\\r\\n3  6 11 14 17 22 25\\r\\n4 10 14 20 24 30 34\\r\\n5 12 17 24 31 36 43\\r\\n6 14 22 30 36 44 52\\r\\n7 16 25 34 43 52 61\", \"1 2 3 4 5 6 7 \\r\\n2 4 6 10 12 14 16 \\r\\n3 6 11 14 17 22 25 \\r\\n4 10 14 20 24 30 34 \\r\\n5 12 17 24 31 36 43 \\r\\n6 14 22 30 36 44 52 \\r\\n7 16 25 34 43 52 61\", \"1 2 3 4 5 6 7\\r\\n2 4 6 10 12 14 16\\r\\n3 6 11 14 17 22 25\\r\\n4 10 14 20 24 30 34\\r\\n5 12 17 24 31 36 43\\r\\n6 14 22 30 36 44 52\\r\\n7 16 25 34 43 52 61\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 \\r\\n2 4 6 8 11 13 15 17 \\r\\n3 6 10 13 16 20 23 26 \\r\\n4 8 13 17 22 26 31 35 \\r\\n5 11 16 22 27 33 38 44 \\r\\n6 13 20 26 33 40 46 53 \\r\\n7 15 23 31 38 46 54 62 \\r\\n8 17 26 35 44 53 62 71\", \"1  2  3  4  5  6  7  8\\r\\n2  4  6  8 11 13 15 17\\r\\n3  6 10 13 16 20 23 26\\r\\n4  8 13 17 22 26 31 35\\r\\n5 11 16 22 27 33 38 44\\r\\n6 13 20 26 33 40 46 53\\r\\n7 15 23 31 38 46 54 62\\r\\n8 17 26 35 44 53 62 71\", \"1 2 3 4 5 6 7 8\\r\\n2 4 6 8 11 13 15 17\\r\\n3 6 10 13 16 20 23 26\\r\\n4 8 13 17 22 26 31 35\\r\\n5 11 16 22 27 33 38 44\\r\\n6 13 20 26 33 40 46 53\\r\\n7 15 23 31 38 46 54 62\\r\\n8 17 26 35 44 53 62 71\"]}]","length":28,"num_hidden_unit_tests":9}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"512 4\", \"1000000000 9\"]","prob_desc_input_spec":"The first line of the input contains two integer numbers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 10^9$$$, $$$1 \\le k \\le 50$$$) \u2014 the number from which Tanya will subtract and the number of subtractions correspondingly.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"064162604284ce252b88050b4174ba55","prob_desc_created_at":"1567258500","source_code":"#include<bits\/stdc++.h>\nusing namespace std;\nlong long a,b;\nint main(void)\n{    \n    scanf(\"%d%d\",&a,&b);   \n    while(b--)if(a%10)a--;else a\/=10;  \n    printf(\"%lld\",a);\n    return 0;\n}","prob_desc_sample_outputs":"[\"50\", \"1\"]","lang_cluster":"C++","code_uid":"8e86453fe9d1f56d21411e36bacf8344","prob_desc_notes":"NoteThe first example corresponds to the following sequence: $$$512 \\rightarrow 511 \\rightarrow 510 \\rightarrow 51 \\rightarrow 50$$$.","prob_desc_output_spec":"Print one integer number \u2014 the result of the decreasing $$$n$$$ by one $$$k$$$ times. It is guaranteed that the result will be positive integer number. ","prob_desc_output_to":"standard output","prob_desc_description":"Little girl Tanya is learning how to decrease a number by one, but she does it wrong with a number consisting of two or more digits. Tanya subtracts one from a number by the following algorithm:  if the last digit of the number is non-zero, she decreases the number by one;  if the last digit of the number is zero, she divides the number by 10 (i.e. removes the last digit). You are given an integer number $$$n$$$. Tanya will subtract one from it $$$k$$$ times. Your task is to print the result after all $$$k$$$ subtractions.It is guaranteed that the result will be positive integer number.","hidden_unit_tests":"[{\"input\": \"512 4\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1000000000 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"131203 11\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"999999999 50\\r\\n\", \"output\": [\"9999\"]}, {\"input\": \"999999999 49\\r\\n\", \"output\": [\"99990\"]}, {\"input\": \"131203 9\\r\\n\", \"output\": [\"130\"]}, {\"input\": \"900000000 16\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"909090909 50\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1001 2\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"5 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"1\"]}]","length":10,"num_hidden_unit_tests":11}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\nxxxiii\", \"5\\nxxoxx\", \"10\\nxxxxxxxxxx\"]","prob_desc_input_spec":"The first line contains integer $$$n$$$ $$$(3 \\le n \\le 100)$$$ \u2014 the length of the file name. The second line contains a string of length $$$n$$$ consisting of lowercase Latin letters only \u2014 the file name.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"8de14db41d0acee116bd5d8079cb2b02","prob_desc_created_at":"1582202100","source_code":"#include <iostream>\n\nusing namespace std;\n\nint main(){\n    short n, r, s = 0; string st;\n    cin >> n >> st;\n    if (st[0] == 'x') r = 1; else r = 0;\n    for (int i = 1; i < n; i++){\n        if (st[i] == 'x') r++; else{\n            if (r > 2) s += r - 2;\n            \/\/cout << s << r << endl;\n            r = 0;\n        }\n    }\n    if (r > 2) s += r - 2;\n    cout << s;\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"1\", \"0\", \"8\"]","lang_cluster":"C++","code_uid":"961d932e932eb7860430722a7e2f15a6","prob_desc_notes":"NoteIn the first example Polycarp tried to send a file with name contains number $$$33$$$, written in Roman numerals. But he can not just send the file, because it name contains three letters \"x\" in a row. To send the file he needs to remove any one of this letters.","prob_desc_output_spec":"Print the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. If initially the file name dost not contain a forbidden substring \"xxx\", print 0.","prob_desc_output_to":"standard output","prob_desc_description":"You can not just take the file and send it. When Polycarp trying to send a file in the social network \"Codehorses\", he encountered an unexpected problem. If the name of the file contains three or more \"x\" (lowercase Latin letters \"x\") in a row, the system considers that the file content does not correspond to the social network topic. In this case, the file is not sent and an error message is displayed.Determine the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring. Print 0 if the file name does not initially contain a forbidden substring \"xxx\".You can delete characters in arbitrary positions (not necessarily consecutive). If you delete a character, then the length of a string is reduced by $$$1$$$. For example, if you delete the character in the position $$$2$$$ from the string \"exxxii\", then the resulting string is \"exxii\".","hidden_unit_tests":"[{\"input\": \"6\\r\\nxxxiii\\r\\n\", \"output\": [\"1\\r\\n\", \"1\", \"1\\n\"]}, {\"input\": \"5\\r\\nxxoxx\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"10\\r\\nxxxxxxxxxx\\r\\n\", \"output\": [\"8\\n\", \"8\", \"8\\r\\n\"]}, {\"input\": \"100\\r\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\r\\n\", \"output\": [\"98\", \"98\\n\", \"98\\r\\n\"]}, {\"input\": \"99\\r\\nxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxaxxa\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"3\\r\\nxxx\\r\\n\", \"output\": [\"1\\r\\n\", \"1\", \"1\\n\"]}, {\"input\": \"77\\r\\naaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxyyyzzz\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"100\\r\\nuxxxxxlmexxxxxxxwnxxexxxxxcxxfydxxxxxxvmdxxxxxxisxxxxxxxxidkxxxpxxxxxxxxmnuxxxxjxxxqcxxwmxxxxxxxxmrx\\r\\n\", \"output\": [\"41\", \"41\\r\\n\", \"41\\n\"]}, {\"input\": \"100\\r\\nxxxxxxxxxxxjtxxxxxxxxcxxxxxxcfxxxxzxxxxxxgxxxxxbxxxxbxxxxxxxxdycxxxxokixxxkizxxgcxxxxxxxxexxxxxfxxxc\\r\\n\", \"output\": [\"49\", \"49\\n\", \"49\\r\\n\"]}, {\"input\": \"100\\r\\nuxxxxxlmexxxxxxxwnxxexxxxxcxxfydxxxxxxvmdxxxxxxisxxxxxxxxidkxxxpxxxxxxxxmnuxxxxjxxxqcxxwmxxxxxwxxxxx\\r\\n\", \"output\": [\"41\", \"41\\r\\n\", \"41\\n\"]}, {\"input\": \"34\\r\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"5\\r\\nfcyju\\r\\n\", \"output\": [\"0\\r\\n\", \"0\\n\", \"0\"]}, {\"input\": \"100\\r\\nihygyvdvyeifomhxhkhdkimquvgallbqharcyriyqkidnwykozuhvkwdldlztpabgyuflikychqpdenwzgtlzotyumjgdsrbxxxx\\r\\n\", \"output\": [\"2\", \"2\\n\", \"2\\r\\n\"]}]","length":19,"num_hidden_unit_tests":13}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 17 4\"]","prob_desc_input_spec":"The first line contains three positive integers k,\u2009n,\u2009w (1\u2009\u2009\u2264\u2009\u2009k,\u2009w\u2009\u2009\u2264\u2009\u20091000, 0\u2009\u2264\u2009n\u2009\u2264\u2009109), the cost of the first banana, initial number of dollars the soldier has and number of bananas he wants. ","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"e87d9798107734a885fd8263e1431347","prob_desc_created_at":"1432312200","source_code":"#include<bits\/stdc++.h>\nusing namespace std;\nint main() {\n\tint n,k,w,i,s=0;\n\tcin>>k>>n>>w;\n\tfor (i=1;i<=w;i++)\n\ts+=i;\n\tcout<<max(s*k-n,0);\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"13\"]","lang_cluster":"C++","code_uid":"7a28b4c38dca525eb4eea86304b352aa","prob_desc_notes":null,"prob_desc_output_spec":"Output one integer \u2014 the amount of dollars that the soldier must borrow from his friend. If he doesn't have to borrow money, output 0.","prob_desc_output_to":"standard output","prob_desc_description":"A soldier wants to buy w bananas in the shop. He has to pay k dollars for the first banana, 2k dollars for the second one and so on (in other words, he has to pay i\u00b7k dollars for the i-th banana). He has n dollars. How many dollars does he have to borrow from his friend soldier to buy w bananas?","hidden_unit_tests":"[{\"input\": \"3 17 4\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"1 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 5 6\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"1 1000000000 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 0 1000\\r\\n\", \"output\": [\"500500000\"]}, {\"input\": \"859 453892 543\\r\\n\", \"output\": [\"126416972\"]}, {\"input\": \"1000 1000000000 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 500500000 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 500500001 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 500499999 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"634 87973 214\\r\\n\", \"output\": [\"14497197\"]}, {\"input\": \"432 10000 241\\r\\n\", \"output\": [\"12587552\"]}, {\"input\": \"111 111111111 111\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 43 3\\r\\n\", \"output\": [\"77\"]}]","length":10,"num_hidden_unit_tests":15}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3\\n1 4 6\", \"5\\n1 2 3 4 5\", \"5\\n1 2 3 7 8\"]","prob_desc_input_spec":"The first line contains a single integer n (3\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of holds. The next line contains n space-separated integers ai (1\u2009\u2264\u2009ai\u2009\u2264\u20091000), where ai is the height where the hold number i hangs. The sequence ai is increasing (i.e. each element except for the first one is strictly larger than the previous one).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"8a8013f960814040ac4bf229a0bd5437","prob_desc_created_at":"1418833800","source_code":"#include <bits\/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    long long n , c = 999999;\n    cin >> n;\n    vector<long long>arr(n),tmp;\n    for (int x = 0; x < n; cin >> arr[x++]);\n    for (int x = 1; x < n-1; x++)\n    {\n        for (int y = 0; y < n-1; y++)\n        {\n            if (y == x)\n                continue;\n            if (y+1 == x)\n                tmp.push_back(abs(arr[y]- arr[y+2]));\n            else\n                tmp.push_back(abs(arr[y]-arr[y+1]));\n        }\n        sort(tmp.begin() , tmp.end());\n        if (tmp[tmp.size()-1] < c)\n            c = tmp[tmp.size()-1];\n        tmp.clear();\n    }\n    cout << c;\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"5\", \"2\", \"4\"]","lang_cluster":"C++","code_uid":"8cc9b5cf7786e8a632d89eaca33c989b","prob_desc_notes":"NoteIn the first sample you can remove only the second hold, then the sequence looks like (1,\u20096), the maximum difference of the neighboring elements equals 5.In the second test after removing every hold the difficulty equals 2.In the third test you can obtain sequences (1,\u20093,\u20097,\u20098), (1,\u20092,\u20097,\u20098), (1,\u20092,\u20093,\u20098), for which the difficulty is 4, 5 and 5, respectively. Thus, after removing the second element we obtain the optimal answer \u2014 4.","prob_desc_output_spec":"Print a single number \u2014 the minimum difficulty of the track after removing a single hold.","prob_desc_output_to":"standard output","prob_desc_description":"Mike is trying rock climbing but he is awful at it. There are n holds on the wall, i-th hold is at height ai off the ground. Besides, let the sequence ai increase, that is, ai\u2009&lt;\u2009ai\u2009+\u20091 for all i from 1 to n\u2009-\u20091; we will call such sequence a track. Mike thinks that the track a1, ..., an has difficulty . In other words, difficulty equals the maximum distance between two holds that are adjacent in height.Today Mike decided to cover the track with holds hanging on heights a1, ..., an. To make the problem harder, Mike decided to remove one hold, that is, remove one element of the sequence (for example, if we take the sequence (1,\u20092,\u20093,\u20094,\u20095) and remove the third element from it, we obtain the sequence (1,\u20092,\u20094,\u20095)). However, as Mike is awful at climbing, he wants the final difficulty (i.e. the maximum difference of heights between adjacent holds after removing the hold) to be as small as possible among all possible options of removing a hold. The first and last holds must stay at their positions.Help Mike determine the minimum difficulty of the track after removing one hold.","hidden_unit_tests":"[{\"input\": \"3\\r\\n1 4 6\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"5\\r\\n1 2 3 4 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\n1 2 3 7 8\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3\\r\\n1 500 1000\\r\\n\", \"output\": [\"999\"]}, {\"input\": \"10\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n1 4 9 16 25 36 49 64 81 100\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"10\\r\\n300 315 325 338 350 365 379 391 404 416\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"15\\r\\n87 89 91 92 93 95 97 99 101 103 105 107 109 111 112\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"60\\r\\n3 5 7 8 15 16 18 21 24 26 40 41 43 47 48 49 50 51 52 54 55 60 62 71 74 84 85 89 91 96 406 407 409 412 417 420 423 424 428 431 432 433 436 441 445 446 447 455 458 467 469 471 472 475 480 485 492 493 497 500\\r\\n\", \"output\": [\"310\"]}, {\"input\": \"3\\r\\n159 282 405\\r\\n\", \"output\": [\"246\"]}, {\"input\": \"81\\r\\n6 7 22 23 27 38 40 56 59 71 72 78 80 83 86 92 95 96 101 122 125 127 130 134 154 169 170 171 172 174 177 182 184 187 195 197 210 211 217 223 241 249 252 253 256 261 265 269 274 277 291 292 297 298 299 300 302 318 338 348 351 353 381 386 387 397 409 410 419 420 428 430 453 460 461 473 478 493 494 500 741\\r\\n\", \"output\": [\"241\"]}, {\"input\": \"10\\r\\n218 300 388 448 535 629 680 740 836 925\\r\\n\", \"output\": [\"111\"]}, {\"input\": \"100\\r\\n6 16 26 36 46 56 66 76 86 96 106 116 126 136 146 156 166 176 186 196 206 216 226 236 246 256 266 276 286 296 306 316 326 336 346 356 366 376 386 396 406 416 426 436 446 456 466 476 486 496 506 516 526 536 546 556 566 576 586 596 606 616 626 636 646 656 666 676 686 696 706 716 726 736 746 756 766 776 786 796 806 816 826 836 846 856 866 876 886 896 906 916 926 936 946 956 966 976 986 996\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000\\r\\n\", \"output\": [\"901\"]}, {\"input\": \"100\\r\\n1 9 15 17 28 29 30 31 32 46 48 49 52 56 62 77 82 85 90 91 94 101 102 109 111 113 116 118 124 125 131 132 136 138 139 143 145 158 161 162 165 167 171 173 175 177 179 183 189 196 801 802 804 806 817 819 827 830 837 840 842 846 850 855 858 862 863 866 869 870 878 881 883 884 896 898 899 901 904 906 908 909 910 911 912 917 923 924 925 935 939 943 945 956 963 964 965 972 976 978\\r\\n\", \"output\": [\"605\"]}, {\"input\": \"100\\r\\n2 43 47 49 50 57 59 67 74 98 901 903 904 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 938 939 940 942 943 944 945 946 947 948 949 950 952 953 954 956 957 958 959 960 961 962 963 965 966 967 968 969 970 971 972 973 974 975 976 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 998 999\\r\\n\", \"output\": [\"803\"]}, {\"input\": \"72\\r\\n178 186 196 209 217 226 236 248 260 273 281 291 300 309 322 331 343 357 366 377 389 399 409 419 429 442 450 459 469 477 491 501 512 524 534 548 557 568 582 593 602 616 630 643 652 660 670 679 693 707 715 728 737 750 759 768 776 789 797 807 815 827 837 849 863 873 881 890 901 910 920 932\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"38\\r\\n1 28 55 82 109 136 163 190 217 244 271 298 325 352 379 406 433 460 487 514 541 568 595 622 649 676 703 730 757 784 811 838 865 892 919 946 973 1000\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"28\\r\\n1 38 75 112 149 186 223 260 297 334 371 408 445 482 519 556 593 630 667 704 741 778 815 852 889 926 963 1000\\r\\n\", \"output\": [\"74\"]}]","length":29,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 5 4 0 4\", \"4 5 9 2 1\"]","prob_desc_input_spec":"The input consists of a single line containing five integers c1,\u2009c2,\u2009c3,\u2009c4 and c5 \u2014 the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0\u2009\u2264\u2009c1,\u2009c2,\u2009c3,\u2009c4,\u2009c5\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"af1ec6a6fc1f2360506fc8a34e3dcd20","prob_desc_created_at":"1413474000","source_code":"#include<iostream>\n#include<math.h>\nusing namespace std;\nint main()\n{\n\nint a,b,c,d,e,f;\ncin>>a>>b>>c>>d>>e;\n\n\nint l = (a+b+c+d+e);\nint lp = (a+b+c+d+e);\nif(l%5 || !l)\ncout<<-1;\nelse cout<<l\/5;\n\nreturn 0;\n}\n\n","prob_desc_sample_outputs":"[\"3\", \"-1\"]","lang_cluster":"C++","code_uid":"d067771356d87b4875cdf4266cc4f987","prob_desc_notes":"NoteIn the first sample the following sequence of operations is possible:  One coin is passed from the fourth player to the second player;  One coin is passed from the fourth player to the fifth player;  One coin is passed from the first player to the third player;  One coin is passed from the fourth player to the second player. ","prob_desc_output_spec":"Print the only line containing a single positive integer b \u2014 the number of coins in the initial bet of each player. If there is no such value of b, then print the only value \"-1\" (quotes for clarity).","prob_desc_output_to":"standard output","prob_desc_description":"There are five people playing a game called \"Generosity\". Each person gives some non-zero number of coins b as an initial bet. After all players make their bets of b coins, the following operation is repeated for several times: a coin is passed from one player to some other player.Your task is to write a program that can, given the number of coins each player has at the end of the game, determine the size b of the initial bet or find out that such outcome of the game cannot be obtained for any positive number of coins b in the initial bet.","hidden_unit_tests":"[{\"input\": \"2 5 4 0 4\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 5 9 2 1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"0 0 0 0 0\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 2 1 2 3\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"100 0 0 0 0\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"2 3 4 5 6\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 1 2 3 4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100 100 100 100 100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"93 100 99 90 98\\r\\n\", \"output\": [\"96\"]}, {\"input\": \"99 99 99 99 99\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"99 98 98 99 100\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"43 83 1 0 23\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"43 83 1 100 23\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"57 83 11 4 93\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"87 38 19 33 100\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"56 0 0 0 4\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"0 0 0 0 1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"99 100 100 100 100\\r\\n\", \"output\": [\"-1\"]}]","length":19,"num_hidden_unit_tests":19}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 2 1 2\", \"2 1 1 1\"]","prob_desc_input_spec":"The first line contains four integers n1,\u2009n2,\u2009k1,\u2009k2. All numbers in the input are from 1 to 50. This problem doesn't have subproblems. You will get 3 points for the correct submission.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"aed24ebab3ed9fd1741eea8e4200f86b","prob_desc_created_at":"1423328400","source_code":"#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<string>\nusing namespace std;\nint main()\n{\n    int n1,n2,k1,k2;\n    scanf(\"%d%d%d%d\",&n1,&n2,&k1,&k2);\n    if(n1>n2)printf(\"First\");\n    else printf(\"Second\");\n    return 0;\n}\n\n                 ","prob_desc_sample_outputs":"[\"Second\", \"First\"]","lang_cluster":"C++","code_uid":"9642ddc6aeb30afbece2d4de80b62667","prob_desc_notes":"NoteConsider the first sample test. Each player has a box with 2 balls. The first player draws a single ball from his box in one move and the second player can either take 1 or 2 balls from his box in one move. No matter how the first player acts, the second player can always win if he plays wisely.","prob_desc_output_spec":"Output \"First\" if the first player wins and \"Second\" otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"Two players play a simple game. Each player is provided with a box with balls. First player's box contains exactly n1 balls and second player's box contains exactly n2 balls. In one move first player can take from 1 to k1 balls from his box and throw them away. Similarly, the second player can take from 1 to k2 balls from his box in his move. Players alternate turns and the first player starts the game. The one who can't make a move loses. Your task is to determine who wins if both players play optimally.","hidden_unit_tests":"[{\"input\": \"2 2 1 2\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"2 1 1 1\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"5 7 4 1\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"5 7 1 4\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"5 7 10 10\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"5 7 1 10\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"1 1 1 1\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"50 50 50 50\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"50 49 1 2\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"50 48 3 1\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"48 50 12 11\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"49 50 11 12\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"49 49 4 1\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"49 49 3 3\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"1 50 1 50\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"1 50 50 50\\r\\n\", \"output\": [\"Second\"]}, {\"input\": \"50 1 1 1\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"50 1 1 50\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"32 31 10 9\\r\\n\", \"output\": [\"First\"]}, {\"input\": \"32 4 17 3\\r\\n\", \"output\": [\"First\"]}]","length":18,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"1.5 seconds","prob_desc_sample_inputs":"[\"2\"]","prob_desc_input_spec":"The first and only line contains integer N.   1\u2009\u2264\u2009N\u2009\u2264\u2009106 ","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"a18833c987fd7743e8021196b5dcdd1b","prob_desc_created_at":"1441526400","source_code":"\/*************************************************************************\n    > File Name: a.cpp\n    > Author: flyasdfvcxz\n    > Mail: liyuemingcn@gmail.com \n    > Created Time: Fri Sep 11 20:55:07 2015\n ************************************************************************\/\n\n#include<iostream>\nusing namespace std;\nconst int mod = 1e9 + 7;\nconst int N = 2e6 + 10;\nlong long fac[N], inv[N];\nlong long calInv(long long a, long long b)\n{\n\tlong long ret = 1LL;\n\twhile (b)\n\t{\n\t\tif (b & 1) ret = ret * a % mod;\n\t\ta = a * a % mod;\n\t\tb >>= 1;\n\t}\n\treturn ret;\n}\nint main()\n{\n\tfac[0] = 1;\n\tfor (int i = 1; i < N; ++i) \n\t{\n\t\tfac[i] = fac[i - 1] * i % mod;\n\t\tinv[i] = calInv(fac[i], mod - 2);\n\t}\n\tlong long n;\n\tcin >> n;\n\tn++;\n\tlong long ans = 2LL * fac[2 * n - 1] % mod * inv[n] % mod * inv[n - 1] % mod + mod - 1; \n\tans %= mod;\n\tcout << ans << endl;\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"19\"]","lang_cluster":"C++","code_uid":"83f568f8fc8314d06dd1ef9b8e5f24a6","prob_desc_notes":"NoteStart: Game is in state A.   Turn 1: Either bot can make a move (first bot is red and second bot is blue), so there are two possible states after the first turn \u2013 B and C.  Turn 2: In both states B and C, either bot can again make a turn, so the list of possible states is expanded to include D, E, F and G.  Turn 3: Red bot already did N=2 moves when in state D, so it cannot make any more moves there. It can make moves when in state E, F and G, so states I, K and M are added to the list. Similarly, blue bot cannot make a move when in state G, but can when in D, E and F, so states H, J and L are added.  Turn 4: Red bot already did N=2 moves when in states H, I and K, so it can only make moves when in J, L and M, so states P, R and S are added. Blue bot cannot make a move when in states J, L and M, but only when in H, I and K, so states N, O and Q are added. Overall, there are 19 possible states of the game their algorithm needs to analyze.","prob_desc_output_spec":"Output should contain a single integer \u2013 number of possible states modulo 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"Sasha and Ira are two best friends. But they aren\u2019t just friends, they are software engineers and experts in artificial intelligence. They are developing an algorithm for two bots playing a two-player game. The game is cooperative and turn based. In each turn, one of the players makes a move (it doesn\u2019t matter which player, it's possible that players turns do not alternate). Algorithm for bots that Sasha and Ira are developing works by keeping track of the state the game is in. Each time either bot makes a move, the state changes. And, since the game is very dynamic, it will never go back to the state it was already in at any point in the past.Sasha and Ira are perfectionists and want their algorithm to have an optimal winning strategy. They have noticed that in the optimal winning strategy, both bots make exactly N moves each. But, in order to find the optimal strategy, their algorithm needs to analyze all possible states of the game (they haven\u2019t learned about alpha-beta pruning yet) and pick the best sequence of moves.They are worried about the efficiency of their algorithm and are wondering what is the total number of states of the game that need to be analyzed? ","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"69\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"251\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"923\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"3431\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"12869\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"48619\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"184755\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"705431\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"407336794\"]}, {\"input\": \"999\\r\\n\", \"output\": [\"72475737\"]}, {\"input\": \"9999\\r\\n\", \"output\": [\"703593269\"]}, {\"input\": \"99999\\r\\n\", \"output\": [\"879467332\"]}, {\"input\": \"999999\\r\\n\", \"output\": [\"192151599\"]}, {\"input\": \"524287\\r\\n\", \"output\": [\"295397547\"]}, {\"input\": \"131071\\r\\n\", \"output\": [\"920253602\"]}, {\"input\": \"178481\\r\\n\", \"output\": [\"845172388\"]}, {\"input\": \"524288\\r\\n\", \"output\": [\"250289717\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"627314155\"]}]","length":39,"num_hidden_unit_tests":20}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n1 3 3 2\", \"3\\n1 1 1\", \"4\\n42 0 0 42\"]","prob_desc_input_spec":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the number of participants. The next line contains a sequence of n integers a1,\u2009a2,\u2009...,\u2009an (0\u2009\u2264\u2009ai\u2009\u2264\u2009600)\u00a0\u2014 participants' scores. It's guaranteed that at least one participant has non-zero score.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"3b520c15ea9a11b16129da30dcfb5161","prob_desc_created_at":"1519574700","source_code":"#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n\n\/* A. Olympiad *\/\n\nusing namespace std;\ntypedef long long ll;\n\nint n, a[105], res, vis[605];\n\nint main(int argc, char * argv[]) \n{\n\tscanf(\"%d\", &n);\n    for (int i = 0; i < n; i ++)\n        scanf(\"%d\", &a[i]);\n    sort(a, a + n);\n    res = 0;\n    memset(vis, 0, sizeof(vis));\n    for (int i = 0; i < n; i ++)\n    {\n    \tif (a[i] != 0 && !vis[a[i]])\n    \t{\n    \t\tres ++;\n    \t\tvis[a[i]] = 1;\n    \t}\n    }\n    cout << res << endl;\n    return 0;\n}","prob_desc_sample_outputs":"[\"3\", \"1\", \"1\"]","lang_cluster":"C++","code_uid":"2584514af63eea42716915086f4ddff8","prob_desc_notes":"NoteThere are three ways to choose a subset in sample case one.  Only participants with 3 points will get diplomas.  Participants with 2 or 3 points will get diplomas.  Everyone will get a diploma! The only option in sample case two is to award everyone.Note that in sample case three participants with zero scores cannot get anything.","prob_desc_output_spec":"Print a single integer\u00a0\u2014 the desired number of ways.","prob_desc_output_to":"standard output","prob_desc_description":"The recent All-Berland Olympiad in Informatics featured n participants with each scoring a certain amount of points.As the head of the programming committee, you are to determine the set of participants to be awarded with diplomas with respect to the following criteria:   At least one participant should get a diploma.  None of those with score equal to zero should get awarded.  When someone is awarded, all participants with score not less than his score should also be awarded. Determine the number of ways to choose a subset of participants that will receive the diplomas.","hidden_unit_tests":"[{\"input\": \"4\\r\\n1 3 3 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n42 0 0 42\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n1 0 1 0 1 0 0 0 0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n572 471 540 163 50 30 561 510 43 200\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"100\\r\\n122 575 426 445 172 81 247 429 97 202 175 325 382 384 417 356 132 502 328 537 57 339 518 211 479 306 140 168 268 16 140 263 593 249 391 310 555 468 231 180 157 18 334 328 276 155 21 280 322 545 111 267 467 274 291 304 235 34 365 180 21 95 501 552 325 331 302 353 296 22 289 399 7 466 32 302 568 333 75 192 284 10 94 128 154 512 9 480 243 521 551 492 420 197 207 125 367 117 438 600\\r\\n\", \"output\": [\"94\"]}, {\"input\": \"100\\r\\n600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"78\\r\\n5 4 13 2 5 6 2 10 10 1 2 6 7 9 6 3 5 7 1 10 2 2 7 0 2 11 11 3 1 13 3 10 6 2 0 3 0 5 0 1 4 11 1 1 7 0 12 7 5 12 0 2 12 9 8 3 4 3 4 11 4 10 2 3 10 12 5 6 1 11 2 0 8 7 9 1 3 12\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"34\\r\\n220 387 408 343 184 447 197 307 337 414 251 319 426 322 347 242 208 412 188 185 241 235 216 259 331 372 322 284 444 384 214 297 389 391\\r\\n\", \"output\": [\"33\"]}, {\"input\": \"100\\r\\n1 2 1 0 3 0 2 0 0 1 2 0 1 3 0 3 3 1 3 0 0 2 1 2 2 1 3 3 3 3 3 2 0 0 2 1 2 3 2 3 0 1 1 3 3 2 0 3 1 0 2 2 2 1 2 3 2 1 0 3 0 2 0 3 0 2 1 0 3 1 0 2 2 1 3 1 3 0 2 3 3 1 1 3 1 3 0 3 2 0 2 3 3 0 2 0 2 0 1 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n572 471 540 163 50 30 561 510 43 200 213 387 500 424 113 487 357 333 294 337 435 202 447 494 485 465 161 344 470 559 104 356 393 207 224 213 511 514 60 386 149 216 392 229 429 173 165 401 395 150 127 579 344 390 529 296 225 425 318 79 465 447 177 110 367 212 459 270 41 500 277 567 125 436 178 9 214 342 203 112 144 24 79 155 495 556 40 549 463 281 241 316 2 246 1 396 510 293 332 55\\r\\n\", \"output\": [\"93\"]}, {\"input\": \"99\\r\\n5 4 13 2 5 6 2 10 10 1 2 6 7 9 6 3 5 7 1 10 2 2 7 0 2 11 11 3 1 13 3 10 6 2 0 3 0 5 0 1 4 11 1 1 7 0 12 7 5 12 0 2 12 9 8 3 4 3 4 11 4 10 2 3 10 12 5 6 1 11 2 0 8 7 9 1 3 12 2 3 9 3 7 13 7 13 0 11 8 12 2 5 9 4 0 6 6 2 13\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"99\\r\\n1 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 1 1 0 0 0 0 0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"99\\r\\n21 74 25 44 71 80 46 28 96 1 74 24 81 83 16 55 31 1 27 36 56 38 17 10 78 5 39 67 67 15 39 62 92 48 90 9 54 67 30 79 56 17 33 27 75 54 20 79 21 44 10 66 66 73 90 3 34 33 64 79 20 94 0 51 24 30 1 52 95 21 88 98 6 65 31 1 67 32 74 91 83 9 93 27 53 11 8 79 42 20 50 91 19 96 6 24 66 16 37\\r\\n\", \"output\": [\"61\"]}, {\"input\": \"2\\r\\n0 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n0 600\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n1 1 1 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\n0 0 1 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1\\r\\n5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n0 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n1 0 0 1 2\\r\\n\", \"output\": [\"2\"]}]","length":32,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 3\", \"3 1\"]","prob_desc_input_spec":"In the only line you are given two integers a, b (0\u2009\u2264\u2009a,\u2009b\u2009\u2264\u2009100) \u2014 the number of even and odd steps, accordingly.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"ec5e3b3f5ee6a13eaf01b9a9a66ff037","prob_desc_created_at":"1485873300","source_code":"#include<stdio.h>\nint main()\n{\n    int a,b,c;\n    scanf(\"%d %d\",&a,&b);\n    if(a==0&&b==0)\n       printf(\"NO\");\n       else\n        {\n    if(a>b)\n        c=a-b;\n    else c=b-a;\n    if(c==1||c==0)\n       printf(\"YES\");\n       else\n        printf(\"NO\");}\n    return 0;\n}","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"C++","code_uid":"b1ce0aac0ef094c4ccb8f544e7e5d475","prob_desc_notes":"NoteIn the first example one of suitable intervals is from 1 to 5. The interval contains two even steps\u00a0\u2014 2 and 4, and three odd: 1, 3 and 5.","prob_desc_output_spec":"In the only line print \"YES\", if the interval of steps described above exists, and \"NO\" otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"On her way to programming school tiger Dasha faced her first test \u2014 a huge staircase!  The steps were numbered from one to infinity. As we know, tigers are very fond of all striped things, it is possible that it has something to do with their color. So on some interval of her way she calculated two values \u2014 the number of steps with even and odd numbers. You need to check whether there is an interval of steps from the l-th to the r-th (1\u2009\u2264\u2009l\u2009\u2264\u2009r), for which values that Dasha has found are correct.","hidden_unit_tests":"[{\"input\": \"2 3\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"5 4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"9 9\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"85 95\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"89 25\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"74 73\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"62 39\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"57 57\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 0\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"98 100\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"99 100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"100 0\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 100\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"100 98\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 5\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"YES\"]}]","length":18,"num_hidden_unit_tests":21}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2\", \"3\"]","prob_desc_input_spec":"A single line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u20092000) \u2014 the number of buttons the lock has.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"6df251ac8bf27427a24bc23d64cb9884","prob_desc_created_at":"1359387000","source_code":"#include <iostream>\n#include <string>\n#include <cmath>\n#include <cstring>\n\nusing namespace std;\n\nint main()\n\n{long long int i;\ncin >>i;\ncout<<(i*i*i+5*i)\/6;\n\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"7\"]","lang_cluster":"C++","code_uid":"1a1778061caa20606b38c7ac79f93d8a","prob_desc_notes":"NoteConsider the first test sample. Manao can fail his first push and push the wrong button. In this case he will already be able to guess the right one with his second push. And his third push will push the second right button. Thus, in the worst-case scenario he will only need 3 pushes.","prob_desc_output_spec":"In a single line print the number of times Manao has to push a button in the worst-case scenario.","prob_desc_output_to":"standard output","prob_desc_description":"Manao is trying to open a rather challenging lock. The lock has n buttons on it and to open it, you should press the buttons in a certain order to open the lock. When you push some button, it either stays pressed into the lock (that means that you've guessed correctly and pushed the button that goes next in the sequence), or all pressed buttons return to the initial position. When all buttons are pressed into the lock at once, the lock opens.Consider an example with three buttons. Let's say that the opening sequence is: {2, 3, 1}. If you first press buttons 1 or 3, the buttons unpress immediately. If you first press button 2, it stays pressed. If you press 1 after 2, all buttons unpress. If you press 3 after 2, buttons 3 and 2 stay pressed. As soon as you've got two pressed buttons, you only need to press button 1 to open the lock.Manao doesn't know the opening sequence. But he is really smart and he is going to act in the optimal way. Calculate the number of times he's got to push a button in order to open the lock in the worst-case scenario.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"175\"]}, {\"input\": \"2000\\r\\n\", \"output\": [\"1333335000\"]}, {\"input\": \"1747\\r\\n\", \"output\": [\"888644743\"]}, {\"input\": \"889\\r\\n\", \"output\": [\"117099969\"]}, {\"input\": \"1999\\r\\n\", \"output\": [\"1331335999\"]}, {\"input\": \"914\\r\\n\", \"output\": [\"127259419\"]}, {\"input\": \"996\\r\\n\", \"output\": [\"164675486\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"833\"]}, {\"input\": \"50\\r\\n\", \"output\": [\"20875\"]}, {\"input\": \"91\\r\\n\", \"output\": [\"125671\"]}, {\"input\": \"92\\r\\n\", \"output\": [\"129858\"]}, {\"input\": \"256\\r\\n\", \"output\": [\"2796416\"]}, {\"input\": \"512\\r\\n\", \"output\": [\"22370048\"]}, {\"input\": \"666\\r\\n\", \"output\": [\"49235271\"]}, {\"input\": \"667\\r\\n\", \"output\": [\"49457383\"]}, {\"input\": \"314\\r\\n\", \"output\": [\"5160119\"]}, {\"input\": \"1241\\r\\n\", \"output\": [\"318541121\"]}, {\"input\": \"1500\\r\\n\", \"output\": [\"562501250\"]}, {\"input\": \"1837\\r\\n\", \"output\": [\"1033182073\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"166667500\"]}]","length":15,"num_hidden_unit_tests":24}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"10 3\", \"7 7\"]","prob_desc_input_spec":"The only line of input contains integers n and k (1\u2009\u2264\u2009k\u2009\u2264\u2009n\u2009\u2264\u20091012). Please, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"1f8056884db00ad8294a7cc0be75fe97","prob_desc_created_at":"1371223800","source_code":"\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int long long n, k;\n\n    while (cin >> k >> n) {\n\n        if (ceil(k \/ 2.0) >= n){\n\n            cout << (n * 2) - 1 << endl;\n\n        }\n        else{\n            int long long j= (n - ceil(k \/ 2.0)) * 2;\n            cout << j << endl;\n        }\n    }return 0;\n}\n","prob_desc_sample_outputs":"[\"5\", \"6\"]","lang_cluster":"C++","code_uid":"615462c4efc691d053575a83add7d617","prob_desc_notes":"NoteIn the first sample Volodya's sequence will look like this: {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}. The third place in the sequence is therefore occupied by the number 5.","prob_desc_output_spec":"Print the number that will stand at the position number k after Volodya's manipulations.","prob_desc_output_to":"standard output","prob_desc_description":"Being a nonconformist, Volodya is displeased with the current state of things, particularly with the order of natural numbers (natural number is positive integer number). He is determined to rearrange them. But there are too many natural numbers, so Volodya decided to start with the first n. He writes down the following sequence of numbers: firstly all odd integers from 1 to n (in ascending order), then all even integers from 1 to n (also in ascending order). Help our hero to find out which number will stand at the position number k.","hidden_unit_tests":"[{\"input\": \"10 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"7 7\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"7 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"8 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"8 4\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1000000000000 500000000001\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"999999999997 499999999999\\r\\n\", \"output\": [\"999999999997\"]}, {\"input\": \"999999999999 999999999999\\r\\n\", \"output\": [\"999999999998\"]}, {\"input\": \"1000000000000 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"999999999999 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000000 1000000000000\\r\\n\", \"output\": [\"1000000000000\"]}, {\"input\": \"1000000000000 500000000000\\r\\n\", \"output\": [\"999999999999\"]}, {\"input\": \"1000000000000 499999999999\\r\\n\", \"output\": [\"999999999997\"]}, {\"input\": \"999999999997 499999999998\\r\\n\", \"output\": [\"999999999995\"]}, {\"input\": \"619234238 556154835\\r\\n\", \"output\": [\"493075432\"]}, {\"input\": \"38151981 36650624\\r\\n\", \"output\": [\"35149266\"]}, {\"input\": \"680402465 442571217\\r\\n\", \"output\": [\"204739968\"]}, {\"input\": \"109135284 9408714\\r\\n\", \"output\": [\"18817427\"]}, {\"input\": \"603701841 56038951\\r\\n\", \"output\": [\"112077901\"]}, {\"input\": \"356764822 321510177\\r\\n\", \"output\": [\"286255532\"]}, {\"input\": \"284911189 142190783\\r\\n\", \"output\": [\"284381565\"]}, {\"input\": \"91028405 61435545\\r\\n\", \"output\": [\"31842684\"]}]","length":21,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"4 1\", \"4 2\", \"5 3\", \"5 4\"]","prob_desc_input_spec":"The first line contains two integers n and k (4\u2009\u2264\u2009n\u2009\u2264\u20091000, 1\u2009\u2264\u2009k\u2009\u2264\u20094).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"96d839dc2d038f8ae95fc47c217b2e2f","prob_desc_created_at":"1510239900","source_code":"#include <iostream>\n#include <string.h>\n#include <cstdio>\n#define ll long long\n\nusing namespace std;\n\nll C(ll n,ll m){\n\tll ans=1;\n\tfor(ll i=n;i>=n-m+1;i--)\n\t\tans*=i;\n\tfor(ll i=1;i<=m;i++)\n\t\tans\/=i;\n\treturn ans;\n}\n\nint main(){\n\tll n, k;\n\t\/\/scanf (\"%lld%lld\", &n, &k);\n\tcin >> n >> k;\n\tif (k == 1)\n\t\tcout << \"1\";\n\telse if (k == 2)\n\t\tcout << 1 + C(n, 2);\n\telse if (k == 3)\n\t\tcout << 1 + C(n,  2) + C(n, 3) * 2;\n\telse{\n\t\tll x = 1 + C(n, 2) + C(n, 3) * 2 + C(n, 4) * 9;\n\t\tcout << x;\n\t}\t\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"1\", \"7\", \"31\", \"76\"]","lang_cluster":"C++","code_uid":"4a562b7be313be6b9752c2440e492abe","prob_desc_notes":null,"prob_desc_output_spec":"Print the number of almost identity permutations for given n and k.","prob_desc_output_to":"standard output","prob_desc_description":"A permutation p of size n is an array such that every integer from 1 to n occurs exactly once in this array.Let's call a permutation an almost identity permutation iff there exist at least n\u2009-\u2009k indices i (1\u2009\u2264\u2009i\u2009\u2264\u2009n) such that pi\u2009=\u2009i.Your task is to count the number of almost identity permutations for given numbers n and k.","hidden_unit_tests":"[{\"input\": \"4 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"5 4\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"200 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200 2\\r\\n\", \"output\": [\"19901\"]}, {\"input\": \"200 3\\r\\n\", \"output\": [\"2646701\"]}, {\"input\": \"200 4\\r\\n\", \"output\": [\"584811251\"]}, {\"input\": \"400 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"400 2\\r\\n\", \"output\": [\"79801\"]}, {\"input\": \"400 3\\r\\n\", \"output\": [\"21253401\"]}, {\"input\": \"400 4\\r\\n\", \"output\": [\"9477912501\"]}, {\"input\": \"600 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"600 2\\r\\n\", \"output\": [\"179701\"]}, {\"input\": \"600 3\\r\\n\", \"output\": [\"71820101\"]}, {\"input\": \"600 4\\r\\n\", \"output\": [\"48187303751\"]}, {\"input\": \"800 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"800 2\\r\\n\", \"output\": [\"319601\"]}, {\"input\": \"800 3\\r\\n\", \"output\": [\"170346801\"]}, {\"input\": \"800 4\\r\\n\", \"output\": [\"152620985001\"]}, {\"input\": \"1000 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000 2\\r\\n\", \"output\": [\"499501\"]}, {\"input\": \"1000 3\\r\\n\", \"output\": [\"332833501\"]}, {\"input\": \"1000 4\\r\\n\", \"output\": [\"373086956251\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"24\"]}]","length":32,"num_hidden_unit_tests":25}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\\n10 5 0 -5 -10\", \"4\\n1 1 1 1\", \"3\\n5 1 -5\", \"2\\n900 1000\"]","prob_desc_input_spec":"The first line contains a single integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of days for which the average air temperature is known. The second line contains a sequence of integers t1,\u2009t2,\u2009...,\u2009tn (\u2009-\u20091000\u2009\u2264\u2009ti\u2009\u2264\u20091000)\u00a0\u2014 where ti is the average temperature in the i-th day.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"d04fa4322a1b300bdf4a56f09681b17f","prob_desc_created_at":"1505739900","source_code":"#include<iostream>\nusing namespace std;\nint main()\n{\n\tlong int n;\n\tcin >> n;\n\tint i,flag=0;\n\tlong int dif;\n\tint arr[10000];\n\tfor(i=0;i<n;i++)\n\t{\n\t\tcin >> arr[i];\n\t}\n\t\tdif=arr[1]-arr[0];\n\tfor(i=1;i<n-1;i++)\n\t{\n\t\tif(arr[i+1]-arr[i]!=dif)\n\t\t{\n\t\t\tflag=1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(flag==1)\n\t{\n\t\tcout << arr[n-1];\n\t}\n     else\n\t{\n\t\tcout << arr[n-1] + dif;\n\t}\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"-15\", \"1\", \"-5\", \"1100\"]","lang_cluster":"C++","code_uid":"dffdc755ed122b8bc89a18d92e00c14b","prob_desc_notes":"NoteIn the first example the sequence of the average temperatures is an arithmetic progression where the first term is 10 and each following terms decreases by 5. So the predicted average temperature for the sixth day is \u2009-\u200910\u2009-\u20095\u2009=\u2009\u2009-\u200915.In the second example the sequence of the average temperatures is an arithmetic progression where the first term is 1 and each following terms equals to the previous one. So the predicted average temperature in the fifth day is 1.In the third example the average temperatures do not form an arithmetic progression, so the average temperature of the fourth day equals to the temperature of the third day and equals to \u2009-\u20095.In the fourth example the sequence of the average temperatures is an arithmetic progression where the first term is 900 and each the following terms increase by 100. So predicted average temperature in the third day is 1000\u2009+\u2009100\u2009=\u20091100.","prob_desc_output_spec":"Print the average air temperature in the (n\u2009+\u20091)-th day, which Vasya predicts according to his method. Note that the absolute value of the predicted temperature can exceed 1000.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya came up with his own weather forecasting method. He knows the information about the average air temperature for each of the last n days. Assume that the average air temperature for each day is integral.Vasya believes that if the average temperatures over the last n days form an arithmetic progression, where the first term equals to the average temperature on the first day, the second term equals to the average temperature on the second day and so on, then the average temperature of the next (n\u2009+\u20091)-th day will be equal to the next term of the arithmetic progression. Otherwise, according to Vasya's method, the temperature of the (n\u2009+\u20091)-th day will be equal to the temperature of the n-th day.Your task is to help Vasya predict the average temperature for tomorrow, i. e. for the (n\u2009+\u20091)-th day.","hidden_unit_tests":"[{\"input\": \"5\\r\\n10 5 0 -5 -10\\r\\n\", \"output\": [\"-15\"]}, {\"input\": \"4\\r\\n1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n5 1 -5\\r\\n\", \"output\": [\"-5\"]}, {\"input\": \"2\\r\\n900 1000\\r\\n\", \"output\": [\"1100\"]}, {\"input\": \"2\\r\\n1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n2 5 8\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"4\\r\\n4 1 -2 -5\\r\\n\", \"output\": [\"-8\"]}, {\"input\": \"10\\r\\n-1000 -995 -990 -985 -980 -975 -970 -965 -960 -955\\r\\n\", \"output\": [\"-950\"]}, {\"input\": \"11\\r\\n-1000 -800 -600 -400 -200 0 200 400 600 800 1000\\r\\n\", \"output\": [\"1200\"]}, {\"input\": \"31\\r\\n1000 978 956 934 912 890 868 846 824 802 780 758 736 714 692 670 648 626 604 582 560 538 516 494 472 450 428 406 384 362 340\\r\\n\", \"output\": [\"318\"]}, {\"input\": \"5\\r\\n1000 544 88 -368 -824\\r\\n\", \"output\": [\"-1280\"]}, {\"input\": \"100\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"33\\r\\n456 411 366 321 276 231 186 141 96 51 6 -39 -84 -129 -174 -219 -264 -309 -354 -399 -444 -489 -534 -579 -624 -669 -714 -759 -804 -849 -894 -939 -984\\r\\n\", \"output\": [\"-1029\"]}, {\"input\": \"77\\r\\n-765 -742 -719 -696 -673 -650 -627 -604 -581 -558 -535 -512 -489 -466 -443 -420 -397 -374 -351 -328 -305 -282 -259 -236 -213 -190 -167 -144 -121 -98 -75 -52 -29 -6 17 40 63 86 109 132 155 178 201 224 247 270 293 316 339 362 385 408 431 454 477 500 523 546 569 592 615 638 661 684 707 730 753 776 799 822 845 868 891 914 937 960 983\\r\\n\", \"output\": [\"1006\"]}, {\"input\": \"3\\r\\n2 4 8\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"4\\r\\n4 1 -3 -5\\r\\n\", \"output\": [\"-5\"]}, {\"input\": \"10\\r\\n-1000 -995 -990 -984 -980 -975 -970 -965 -960 -955\\r\\n\", \"output\": [\"-955\"]}, {\"input\": \"11\\r\\n-999 -800 -600 -400 -200 0 200 400 600 800 1000\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"51\\r\\n-9 10 30 50 70 90 110 130 150 170 190 210 230 250 270 290 310 330 350 370 390 410 430 450 470 490 510 530 550 570 590 610 630 650 670 690 710 730 750 770 790 810 830 850 870 890 910 930 950 970 990\\r\\n\", \"output\": [\"990\"]}, {\"input\": \"100\\r\\n10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 207\\r\\n\", \"output\": [\"207\"]}, {\"input\": \"2\\r\\n1000 1000\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"2\\r\\n-1000 1000\\r\\n\", \"output\": [\"3000\"]}, {\"input\": \"2\\r\\n1000 -1000\\r\\n\", \"output\": [\"-3000\"]}, {\"input\": \"2\\r\\n-1000 -1000\\r\\n\", \"output\": [\"-1000\"]}, {\"input\": \"100\\r\\n-85 -80 -76 -72 -68 -64 -60 -56 -52 -48 -44 -40 -36 -32 -28 -24 -20 -16 -12 -8 -4 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284 288 292 296 300 304 308 312\\r\\n\", \"output\": [\"312\"]}, {\"input\": \"4\\r\\n1 2 4 5\\r\\n\", \"output\": [\"5\"]}]","length":32,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 2\", \"1 2\"]","prob_desc_input_spec":"The first line contains two integers w and h (1\u2009\u2264\u2009w,\u2009h\u2009\u2264\u20094000) \u2014 the rectangle's sizes.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"42454dcf7d073bf12030367eb094eb8c","prob_desc_created_at":"1336663800","source_code":"#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nlong long solve(int a){\n    long long delta=(a>>1)<<1;\n    return (a+1)*delta\/2-(2+delta)*delta\/4;\n}\nint main(){\n    long long a,b;\n    cin>>a>>b;\n    cout<<(solve(a)*solve(b))<<endl;\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"1\", \"0\"]","lang_cluster":"C++","code_uid":"1d9a1db955f7d879ad8629edfc57e6c5","prob_desc_notes":"NoteIn the first example there exists only one such rhombus. Its vertices are located at points (1,\u20090), (2,\u20091), (1,\u20092), (0,\u20091).","prob_desc_output_spec":"Print a single number \u2014 the number of sought rhombi. Please do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.","prob_desc_output_to":"standard output","prob_desc_description":"You have two positive integers w and h. Your task is to count the number of rhombi which have the following properties:   Have positive area.  With vertices at integer points.  All vertices of the rhombi are located inside or on the border of the rectangle with vertices at points (0,\u20090), (w,\u20090), (w,\u2009h), (0,\u2009h). In other words, for all vertices (xi,\u2009yi) of the rhombus the following conditions should fulfill: 0\u2009\u2264\u2009xi\u2009\u2264\u2009w and 0\u2009\u2264\u2009yi\u2009\u2264\u2009h.  Its diagonals are parallel to the axis.  Count the number of such rhombi.Let us remind you that a rhombus is a quadrilateral whose four sides all have the same length.","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 4000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4000 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4000 4000\\r\\n\", \"output\": [\"16000000000000\"]}, {\"input\": \"15 10\\r\\n\", \"output\": [\"1400\"]}, {\"input\": \"7 9\\r\\n\", \"output\": [\"240\"]}, {\"input\": \"17 17\\r\\n\", \"output\": [\"5184\"]}, {\"input\": \"7 13\\r\\n\", \"output\": [\"504\"]}, {\"input\": \"9 14\\r\\n\", \"output\": [\"980\"]}, {\"input\": \"3 10\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"14 2\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"4 6\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"18 2858\\r\\n\", \"output\": [\"165405321\"]}, {\"input\": \"14 1274\\r\\n\", \"output\": [\"19882681\"]}, {\"input\": \"25 2986\\r\\n\", \"output\": [\"347731644\"]}, {\"input\": \"13 1402\\r\\n\", \"output\": [\"20638842\"]}, {\"input\": \"2955 21\\r\\n\", \"output\": [\"240130660\"]}, {\"input\": \"1665 27\\r\\n\", \"output\": [\"126136192\"]}, {\"input\": \"3671 19\\r\\n\", \"output\": [\"303215400\"]}, {\"input\": \"2541 25\\r\\n\", \"output\": [\"251810520\"]}, {\"input\": \"1913 3980\\r\\n\", \"output\": [\"3623063809200\"]}, {\"input\": \"3727 2044\\r\\n\", \"output\": [\"3627108561888\"]}, {\"input\": \"2437 460\\r\\n\", \"output\": [\"78542851800\"]}, {\"input\": \"1499 2172\\r\\n\", \"output\": [\"662525703000\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"0\"]}]","length":14,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2700.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"3 0\", \"4 0\", \"10 1\", \"8 4\"]","prob_desc_input_spec":"The first and the only input line contains two integers n, m .","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"355cc23d7a4addfc920c6e5e72a2bb64","prob_desc_created_at":"1368803400","source_code":"\/\/+-------------------------------------+\n\/\/|     By   qwer_zcc                   |\n\/\/|     Date 12\/10\/2014                 |\n\/\/+-------------------------------------+\n#include <bits\/stdc++.h>\n#define INF (~0U>>1)-3\n#define LLINF ~0ULL>>1\n#define LL long long\n#define uLL unsigned long long\n#define uint unsigned int\n#define D double\n#define LD long double\n#define rep(i,a,b) for (int i=a;i<=b;i++)\n#define drep(i,a,b) for (int i=a;i>=b;i--)\n#define M(a) memset(a,0,sizeof(a));\n#define pb push_back\n#define mp make_pair\n#define Pi M_PI\nusing namespace std;\ntemplate<class T> inline T min(T &a,T &b) {return a<b?a:b;}\ntemplate<class T> inline T max(T &a,T &b) {return a>b?a:b;}\ntemplate<class T> void read(T &x)\n{\n    char ch;\n    while ((ch=getchar()) && !isdigit(ch));x=ch-'0';\n    while ((ch=getchar()) && isdigit(ch)) x=x*10+ch-'0';\n}\nstruct point\n{\n    int x,y;\n    point() {}\n    point(int _x,int _y) : x(_x),y(_y) {}\n} ;\nint n,m,l;\nLL ans;\nint main()\n{\n\tread(n),read(m);l=n+1;\n\tint c;\n\trep(j,m+1,n-m)\n\t{\n\t\trep(i,m+1,n-m)\n\t\t{\n\t\t\tint x=j*(j*2-l*3)+l*l,y=l-j,z=l+j;\n\t\t\tif (i==m+1) c=max((x+z*i)\/(i+y),m);\n\t\t\telse while ((c+1)*(i+y)<=x+z*i) c++;\n\t\t\tif (c+1<=n-m) ans+=(LL)(n-m-c);\n\t\t\telse break;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans*3LL);\n}","prob_desc_sample_outputs":"[\"9\", \"24\", \"210\", \"0\"]","lang_cluster":"C++","code_uid":"970b3e80fac984915b5392a88afd0310","prob_desc_notes":"NoteFor the following picture n\u2009=\u20098, m\u2009=\u20092. White circles are the holes for ventilation, red circles \u2014 holes for net stretching. One of the possible obtuse triangles is painted red.   ","prob_desc_output_spec":"Print a single number \u2014 the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"Professional sport is more than hard work. It also is the equipment, designed by top engineers. As an example, let's take tennis. Not only should you be in great shape, you also need an excellent racket! In this problem your task is to contribute to the development of tennis and to help to design a revolutionary new concept of a racket!The concept is a triangular racket. Ant it should be not just any triangle, but a regular one. As soon as you've chosen the shape, you need to stretch the net. By the time you came the rocket had n holes drilled on each of its sides. The holes divide each side into equal n\u2009+\u20091 parts. At that, the m closest to each apex holes on each side are made for better ventilation only and you cannot stretch the net through them. The next revolutionary idea as to stretch the net as obtuse triangles through the holes, so that for each triangle all apexes lay on different sides. Moreover, you need the net to be stretched along every possible obtuse triangle. That's where we need your help \u2014 help us to count the number of triangles the net is going to consist of.Two triangles are considered to be different if their pictures on the fixed at some position racket are different.","hidden_unit_tests":"[{\"input\": \"3 0\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"4 0\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"10 1\\r\\n\", \"output\": [\"210\"]}, {\"input\": \"8 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"250 16\\r\\n\", \"output\": [\"5615358\"]}, {\"input\": \"500 37\\r\\n\", \"output\": [\"40969344\"]}, {\"input\": \"1000 141\\r\\n\", \"output\": [\"159977052\"]}, {\"input\": \"25000 18\\r\\n\", \"output\": [\"9577113629202\"]}, {\"input\": \"19000 5743\\r\\n\", \"output\": [\"42723355320\"]}, {\"input\": \"23849 12\\r\\n\", \"output\": [\"8327896907037\"]}, {\"input\": \"16756 4\\r\\n\", \"output\": [\"2893984759194\"]}, {\"input\": \"12334 51\\r\\n\", \"output\": [\"1120612094406\"]}, {\"input\": \"5123 323\\r\\n\", \"output\": [\"48958836510\"]}, {\"input\": \"10000 0\\r\\n\", \"output\": [\"616244609316\"]}, {\"input\": \"20000 10000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"23847 32\\r\\n\", \"output\": [\"8273206744692\"]}, {\"input\": \"16234 61\\r\\n\", \"output\": [\"2562574374918\"]}, {\"input\": \"24122 587\\r\\n\", \"output\": [\"7150209021150\"]}, {\"input\": \"50 4\\r\\n\", \"output\": [\"37680\"]}, {\"input\": \"25000 0\\r\\n\", \"output\": [\"9629267050260\"]}, {\"input\": \"32000 324\\r\\n\", \"output\": [\"18688647739074\"]}, {\"input\": \"31987 0\\r\\n\", \"output\": [\"20169570555456\"]}, {\"input\": \"31999 12\\r\\n\", \"output\": [\"20135272837188\"]}, {\"input\": \"32000 0\\r\\n\", \"output\": [\"20194172518050\"]}]","length":52,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":null,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"17 5 2\", \"6 5 2\", \"6 1 2\", \"6 2 2\", \"9 6 3\", \"10 6 3\", \"8 5 4\"]","prob_desc_input_spec":"The first and the only line contains three integers n, p, k (3\u2009\u2264\u2009n\u2009\u2264\u2009100; 1\u2009\u2264\u2009p\u2009\u2264\u2009n; 1\u2009\u2264\u2009k\u2009\u2264\u2009n)","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"526e2cce272e42a3220e33149b1c9c84","prob_desc_created_at":"1393687800","source_code":"#include <iostream>\n\nusing namespace std;\n\nint main(const int argc, char *argv[])\n{\n    int n,p,k;\n    cin>>n>>p>>k;\n    if ((p-k)<=1) for (int i=1;i<p;i++) cout<<i<<\" \";\n    else\n    {\n        cout<<\"<< \";\n        for (int i=p-k;i<p;i++) cout<<i<<\" \";\n    }\n    cout<<\"(\"<<p<<\") \";\n    if ((p+k)>=n) for (int i=p+1;i<=n;i++) cout<<i<<\" \";\n    else\n    {\n        for (int i=p+1;i<=p+k;i++) cout<<i<<\" \";\n        cout<<\">>\";\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"&lt;&lt; 3 4 (5) 6 7 &gt;&gt;\", \"&lt;&lt; 3 4 (5) 6\", \"(1) 2 3 &gt;&gt;\", \"1 (2) 3 4 &gt;&gt;\", \"&lt;&lt; 3 4 5 (6) 7 8 9\", \"&lt;&lt; 3 4 5 (6) 7 8 9 &gt;&gt;\", \"1 2 3 4 (5) 6 7 8\"]","lang_cluster":"C++","code_uid":"6fe3b00e8547ea62d9821ee6e882f4db","prob_desc_notes":null,"prob_desc_output_spec":"Print the proper navigation. Follow the format of the output from the test samples.","prob_desc_output_to":"standard output","prob_desc_description":"User ainta is making a web site. This time he is going to make a navigation of the pages. In his site, there are n pages numbered by integers from 1 to n. Assume that somebody is on the p-th page now. The navigation will look like this: &lt;&lt; p\u2009-\u2009k p\u2009-\u2009k\u2009+\u20091 ... p\u2009-\u20091 (p) p\u2009+\u20091 ... p\u2009+\u2009k\u2009-\u20091 p\u2009+\u2009k &gt;&gt; When someone clicks the button \"&lt;&lt;\" he is redirected to page 1, and when someone clicks the button \"&gt;&gt;\" he is redirected to page n. Of course if someone clicks on a number, he is redirected to the corresponding page.There are some conditions in the navigation:  If page 1 is in the navigation, the button \"&lt;&lt;\" must not be printed.  If page n is in the navigation, the button \"&gt;&gt;\" must not be printed.  If the page number is smaller than 1 or greater than n, it must not be printed.  \u00a0You can see some examples of the navigations. Make a program that prints the navigation.","hidden_unit_tests":"[{\"input\": \"17 5 2\\r\\n\", \"output\": [\"<< 3 4 (5) 6 7 >>\", \"<< 3 4 (5) 6 7  >>\"]}, {\"input\": \"6 5 2\\r\\n\", \"output\": [\"<< 3 4 (5) 6\"]}, {\"input\": \"6 1 2\\r\\n\", \"output\": [\"(1) 2 3  >>\", \"(1) 2 3 >>\"]}, {\"input\": \"6 2 2\\r\\n\", \"output\": [\"1 (2) 3 4 >>\", \"1 (2) 3 4  >>\"]}, {\"input\": \"9 6 3\\r\\n\", \"output\": [\"<< 3 4 5 (6) 7 8 9\"]}, {\"input\": \"10 6 3\\r\\n\", \"output\": [\"<< 3 4 5 (6) 7 8 9  >>\", \"<< 3 4 5 (6) 7 8 9 >>\"]}, {\"input\": \"8 5 4\\r\\n\", \"output\": [\"1 2 3 4 (5) 6 7 8\"]}, {\"input\": \"100 10 20\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 (10) 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 >>\", \"1 2 3 4 5 6 7 8 9 (10) 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  >>\"]}, {\"input\": \"100 25 11\\r\\n\", \"output\": [\"<< 14 15 16 17 18 19 20 21 22 23 24 (25) 26 27 28 29 30 31 32 33 34 35 36 >>\", \"<< 14 15 16 17 18 19 20 21 22 23 24 (25) 26 27 28 29 30 31 32 33 34 35 36  >>\"]}, {\"input\": \"5 2 1\\r\\n\", \"output\": [\"1 (2) 3  >>\", \"1 (2) 3 >>\"]}, {\"input\": \"5 3 1\\r\\n\", \"output\": [\"<< 2 (3) 4 >>\", \"<< 2 (3) 4  >>\"]}, {\"input\": \"79 35 12\\r\\n\", \"output\": [\"<< 23 24 25 26 27 28 29 30 31 32 33 34 (35) 36 37 38 39 40 41 42 43 44 45 46 47 >>\", \"<< 23 24 25 26 27 28 29 30 31 32 33 34 (35) 36 37 38 39 40 41 42 43 44 45 46 47  >>\"]}, {\"input\": \"100 99 5\\r\\n\", \"output\": [\"<< 94 95 96 97 98 (99) 100\"]}, {\"input\": \"100 99 15\\r\\n\", \"output\": [\"<< 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 (99) 100\"]}, {\"input\": \"100 100 17\\r\\n\", \"output\": [\"<< 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 (100)\"]}, {\"input\": \"100 35 28\\r\\n\", \"output\": [\"<< 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 (35) 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 >>\", \"<< 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 (35) 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  >>\"]}, {\"input\": \"100 46 38\\r\\n\", \"output\": [\"<< 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 (46) 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 >>\", \"<< 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 (46) 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84  >>\"]}, {\"input\": \"100 46 48\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 (46) 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94  >>\", \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 (46) 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 >>\"]}, {\"input\": \"100 10 100\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 (10) 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"]}, {\"input\": \"3 1 1\\r\\n\", \"output\": [\"(1) 2 >>\", \"(1) 2  >>\"]}, {\"input\": \"3 2 1\\r\\n\", \"output\": [\"1 (2) 3\"]}, {\"input\": \"17 5 3\\r\\n\", \"output\": [\"<< 2 3 4 (5) 6 7 8  >>\", \"<< 2 3 4 (5) 6 7 8 >>\"]}, {\"input\": \"3 1 3\\r\\n\", \"output\": [\"(1) 2 3\"]}, {\"input\": \"7 5 1\\r\\n\", \"output\": [\"<< 4 (5) 6 >>\", \"<< 4 (5) 6  >>\"]}, {\"input\": \"5 5 5\\r\\n\", \"output\": [\"1 2 3 4 (5)\"]}, {\"input\": \"5 3 5\\r\\n\", \"output\": [\"1 2 (3) 4 5\"]}]","length":23,"num_hidden_unit_tests":26}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 2\", \"6 3\"]","prob_desc_input_spec":"The single line contains two integers, a and b (1\u2009\u2264\u2009a\u2009\u2264\u20091000;\u00a02\u2009\u2264\u2009b\u2009\u2264\u20091000).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"a349094584d3fdc6b61e39bffe96dece","prob_desc_created_at":"1388417400","source_code":"#include <iostream>\n\nusing namespace std;\n\nint main()\n{\nint g,c,h=0;int b=0;cin>>g>>c;\nwhile(g>0){\nb=g%c+b;\nh=h+g;\ng=g\/c;\n}\nh=h+b\/c+(b\/c+b%c)\/c+((b\/c+b%c)\/c+(b\/c+b%c)%c)\/c;\ncout<<h<<endl;\n\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"7\", \"8\"]","lang_cluster":"C++","code_uid":"dff4dcee10a2e24e8072690104282447","prob_desc_notes":"NoteConsider the first sample. For the first four hours Vasily lights up new candles, then he uses four burned out candles to make two new ones and lights them up. When these candles go out (stop burning), Vasily can make another candle. Overall, Vasily can light up the room for 7 hours.","prob_desc_output_spec":"Print a single integer \u2014 the number of hours Vasily can light up the room for.","prob_desc_output_to":"standard output","prob_desc_description":"Vasily the Programmer loves romance, so this year he decided to illuminate his room with candles.Vasily has a candles.When Vasily lights up a new candle, it first burns for an hour and then it goes out. Vasily is smart, so he can make b went out candles into a new candle. As a result, this new candle can be used like any other new candle.Now Vasily wonders: for how many hours can his candles light up the room if he acts optimally well? Help him find this number.","hidden_unit_tests":"[{\"input\": \"4 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6 3\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1000 1000\\r\\n\", \"output\": [\"1001\"]}, {\"input\": \"123 5\\r\\n\", \"output\": [\"153\"]}, {\"input\": \"1000 2\\r\\n\", \"output\": [\"1999\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"999 2\\r\\n\", \"output\": [\"1997\"]}, {\"input\": \"1000 3\\r\\n\", \"output\": [\"1499\"]}, {\"input\": \"1000 4\\r\\n\", \"output\": [\"1333\"]}, {\"input\": \"1 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"80 970\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"10 4\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"4 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"91 5\\r\\n\", \"output\": [\"113\"]}, {\"input\": \"777 17\\r\\n\", \"output\": [\"825\"]}, {\"input\": \"100 4\\r\\n\", \"output\": [\"133\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6 4\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"26 8\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"9 4\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"20 3\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"17 3\\r\\n\", \"output\": [\"25\"]}]","length":17,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n1 2 6\", \"10\\n1 2 3 4 5\"]","prob_desc_input_spec":"The first line of the input contains one integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100, n is even) \u2014 the size of the chessboard.  The second line of the input contains  integer numbers  (1\u2009\u2264\u2009pi\u2009\u2264\u2009n) \u2014 initial positions of the pieces. It is guaranteed that all the positions are distinct.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"0efe9afd8e6be9e00f7949be93f0ca1a","prob_desc_created_at":"1526913900","source_code":"#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<string>\n#include<queue>\nusing namespace std;\n#define mem(a,b) memset(a,b,sizeof(a))\n#define ll long long\n#define INF 0x3f3f3f3f\n#define maxn 100000+5\n#define eps 1e-12\n#define mod 1000000007\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') {x=10*x+ch-'0';ch=getchar();}\n    return x*f;\n}\nint a[105],vis[105];\nint main()\n{\n   int n;\n   n=read();\n   mem(vis,0);\n   for(int i=1;i<=n\/2;++i) a[i]=read(),vis[a[i]]=1;\n   sort(a+1,a+n\/2+1);\n   int sum1=0,sum2=0;\n   for(int i=1;i<=n\/2;++i)\n   {\n       if(a[i]%2)\n       {\n           for(int j=2;j<=n;j+=2)\n           {\n               if(vis[j]==0)\n               {\n                   sum1+=abs(a[i]-j);vis[j]=1; break; }\n           }\n       }\n   }\n   mem(vis,0);\n   for(int i=1;i<=n\/2;++i) vis[a[i]]=1;\n   for(int i=1;i<=n\/2;++i)\n   {\n       if(a[i]%2==0)\n       {\n           for(int j=1;j<=n;j+=2)\n           {\n               if(vis[j]==0)\n               {\n                   sum2+=abs(a[i]-j);vis[j]=1;break;\n               }\n           }\n       }\n   }\n   \/\/cout<<\"sum1=\"<<sum1<<endl;\n   \/\/cout<<\"sum2=\"<<sum2<<endl;\n   cout<<min(sum1,sum2)<<endl;\n}","prob_desc_sample_outputs":"[\"2\", \"10\"]","lang_cluster":"C++","code_uid":"e4d6770e0fe93b76807be9f2834019ec","prob_desc_notes":"NoteIn the first example the only possible strategy is to move the piece at the position 6 to the position 5 and move the piece at the position 2 to the position 3. Notice that if you decide to place the pieces in the white cells the minimum number of moves will be 3.In the second example the possible strategy is to move  in 4 moves, then  in 3 moves,  in 2 moves and  in 1 move.","prob_desc_output_spec":"Print one integer \u2014 the minimum number of moves you have to make to place all the pieces in the cells of the same color.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a chessboard of size 1\u2009\u00d7\u2009n. It is guaranteed that n is even. The chessboard is painted like this: \"BWBW...BW\".Some cells of the board are occupied by the chess pieces. Each cell contains no more than one chess piece. It is known that the total number of pieces equals to .In one step you can move one of the pieces one cell to the left or to the right. You cannot move pieces beyond the borders of the board. You also cannot move pieces to the cells that are already occupied.Your task is to place all the pieces in the cells of the same color using the minimum number of moves (all the pieces must occupy only the black cells or only the white cells after all the moves are made).","hidden_unit_tests":"[{\"input\": \"6\\r\\n1 2 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n1 2 3 4 5\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"2\\r\\n2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100\\r\\n93 54 57 61 68 66 70 96 64 82 80 75 69 77 76 94 67 86 90 73 74 58 100 83 92 89 56 99 88 59 95 72 81 51 85 71 97 60 91 63 65 98 79 84 53 62 87 55 52 78\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"100\\r\\n41 13 29 11 25 15 6 23 28 50 48 17 3 9 44 24 5 19 34 22 33 32 20 16 35 37 4 10 46 2 39 40 47 49 36 42 1 30 43 21 14 7 18 45 31 8 12 26 27 38\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"96\\r\\n12 58 70 19 65 61 41 46 15 92 64 72 9 26 53 37 2 3 1 40 10 8 94 66 50 34 36 96 47 78 7 57 5 6 17 69 28 88 89 49 55 81 35 22 25 79 86 59\\r\\n\", \"output\": [\"152\"]}, {\"input\": \"10\\r\\n5 6 7 8 9\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"20\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"45\"]}, {\"input\": \"10\\r\\n6 7 8 9 10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"10\\r\\n9 8 7 6 5\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n1 5 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"12\\r\\n1 7 8 9 10 12\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n1 4 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"24\\r\\n10 21 15 3 11 4 18 24 16 22 14 9\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"20\\r\\n3 4 6 7 8 10 11 13 14 17\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10\\r\\n10 9 8 1 5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100\\r\\n84 10 26 79 58 93 67 85 7 2 99 4 47 45 75 22 32 82 65 53 63 49 42 52 12 69 86 46 25 76 40 15 13 78 8 81 62 28 60 21 27 80 98 56 3 36 54 16 50 43\\r\\n\", \"output\": [\"104\"]}, {\"input\": \"10\\r\\n1 7 8 9 10\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"10\\r\\n1 4 6 8 10\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"80\\r\\n41 70 18 53 32 79 51 49 21 27 47 65 50 15 62 60 5 40 14 25 64 9 19 58 38 76 66 52 17 34 13 2 80 43 3 42 33 36 6 72\\r\\n\", \"output\": [\"47\"]}, {\"input\": \"50\\r\\n27 42 41 4 10 45 44 26 49 50 17 28 2 36 18 39 23 12 21 24 19 29 22 40 37\\r\\n\", \"output\": [\"59\"]}, {\"input\": \"10\\r\\n2 3 4 5 6\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6\\r\\n3 5 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100\\r\\n9 63 62 88 3 67 54 33 79 51 71 80 37 46 43 57 69 17 34 6 18 40 59 83 76 86 8 55 90 89 45 42 28 98 30 38 77 91 73 58 23 61 41 65 64 93 14 44 16 24\\r\\n\", \"output\": [\"160\"]}, {\"input\": \"10\\r\\n1 6 7 8 9\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"6\\r\\n3 4 5\\r\\n\", \"output\": [\"2\"]}]","length":63,"num_hidden_unit_tests":27}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"####\\n.#..\\n####\\n....\", \"####\\n....\\n####\\n....\"]","prob_desc_input_spec":"Four lines contain four characters each: the j-th character of the i-th line equals \".\" if the cell in the i-th row and the j-th column of the square is painted white, and \"#\", if the cell is black.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"01b145e798bbdf0ca2ecc383676d79f3","prob_desc_created_at":"1364025600","source_code":"#include <iostream>\nusing namespace std;\nint main()\n{\n    int i=0, j=0, row, column;\n    bool success = false;\n    char square [4][4];\n    for (row = 0; row < 4; row++)\n        for (column = 0; column < 4; column++)\n            cin >> square[row][column];\n    for (row = 1; row < 4; row++)\n    {\n        for (column = 1; column < 4; column++)\n        {\n            if (square[row][column] == '#') i++; else j++;\n            if (square[row-1][column-1] == '#') i++; else j++;\n            if (square[row-1][column] == '#') i++; else j++;\n            if (square[row][column-1] == '#') i++; else j++;\n            if ((i>=3) || (j>=3)) \n            {\n                success=true;\n                break;\n            }\n            else\n            {\n                i=0;\n                j=0;\n            }\n        }\n        if (success) break;\n    }\n    if (success == true) cout << \"YES\";\n    else cout << \"NO\";\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"C++","code_uid":"958f7b7fb9d324325e61aa8f7326cd08","prob_desc_notes":"NoteIn the first test sample it is enough to repaint the first cell in the second row. After such repainting the required 2\u2009\u00d7\u20092 square is on the intersection of the 1-st and 2-nd row with the 1-st and 2-nd column.","prob_desc_output_spec":"Print \"YES\" (without the quotes), if the test can be passed and \"NO\" (without the quotes) otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"In the city of Ultima Thule job applicants are often offered an IQ test. The test is as follows: the person gets a piece of squared paper with a 4\u2009\u00d7\u20094 square painted on it. Some of the square's cells are painted black and others are painted white. Your task is to repaint at most one cell the other color so that the picture has a 2\u2009\u00d7\u20092 square, completely consisting of cells of the same color. If the initial picture already has such a square, the person should just say so and the test will be completed. Your task is to write a program that determines whether it is possible to pass the test. You cannot pass the test if either repainting any cell or no action doesn't result in a 2\u2009\u00d7\u20092 square, consisting of cells of the same color.","hidden_unit_tests":"[{\"input\": \"####\\r\\n.#..\\r\\n####\\r\\n....\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"####\\r\\n....\\r\\n####\\r\\n....\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"....\\r\\n....\\r\\n....\\r\\n....\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"###.\\r\\n...#\\r\\n###.\\r\\n...#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".##.\\r\\n#..#\\r\\n.##.\\r\\n#..#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".#.#\\r\\n#.#.\\r\\n.#.#\\r\\n#.#.\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"##..\\r\\n..##\\r\\n##..\\r\\n..##\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"#.#.\\r\\n#.#.\\r\\n.#.#\\r\\n.#.#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".#.#\\r\\n#.#.\\r\\n#.#.\\r\\n#.#.\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".#.#\\r\\n#.#.\\r\\n#.#.\\r\\n.#.#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"#.#.\\r\\n#.#.\\r\\n#.#.\\r\\n#.#.\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \".#.#\\r\\n.#.#\\r\\n.#.#\\r\\n.#.#\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"#..#\\r\\n.##.\\r\\n####\\r\\n####\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"#.#.\\r\\n.###\\r\\n#.#.\\r\\n.###\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"#..#\\r\\n.##.\\r\\n.##.\\r\\n#..#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".##.\\r\\n.#..\\r\\n##.#\\r\\n#..#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".##.\\r\\n##..\\r\\n#..#\\r\\n..##\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"##..\\r\\n##..\\r\\n..##\\r\\n..##\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".#..\\r\\n###.\\r\\n.#.#\\r\\n..#.\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"####\\r\\n#...\\r\\n#.#.\\r\\n#...\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"###.\\r\\n###.\\r\\n...#\\r\\n...#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"####\\r\\n#..#\\r\\n.##.\\r\\n....\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"#.##\\r\\n##.#\\r\\n#.##\\r\\n##.#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".#.#\\r\\n#.#.\\r\\n.#.#\\r\\n#.##\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"##..\\r\\n..##\\r\\n##..\\r\\n...#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".#..\\r\\n..##\\r\\n##..\\r\\n..##\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"##..\\r\\n...#\\r\\n##..\\r\\n...#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \".#..\\r\\n..#.\\r\\n.#..\\r\\n..#.\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"....\\r\\n....\\r\\n....\\r\\n.#.#\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"....\\r\\n....\\r\\n....\\r\\n...#\\r\\n\", \"output\": [\"YES\"]}]","length":35,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\\n4 1 7 8 3 8\\n1\"]","prob_desc_input_spec":"The first line of the input contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100), where n \u2014 the number of students shouted \"Fly, freebie, fly!\" The second line contains n positive integers ti (1\u2009\u2264\u2009ti\u2009\u2264\u20091000). The last line contains integer T (1\u2009\u2264\u2009T\u2009\u2264\u20091000) \u2014 the time interval during which the freebie was near the dormitory.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"086d07bd6f9031df09bd6a6e8fe8f25c","prob_desc_created_at":"1389906900","source_code":"#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n  int n; cin >> n;\n  vector<int> ts(n);\n  for (int i = 0; i < n; i++) {\n    cin >> ts[i];\n  }\n  int T; cin >> T;\n\n  sort(ts.begin(), ts.end());\n  int count = 1;\n  for (int i = 0; i < n; i++) {\n    for (int j = i+1; j < n; j++) {\n      if (ts[j] - ts[i] > T) {\n\tbreak;\n      }\n      count = max(count, j-i+1);\n    }\n  }\n  cout << count << endl;\n  return 0;\n}\n","prob_desc_sample_outputs":"[\"3\"]","lang_cluster":"C++","code_uid":"e23f80252e1adfb20d76424644008cd1","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the largest number of people who will pass exam tomorrow because of the freebie visit.","prob_desc_output_to":"standard output","prob_desc_description":"Everyone loves a freebie. Especially students.It is well-known that if in the night before exam a student opens window, opens the student's record-book and shouts loudly three times \"Fly, freebie, fly!\" \u2014 then flown freebie helps him to pass the upcoming exam.In the night before the exam on mathematical analysis n students living in dormitory shouted treasured words. The i-th student made a sacrament at the time ti, where ti is the number of seconds elapsed since the beginning of the night.It is known that the freebie is a capricious and willful lady. That night the freebie was near dormitory only for T seconds. Therefore, if for two students their sacrament times differ for more than T, then the freebie didn't visit at least one of them.Since all students are optimists, they really want to know what is the maximal number of students visited by the freebie can be.","hidden_unit_tests":"[{\"input\": \"6\\r\\n4 1 7 8 3 8\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4\\r\\n4 2 1 5\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10\\r\\n4 7 1 3 8 5 2 1 8 4\\r\\n3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"8\\r\\n39 49 37 28 40 17 50 2\\r\\n10\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2\\r\\n1 1\\r\\n1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 1\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 1\\r\\n1000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 2\\r\\n2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n450 826\\r\\n1000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n3 1 1\\r\\n1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n3 1 2\\r\\n2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n3 4 3\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n3 4 3\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n63 69 36 40 74 31 86 42 81 95 60 55 98 98 2 16 84 37 61 47 81 91 85 62 85 32 79 74 65 48 39 60 97 90 59 76 98 73 58 5 16 54 59 42 9 27 95 24 9 6 42 49 64 61 22 27 43 60 39 87 99 57 5 62 48 67 81 36 27 87 41 88 5 33 43 81 82 65 46 52 43 68 85 75 81 99 30 56 67 55 92 4 3 3 66 32 30 45 22 88\\r\\n5\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"100\\r\\n97 29 39 42 68 100 44 54 6 70 17 100 52 85 67 1 43 49 1 47 98 35 5 38 37 73 84 20 13 15 78 65 29 92 20 40 38 11 12 100 24 94 29 92 83 47 25 63 23 85 85 93 61 60 35 40 96 50 19 15 28 19 98 59 42 14 54 65 2 53 38 9 15 69 43 63 63 8 55 12 81 57 69 21 57 11 99 45 23 31 59 2 16 61 43 36 12 39 42 13\\r\\n50\\r\\n\", \"output\": [\"62\"]}, {\"input\": \"100\\r\\n31 1 56 82 96 98 25 41 74 73 8 66 95 50 89 77 98 12 69 45 6 10 48 59 1 77 15 77 9 52 66 8 6 71 39 3 58 73 66 45 8 22 67 83 58 6 96 79 46 43 44 90 13 67 56 32 83 96 93 22 49 10 100 79 99 41 13 71 42 96 89 10 84 95 89 7 18 49 16 54 61 35 25 71 26 68 22 40 68 19 30 51 18 20 12 61 11 23 86 72\\r\\n1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100\\r\\n30 74 20 6 3 63 48 45 36 26 33 24 60 71 45 5 19 37 74 100 98 82 67 76 37 46 68 48 56 29 33 19 15 84 76 92 50 53 42 19 5 91 23 38 93 50 39 45 89 17 57 14 86 81 31 6 16 5 80 6 86 49 18 75 30 30 85 94 38 33 50 76 72 32 73 96 28 3 18 20 96 84 89 48 71 64 6 59 87 31 94 24 9 64 15 86 66 11 32 40\\r\\n90\\r\\n\", \"output\": [\"94\"]}, {\"input\": \"100\\r\\n398 82 739 637 913 962 680 125 963 931 311 680 20 530 795 126 881 666 226 323 594 416 176 6 820 317 866 723 831 432 139 706 608 218 963 550 592 544 874 927 763 468 121 424 91 956 42 442 883 66 299 654 964 730 160 615 515 255 709 278 224 223 304 292 41 450 445 556 477 327 647 518 90 470 894 837 655 495 612 113 746 610 751 486 116 933 314 348 736 58 219 429 976 773 678 642 696 522 161 422\\r\\n1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100\\r\\n760 621 622 793 66 684 411 813 474 404 304 934 319 411 99 965 722 156 681 400 481 462 571 726 696 244 124 350 403 566 564 641 381 494 703 3 348 213 343 390 27 660 46 591 990 931 477 823 890 21 936 267 282 753 599 269 387 443 622 673 473 745 646 224 911 7 155 880 332 932 51 994 144 666 789 691 323 738 192 372 191 246 903 666 929 252 132 614 11 938 298 286 309 596 210 18 143 760 759 584\\r\\n10\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"100\\r\\n923 357 749 109 685 126 961 437 859 91 985 488 644 777 950 144 479 667 1 535 475 38 843 606 672 333 798 42 595 854 410 914 934 586 329 595 861 321 603 924 434 636 475 395 619 449 336 790 279 931 605 898 276 47 537 935 508 576 168 465 115 884 960 593 883 581 468 426 848 289 525 309 589 106 924 238 829 975 897 373 650 41 952 621 817 46 366 488 924 561 960 449 311 32 517 737 20 765 799 3\\r\\n100\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"100\\r\\n98 63 672 100 254 218 623 415 426 986 920 915 736 795 407 541 382 213 935 743 961 59 660 512 134 935 248 378 739 356 543 714 28 667 602 596 759 791 103 564 225 520 159 542 966 332 983 655 517 273 95 242 593 940 286 236 41 318 941 727 384 225 319 627 982 359 232 769 854 172 643 598 215 231 305 30 347 469 929 919 90 294 739 641 368 270 932 452 234 741 309 234 357 392 707 873 808 398 417 483\\r\\n1000\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n2 1 1 1 2 2 2 2 2 2 1 1 1 1 2 2 1 1 1 2 2 1 1 1 1 2 1 2 1 2 1 2 1 2 2 2 1 1 2 1 2 2 1 1 2 2 2 2 2 1 1 2 1 1 1 2 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 1 2 2 1 2 2 1 1 1 2 2 2 1 1 2 2 1 2 2 2 1 2 2 1 2 2\\r\\n1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"100\\r\\n3 3 1 2 3 3 1 3 3 2 2 2 2 1 2 3 2 1 2 2 2 2 3 2 1 3 3 3 2 1 3 1 2 1 1 2 2 3 2 2 3 1 1 3 1 2 1 3 3 1 1 3 1 3 2 3 3 2 2 2 2 1 1 1 2 1 1 2 1 1 1 1 1 3 2 2 1 3 1 1 3 1 2 2 1 3 1 1 1 1 2 2 2 3 2 2 3 1 1 3\\r\\n1\\r\\n\", \"output\": [\"72\"]}, {\"input\": \"100\\r\\n2 1 3 4 1 1 4 1 3 2 1 4 4 4 4 4 3 2 1 1 2 2 1 3 3 1 1 1 2 3 4 3 1 1 1 4 2 2 2 2 4 1 2 4 2 2 4 3 3 4 1 2 4 1 3 4 1 2 1 2 1 3 3 2 1 1 4 2 1 3 3 2 3 4 1 2 2 4 2 1 4 3 4 3 1 4 3 1 2 3 3 3 2 4 1 1 4 1 2 3\\r\\n1\\r\\n\", \"output\": [\"55\"]}, {\"input\": \"100\\r\\n5 1 3 1 2 3 2 5 5 2 5 1 1 4 1 1 3 5 3 3 3 3 4 4 3 5 4 1 1 3 1 4 2 5 2 5 4 2 3 5 1 3 5 5 5 2 2 5 1 4 1 5 1 5 1 3 3 2 2 4 3 2 1 4 2 5 4 1 2 1 4 3 3 5 4 3 5 5 1 2 4 1 4 2 1 1 2 5 3 3 4 1 3 3 3 5 4 1 1 1\\r\\n1\\r\\n\", \"output\": [\"41\"]}, {\"input\": \"100\\r\\n1 7 8 10 9 4 2 1 6 5 10 6 3 1 10 1 8 4 3 1 7 4 3 7 4 9 1 3 3 5 10 3 7 10 10 10 3 6 2 8 1 3 3 6 2 8 3 7 8 3 4 1 6 4 4 2 10 6 2 10 10 1 7 8 8 1 9 8 7 8 5 2 5 9 2 5 7 10 3 9 8 3 9 4 3 8 6 8 2 8 9 6 7 10 7 9 6 4 4 8\\r\\n1\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"1\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n1\\r\\n1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1\\r\\n849\\r\\n1\\r\\n\", \"output\": [\"1\"]}]","length":27,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"5 2\", \"7 4\"]","prob_desc_input_spec":"The single line contains two space-separated integers n and k (1\u2009\u2264\u2009n\u2009\u2264\u20091000,\u20091\u2009\u2264\u2009k\u2009\u2264\u2009min(8,\u2009n)) \u2014 the number of the houses and the number k from the statement.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"cc838bc14408f14f984a349fea9e9694","prob_desc_created_at":"1364916600","source_code":"#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <cstdlib>\n#include <map>\n#include <set>\n#include <string>\n#include <vector>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst long long MAXN = 2000;\nconst long long mod = 1000000007;\nlong long C[MAXN][MAXN], nn[MAXN], f[MAXN];\nlong long a[MAXN];\nlong long n, k;\nlong long res = 0, s = 0;\n\nlong long next(long long a[], long long l, long long r, long long up)\n{\n\ta[r + 1] = 0;\n\ta[l]++;\n\tfor(long long i = l; i <= r; i++)\n\t\tif (a[i] > up)\n\t\t{\n\t\t\ta[i] = 1;\n\t\t\ta[i + 1]++;\n\t\t}\n\tif (a[r + 1])\n\t\treturn 0;\n\treturn 1;\n}\n\nlong long pow(long long a, long long b)\n{\n\tlong long res = 1;\n\tfor(long long i = 1; i <= b; i++)\n\t\tres = res * a % mod;\n\treturn res;\n}\n\nint main()\n{\n\tcin >> n >> k;\n\tfor(long long i = 0; i <= n; i++)\n\t\tC[i][0] = 1;\n\tfor(long long i = 1; i <= n; i++)\n\t\tfor(long long j = 1; j <= n; j++)\n\t\t\tC[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod;\n\tnn[0] = 1;\n\t\/\/for(long long i = 1; i <= n; i++, prlong longf(\"\\n\"))\n\t\/\/\tfor(long long j = 1; j <= n; j++)\n\t\/\/\t\tprlong longf(\"%I64d \", C[i][j]);\n\tfor(long long i = 1; i <= n; i++)\n\t\tnn[i] = nn[i - 1] * i % mod;\n\tres = pow(n - k, n - k);\n\t\n\t\/\/prlong longf(\"%I64d\\n\", res);\n\tfor(long long i = 1; i <= k; i++)\n\t{\n\t\tlong long tmp = C[k - 1][i - 1] * nn[i - 1] % mod;\n\t\tlong long left = k - i;\n\t\tfor(long long j = i + 1; j <= k; j++)\n\t\t\ta[j] = 1;\n\t\tlong long tmp2 = 0;\n\t\twhile(1)\n\t\t{\n\t\t\tlong long flag = 1;\n\t\t\tfor(long long j = i + 1; j <= k; j++)\n\t\t\t{\n\t\t\t\tlong long x = j, ok = 0;\n\t\t\t\tfor(long long l = 1; l <= k; l++)\n\t\t\t\t{\n\t\t\t\t\tx = a[x];\n\t\t\t\t\tif (x <= i)\n\t\t\t\t\t\tok = 1;\n\t\t\t\t}\n\t\t\t\tif (!ok)\n\t\t\t\t{\n\t\t\t\t\tflag = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttmp2 += flag;\n\t\t\tif (!next(a, i + 1, k, k))\n\t\t\t\tbreak;\n\t\t}\n\t\ts += tmp2 * tmp % mod;\n\t\ts %= mod;\n\t\t\t\n\t}\n\tcout << res * s % mod << endl;\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"54\", \"1728\"]","lang_cluster":"C++","code_uid":"de245943a6de74fbf212a0e474d3a999","prob_desc_notes":null,"prob_desc_output_spec":"In a single line print a single integer \u2014 the answer to the problem modulo 1000000007 (109\u2009+\u20097).","prob_desc_output_to":"standard output","prob_desc_description":"Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer pi (1\u2009\u2264\u2009pi\u2009\u2264\u2009n).Little penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house px), then he goes to the house whose number is written on the plaque of house px (that is, to house ppx), and so on.We know that:  When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1.  When the penguin starts walking from any house indexed from k\u2009+\u20091 to n, inclusive, he definitely cannot walk to house number 1.  When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. You need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (109\u2009+\u20097).","hidden_unit_tests":"[{\"input\": \"5 2\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"7 4\\r\\n\", \"output\": [\"1728\"]}, {\"input\": \"8 5\\r\\n\", \"output\": [\"16875\"]}, {\"input\": \"8 1\\r\\n\", \"output\": [\"823543\"]}, {\"input\": \"10 7\\r\\n\", \"output\": [\"3176523\"]}, {\"input\": \"12 8\\r\\n\", \"output\": [\"536870912\"]}, {\"input\": \"50 2\\r\\n\", \"output\": [\"628702797\"]}, {\"input\": \"100 8\\r\\n\", \"output\": [\"331030906\"]}, {\"input\": \"1000 8\\r\\n\", \"output\": [\"339760446\"]}, {\"input\": \"999 7\\r\\n\", \"output\": [\"490075342\"]}, {\"input\": \"685 7\\r\\n\", \"output\": [\"840866481\"]}, {\"input\": \"975 8\\r\\n\", \"output\": [\"531455228\"]}, {\"input\": \"475 5\\r\\n\", \"output\": [\"449471303\"]}, {\"input\": \"227 6\\r\\n\", \"output\": [\"407444135\"]}, {\"input\": \"876 8\\r\\n\", \"output\": [\"703293724\"]}, {\"input\": \"1000 1\\r\\n\", \"output\": [\"760074701\"]}, {\"input\": \"1000 2\\r\\n\", \"output\": [\"675678679\"]}, {\"input\": \"1000 3\\r\\n\", \"output\": [\"330155123\"]}, {\"input\": \"1000 4\\r\\n\", \"output\": [\"660270610\"]}, {\"input\": \"1000 5\\r\\n\", \"output\": [\"583047503\"]}, {\"input\": \"1000 6\\r\\n\", \"output\": [\"834332109\"]}, {\"input\": \"657 3\\r\\n\", \"output\": [\"771999480\"]}, {\"input\": \"137 5\\r\\n\", \"output\": [\"160909830\"]}, {\"input\": \"8 8\\r\\n\", \"output\": [\"2097152\"]}, {\"input\": \"9 8\\r\\n\", \"output\": [\"2097152\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"473 4\\r\\n\", \"output\": [\"145141007\"]}]","length":96,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2100.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"3 2 1\", \"4 2 2\", \"3 2 2\"]","prob_desc_input_spec":"The single line of the input contains integers n, w and b (3\u2009\u2264\u2009n\u2009\u2264\u20094000, 2\u2009\u2264\u2009w\u2009\u2264\u20094000, 1\u2009\u2264\u2009b\u2009\u2264\u20094000) \u2014 the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w\u2009+\u2009b\u2009\u2265\u2009n.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"63e93a161bbff623323e66c98d5e20ac","prob_desc_created_at":"1368302400","source_code":"#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#define N 4010\n#define mo 1000000009\n#define int64 long long\n#define For(i,x,y) for (i=x;i<=y;i++)\nusing namespace std;\nint i,j,k,n,m,w,b;\nint64 f1[N],f2[N],an;\ninline int64 C(int n,int m) {\n    if (m>n) return 0;\n    if (!m) return 1;\n    return f1[n]*f2[m]%mo*f2[n-m]%mo;\n}\nint main() {\n    f1[0]=1;\n    For(i,1,N-1) f1[i]=f1[i-1]*i%mo;\n    f2[0]=f2[1]=1;\n    For(i,2,N-1) f2[i]=(-f2[mo%i]*(mo\/i)%mo+mo)%mo;\n    For(i,2,N-1) f2[i]=f2[i]*f2[i-1]%mo;\n    scanf(\"%d%d%d\",&n,&w,&b);\n    For(i,1,n-2) an=(an+f1[w]*f1[b]%mo*C(b-1,i-1)%mo*C(w-1,n-i-1)%mo*(n-i-1))%mo;\n    printf(\"%I64d\",an);  return 0;\n}\n","prob_desc_sample_outputs":"[\"2\", \"4\", \"4\"]","lang_cluster":"C++","code_uid":"ca9cbd0456e44d7f3bd1397b54f0f3e3","prob_desc_notes":"NoteWe'll represent the good events by numbers starting from 1 and the not-so-good events \u2014 by letters starting from 'a'. Vertical lines separate days.In the first sample the possible ways are: \"1|a|2\" and \"2|a|1\". In the second sample the possible ways are: \"1|a|b|2\", \"2|a|b|1\", \"1|b|a|2\" and \"2|b|a|1\". In the third sample the possible ways are: \"1|ab|2\", \"2|ab|1\", \"1|ba|2\" and \"2|ba|1\".","prob_desc_output_spec":"Print the required number of ways modulo 1000000009 (109\u2009+\u20099).","prob_desc_output_to":"standard output","prob_desc_description":"Polycarpus is sure that his life fits the description: \"first there is a white stripe, then a black one, then a white one again\". So, Polycarpus is sure that this rule is going to fulfill during the next n days. Polycarpus knows that he is in for w good events and b not-so-good events. At least one event is going to take place during each day. As each day is unequivocally characterizes as a part of a white or a black stripe, then each day is going to have events of the same type only (ether good or not-so-good).What is the number of distinct ways this scenario can develop over the next n days if Polycarpus is in for a white stripe (a stripe that has good events only, the stripe's length is at least 1 day), the a black stripe (a stripe that has not-so-good events only, the stripe's length is at least 1 day) and a white stripe again (a stripe that has good events only, the stripe's length is at least 1 day). Each of n days will belong to one of the three stripes only.Note that even the events of the same type are distinct from each other. Even if some events occur on the same day, they go in some order (there are no simultaneous events).Write a code that prints the number of possible configurations to sort the events into days. See the samples for clarifications on which scenarios should be considered distinct. Print the answer modulo 1000000009 (109\u2009+\u20099).","hidden_unit_tests":"[{\"input\": \"3 2 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 2 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3 2 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"3 3 1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"3 3 3\\r\\n\", \"output\": [\"72\"]}, {\"input\": \"4 2 3\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"4 3 2\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"10 10 10\\r\\n\", \"output\": [\"318389383\"]}, {\"input\": \"10 7 5\\r\\n\", \"output\": [\"130636800\"]}, {\"input\": \"10 4 9\\r\\n\", \"output\": [\"135283173\"]}, {\"input\": \"100 200 300\\r\\n\", \"output\": [\"316471646\"]}, {\"input\": \"200 100 300\\r\\n\", \"output\": [\"949581532\"]}, {\"input\": \"239 300 231\\r\\n\", \"output\": [\"774612666\"]}, {\"input\": \"300 300 300\\r\\n\", \"output\": [\"375912430\"]}, {\"input\": \"300 2 300\\r\\n\", \"output\": [\"775907030\"]}, {\"input\": \"300 300 1\\r\\n\", \"output\": [\"775907030\"]}, {\"input\": \"3 300 300\\r\\n\", \"output\": [\"496527918\"]}, {\"input\": \"3 2 300\\r\\n\", \"output\": [\"196174631\"]}, {\"input\": \"3 300 1\\r\\n\", \"output\": [\"828107078\"]}, {\"input\": \"4000 1000 3000\\r\\n\", \"output\": [\"876839920\"]}, {\"input\": \"4000 2000 2000\\r\\n\", \"output\": [\"310481606\"]}, {\"input\": \"4000 100 3900\\r\\n\", \"output\": [\"221262673\"]}, {\"input\": \"4000 2 3998\\r\\n\", \"output\": [\"686088712\"]}, {\"input\": \"3 2 4000\\r\\n\", \"output\": [\"938379934\"]}, {\"input\": \"3 4000 4000\\r\\n\", \"output\": [\"680114446\"]}, {\"input\": \"4000 4000 1\\r\\n\", \"output\": [\"63263244\"]}, {\"input\": \"4000 3998 2\\r\\n\", \"output\": [\"296557186\"]}, {\"input\": \"4000 4000 4000\\r\\n\", \"output\": [\"997463324\"]}, {\"input\": \"4000 4000 100\\r\\n\", \"output\": [\"994443885\"]}, {\"input\": \"4000 100 4000\\r\\n\", \"output\": [\"908339579\"]}]","length":26,"num_hidden_unit_tests":30}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\\n1 2\\n2 4\\n3 4\", \"4\\n100 42\\n42 100\\n5 42\\n100 5\", \"2\\n1 2\\n1 2\"]","prob_desc_input_spec":"The first line contains an integer n (2\u2009\u2264\u2009n\u2009\u2264\u200930). Each of the following n lines contains a pair of distinct space-separated integers hi, ai (1\u2009\u2264\u2009hi,\u2009ai\u2009\u2264\u2009100) \u2014 the colors of the i-th team's home and guest uniforms, respectively.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"745f81dcb4f23254bf6602f9f389771b","prob_desc_created_at":"1359387000","source_code":"#include \"algorithm\"\n#include \"iostream\"\n#include \"string\"\nusing namespace std;\nint main()\n{\n    int n;\n    cin >> n;\n    int home, guest, answer = 0;\n    int data[128][2] = {0};\n    for (int i = 0; i < n; ++i)\n    {\n        cin >> home >> guest;\n        ++data[ home][0];\n        ++data[guest][1];\n    }\n    for (int i = 1; i < 101; ++i)\n    {\n        answer +=  data[i][0] * data[i][1];\n    }\n    cout << answer << endl;\n    return 0;\n}\n\t\t   \t\t \t  \t\t\t\t\t\t  \t \t\t \t\t    \t","prob_desc_sample_outputs":"[\"1\", \"5\", \"0\"]","lang_cluster":"C++","code_uid":"ca3a3dfb52b4666799d340ea1a94948a","prob_desc_notes":"NoteIn the first test case the championship consists of 6 games. The only game with the event in question is the game between teams 2 and 1 on the stadium of team 2.In the second test sample the host team will have to wear guest uniform in the games between teams: 1 and 2, 2 and 1, 2 and 3, 3 and 4, 4 and 2 (the host team is written first).","prob_desc_output_spec":"In a single line print the number of games where the host team is going to play in the guest uniform.","prob_desc_output_to":"standard output","prob_desc_description":"Manao works on a sports TV. He's spent much time watching the football games of some country. After a while he began to notice different patterns. For example, each team has two sets of uniforms: home uniform and guest uniform. When a team plays a game at home, the players put on the home uniform. When a team plays as a guest on somebody else's stadium, the players put on the guest uniform. The only exception to that rule is: when the home uniform color of the host team matches the guests' uniform, the host team puts on its guest uniform as well. For each team the color of the home and guest uniform is different.There are n teams taking part in the national championship. The championship consists of n\u00b7(n\u2009-\u20091) games: each team invites each other team to its stadium. At this point Manao wondered: how many times during the championship is a host team going to put on the guest uniform? Note that the order of the games does not affect this number.You know the colors of the home and guest uniform for each team. For simplicity, the colors are numbered by integers in such a way that no two distinct colors have the same number. Help Manao find the answer to his question.","hidden_unit_tests":"[{\"input\": \"3\\r\\n1 2\\r\\n2 4\\r\\n3 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4\\r\\n100 42\\r\\n42 100\\r\\n5 42\\r\\n100 5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"2\\r\\n1 2\\r\\n1 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"7\\r\\n4 7\\r\\n52 55\\r\\n16 4\\r\\n55 4\\r\\n20 99\\r\\n3 4\\r\\n7 52\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"10\\r\\n68 42\\r\\n1 35\\r\\n25 70\\r\\n59 79\\r\\n65 63\\r\\n46 6\\r\\n28 82\\r\\n92 62\\r\\n43 96\\r\\n37 28\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"30\\r\\n10 39\\r\\n89 1\\r\\n78 58\\r\\n75 99\\r\\n36 13\\r\\n77 50\\r\\n6 97\\r\\n79 28\\r\\n27 52\\r\\n56 5\\r\\n93 96\\r\\n40 21\\r\\n33 74\\r\\n26 37\\r\\n53 59\\r\\n98 56\\r\\n61 65\\r\\n42 57\\r\\n9 7\\r\\n25 63\\r\\n74 34\\r\\n96 84\\r\\n95 47\\r\\n12 23\\r\\n34 21\\r\\n71 6\\r\\n27 13\\r\\n15 47\\r\\n64 14\\r\\n12 77\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"30\\r\\n46 100\\r\\n87 53\\r\\n34 84\\r\\n44 66\\r\\n23 20\\r\\n50 34\\r\\n90 66\\r\\n17 39\\r\\n13 22\\r\\n94 33\\r\\n92 46\\r\\n63 78\\r\\n26 48\\r\\n44 61\\r\\n3 19\\r\\n41 84\\r\\n62 31\\r\\n65 89\\r\\n23 28\\r\\n58 57\\r\\n19 85\\r\\n26 60\\r\\n75 66\\r\\n69 67\\r\\n76 15\\r\\n64 15\\r\\n36 72\\r\\n90 89\\r\\n42 69\\r\\n45 35\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2\\r\\n46 6\\r\\n6 46\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"29\\r\\n8 18\\r\\n33 75\\r\\n69 22\\r\\n97 95\\r\\n1 97\\r\\n78 10\\r\\n88 18\\r\\n13 3\\r\\n19 64\\r\\n98 12\\r\\n79 92\\r\\n41 72\\r\\n69 15\\r\\n98 31\\r\\n57 74\\r\\n15 56\\r\\n36 37\\r\\n15 66\\r\\n63 100\\r\\n16 42\\r\\n47 56\\r\\n6 4\\r\\n73 15\\r\\n30 24\\r\\n27 71\\r\\n12 19\\r\\n88 69\\r\\n85 6\\r\\n50 11\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"23\\r\\n43 78\\r\\n31 28\\r\\n58 80\\r\\n66 63\\r\\n20 4\\r\\n51 95\\r\\n40 20\\r\\n50 14\\r\\n5 34\\r\\n36 39\\r\\n77 42\\r\\n64 97\\r\\n62 89\\r\\n16 56\\r\\n8 34\\r\\n58 16\\r\\n37 35\\r\\n37 66\\r\\n8 54\\r\\n50 36\\r\\n24 8\\r\\n68 48\\r\\n85 33\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"13\\r\\n76 58\\r\\n32 85\\r\\n99 79\\r\\n23 58\\r\\n96 59\\r\\n72 35\\r\\n53 43\\r\\n96 55\\r\\n41 78\\r\\n75 10\\r\\n28 11\\r\\n72 7\\r\\n52 73\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"18\\r\\n6 90\\r\\n70 79\\r\\n26 52\\r\\n67 81\\r\\n29 95\\r\\n41 32\\r\\n94 88\\r\\n18 58\\r\\n59 65\\r\\n51 56\\r\\n64 68\\r\\n34 2\\r\\n6 98\\r\\n95 82\\r\\n34 2\\r\\n40 98\\r\\n83 78\\r\\n29 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"18\\r\\n6 90\\r\\n100 79\\r\\n26 100\\r\\n67 100\\r\\n29 100\\r\\n100 32\\r\\n94 88\\r\\n18 58\\r\\n59 65\\r\\n51 56\\r\\n64 68\\r\\n34 2\\r\\n6 98\\r\\n95 82\\r\\n34 2\\r\\n40 98\\r\\n83 78\\r\\n29 100\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"30\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n\", \"output\": [\"450\"]}, {\"input\": \"30\\r\\n100 99\\r\\n58 59\\r\\n56 57\\r\\n54 55\\r\\n52 53\\r\\n50 51\\r\\n48 49\\r\\n46 47\\r\\n44 45\\r\\n42 43\\r\\n40 41\\r\\n38 39\\r\\n36 37\\r\\n34 35\\r\\n32 33\\r\\n30 31\\r\\n28 29\\r\\n26 27\\r\\n24 25\\r\\n22 23\\r\\n20 21\\r\\n18 19\\r\\n16 17\\r\\n14 15\\r\\n12 13\\r\\n10 11\\r\\n8 9\\r\\n6 7\\r\\n4 5\\r\\n2 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"15\\r\\n9 3\\r\\n2 6\\r\\n7 6\\r\\n5 10\\r\\n9 5\\r\\n8 1\\r\\n10 5\\r\\n2 8\\r\\n4 5\\r\\n9 8\\r\\n5 3\\r\\n3 8\\r\\n9 8\\r\\n4 10\\r\\n8 5\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"15\\r\\n2 1\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n\", \"output\": [\"108\"]}, {\"input\": \"25\\r\\n2 1\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n2 1\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n\", \"output\": [\"312\"]}, {\"input\": \"25\\r\\n91 57\\r\\n2 73\\r\\n54 57\\r\\n2 57\\r\\n23 57\\r\\n2 6\\r\\n57 54\\r\\n57 23\\r\\n91 54\\r\\n91 23\\r\\n57 23\\r\\n91 57\\r\\n54 2\\r\\n6 91\\r\\n57 54\\r\\n2 57\\r\\n57 91\\r\\n73 91\\r\\n57 23\\r\\n91 57\\r\\n2 73\\r\\n91 2\\r\\n23 6\\r\\n2 73\\r\\n23 6\\r\\n\", \"output\": [\"96\"]}, {\"input\": \"28\\r\\n31 66\\r\\n31 91\\r\\n91 31\\r\\n97 66\\r\\n31 66\\r\\n31 66\\r\\n66 91\\r\\n91 31\\r\\n97 31\\r\\n91 97\\r\\n97 31\\r\\n66 31\\r\\n66 97\\r\\n91 31\\r\\n31 66\\r\\n31 66\\r\\n66 31\\r\\n31 97\\r\\n66 97\\r\\n97 31\\r\\n31 91\\r\\n66 91\\r\\n91 66\\r\\n31 66\\r\\n91 66\\r\\n66 31\\r\\n66 31\\r\\n91 97\\r\\n\", \"output\": [\"210\"]}, {\"input\": \"29\\r\\n78 27\\r\\n50 68\\r\\n24 26\\r\\n68 43\\r\\n38 78\\r\\n26 38\\r\\n78 28\\r\\n28 26\\r\\n27 24\\r\\n23 38\\r\\n24 26\\r\\n24 43\\r\\n61 50\\r\\n38 78\\r\\n27 23\\r\\n61 26\\r\\n27 28\\r\\n43 23\\r\\n28 78\\r\\n43 27\\r\\n43 78\\r\\n27 61\\r\\n28 38\\r\\n61 78\\r\\n50 26\\r\\n43 27\\r\\n26 78\\r\\n28 50\\r\\n43 78\\r\\n\", \"output\": [\"73\"]}, {\"input\": \"29\\r\\n80 27\\r\\n69 80\\r\\n27 80\\r\\n69 80\\r\\n80 27\\r\\n80 27\\r\\n80 27\\r\\n80 69\\r\\n27 69\\r\\n80 69\\r\\n80 27\\r\\n27 69\\r\\n69 27\\r\\n80 69\\r\\n27 69\\r\\n69 80\\r\\n27 69\\r\\n80 69\\r\\n80 27\\r\\n69 27\\r\\n27 69\\r\\n27 80\\r\\n80 27\\r\\n69 80\\r\\n27 69\\r\\n80 69\\r\\n69 80\\r\\n69 80\\r\\n27 80\\r\\n\", \"output\": [\"277\"]}, {\"input\": \"30\\r\\n19 71\\r\\n7 89\\r\\n89 71\\r\\n21 7\\r\\n19 21\\r\\n7 89\\r\\n19 71\\r\\n89 8\\r\\n89 21\\r\\n19 8\\r\\n21 7\\r\\n8 89\\r\\n19 89\\r\\n7 21\\r\\n19 8\\r\\n19 7\\r\\n7 19\\r\\n8 21\\r\\n71 21\\r\\n71 89\\r\\n7 19\\r\\n7 19\\r\\n21 7\\r\\n21 19\\r\\n21 19\\r\\n71 8\\r\\n21 8\\r\\n71 19\\r\\n19 71\\r\\n8 21\\r\\n\", \"output\": [\"154\"]}, {\"input\": \"30\\r\\n44 17\\r\\n44 17\\r\\n44 17\\r\\n17 44\\r\\n44 17\\r\\n44 17\\r\\n17 44\\r\\n17 44\\r\\n17 44\\r\\n44 17\\r\\n44 17\\r\\n44 17\\r\\n44 17\\r\\n44 17\\r\\n17 44\\r\\n17 44\\r\\n17 44\\r\\n44 17\\r\\n44 17\\r\\n17 44\\r\\n44 17\\r\\n44 17\\r\\n44 17\\r\\n17 44\\r\\n17 44\\r\\n44 17\\r\\n17 44\\r\\n44 17\\r\\n44 17\\r\\n44 17\\r\\n\", \"output\": [\"418\"]}, {\"input\": \"22\\r\\n78 92\\r\\n15 92\\r\\n92 78\\r\\n78 80\\r\\n92 16\\r\\n24 80\\r\\n92 16\\r\\n16 92\\r\\n78 16\\r\\n24 78\\r\\n80 78\\r\\n92 80\\r\\n16 80\\r\\n80 78\\r\\n15 78\\r\\n92 16\\r\\n24 15\\r\\n24 80\\r\\n80 16\\r\\n16 80\\r\\n92 80\\r\\n24 80\\r\\n\", \"output\": [\"74\"]}, {\"input\": \"24\\r\\n9 83\\r\\n90 31\\r\\n83 3\\r\\n83 3\\r\\n21 31\\r\\n83 3\\r\\n32 31\\r\\n12 21\\r\\n31 21\\r\\n90 32\\r\\n32 21\\r\\n12 9\\r\\n12 31\\r\\n9 83\\r\\n83 12\\r\\n32 3\\r\\n32 83\\r\\n90 31\\r\\n9 32\\r\\n31 21\\r\\n83 90\\r\\n32 21\\r\\n21 3\\r\\n32 9\\r\\n\", \"output\": [\"59\"]}, {\"input\": \"30\\r\\n67 21\\r\\n85 39\\r\\n85 87\\r\\n21 39\\r\\n66 85\\r\\n10 95\\r\\n10 21\\r\\n87 85\\r\\n82 21\\r\\n67 21\\r\\n95 10\\r\\n21 39\\r\\n82 21\\r\\n21 66\\r\\n66 39\\r\\n95 30\\r\\n67 85\\r\\n66 82\\r\\n85 82\\r\\n21 66\\r\\n10 39\\r\\n67 10\\r\\n21 85\\r\\n10 82\\r\\n85 95\\r\\n10 85\\r\\n21 39\\r\\n85 39\\r\\n39 10\\r\\n95 67\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"4\\r\\n8 7\\r\\n8 7\\r\\n7 8\\r\\n7 8\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"6\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"12\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n\", \"output\": [\"72\"]}, {\"input\": \"4\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n\", \"output\": [\"8\"]}]","length":24,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"R\\ns;;upimrrfod;pbr\"]","prob_desc_input_spec":"First line of the input contains one letter describing direction of shifting ('L' or 'R' respectively for left or right). Second line contains a sequence of characters written by Mole. The size of this sequence will be no more than 100. Sequence contains only symbols that appear on Mole's keyboard. It doesn't contain spaces as there is no space on Mole's keyboard. It is guaranteed that even though Mole hands are moved, he is still pressing buttons on keyboard and not hitting outside it.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"df49c0c257903516767fdb8ac9c2bfd6","prob_desc_created_at":"1412609400","source_code":"#include <cstring>\n#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <memory.h>\n#include <cassert>\n\nusing namespace std;\n\nchar s[123456];\nchar dir[42];\n\nint main() {\n  string w[3];\n  w[0] = \"qwertyuiop\";\n  w[1] = \"asdfghjkl;\";\n  w[2] = \"zxcvbnm,.\/\";\n  scanf(\"%s\", dir);\n  scanf(\"%s\", s);\n  for (int i = 0; s[i]; i++) {\n    for (int j = 0; j < 3; j++) {\n      for (int k = 0; k < w[j].length(); k++) {\n        if (w[j][k] == s[i]) {\n          if (dir[0] == 'L') {\n            putchar(w[j][k + 1]);\n          } else {\n            putchar(w[j][k - 1]);\n          }\n        }\n      }\n    }\n  }\n  putchar('\\n');\n  return 0;\n}","prob_desc_sample_outputs":"[\"allyouneedislove\"]","lang_cluster":"C++","code_uid":"7691214c0122f129af4d669f4a38aa14","prob_desc_notes":null,"prob_desc_output_spec":"Print a line that contains the original message.","prob_desc_output_to":"standard output","prob_desc_description":"Our good friend Mole is trying to code a big message. He is typing on an unusual keyboard with characters arranged in following way:qwertyuiopasdfghjkl;zxcvbnm,.\/Unfortunately Mole is blind, so sometimes it is problem for him to put his hands accurately. He accidentally moved both his hands with one position to the left or to the right. That means that now he presses not a button he wants, but one neighboring button (left or right, as specified in input).We have a sequence of characters he has typed and we want to find the original message.","hidden_unit_tests":"[{\"input\": \"R\\r\\ns;;upimrrfod;pbr\\r\\n\", \"output\": [\"allyouneedislove\"]}, {\"input\": \"R\\r\\nwertyuiop;lkjhgfdsxcvbnm,.\\r\\n\", \"output\": [\"qwertyuiolkjhgfdsazxcvbnm,\"]}, {\"input\": \"L\\r\\nzxcvbnm,kjhgfdsaqwertyuio\\r\\n\", \"output\": [\"xcvbnm,.lkjhgfdswertyuiop\"]}, {\"input\": \"R\\r\\nbubbuduppudup\\r\\n\", \"output\": [\"vyvvysyooysyo\"]}, {\"input\": \"L\\r\\ngggggggggggggggggggggggggggggggggggggggggg\\r\\n\", \"output\": [\"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\"]}, {\"input\": \"R\\r\\ngggggggggggggggggggggggggggggggggggggggggg\\r\\n\", \"output\": [\"ffffffffffffffffffffffffffffffffffffffffff\"]}, {\"input\": \"L\\r\\nggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\\r\\n\", \"output\": [\"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\"]}, {\"input\": \"R\\r\\nggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\\r\\n\", \"output\": [\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"]}, {\"input\": \"L\\r\\nxgwurenkxkiau,c,vonei.zltazmnkhqtwuogkgvgckvja,z.rhanuy.ybebmzcfwozkwvuuiolaqlgvvvewnbuinrncgjwjdsfw\\r\\n\", \"output\": [\"cheitrmlclosi.v.bpmro\/x;ysx,mljwyeiphlhbhvlbks.x\/tjsmiu\/unrn,xvgepxlebiiop;sw;hbbbremniomtmvhkekfdge\"]}, {\"input\": \"L\\r\\nuoz.vmks,wxrb,nwcvdzh.m,hwsios.lvu,ktes,,ythddhm.sh,d,c,cfj.wqam,bowofbyx,jathqayhreqvixvbmgdokofmym\\r\\n\", \"output\": [\"ipx\/b,ld.ectn.mevbfxj\/,.jedopd\/;bi.lyrd..uyjffj,\/dj.f.v.vgk\/ews,.npepgnuc.ksyjwsujtrwbocbn,hfplpg,u,\"]}, {\"input\": \"R\\r\\noedjyrvuw\/rn.v.hdwndbiposiewgsn.pnyf;\/tsdohp,hrtd\/mx,;coj.\/billd..mwbneohcikrdes\/ucjr,wspthleyp,..f,\\r\\n\", \"output\": [\"iwshtecyq.eb,c,gsqbsvuoiauwqfab,obtdl.rasigomgers.nzmlxih,.vukks,,nqvbwigxujeswa.yxhemqaorgkwtom,,dm\"]}, {\"input\": \"R\\r\\nvgj;o;ijrtfyck,dthccioltcx,crub;oceooognsuvfx\/kgo.fbsudv,yod.erdrxhbeiyltxhnrobbb;ydrgroefcr\/f;uvdjd\\r\\n\", \"output\": [\"cfhliluherdtxjmsrgxxuikrxzmxeyvlixwiiifbaycdz.jfi,dvayscmtis,wesezgvwutkrzgbeivvvltsefeiwdxe.dlycshs\"]}, {\"input\": \"L\\r\\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\\r\\n\", \"output\": [\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\"]}, {\"input\": \"L\\r\\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\r\\n\", \"output\": [\"pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp\"]}, {\"input\": \"L\\r\\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\\r\\n\", \"output\": [\"....................................................................................................\"]}, {\"input\": \"L\\r\\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\r\\n\", \"output\": [\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"]}, {\"input\": \"R\\r\\n....................................................................................................\\r\\n\", \"output\": [\",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\"]}, {\"input\": \"R\\r\\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\r\\n\", \"output\": [\"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"]}, {\"input\": \"R\\r\\nwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\r\\n\", \"output\": [\"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\"]}, {\"input\": \"R\\r\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\r\\n\", \"output\": [\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"]}, {\"input\": \"L\\r\\nq\\r\\n\", \"output\": [\"w\"]}, {\"input\": \"L\\r\\no\\r\\n\", \"output\": [\"p\"]}, {\"input\": \"L\\r\\n,\\r\\n\", \"output\": [\".\"]}, {\"input\": \"L\\r\\nz\\r\\n\", \"output\": [\"x\"]}, {\"input\": \"R\\r\\n.\\r\\n\", \"output\": [\",\"]}, {\"input\": \"R\\r\\no\\r\\n\", \"output\": [\"i\"]}, {\"input\": \"R\\r\\nw\\r\\n\", \"output\": [\"q\"]}, {\"input\": \"R\\r\\nx\\r\\n\", \"output\": [\"z\"]}, {\"input\": \"R\\r\\n,.\/\\r\\n\", \"output\": [\"m,.\"]}, {\"input\": \"R\\r\\nwertuk;;\/\\r\\n\", \"output\": [\"qweryjll.\"]}, {\"input\": \"L\\r\\n..\\r\\n\", \"output\": [\"\/\/\"]}]","length":50,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 10\\n1 5 2 1 1 1 2 5 7 2\", \"100 1\\n1\", \"2 5\\n5 4 3 2 1\", \"3 9\\n42 42 42 42 42 42 42 42 42\"]","prob_desc_input_spec":"The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 100$$$, $$$1 \\le m \\le 100$$$)\u00a0\u2014 the number of the expedition participants and the number of the daily food packages available. The second line contains sequence of integers $$$a_1, a_2, \\dots, a_m$$$ ($$$1 \\le a_i \\le 100$$$), where $$$a_i$$$ is the type of $$$i$$$-th food package.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"b7ef696a11ff96f2e9c31becc2ff50fe","prob_desc_created_at":"1532617500","source_code":"#include <bits\/stdc++.h>\nusing namespace std;\n\nvector<int> V;\nint ma[100];\nint main(){\n\tint n,m;\n\tcin >> n >> m;\n\tfor(int i = 0;i < m;++i){\n\t\tint a;\n\t\tcin >> a;\n\t\tma[a - 1]++;\n\t}\n\tint ans = 0;\n\tint ans2 = 0;\n\tfor(int i = 1;i <= m;i++){\n\t\tans = 0;\n\t\tfor(int j = 0;j < 100;++j){\n\t\t\tans = ans + ma[j] \/ i;\n\t\t}\n\t\t\/\/cout << ans;\n\t\tif(ans >= n) ans2 = i;\n\t}\n\tcout << ans2;\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"2\", \"0\", \"1\", \"3\"]","lang_cluster":"C++","code_uid":"1cf57f4fce7e992eb47a85d80fd6081e","prob_desc_notes":"NoteIn the first example, Natasha can assign type $$$1$$$ food to the first participant, the same type $$$1$$$ to the second, type $$$5$$$ to the third and type $$$2$$$ to the fourth. In this case, the expedition can last for $$$2$$$ days, since each participant can get two food packages of his food type (there will be used $$$4$$$ packages of type $$$1$$$, two packages of type $$$2$$$ and two packages of type $$$5$$$).In the second example, there are $$$100$$$ participants and only $$$1$$$ food package. In this case, the expedition can't last even $$$1$$$ day.","prob_desc_output_spec":"Print the single integer\u00a0\u2014 the number of days the expedition can last. If it is not possible to plan the expedition for even one day, print 0.","prob_desc_output_to":"standard output","prob_desc_description":"Natasha is planning an expedition to Mars for $$$n$$$ people. One of the important tasks is to provide food for each participant.The warehouse has $$$m$$$ daily food packages. Each package has some food type $$$a_i$$$.Each participant must eat exactly one food package each day. Due to extreme loads, each participant must eat the same food type throughout the expedition. Different participants may eat different (or the same) types of food.Formally, for each participant $$$j$$$ Natasha should select his food type $$$b_j$$$ and each day $$$j$$$-th participant will eat one food package of type $$$b_j$$$. The values $$$b_j$$$ for different participants may be different.What is the maximum possible number of days the expedition can last, following the requirements above?","hidden_unit_tests":"[{\"input\": \"4 10\\r\\n1 5 2 1 1 1 2 5 7 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100 1\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 5\\r\\n5 4 3 2 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 9\\r\\n42 42 42 42 42 42 42 42 42\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 1\\r\\n100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 100\\r\\n84 99 66 69 86 94 89 96 98 93 93 82 87 93 91 100 69 99 93 81 99 84 75 100 86 88 98 100 84 96 44 70 94 91 85 78 86 79 45 88 91 78 98 94 81 87 93 72 96 88 96 97 96 62 86 72 94 84 80 98 88 90 93 73 73 98 78 50 91 96 97 82 85 90 87 41 97 82 97 77 100 100 92 83 98 81 70 81 74 78 84 79 98 98 55 99 97 99 79 98\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"6 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"1 1\\r\\n59\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 50\\r\\n39 1 46 21 23 28 100 32 63 63 18 15 40 29 34 49 56 74 47 42 96 97 59 62 76 62 69 61 36 21 66 18 92 58 63 85 5 6 77 75 91 66 38 10 66 43 20 74 37 83\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 100\\r\\n83 72 21 55 49 5 61 60 87 21 89 88 3 75 49 81 36 25 50 61 96 19 36 55 48 8 97 69 50 24 23 39 26 25 41 90 69 20 19 62 38 52 60 6 66 31 9 45 36 12 69 94 22 60 91 65 35 58 13 85 33 87 83 11 95 20 20 85 13 21 57 69 17 94 78 37 59 45 60 7 64 51 60 89 91 22 6 58 95 96 51 53 89 22 28 16 27 56 1 54\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"50 1\\r\\n75\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50 50\\r\\n85 20 12 73 52 78 70 95 88 43 31 88 81 41 80 99 16 11 97 11 21 44 2 34 47 38 87 2 32 47 97 93 52 14 35 37 97 48 58 19 52 55 97 72 17 25 16 85 90 58\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 100\\r\\n2 37 74 32 99 75 73 86 67 33 62 30 15 21 51 41 73 75 67 39 90 10 56 74 72 26 38 65 75 55 46 99 34 49 92 82 11 100 15 71 75 12 22 56 47 74 20 98 59 65 14 76 1 40 89 36 43 93 83 73 75 100 50 95 27 10 72 51 25 69 15 3 57 60 84 99 31 44 12 61 69 95 51 31 28 36 57 35 31 52 44 19 79 12 27 27 7 81 68 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 1\\r\\n26\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 50\\r\\n8 82 62 11 85 57 5 32 99 92 77 2 61 86 8 88 10 28 83 4 68 79 8 64 56 98 4 88 22 54 30 60 62 79 72 38 17 28 32 16 62 26 56 44 72 33 22 84 77 45\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 100\\r\\n13 88 64 65 78 10 61 97 16 32 76 9 60 1 40 35 90 61 60 85 26 16 38 36 33 95 24 55 82 88 13 9 47 34 94 2 90 74 11 81 46 70 94 11 55 32 19 36 97 16 17 35 38 82 89 16 74 94 97 79 9 94 88 12 28 2 4 25 72 95 49 31 88 82 6 77 70 98 90 57 57 33 38 61 26 75 2 66 22 44 13 35 16 4 33 16 12 66 32 86\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"34 64\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"53 98\\r\\n1 1 2 2 2 2 2 1 2 2 2 1 1 2 2 2 1 1 2 1 1 2 2 1 1 2 1 1 1 2 1 2 1 1 1 2 2 1 2 1 1 1 2 2 1 2 1 1 2 1 2 2 1 2 2 2 2 2 2 2 2 2 1 1 2 2 1 2 1 2 1 2 1 1 2 2 2 1 1 2 1 2 1 1 1 1 2 2 2 2 2 1 1 2 2 2 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"17 8\\r\\n2 5 3 4 3 2 2 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"24 77\\r\\n8 6 10 4 6 6 4 10 9 7 7 5 5 4 6 7 10 6 3 4 6 6 4 9 4 6 2 5 3 4 4 1 4 6 6 8 1 1 6 4 6 2 5 7 7 2 4 4 10 1 10 9 2 3 8 1 10 4 3 9 3 8 3 5 6 3 4 9 5 3 4 1 1 6 1 2 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"65 74\\r\\n7 19 2 38 28 44 34 49 14 13 30 22 11 4 4 12 8 1 40 8 34 31 44 38 21 35 13 7 19 32 37 5 36 26 7 2 15 11 47 45 48 2 49 10 10 42 42 31 50 24 29 34 31 38 39 48 43 47 32 46 10 1 33 21 12 50 13 44 38 11 41 41 10 7\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"37 71\\r\\n50 93 15 80 82 23 35 90 70 73 55 23 23 6 86 63 38 70 38 52 88 34 25 75 32 19 6 98 31 38 21 8 66 8 59 71 7 80 69 23 17 70 6 40 72 5 48 59 18 1 48 91 17 41 11 27 53 95 87 31 62 94 94 60 38 99 70 50 81 86 44\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"35 4\\r\\n100 100 100 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"68 12\\r\\n100 100 100 99 99 100 100 100 99 99 99 99\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"91 33\\r\\n97 100 96 96 97 100 97 97 96 96 99 99 98 97 97 99 99 98 100 96 96 99 100 96 97 100 97 97 99 98 96 98 97\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"59 72\\r\\n99 96 96 93 94 97 93 96 100 99 93 99 96 92 92 97 93 100 92 100 91 96 99 100 97 98 93 93 96 100 97 99 100 100 91 93 96 91 93 100 95 96 92 97 91 91 99 100 91 95 95 100 92 93 98 93 95 92 95 100 91 95 99 95 92 91 100 93 98 98 96 99\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"9 35\\r\\n95 54 78 94 56 63 68 73 61 85 73 62 61 94 67 91 66 54 89 69 92 60 91 87 63 62 85 70 62 68 97 88 96 55 62\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"99 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"50\"]}]","length":26,"num_hidden_unit_tests":31}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4\\n3 2 1 2\", \"3\\n2 3 8\"]","prob_desc_input_spec":"The first line of input contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1\u2009\u2264\u2009ai\u2009\u2264\u2009100) denotes the number of cubes in the i-th column.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"ae20712265d4adf293e75d016b4b82d8","prob_desc_created_at":"1395502200","source_code":"#include<iostream>\n\nusing namespace std;\n\nint a[105];\nint n;\n\nvoid f(int m)\n{\n\tint i;\n\tint temp;\n\tif(m>=0&&m>-1)\n\t{\n\t  if(a[m]>a[m+1]&&m==n-2)\n\t  {\n\t\ttemp=a[m];\n\t\ta[m]=a[m+1];\n\t\ta[m+1]=temp;\n\t\tf(m-1);\n\t  }\n\t  if(a[m]>a[m+1]&&m<n-1)\n\t  {\n\t  \ttemp=a[m];\n\t\ta[m]=a[m+1];\n\t\ta[m+1]=temp;\n\t\tf(m+1);\n\t  }\n\t   else f(m-1);\n    }\n    else return;\n}\n\nint main()\n{\n\tcin>>n;\n\tint i;\n\tfor(i=0;i<n;i++) cin>>a[i];\n\tf(n-2);\n\tfor(i=0;i<n-1;i++) cout<<a[i]<<\" \";\n\tcout<<a[n-1]<<endl;\n}","prob_desc_sample_outputs":"[\"1 2 2 3\", \"2 3 8\"]","lang_cluster":"C++","code_uid":"c9a1199c1561627c2d0e8d0b3253c0b7","prob_desc_notes":"NoteThe first example case is shown on the figure. The top cube of the first column falls to the top of the last column; the top cube of the second column falls to the top of the third column; the middle cube of the first column falls to the top of the second column.In the second example case the gravity switch does not change the heights of the columns.","prob_desc_output_spec":"Output n integer numbers separated by spaces, where the i-th number is the amount of cubes in the i-th column after the gravity switch.","prob_desc_output_to":"standard output","prob_desc_description":"Little Chris is bored during his physics lessons (too easy), so he has built a toy box to keep himself occupied. The box is special, since it has the ability to change gravity.There are n columns of toy cubes in the box arranged in a line. The i-th column contains ai cubes. At first, the gravity in the box is pulling the cubes downwards. When Chris switches the gravity, it begins to pull all the cubes to the right side of the box. The figure shows the initial and final configurations of the cubes in the box: the cubes that have changed their position are highlighted with orange.  Given the initial configuration of the toy cubes in the box, find the amounts of cubes in each of the n columns after the gravity switch!","hidden_unit_tests":"[{\"input\": \"4\\r\\n3 2 1 2\\r\\n\", \"output\": [\"1 2 2 3\"]}, {\"input\": \"3\\r\\n2 3 8\\r\\n\", \"output\": [\"2 3 8\"]}, {\"input\": \"5\\r\\n2 1 2 1 2\\r\\n\", \"output\": [\"1 1 2 2 2\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n4 3\\r\\n\", \"output\": [\"3 4\"]}, {\"input\": \"6\\r\\n100 40 60 20 1 80\\r\\n\", \"output\": [\"1 20 40 60 80 100\"]}, {\"input\": \"10\\r\\n10 8 6 7 5 3 4 2 9 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10\"]}, {\"input\": \"10\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10\"]}, {\"input\": \"100\\r\\n82 51 81 14 37 17 78 92 64 15 8 86 89 8 87 77 66 10 15 12 100 25 92 47 21 78 20 63 13 49 41 36 41 79 16 87 87 69 3 76 80 60 100 49 70 59 72 8 38 71 45 97 71 14 76 54 81 4 59 46 39 29 92 3 49 22 53 99 59 52 74 31 92 43 42 23 44 9 82 47 7 40 12 9 3 55 37 85 46 22 84 52 98 41 21 77 63 17 62 91\\r\\n\", \"output\": [\"3 3 3 4 7 8 8 8 9 9 10 12 12 13 14 14 15 15 16 17 17 20 21 21 22 22 23 25 29 31 36 37 37 38 39 40 41 41 41 42 43 44 45 46 46 47 47 49 49 49 51 52 52 53 54 55 59 59 59 60 62 63 63 64 66 69 70 71 71 72 74 76 76 77 77 78 78 79 80 81 81 82 82 84 85 86 87 87 87 89 91 92 92 92 92 97 98 99 100 100\"]}, {\"input\": \"100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\"]}, {\"input\": \"10\\r\\n1 9 7 6 2 4 7 8 1 3\\r\\n\", \"output\": [\"1 1 2 3 4 6 7 7 8 9\"]}, {\"input\": \"20\\r\\n53 32 64 20 41 97 50 20 66 68 22 60 74 61 97 54 80 30 72 59\\r\\n\", \"output\": [\"20 20 22 30 32 41 50 53 54 59 60 61 64 66 68 72 74 80 97 97\"]}, {\"input\": \"30\\r\\n7 17 4 18 16 12 14 10 1 13 2 16 13 17 8 16 13 14 9 17 17 5 13 5 1 7 6 20 18 12\\r\\n\", \"output\": [\"1 1 2 4 5 5 6 7 7 8 9 10 12 12 13 13 13 13 14 14 16 16 16 17 17 17 17 18 18 20\"]}, {\"input\": \"40\\r\\n22 58 68 58 48 53 52 1 16 78 75 17 63 15 36 32 78 75 49 14 42 46 66 54 49 82 40 43 46 55 12 73 5 45 61 60 1 11 31 84\\r\\n\", \"output\": [\"1 1 5 11 12 14 15 16 17 22 31 32 36 40 42 43 45 46 46 48 49 49 52 53 54 55 58 58 60 61 63 66 68 73 75 75 78 78 82 84\"]}, {\"input\": \"70\\r\\n1 3 3 1 3 3 1 1 1 3 3 2 3 3 1 1 1 2 3 1 3 2 3 3 3 2 2 3 1 3 3 2 1 1 2 1 2 1 2 2 1 1 1 3 3 2 3 2 3 2 3 3 2 2 2 3 2 3 3 3 1 1 3 3 1 1 1 1 3 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"]}, {\"input\": \"90\\r\\n17 75 51 30 100 5 50 95 51 73 66 5 7 76 43 49 23 55 3 24 95 79 10 11 44 93 17 99 53 66 82 66 63 76 19 4 51 71 75 43 27 5 24 19 48 7 91 15 55 21 7 6 27 10 2 91 64 58 18 21 16 71 90 88 21 20 6 6 95 85 11 7 40 65 52 49 92 98 46 88 17 48 85 96 77 46 100 34 67 52\\r\\n\", \"output\": [\"2 3 4 5 5 5 6 6 6 7 7 7 7 10 10 11 11 15 16 17 17 17 18 19 19 20 21 21 21 23 24 24 27 27 30 34 40 43 43 44 46 46 48 48 49 49 50 51 51 51 52 52 53 55 55 58 63 64 65 66 66 66 67 71 71 73 75 75 76 76 77 79 82 85 85 88 88 90 91 91 92 93 95 95 95 96 98 99 100 100\"]}, {\"input\": \"100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"]}, {\"input\": \"100\\r\\n1 1 1 1 2 1 1 1 1 1 2 2 1 1 2 1 2 1 1 1 2 1 1 2 1 2 1 1 2 2 2 1 1 2 1 1 1 2 2 2 1 1 1 2 1 2 2 1 2 1 1 2 2 1 2 1 2 1 2 2 1 1 1 2 1 1 2 1 2 1 2 2 2 1 2 1 2 2 2 1 2 2 1 1 1 1 2 2 2 2 2 2 2 1 1 1 2 1 2 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"]}, {\"input\": \"100\\r\\n2 1 1 1 3 2 3 3 2 3 3 1 3 3 1 3 3 1 1 1 2 3 1 2 3 1 2 3 3 1 3 1 1 2 3 2 3 3 2 3 3 1 2 2 1 2 3 2 3 2 2 1 1 3 1 3 2 1 3 1 3 1 3 1 1 3 3 3 2 3 2 2 2 2 1 3 3 3 1 2 1 2 3 2 1 3 1 3 2 1 3 1 2 1 2 3 1 3 2 3\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"]}, {\"input\": \"100\\r\\n7 4 5 5 10 10 5 8 5 7 4 5 4 6 8 8 2 6 3 3 10 7 10 8 6 2 7 3 9 7 7 2 4 5 2 4 9 5 10 1 10 5 10 4 1 3 4 2 6 9 9 9 10 6 2 5 6 1 8 10 4 10 3 4 10 5 5 4 10 4 5 3 7 10 2 7 3 6 9 6 1 6 5 5 4 6 6 4 4 1 5 1 6 6 6 8 8 6 2 6\\r\\n\", \"output\": [\"1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10\"]}, {\"input\": \"100\\r\\n12 10 5 11 13 12 14 13 7 15 15 12 13 19 12 18 14 10 10 3 1 10 16 11 19 8 10 15 5 10 12 16 11 13 11 15 14 12 16 8 11 8 15 2 18 2 14 13 15 20 8 8 4 12 14 7 10 3 9 1 7 19 6 7 2 14 8 20 7 17 18 20 3 18 18 9 6 10 4 1 4 19 9 13 3 3 12 11 11 20 8 2 13 6 7 12 1 4 17 3\\r\\n\", \"output\": [\"1 1 1 1 2 2 2 2 3 3 3 3 3 3 4 4 4 4 5 5 6 6 6 7 7 7 7 7 7 8 8 8 8 8 8 8 9 9 9 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17 18 18 18 18 18 19 19 19 19 20 20 20 20\"]}, {\"input\": \"100\\r\\n5 13 1 40 30 10 23 32 33 12 6 4 15 29 31 17 23 5 36 31 32 38 24 11 34 39 19 21 6 19 31 35 1 15 6 29 22 15 17 15 1 17 2 34 20 8 27 2 29 26 13 9 22 27 27 3 20 40 4 40 33 29 36 30 35 16 19 28 26 11 36 24 29 5 40 10 38 34 33 23 34 39 31 7 10 31 22 6 36 24 14 31 34 23 2 4 26 16 2 32\\r\\n\", \"output\": [\"1 1 1 2 2 2 2 3 4 4 4 5 5 5 6 6 6 6 7 8 9 10 10 10 11 11 12 13 13 14 15 15 15 15 16 16 17 17 17 19 19 19 20 20 21 22 22 22 23 23 23 23 24 24 24 26 26 26 27 27 27 28 29 29 29 29 29 30 30 31 31 31 31 31 31 32 32 32 33 33 33 34 34 34 34 34 35 35 36 36 36 36 38 38 39 39 40 40 40 40\"]}, {\"input\": \"100\\r\\n72 44 34 74 9 60 26 37 55 77 74 69 28 66 54 55 8 36 57 31 31 48 32 66 40 70 77 43 64 28 37 10 21 58 51 32 60 28 51 52 28 35 7 33 1 68 38 70 57 71 8 20 42 57 59 4 58 10 17 47 22 48 16 3 76 67 32 37 64 47 33 41 75 69 2 76 39 9 27 75 20 21 52 25 71 21 11 29 38 10 3 1 45 55 63 36 27 7 59 41\\r\\n\", \"output\": [\"1 1 2 3 3 4 7 7 8 8 9 9 10 10 10 11 16 17 20 20 21 21 21 22 25 26 27 27 28 28 28 28 29 31 31 32 32 32 33 33 34 35 36 36 37 37 37 38 38 39 40 41 41 42 43 44 45 47 47 48 48 51 51 52 52 54 55 55 55 57 57 57 58 58 59 59 60 60 63 64 64 66 66 67 68 69 69 70 70 71 71 72 74 74 75 75 76 76 77 77\"]}, {\"input\": \"100\\r\\n75 18 61 10 56 53 42 57 79 80 31 2 50 45 54 99 84 52 71 21 86 3 19 98 14 37 40 62 63 68 5 10 87 8 81 85 52 52 57 94 2 7 56 96 19 76 1 13 81 6 80 47 22 59 99 32 9 5 36 88 98 91 70 70 12 93 12 22 85 1 97 48 94 16 84 84 51 34 62 7 68 51 30 2 37 82 4 7 27 1 80 9 61 16 59 55 12 96 94 82\\r\\n\", \"output\": [\"1 1 1 2 2 2 3 4 5 5 6 7 7 7 8 9 9 10 10 12 12 12 13 14 16 16 18 19 19 21 22 22 27 30 31 32 34 36 37 37 40 42 45 47 48 50 51 51 52 52 52 53 54 55 56 56 57 57 59 59 61 61 62 62 63 68 68 70 70 71 75 76 79 80 80 80 81 81 82 82 84 84 84 85 85 86 87 88 91 93 94 94 94 96 96 97 98 98 99 99\"]}, {\"input\": \"100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"]}, {\"input\": \"100\\r\\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"]}, {\"input\": \"100\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n\", \"output\": [\"50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\"]}, {\"input\": \"49\\r\\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97\\r\\n\", \"output\": [\"1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97\"]}, {\"input\": \"30\\r\\n1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88\\r\\n\", \"output\": [\"1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88\"]}, {\"input\": \"100\\r\\n100 51 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 51 100\"]}, {\"input\": \"10\\r\\n100 90 80 70 60 50 40 30 20 10\\r\\n\", \"output\": [\"10 20 30 40 50 60 70 80 90 100\"]}, {\"input\": \"1\\r\\n10\\r\\n\", \"output\": [\"10\"]}]","length":41,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 1\\n5 10 7 3 20\", \"6 2\\n100 1 10 40 10 40\", \"3 0\\n1 2 3\"]","prob_desc_input_spec":"The first line contains two space-separated integers, n and c (2\u2009\u2264\u2009n\u2009\u2264\u2009100,\u20090\u2009\u2264\u2009c\u2009\u2264\u2009100), \u2014 the number of days and the number of kilos of raspberry that the bear should give for borrowing the barrel. The second line contains n space-separated integers x1,\u2009x2,\u2009...,\u2009xn (0\u2009\u2264\u2009xi\u2009\u2264\u2009100), the price of a honey barrel on day i.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"411539a86f2e94eb6386bb65c9eb9557","prob_desc_created_at":"1390577700","source_code":"#include<bits\/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint n,m,k[1001],max=0;\n\tcin>>n>>m;\n\t\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tcin>>k[i];\n\t}\n\t\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tif(k[i-1]-k[i]>max && k[i-1]>k[i])\n\t\t\tmax=k[i-1]-k[i];\n\t}\n\t\n\tif(max==0 ||(max-m)<0)\n\t\tcout<<0<<endl;\n\telse\n\t\tcout<<max-m<<endl;\n\t\n\t\t\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"3\", \"97\", \"0\"]","lang_cluster":"C++","code_uid":"88affec3b91cf86e557b68840048114c","prob_desc_notes":"NoteIn the first sample the bear will lend a honey barrel at day 3 and then sell it for 7. Then the bear will buy a barrel for 3 and return it to the friend. So, the profit is (7 - 3 - 1) = 3.In the second sample bear will lend a honey barrel at day 1 and then sell it for 100. Then the bear buy the barrel for 1 at the day 2. So, the profit is (100 - 1 - 2) = 97.","prob_desc_output_spec":"Print a single integer \u2014 the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"The bear decided to store some raspberry for the winter. He cunningly found out the price for a barrel of honey in kilos of raspberry for each of the following n days. According to the bear's data, on the i-th (1\u2009\u2264\u2009i\u2009\u2264\u2009n) day, the price for one barrel of honey is going to is xi kilos of raspberry.Unfortunately, the bear has neither a honey barrel, nor the raspberry. At the same time, the bear's got a friend who is ready to lend him a barrel of honey for exactly one day for c kilograms of raspberry. That's why the bear came up with a smart plan. He wants to choose some day d (1\u2009\u2264\u2009d\u2009&lt;\u2009n), lent a barrel of honey and immediately (on day d) sell it according to a daily exchange rate. The next day (d\u2009+\u20091) the bear wants to buy a new barrel of honey according to a daily exchange rate (as he's got some raspberry left from selling the previous barrel) and immediately (on day d\u2009+\u20091) give his friend the borrowed barrel of honey as well as c kilograms of raspberry for renting the barrel.The bear wants to execute his plan at most once and then hibernate. What maximum number of kilograms of raspberry can he earn? Note that if at some point of the plan the bear runs out of the raspberry, then he won't execute such a plan.","hidden_unit_tests":"[{\"input\": \"5 1\\r\\n5 10 7 3 20\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6 2\\r\\n100 1 10 40 10 40\\r\\n\", \"output\": [\"97\"]}, {\"input\": \"3 0\\r\\n1 2 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 0\\r\\n2 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 5\\r\\n10 1 11 2 12 3 13 4 14 5\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100 4\\r\\n2 57 70 8 44 10 88 67 50 44 93 79 72 50 69 19 21 9 71 47 95 13 46 10 68 72 54 40 15 83 57 92 58 25 4 22 84 9 8 55 87 0 16 46 86 58 5 21 32 28 10 46 11 29 13 33 37 34 78 33 33 21 46 70 77 51 45 97 6 21 68 61 87 54 8 91 37 12 76 61 57 9 100 45 44 88 5 71 98 98 26 45 37 87 34 50 33 60 64 77\\r\\n\", \"output\": [\"87\"]}, {\"input\": \"100 5\\r\\n15 91 86 53 18 52 26 89 8 4 5 100 11 64 88 91 35 57 67 72 71 71 69 73 97 23 11 1 59 86 37 82 6 67 71 11 7 31 11 68 21 43 89 54 27 10 3 33 8 57 79 26 90 81 6 28 24 7 33 50 24 13 27 85 4 93 14 62 37 67 33 40 7 48 41 4 14 9 95 10 64 62 7 93 23 6 28 27 97 64 26 83 70 0 97 74 11 82 70 93\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"6 100\\r\\n10 9 8 7 6 5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 9\\r\\n66 71 37 41 23 38 77 11 74 13 51 26 93 56 81 17 12 70 85 37 54 100 14 99 12 83 44 16 99 65 13 48 92 32 69 33 100 57 58 88 25 45 44 85 5 41 82 15 37 18 21 45 3 68 33 9 52 64 8 73 32 41 87 99 26 26 47 24 79 93 9 44 11 34 85 26 14 61 49 38 25 65 49 81 29 82 28 23 2 64 38 13 77 68 67 23 58 57 83 46\\r\\n\", \"output\": [\"78\"]}, {\"input\": \"100 100\\r\\n9 72 46 37 26 94 80 1 43 85 26 53 58 18 24 19 67 2 100 52 61 81 48 15 73 41 97 93 45 1 73 54 75 51 28 79 0 14 41 42 24 50 70 18 96 100 67 1 68 48 44 39 63 77 78 18 10 51 32 53 26 60 1 13 66 39 55 27 23 71 75 0 27 88 73 31 16 95 87 84 86 71 37 40 66 70 65 83 19 4 81 99 26 51 67 63 80 54 23 44\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"43 65\\r\\n32 58 59 75 85 18 57 100 69 0 36 38 79 95 82 47 7 55 28 88 27 88 63 71 80 86 67 53 69 37 99 54 81 19 55 12 2 17 84 77 25 26 62\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"12 64\\r\\n14 87 40 24 32 36 4 41 38 77 68 71\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"75 94\\r\\n80 92 25 48 78 17 69 52 79 73 12 15 59 55 25 61 96 27 98 43 30 43 36 94 67 54 86 99 100 61 65 8 65 19 18 21 75 31 2 98 55 87 14 1 17 97 94 11 57 29 34 71 76 67 45 0 78 29 86 82 29 23 77 100 48 43 65 62 88 34 7 28 13 1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"59 27\\r\\n76 61 24 66 48 18 69 84 21 8 64 90 19 71 36 90 9 36 30 37 99 37 100 56 9 79 55 37 54 63 11 11 49 71 91 70 14 100 10 44 52 23 21 19 96 13 93 66 52 79 76 5 62 6 90 35 94 7 27\\r\\n\", \"output\": [\"63\"]}, {\"input\": \"86 54\\r\\n41 84 16 5 20 79 73 13 23 24 42 73 70 80 69 71 33 44 62 29 86 88 40 64 61 55 58 19 16 23 84 100 38 91 89 98 47 50 55 87 12 94 2 12 0 1 4 26 50 96 68 34 94 80 8 22 60 3 72 84 65 89 44 52 50 9 24 34 81 28 56 17 38 85 78 90 62 60 1 40 91 2 7 41 84 22\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"37 2\\r\\n65 36 92 92 92 76 63 56 15 95 75 26 15 4 73 50 41 92 26 20 19 100 63 55 25 75 61 96 35 0 14 6 96 3 28 41 83\\r\\n\", \"output\": [\"91\"]}, {\"input\": \"19 4\\r\\n85 2 56 70 33 75 89 60 100 81 42 28 18 92 29 96 49 23 14\\r\\n\", \"output\": [\"79\"]}, {\"input\": \"89 1\\r\\n50 53 97 41 68 27 53 66 93 19 11 78 46 49 38 69 96 9 43 16 1 63 95 64 96 6 34 34 45 40 19 4 53 8 11 18 95 25 50 16 64 33 97 49 23 81 63 10 30 73 76 55 7 70 9 98 6 36 75 78 3 92 85 75 40 75 55 71 9 91 15 17 47 55 44 35 55 88 53 87 61 22 100 56 14 87 36 84 24\\r\\n\", \"output\": [\"91\"]}, {\"input\": \"67 0\\r\\n40 48 15 46 90 7 65 52 24 15 42 81 2 6 71 94 32 18 97 67 83 98 48 51 10 47 8 68 36 46 65 75 90 30 62 9 5 35 80 60 69 58 62 68 58 73 80 9 22 46 56 64 44 11 93 73 62 54 15 20 17 69 16 33 85 62 49\\r\\n\", \"output\": [\"83\"]}, {\"input\": \"96 0\\r\\n38 97 82 43 80 40 1 99 50 94 81 63 92 13 57 24 4 10 25 32 79 56 96 19 25 14 69 56 66 22 23 78 87 76 37 30 75 77 61 64 35 64 62 32 44 62 6 84 91 44 99 5 71 19 17 12 35 52 1 14 35 18 8 36 54 42 4 67 80 11 88 44 34 35 12 38 66 42 4 90 45 10 1 44 37 96 23 28 100 90 75 17 27 67 51 70\\r\\n\", \"output\": [\"94\"]}, {\"input\": \"14 14\\r\\n87 63 62 31 59 47 40 89 92 43 80 30 99 42\\r\\n\", \"output\": [\"43\"]}, {\"input\": \"12 0\\r\\n100 1 100 2 100 3 100 4 100 5 100 0\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"3 1\\r\\n1 2 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 2\\r\\n3 3 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 3\\r\\n3 2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 100\\r\\n1 2 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 100\\r\\n0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 90\\r\\n10 5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 5\\r\\n5 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 1\\r\\n19 20 1\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"5 1\\r\\n5 10 7 4 20\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5 1\\r\\n1 2 3 4 5\\r\\n\", \"output\": [\"0\"]}]","length":26,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2\", \"6\", \"0\"]","prob_desc_input_spec":"The input data consists of only one integer x (\u2009-\u2009109\u2009\u2264\u2009x\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"18644c9df41b9960594fdca27f1d2fec","prob_desc_created_at":"1272294000","source_code":"#include<stdio.h>\nint main(){\n    int n;\n    while(scanf(\"%d\",&n)==1){\n        int sum=0,i;\n        if(n<0)n=-n; \n        for(i=0;i<=n;i++){\n            sum+=i;\n            if(sum>=n&&(sum&1)==(n&1))\n                break;\n        }\n        printf(\"%d\\n\",i);\n    }\n}\n\/****** PCCA -Thu Aug 25 04:35:19 GMT 2011 *******\/","prob_desc_sample_outputs":"[\"3\", \"3\", \"0\"]","lang_cluster":"C++","code_uid":"7985be55329921cf1b1313d530bda8fa","prob_desc_notes":null,"prob_desc_output_spec":"Output the minimal number of jumps that Jack requires to reach x.","prob_desc_output_to":"standard output","prob_desc_description":"Jack is working on his jumping skills recently. Currently he's located at point zero of the number line. He would like to get to the point x. In order to train, he has decided that he'll first jump by only one unit, and each subsequent jump will be exactly one longer than the previous one. He can go either left or right with each jump. He wonders how many jumps he needs to reach x.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-1000000000\\r\\n\", \"output\": [\"44723\"]}, {\"input\": \"999961560\\r\\n\", \"output\": [\"44720\"]}, {\"input\": \"999961561\\r\\n\", \"output\": [\"44721\"]}, {\"input\": \"999961559\\r\\n\", \"output\": [\"44721\"]}, {\"input\": \"-488979819\\r\\n\", \"output\": [\"31273\"]}, {\"input\": \"-865918189\\r\\n\", \"output\": [\"41617\"]}, {\"input\": \"-278253406\\r\\n\", \"output\": [\"23591\"]}, {\"input\": \"-87275307\\r\\n\", \"output\": [\"13213\"]}, {\"input\": \"103702792\\r\\n\", \"output\": [\"14403\"]}, {\"input\": \"294680891\\r\\n\", \"output\": [\"24277\"]}, {\"input\": \"485658989\\r\\n\", \"output\": [\"31166\"]}, {\"input\": \"676637088\\r\\n\", \"output\": [\"36787\"]}, {\"input\": \"867615187\\r\\n\", \"output\": [\"41657\"]}, {\"input\": \"-941406715\\r\\n\", \"output\": [\"43393\"]}, {\"input\": \"-897912263\\r\\n\", \"output\": [\"42377\"]}, {\"input\": \"-706934164\\r\\n\", \"output\": [\"37603\"]}, {\"input\": \"-790244010\\r\\n\", \"output\": [\"39755\"]}, {\"input\": \"16417015\\r\\n\", \"output\": [\"5730\"]}, {\"input\": \"823078041\\r\\n\", \"output\": [\"40573\"]}, {\"input\": \"-517744582\\r\\n\", \"output\": [\"32179\"]}, {\"input\": \"288916443\\r\\n\", \"output\": [\"24038\"]}, {\"input\": \"-904422532\\r\\n\", \"output\": [\"42531\"]}, {\"input\": \"-245245154\\r\\n\", \"output\": [\"22147\"]}, {\"input\": \"561415872\\r\\n\", \"output\": [\"33511\"]}, {\"input\": \"-779406751\\r\\n\", \"output\": [\"39482\"]}, {\"input\": \"27254274\\r\\n\", \"output\": [\"7383\"]}, {\"input\": \"845249034\\r\\n\", \"output\": [\"41116\"]}, {\"input\": \"-236502086\\r\\n\", \"output\": [\"21751\"]}, {\"input\": \"-6985106\\r\\n\", \"output\": [\"3739\"]}]","length":15,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2500.0,"prob_desc_time_limit":"5 seconds","prob_desc_sample_inputs":"[\"3 3 2\\n1 2\\n2 3\\n1 3\", \"4 6 2\\n1 2\\n2 3\\n3 4\\n4 1\\n1 3\\n2 4\", \"4 6 3\\n1 2\\n2 3\\n3 4\\n4 1\\n1 3\\n2 4\"]","prob_desc_input_spec":"The first line contains three integers n, m and k (3\u2009\u2264\u2009n\u2009\u2264\u200910,\u2009n\u2009-\u20091\u2009\u2264\u2009m\u2009\u2264\u2009n\u00b7(n\u2009-\u20091)\u2009\/\u20092,\u20092\u2009\u2264\u2009k\u2009\u2264\u2009n\u2009-\u20091) which represent the number of junctions, roads and dead ends correspondingly. Then follow m lines each containing two different integers v1 and v2 (1\u2009\u2264\u2009v1,\u2009v2\u2009\u2264\u2009n,\u2009v1\u2009\u2260\u2009v2) which represent the number of junctions connected by another road. There can be no more than one road between every pair of junctions. The junctions are numbered with integers from 1 to n. It is guaranteed that it is possible to get from each junction to any other one along the original roads.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"8087605a8f316150372cc4627f26231d","prob_desc_created_at":"1294329600","source_code":"#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#define maxn 11\n\nusing namespace std;\n\ntypedef long long ll;\n\nint st[maxn],aim[maxn*maxn],nxt[maxn*maxn],ln;\nll f[1<<10][1<<10];\nvoid in_edge(int x,int y){\n\taim[ln]=y;\n\tnxt[ln]=st[x];\n\tst[x]=ln++;\n}\nint n,m,kn;\nint cal_bit(int mask){\n\tint ret=0;\n\twhile (mask) ret+=(mask&1),mask>>=1;\n\treturn ret;\n}\nint lowbit(int mask){\n\treturn (mask&(mask^(mask-1)));\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&kn);\n\tmemset(st,-1,sizeof(st));\n\tln=0;\n\tmemset(f,0,sizeof(f));\n\tfor (int i=0;i<m;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\t--v,--u;\n\t\tin_edge(u,v);\n\t\tin_edge(v,u);\n\t\tint tmp=((1<<u)|(1<<v));\n\t\tf[tmp][tmp]=2;\n\t}\n\tint N=(1<<n);\n\tfor (int i=1;i<N;i++)\n\t\tfor (int j=i;j;j=((j-1)&i))\n\t\t\tif (f[i][j]){\n\t\t\t\tint d=cal_bit(j);\n\t\t\t\tf[i][j]\/=d;\n\/\/\t\t\t\tprintf(\"%d %d %lld\\n\",i,j,f[i][j]);\n\t\t\t\tfor (int k=0;k<n;k++)\n\t\t\t\t\tif ((i&(1<<k))>0){\n\t\t\t\t\t\tfor (int c=st[k];c!=-1;c=nxt[c]){\n\t\t\t\t\t\t\tint p=aim[c];\n\t\t\t\t\t\t\tif ((i&(1<<p))==0){\n\t\t\t\t\t\t\t\tint tmask=(i|(1<<p));\n\t\t\t\t\t\t\t\tint cmask=j;\n\t\t\t\t\t\t\t\tif ((j&(1<<k))>0) cmask^=(1<<k);\n\t\t\t\t\t\t\t\tcmask|=(1<<p);\n\t\t\t\t\t\t\t\tf[tmask][cmask]+=f[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\/\/\tfor (int i=1;i<N;i++) printf(\"%lld ,\",f[N-1][i]);\n\tll ans=0;\n\tfor (int i=1;i<N;i++)\n\t\tif (cal_bit(i)==kn) ans+=f[N-1][i];\n\tprintf(\"%I64d\\n\",ans);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"12\", \"4\"]","lang_cluster":"C++","code_uid":"2104511ccef1d0871bfb389843fb7aa1","prob_desc_notes":null,"prob_desc_output_spec":"Print a single number \u2014 the required number of ways.","prob_desc_output_to":"standard output","prob_desc_description":"Life in Bertown has become hard. The city has too many roads and the government spends too much to maintain them. There are n junctions and m two way roads, at which one can get from each junction to any other one. The mayor wants to close some roads so that the number of roads left totaled to n\u2009-\u20091 roads and it were still possible to get from each junction to any other one. Besides, the mayor is concerned with the number of dead ends which are the junctions from which only one road goes. There shouldn't be too many or too few junctions. Having discussed the problem, the mayor and his assistants decided that after the roads are closed, the road map should contain exactly k dead ends. Your task is to count the number of different ways of closing the roads at which the following conditions are met:   There are exactly n\u2009-\u20091 roads left.  It is possible to get from each junction to any other one.  There are exactly k dead ends on the resulting map. Two ways are considered different if there is a road that is closed in the first way, and is open in the second one.","hidden_unit_tests":"[{\"input\": \"3 3 2\\r\\n1 2\\r\\n2 3\\r\\n1 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 6 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 1\\r\\n1 3\\r\\n2 4\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"4 6 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 1\\r\\n1 3\\r\\n2 4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"5 4 3\\r\\n2 1\\r\\n5 3\\r\\n3 2\\r\\n1 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 10 2\\r\\n2 4\\r\\n1 5\\r\\n2 5\\r\\n3 5\\r\\n4 3\\r\\n1 4\\r\\n3 1\\r\\n5 4\\r\\n3 2\\r\\n2 1\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"6 6 2\\r\\n6 3\\r\\n5 2\\r\\n5 1\\r\\n3 5\\r\\n6 2\\r\\n4 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7 7 5\\r\\n2 1\\r\\n4 2\\r\\n7 1\\r\\n4 5\\r\\n7 6\\r\\n2 6\\r\\n2 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 5 2\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 2\\r\\n4 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"9 19 8\\r\\n1 9\\r\\n3 9\\r\\n3 6\\r\\n7 1\\r\\n3 1\\r\\n6 9\\r\\n2 9\\r\\n5 2\\r\\n5 6\\r\\n4 1\\r\\n8 6\\r\\n8 2\\r\\n1 6\\r\\n3 2\\r\\n8 7\\r\\n7 5\\r\\n6 2\\r\\n7 6\\r\\n4 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 10 9\\r\\n6 4\\r\\n2 4\\r\\n4 1\\r\\n8 1\\r\\n1 9\\r\\n7 6\\r\\n6 8\\r\\n5 1\\r\\n10 8\\r\\n2 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 44 3\\r\\n3 10\\r\\n1 5\\r\\n10 5\\r\\n7 10\\r\\n4 9\\r\\n2 9\\r\\n2 10\\r\\n8 4\\r\\n10 9\\r\\n10 8\\r\\n5 2\\r\\n9 7\\r\\n5 3\\r\\n10 4\\r\\n5 4\\r\\n2 6\\r\\n1 2\\r\\n1 6\\r\\n1 8\\r\\n4 2\\r\\n5 9\\r\\n10 1\\r\\n7 4\\r\\n3 2\\r\\n6 9\\r\\n3 1\\r\\n6 4\\r\\n8 9\\r\\n3 6\\r\\n3 4\\r\\n1 7\\r\\n2 7\\r\\n6 8\\r\\n3 8\\r\\n1 4\\r\\n6 10\\r\\n5 7\\r\\n7 3\\r\\n6 7\\r\\n5 6\\r\\n2 8\\r\\n8 7\\r\\n3 9\\r\\n1 9\\r\\n\", \"output\": [\"13547520\"]}, {\"input\": \"10 21 6\\r\\n3 8\\r\\n1 10\\r\\n3 4\\r\\n2 9\\r\\n9 8\\r\\n7 9\\r\\n7 10\\r\\n6 5\\r\\n7 6\\r\\n7 3\\r\\n5 7\\r\\n10 4\\r\\n8 6\\r\\n9 5\\r\\n6 10\\r\\n8 7\\r\\n10 8\\r\\n2 8\\r\\n4 7\\r\\n1 9\\r\\n2 5\\r\\n\", \"output\": [\"3358\"]}, {\"input\": \"10 35 9\\r\\n2 3\\r\\n6 8\\r\\n1 5\\r\\n10 9\\r\\n5 3\\r\\n9 3\\r\\n6 9\\r\\n5 6\\r\\n1 7\\r\\n9 7\\r\\n8 3\\r\\n8 10\\r\\n7 5\\r\\n8 2\\r\\n1 9\\r\\n6 7\\r\\n6 2\\r\\n9 5\\r\\n4 2\\r\\n7 3\\r\\n4 10\\r\\n8 5\\r\\n6 4\\r\\n3 10\\r\\n6 3\\r\\n10 5\\r\\n1 10\\r\\n8 1\\r\\n9 8\\r\\n8 7\\r\\n1 3\\r\\n7 2\\r\\n10 7\\r\\n1 6\\r\\n9 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 34 3\\r\\n3 6\\r\\n1 9\\r\\n2 1\\r\\n2 4\\r\\n1 10\\r\\n7 3\\r\\n1 7\\r\\n3 5\\r\\n6 1\\r\\n10 6\\r\\n10 7\\r\\n9 2\\r\\n5 7\\r\\n5 2\\r\\n5 4\\r\\n10 4\\r\\n3 9\\r\\n10 2\\r\\n6 7\\r\\n5 9\\r\\n2 6\\r\\n1 4\\r\\n10 9\\r\\n3 10\\r\\n7 8\\r\\n9 7\\r\\n8 9\\r\\n6 9\\r\\n10 8\\r\\n7 4\\r\\n8 5\\r\\n7 2\\r\\n5 6\\r\\n4 8\\r\\n\", \"output\": [\"948807\"]}, {\"input\": \"10 11 6\\r\\n9 8\\r\\n8 5\\r\\n3 2\\r\\n6 9\\r\\n1 8\\r\\n2 6\\r\\n10 4\\r\\n6 4\\r\\n7 2\\r\\n6 7\\r\\n9 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 25 9\\r\\n10 8\\r\\n9 10\\r\\n6 9\\r\\n8 5\\r\\n1 7\\r\\n4 7\\r\\n5 3\\r\\n8 6\\r\\n9 2\\r\\n10 1\\r\\n7 2\\r\\n7 10\\r\\n3 1\\r\\n9 5\\r\\n4 10\\r\\n7 3\\r\\n5 7\\r\\n2 5\\r\\n6 1\\r\\n4 8\\r\\n2 4\\r\\n8 7\\r\\n8 2\\r\\n2 6\\r\\n5 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 39 4\\r\\n5 7\\r\\n5 9\\r\\n10 1\\r\\n4 8\\r\\n5 8\\r\\n8 1\\r\\n6 8\\r\\n3 7\\r\\n9 7\\r\\n8 3\\r\\n10 2\\r\\n1 9\\r\\n1 3\\r\\n4 9\\r\\n6 9\\r\\n2 7\\r\\n1 7\\r\\n7 4\\r\\n6 5\\r\\n6 7\\r\\n4 5\\r\\n5 2\\r\\n2 1\\r\\n10 5\\r\\n3 10\\r\\n3 5\\r\\n1 4\\r\\n2 3\\r\\n9 3\\r\\n4 2\\r\\n9 2\\r\\n10 6\\r\\n9 10\\r\\n10 4\\r\\n6 4\\r\\n9 8\\r\\n2 6\\r\\n1 5\\r\\n4 3\\r\\n\", \"output\": [\"9552530\"]}, {\"input\": \"10 39 7\\r\\n3 1\\r\\n4 6\\r\\n1 7\\r\\n3 4\\r\\n6 1\\r\\n3 9\\r\\n7 5\\r\\n1 9\\r\\n2 8\\r\\n4 2\\r\\n5 3\\r\\n3 10\\r\\n2 1\\r\\n9 2\\r\\n1 8\\r\\n7 8\\r\\n4 10\\r\\n7 6\\r\\n8 10\\r\\n5 6\\r\\n5 4\\r\\n6 9\\r\\n3 6\\r\\n7 3\\r\\n4 1\\r\\n6 10\\r\\n10 9\\r\\n6 2\\r\\n9 4\\r\\n9 7\\r\\n5 9\\r\\n5 2\\r\\n2 7\\r\\n8 3\\r\\n8 5\\r\\n8 6\\r\\n7 4\\r\\n3 2\\r\\n8 4\\r\\n\", \"output\": [\"177142\"]}, {\"input\": \"10 16 9\\r\\n1 5\\r\\n10 5\\r\\n3 1\\r\\n2 9\\r\\n8 1\\r\\n4 2\\r\\n7 9\\r\\n4 8\\r\\n7 4\\r\\n1 7\\r\\n2 6\\r\\n6 10\\r\\n7 2\\r\\n8 3\\r\\n1 6\\r\\n2 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 34 8\\r\\n10 3\\r\\n9 3\\r\\n8 1\\r\\n3 7\\r\\n2 5\\r\\n9 1\\r\\n5 10\\r\\n2 3\\r\\n8 4\\r\\n2 10\\r\\n5 4\\r\\n5 8\\r\\n4 9\\r\\n5 3\\r\\n9 10\\r\\n2 4\\r\\n4 10\\r\\n2 9\\r\\n9 5\\r\\n3 8\\r\\n1 4\\r\\n7 6\\r\\n7 2\\r\\n6 5\\r\\n6 9\\r\\n7 8\\r\\n1 3\\r\\n4 6\\r\\n3 6\\r\\n10 8\\r\\n1 6\\r\\n1 7\\r\\n5 7\\r\\n2 1\\r\\n\", \"output\": [\"448\"]}, {\"input\": \"8 9 4\\r\\n7 3\\r\\n8 6\\r\\n7 2\\r\\n2 8\\r\\n5 2\\r\\n4 1\\r\\n6 7\\r\\n1 8\\r\\n3 5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10 45 9\\r\\n10 3\\r\\n1 7\\r\\n9 1\\r\\n1 10\\r\\n4 1\\r\\n3 7\\r\\n4 2\\r\\n10 8\\r\\n10 6\\r\\n8 7\\r\\n8 4\\r\\n8 2\\r\\n6 7\\r\\n10 2\\r\\n1 8\\r\\n5 8\\r\\n3 6\\r\\n6 4\\r\\n9 5\\r\\n9 8\\r\\n2 5\\r\\n2 1\\r\\n5 4\\r\\n6 9\\r\\n4 9\\r\\n3 1\\r\\n3 9\\r\\n5 1\\r\\n4 7\\r\\n7 10\\r\\n2 3\\r\\n9 2\\r\\n4 3\\r\\n4 10\\r\\n8 3\\r\\n5 10\\r\\n9 7\\r\\n6 5\\r\\n3 5\\r\\n8 6\\r\\n6 1\\r\\n2 6\\r\\n10 9\\r\\n5 7\\r\\n2 7\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"10 45 8\\r\\n7 2\\r\\n3 7\\r\\n4 8\\r\\n1 8\\r\\n9 6\\r\\n7 6\\r\\n10 7\\r\\n6 3\\r\\n2 8\\r\\n6 2\\r\\n4 10\\r\\n9 2\\r\\n10 3\\r\\n6 1\\r\\n8 9\\r\\n5 2\\r\\n4 5\\r\\n5 1\\r\\n4 1\\r\\n6 10\\r\\n10 9\\r\\n3 5\\r\\n7 5\\r\\n6 5\\r\\n10 8\\r\\n4 2\\r\\n9 5\\r\\n2 3\\r\\n4 6\\r\\n4 9\\r\\n7 9\\r\\n1 10\\r\\n2 10\\r\\n1 2\\r\\n8 6\\r\\n3 8\\r\\n4 3\\r\\n9 1\\r\\n5 10\\r\\n9 3\\r\\n7 4\\r\\n7 1\\r\\n8 7\\r\\n3 1\\r\\n5 8\\r\\n\", \"output\": [\"11430\"]}, {\"input\": \"10 45 7\\r\\n1 10\\r\\n8 6\\r\\n7 6\\r\\n10 9\\r\\n2 6\\r\\n6 4\\r\\n7 1\\r\\n8 7\\r\\n3 8\\r\\n2 3\\r\\n4 10\\r\\n4 9\\r\\n10 7\\r\\n10 5\\r\\n5 2\\r\\n2 4\\r\\n3 1\\r\\n4 3\\r\\n6 9\\r\\n3 7\\r\\n7 4\\r\\n2 8\\r\\n6 1\\r\\n10 3\\r\\n8 10\\r\\n7 5\\r\\n4 8\\r\\n4 5\\r\\n3 5\\r\\n9 2\\r\\n7 2\\r\\n10 2\\r\\n5 8\\r\\n6 10\\r\\n8 1\\r\\n6 5\\r\\n1 4\\r\\n5 9\\r\\n9 7\\r\\n1 2\\r\\n9 3\\r\\n1 5\\r\\n6 3\\r\\n9 1\\r\\n8 9\\r\\n\", \"output\": [\"695520\"]}, {\"input\": \"10 45 6\\r\\n6 2\\r\\n2 10\\r\\n4 8\\r\\n3 5\\r\\n7 10\\r\\n2 9\\r\\n8 3\\r\\n5 9\\r\\n7 9\\r\\n7 6\\r\\n5 10\\r\\n1 3\\r\\n1 6\\r\\n5 4\\r\\n3 4\\r\\n7 8\\r\\n8 6\\r\\n2 4\\r\\n1 4\\r\\n1 8\\r\\n10 3\\r\\n5 6\\r\\n1 9\\r\\n3 2\\r\\n10 9\\r\\n3 7\\r\\n10 1\\r\\n1 5\\r\\n2 7\\r\\n2 5\\r\\n9 4\\r\\n3 6\\r\\n7 4\\r\\n8 5\\r\\n10 6\\r\\n9 6\\r\\n3 9\\r\\n5 7\\r\\n10 4\\r\\n8 10\\r\\n6 4\\r\\n7 1\\r\\n2 8\\r\\n9 8\\r\\n2 1\\r\\n\", \"output\": [\"8573040\"]}, {\"input\": \"10 45 5\\r\\n2 5\\r\\n6 8\\r\\n7 5\\r\\n6 9\\r\\n5 9\\r\\n5 3\\r\\n10 6\\r\\n1 9\\r\\n10 7\\r\\n3 10\\r\\n1 2\\r\\n4 8\\r\\n9 10\\r\\n2 8\\r\\n2 6\\r\\n4 2\\r\\n7 6\\r\\n1 8\\r\\n7 2\\r\\n2 10\\r\\n8 5\\r\\n8 3\\r\\n4 1\\r\\n1 10\\r\\n4 10\\r\\n4 6\\r\\n3 1\\r\\n4 7\\r\\n5 4\\r\\n7 8\\r\\n7 3\\r\\n10 5\\r\\n6 1\\r\\n9 7\\r\\n3 6\\r\\n1 5\\r\\n2 9\\r\\n9 3\\r\\n3 4\\r\\n9 8\\r\\n7 1\\r\\n4 9\\r\\n10 8\\r\\n6 5\\r\\n3 2\\r\\n\", \"output\": [\"31752000\"]}, {\"input\": \"10 45 4\\r\\n8 6\\r\\n10 2\\r\\n9 5\\r\\n1 7\\r\\n8 7\\r\\n7 10\\r\\n2 5\\r\\n5 10\\r\\n10 1\\r\\n1 8\\r\\n4 1\\r\\n10 9\\r\\n6 9\\r\\n3 7\\r\\n10 4\\r\\n5 6\\r\\n1 5\\r\\n4 7\\r\\n7 9\\r\\n10 3\\r\\n4 3\\r\\n6 4\\r\\n2 1\\r\\n5 3\\r\\n10 6\\r\\n1 9\\r\\n8 2\\r\\n3 8\\r\\n6 3\\r\\n8 5\\r\\n3 9\\r\\n4 2\\r\\n7 5\\r\\n2 9\\r\\n4 5\\r\\n2 7\\r\\n2 6\\r\\n6 7\\r\\n8 4\\r\\n8 10\\r\\n3 2\\r\\n4 9\\r\\n9 8\\r\\n6 1\\r\\n3 1\\r\\n\", \"output\": [\"40219200\"]}, {\"input\": \"10 45 3\\r\\n8 5\\r\\n10 7\\r\\n6 8\\r\\n10 8\\r\\n5 4\\r\\n9 2\\r\\n8 3\\r\\n1 8\\r\\n8 7\\r\\n1 6\\r\\n4 7\\r\\n9 1\\r\\n10 6\\r\\n4 8\\r\\n7 1\\r\\n1 2\\r\\n3 6\\r\\n2 6\\r\\n9 10\\r\\n2 8\\r\\n10 5\\r\\n6 9\\r\\n2 7\\r\\n7 5\\r\\n4 6\\r\\n1 3\\r\\n5 2\\r\\n4 3\\r\\n9 7\\r\\n4 9\\r\\n6 5\\r\\n1 10\\r\\n5 1\\r\\n2 3\\r\\n10 3\\r\\n4 10\\r\\n1 4\\r\\n9 5\\r\\n9 8\\r\\n7 6\\r\\n2 4\\r\\n2 10\\r\\n3 5\\r\\n9 3\\r\\n7 3\\r\\n\", \"output\": [\"16934400\"]}, {\"input\": \"10 45 2\\r\\n7 3\\r\\n3 2\\r\\n8 6\\r\\n6 10\\r\\n7 6\\r\\n2 7\\r\\n4 3\\r\\n6 5\\r\\n2 9\\r\\n10 2\\r\\n6 1\\r\\n5 1\\r\\n8 1\\r\\n3 1\\r\\n4 7\\r\\n3 6\\r\\n1 10\\r\\n9 10\\r\\n5 7\\r\\n1 2\\r\\n9 4\\r\\n4 1\\r\\n5 3\\r\\n1 9\\r\\n10 3\\r\\n8 3\\r\\n7 9\\r\\n9 8\\r\\n4 2\\r\\n5 9\\r\\n10 7\\r\\n6 9\\r\\n2 8\\r\\n2 6\\r\\n8 4\\r\\n5 2\\r\\n7 8\\r\\n8 10\\r\\n8 5\\r\\n5 4\\r\\n4 10\\r\\n3 9\\r\\n1 7\\r\\n5 10\\r\\n4 6\\r\\n\", \"output\": [\"1814400\"]}, {\"input\": \"10 44 5\\r\\n8 4\\r\\n3 8\\r\\n1 3\\r\\n2 6\\r\\n7 4\\r\\n7 1\\r\\n4 6\\r\\n7 2\\r\\n3 7\\r\\n4 10\\r\\n3 10\\r\\n10 1\\r\\n2 3\\r\\n5 7\\r\\n5 8\\r\\n8 2\\r\\n9 5\\r\\n3 9\\r\\n5 3\\r\\n8 1\\r\\n4 5\\r\\n2 4\\r\\n1 6\\r\\n10 7\\r\\n9 1\\r\\n6 8\\r\\n8 10\\r\\n10 5\\r\\n9 10\\r\\n9 8\\r\\n1 4\\r\\n6 10\\r\\n8 7\\r\\n3 6\\r\\n4 3\\r\\n9 6\\r\\n7 6\\r\\n9 7\\r\\n1 2\\r\\n2 10\\r\\n1 5\\r\\n2 5\\r\\n4 9\\r\\n2 9\\r\\n\", \"output\": [\"25401600\"]}, {\"input\": \"10 43 9\\r\\n7 1\\r\\n4 5\\r\\n8 3\\r\\n5 1\\r\\n2 5\\r\\n9 2\\r\\n8 4\\r\\n8 2\\r\\n5 8\\r\\n4 2\\r\\n9 8\\r\\n7 10\\r\\n10 2\\r\\n4 7\\r\\n9 5\\r\\n2 3\\r\\n8 6\\r\\n10 5\\r\\n6 4\\r\\n3 5\\r\\n8 1\\r\\n3 1\\r\\n3 7\\r\\n6 9\\r\\n4 10\\r\\n9 7\\r\\n6 3\\r\\n7 5\\r\\n3 4\\r\\n9 10\\r\\n7 2\\r\\n4 1\\r\\n7 8\\r\\n1 10\\r\\n3 9\\r\\n10 6\\r\\n10 3\\r\\n6 7\\r\\n6 1\\r\\n1 2\\r\\n1 9\\r\\n5 6\\r\\n6 2\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"10 42 5\\r\\n1 3\\r\\n10 2\\r\\n1 7\\r\\n5 8\\r\\n6 7\\r\\n3 5\\r\\n3 2\\r\\n10 5\\r\\n8 1\\r\\n3 9\\r\\n6 3\\r\\n8 4\\r\\n6 9\\r\\n1 4\\r\\n9 2\\r\\n8 3\\r\\n6 5\\r\\n2 4\\r\\n7 9\\r\\n4 6\\r\\n8 10\\r\\n1 2\\r\\n3 10\\r\\n7 2\\r\\n5 4\\r\\n1 10\\r\\n6 2\\r\\n2 8\\r\\n4 3\\r\\n6 1\\r\\n4 9\\r\\n2 5\\r\\n10 4\\r\\n10 6\\r\\n8 7\\r\\n9 5\\r\\n9 10\\r\\n5 1\\r\\n10 7\\r\\n8 6\\r\\n7 5\\r\\n8 9\\r\\n\", \"output\": [\"15986880\"]}]","length":67,"num_hidden_unit_tests":32}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"a\", \"hi\"]","prob_desc_input_spec":"The first line of input will be a single string s (1\u2009\u2264\u2009|s|\u2009\u2264\u200920). String s consists only of lowercase English letters. ","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"556684d96d78264ad07c0cdd3b784bc9","prob_desc_created_at":"1435163400","source_code":"#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nbool vis[30];\n\nint main(){\n    string str;\n    cin >> str;\n    memset(vis, false, sizeof(vis));\n    long long len = str.size();\n    long long sum = 0;\n\n    for(int i = 0; i < len; ++i){\n        if(!vis[str[i]-'a']){\n            vis[str[i]-'a'] = true;\n        }\n    }\n\/\/    long long cnt = 0;\n\/\/    for(int i = 0; i < 26; ++i){\n\/\/        if(vis[i]){\n\/\/            ++cnt;\n\/\/        }\n\/\/    }\n    sum += 26*(len+1);\n    \/\/sum += cnt * (len+1);\n    sum -= len;\n    cout << sum << endl;\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"51\", \"76\"]","lang_cluster":"C++","code_uid":"d42b9f55347edc6f479563f0d03bbff6","prob_desc_notes":"NoteIn the first case, we can make 'ab','ac',...,'az','ba','ca',...,'za', and 'aa', producing a total of 51 distinct photo booklets. ","prob_desc_output_spec":"Output a single integer equal to the number of distinct photobooks Kyoya Ootori can make.","prob_desc_output_to":"standard output","prob_desc_description":"Kyoya Ootori is selling photobooks of the Ouran High School Host Club. He has 26 photos, labeled \"a\" to \"z\", and he has compiled them into a photo booklet with some photos in some order (possibly with some photos being duplicated). A photo booklet can be described as a string of lowercase letters, consisting of the photos in the booklet in order. He now wants to sell some \"special edition\" photobooks, each with one extra photo inserted anywhere in the book. He wants to make as many distinct photobooks as possible, so he can make more money. He asks Haruhi, how many distinct photobooks can he make by inserting one extra photo into the photobook he already has?Please help Haruhi solve this problem.","hidden_unit_tests":"[{\"input\": \"a\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"hi\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"y\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"kgan\\r\\n\", \"output\": [\"126\"]}, {\"input\": \"zoabkyuvus\\r\\n\", \"output\": [\"276\"]}, {\"input\": \"spyemhyznjieyhhbk\\r\\n\", \"output\": [\"451\"]}, {\"input\": \"xulsyfkuizjauadjjopu\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"e\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"zv\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"jgv\\r\\n\", \"output\": [\"101\"]}, {\"input\": \"zsfo\\r\\n\", \"output\": [\"126\"]}, {\"input\": \"jselr\\r\\n\", \"output\": [\"151\"]}, {\"input\": \"dwemig\\r\\n\", \"output\": [\"176\"]}, {\"input\": \"mddoxsf\\r\\n\", \"output\": [\"201\"]}, {\"input\": \"jgirkrmi\\r\\n\", \"output\": [\"226\"]}, {\"input\": \"spkxurcum\\r\\n\", \"output\": [\"251\"]}, {\"input\": \"fykkiubdkt\\r\\n\", \"output\": [\"276\"]}, {\"input\": \"fznbcxsxygs\\r\\n\", \"output\": [\"301\"]}, {\"input\": \"qcrvrdqcbtou\\r\\n\", \"output\": [\"326\"]}, {\"input\": \"qktrbjzrqgmlr\\r\\n\", \"output\": [\"351\"]}, {\"input\": \"foamodbvptlxxg\\r\\n\", \"output\": [\"376\"]}, {\"input\": \"ydzpjhsidipricw\\r\\n\", \"output\": [\"401\"]}, {\"input\": \"lpfpndmjfvqejdgf\\r\\n\", \"output\": [\"426\"]}, {\"input\": \"ofkvparuvjtggnmab\\r\\n\", \"output\": [\"451\"]}, {\"input\": \"xxncfutrtxcwdzwbgs\\r\\n\", \"output\": [\"476\"]}, {\"input\": \"zovhffccflkgqncsdte\\r\\n\", \"output\": [\"501\"]}, {\"input\": \"cskgsxywlvfeicoueglr\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"gggggggggggggggggggg\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"qdqdddqddqqddqddqdqd\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"takttttaakaaktakttkt\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"coccoooogogcgocccmcg\\r\\n\", \"output\": [\"526\"]}, {\"input\": \"kskkskkkssksssk\\r\\n\", \"output\": [\"401\"]}, {\"input\": \"lllllllllllllll\\r\\n\", \"output\": [\"401\"]}]","length":31,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\", \"WBWBWBWB\\nWBWBWBWB\\nBBWBWWWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWWW\\nBWBWBWBW\\nBWBWBWBW\"]","prob_desc_input_spec":"The input consists of exactly eight lines. Each line contains exactly eight characters \"W\" or \"B\" without any spaces: the j-th character in the i-th line stands for the color of the j-th cell of the i-th row of the elephants' board. Character \"W\" stands for the white color, character \"B\" stands for the black color. Consider the rows of the board numbered from 1 to 8 from top to bottom, and the columns \u2014 from 1 to 8 from left to right. The given board can initially be a proper chessboard.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"ca65e023be092b2ce25599f52acc1a67","prob_desc_created_at":"1356190200","source_code":"\/* *************************************************************\n   *  \"The world is nothing but a good program,               *\n   *   and we are all some instances of the program!!\"        *\n   *            PROBLEM:                                      *\n   *            SOLVED DATE: 2012\/12\/20                       *\n   *            RT: 0.00 sec;         RANK:                   *\n   *            ALGO:                                         *\n   *                               ==>> TheCoderJU (BISHAL)   *\n   ************************************************************* *\/\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <cstdlib>\n#include <cctype>\n#include <cmath>\nusing namespace std;\nint i,j,k,m,n,tc,sm,cnt=0,tmp,w,b,cs=1,p,q,f=1,g=1;\nstring s,s1,sw[10000];\nint main()\n{\n f=1;\n for(i=1;i<=8;i++)\n {\n   cin>>sw[i];\n   cnt=0;\n   for(j=0;i<sw[i][j];j+=2)\n   {\n     if(sw[i][0]=='W' && (sw[i][j]=='W' && sw[i][j+1]=='B'))cnt++;\n     else if(sw[i][0]=='B' && (sw[i][j]=='B' && sw[i][j+1]=='W'))cnt++;\n   }\n if(cnt!=4){f=0;}\n }\nif(f)cout<<\"YES\\n\";\nelse cout<<\"NO\\n\";\nreturn 0;\n}\n","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"C++","code_uid":"a01c2c75aa37d3f24ce8a7e1e3a29445","prob_desc_notes":"NoteIn the first sample you should shift the following lines one position to the right: the 3-rd, the 6-th, the 7-th and the 8-th.In the second sample there is no way you can achieve the goal.","prob_desc_output_spec":"In a single line print \"YES\" (without the quotes), if we can make the board a proper chessboard and \"NO\" (without the quotes) otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"The Little Elephant loves chess very much. One day the Little Elephant and his friend decided to play chess. They've got the chess pieces but the board is a problem. They've got an 8\u2009\u00d7\u20098 checkered board, each square is painted either black or white. The Little Elephant and his friend know that a proper chessboard doesn't have any side-adjacent cells with the same color and the upper left cell is white. To play chess, they want to make the board they have a proper chessboard. For that the friends can choose any row of the board and cyclically shift the cells of the chosen row, that is, put the last (rightmost) square on the first place in the row and shift the others one position to the right. You can run the described operation multiple times (or not run it at all).For example, if the first line of the board looks like that \"BBBBBBWW\" (the white cells of the line are marked with character \"W\", the black cells are marked with character \"B\"), then after one cyclic shift it will look like that \"WBBBBBBW\".Help the Little Elephant and his friend to find out whether they can use any number of the described operations to turn the board they have into a proper chessboard.","hidden_unit_tests":"[{\"input\": \"WBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nBBWBWWWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWWW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"BWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWWWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBBBWWW\\r\\nWBBWBWWB\\r\\nWWWWWBWW\\r\\nBWBWWBWW\\r\\nBBBWWBWW\\r\\nBBBBBWBW\\r\\nWBBBWBWB\\r\\nWBWBWWWB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nBWWWWWBB\\r\\nBBWBWBWB\\r\\nWBWBWBWB\\r\\nWWBWWBWW\\r\\nBWBWBWBW\\r\\nWBWWBBBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWWBWBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WWWWBWWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWWBWBBBB\\r\\nBBWWBBBB\\r\\nBBBWWBBW\\r\\nBWWWWWWB\\r\\nBWWBBBWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBBWWBWB\\r\\nBBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBBW\\r\\nWBWBBBBW\\r\\nBWWWWBWB\\r\\nBBBBBBBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nBBWWWBBB\\r\\nWBBBBBWW\\r\\nWBBBBWBB\\r\\nWBWBWBWB\\r\\nWBWWBWWB\\r\\nWBBWBBWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBBBBBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBBBBBWBB\\r\\nWBBWWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBBWWBWB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWWWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"BWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"WWBBWWBB\\r\\nBWWBBWWB\\r\\nBWBWBWBW\\r\\nWWBBWWWB\\r\\nWBWWWWBB\\r\\nWBWWBBWB\\r\\nBWBBWBWW\\r\\nBWBWWWWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nWBWBWBWB\\r\\nWWBBWBBB\\r\\nWBWBWBWB\\r\\nWWWWBWWB\\r\\nWBBBBWWW\\r\\nBWBWWWBW\\r\\nWWWBWBBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WBWBWBWB\\r\\nBWWBWWWW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWWBBBBBW\\r\\nWWWBWWBW\\r\\nWWBBBBWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBBBWWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\nWWWWWWWW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\nBWBWBWBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WWBWWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"WWWWWWWW\\r\\nBBBBBBBB\\r\\nWWWWWWWW\\r\\nBBBBBBBB\\r\\nWWWWWWWW\\r\\nBBBBBBBB\\r\\nWWWWWWWW\\r\\nBBBBBBBB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBBBBBB\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\nBBBBBBBW\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BBBWWWWW\\r\\nWWWBBBBB\\r\\nBBBWWWWW\\r\\nWWWBBBBB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\nBWBWBWBW\\r\\nWBWBWBWB\\r\\n\", \"output\": [\"NO\"]}]","length":37,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"7 2 5\", \"10 3 10\"]","prob_desc_input_spec":"The first line contains three integers n, l, r (0\u2009\u2264\u2009n\u2009&lt;\u2009250, 0\u2009\u2264\u2009r\u2009-\u2009l\u2009\u2264\u2009105, r\u2009\u2265\u20091, l\u2009\u2265\u20091) \u2013 initial element and the range l to r. It is guaranteed that r is not greater than the length of the final list.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"3ac61b1f8deee7911b1055c243f5eb6a","prob_desc_created_at":"1487606700","source_code":"#include <vector>=\n#include <algorithm>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <fstream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstring>\n#include <limits>\n#include <climits>\n#include <cstdio>\n#include <numeric>\n#define ll long long\nusing namespace std;\nconst int inf = 0x3f3f3f3f;\nconst ll mod = 1000000007;\nconst double pi = acos(1.0*(-1));\ntypedef pair<int, int> P;\nint num[300010];\nll n, l, r, s = 1, ans;\nvoid solve(ll a, ll b, ll l, ll r, ll d)\/\/\u4e8c\u5206\u7684\u601d\u60f3\n{\n\tif (a > b || l > r)    return;\n\telse\n\t{\n\t\tll mid = (a + b) \/ 2;\n\t\tif (r < mid)solve(a, mid - 1, l, r, d \/ 2);\n\t\telse if (mid < l)solve(mid + 1, b, l, r, d \/ 2);\n\t\telse {\n\t\t\tans += d % 2;\n\t\t\tsolve(a, mid - 1, l, mid - 1, d \/ 2);\n\t\t\tsolve(mid + 1, b, mid + 1, r, d \/ 2);\n\t\t}\n\t}\n}\nint main()\n{\n\tcin >> n >> l >> r;\n\tlong long p = n;\n\twhile (p >= 2)\n\t{\n\t\tp \/= 2;\n\t\ts = s * 2 + 1;\n\t}\n\tsolve(1, s, l, r, n);\n\tcout << ans << endl;\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"4\", \"5\"]","lang_cluster":"C++","code_uid":"45671c2fa3d1a6ade6adfb20c61bbdc1","prob_desc_notes":"NoteConsider first example:Elements on positions from 2-nd to 5-th in list is [1,\u20091,\u20091,\u20091]. The number of ones is 4.For the second example:Elements on positions from 3-rd to 10-th in list is [1,\u20091,\u20091,\u20090,\u20091,\u20090,\u20091,\u20090]. The number of ones is 5.","prob_desc_output_spec":"Output the total number of 1s in the range l to r in the final sequence.","prob_desc_output_to":"standard output","prob_desc_description":"Jon fought bravely to rescue the wildlings who were attacked by the white-walkers at Hardhome. On his arrival, Sam tells him that he wants to go to Oldtown to train at the Citadel to become a maester, so he can return and take the deceased Aemon's place as maester of Castle Black. Jon agrees to Sam's proposal and Sam sets off his journey to the Citadel. However becoming a trainee at the Citadel is not a cakewalk and hence the maesters at the Citadel gave Sam a problem to test his eligibility. Initially Sam has a list with a single element n. Then he has to perform certain operations on this list. In each operation Sam must remove any element x, such that x\u2009&gt;\u20091, from the list and insert at the same position , ,  sequentially. He must continue with these operations until all the elements in the list are either 0 or 1.Now the masters want the total number of 1s in the range l to r (1-indexed). Sam wants to become a maester but unfortunately he cannot solve this problem. Can you help Sam to pass the eligibility test?","hidden_unit_tests":"[{\"input\": \"7 2 5\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10 3 10\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"56 18 40\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"203 40 124\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"903316762502 354723010040 354723105411\\r\\n\", \"output\": [\"78355\"]}, {\"input\": \"33534354842198 32529564319236 32529564342569\\r\\n\", \"output\": [\"22239\"]}, {\"input\": \"62518534961045 50734311240112 50734311287877\\r\\n\", \"output\": [\"42439\"]}, {\"input\": \"95173251245550 106288351347530 106288351372022\\r\\n\", \"output\": [\"16565\"]}, {\"input\": \"542 321 956\\r\\n\", \"output\": [\"336\"]}, {\"input\": \"3621 237 2637\\r\\n\", \"output\": [\"2124\"]}, {\"input\": \"9056 336 896\\r\\n\", \"output\": [\"311\"]}, {\"input\": \"36007 368 24490\\r\\n\", \"output\": [\"13253\"]}, {\"input\": \"244269 149154 244246\\r\\n\", \"output\": [\"88609\"]}, {\"input\": \"880234 669493 757150\\r\\n\", \"output\": [\"73585\"]}, {\"input\": \"3740160 1031384 1104236\\r\\n\", \"output\": [\"64965\"]}, {\"input\": \"11586121 15337246 15397874\\r\\n\", \"output\": [\"41868\"]}, {\"input\": \"38658997 35923164 35985664\\r\\n\", \"output\": [\"36004\"]}, {\"input\": \"192308932 207804787 207866400\\r\\n\", \"output\": [\"44142\"]}, {\"input\": \"950099012 175922161 176000556\\r\\n\", \"output\": [\"69369\"]}, {\"input\": \"2787326787 3799676481 3799680514\\r\\n\", \"output\": [\"2618\"]}, {\"input\": \"14417262581 8527979363 8528075536\\r\\n\", \"output\": [\"80707\"]}, {\"input\": \"39889373539 7747197212 7747278363\\r\\n\", \"output\": [\"47105\"]}, {\"input\": \"251772781087 70597428577 70597479816\\r\\n\", \"output\": [\"46933\"]}, {\"input\": \"0 1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 2 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"14 7 12\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"1125899906842623 1 100001\\r\\n\", \"output\": [\"100001\"]}, {\"input\": \"1125899906842623 1125899906742623 1125899906842623\\r\\n\", \"output\": [\"100001\"]}, {\"input\": \"1000 1 1023\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"281474976710656 17179869184 17179869186\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 2 2\\r\\n\", \"output\": [\"1\"]}]","length":60,"num_hidden_unit_tests":33}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3\\n7 20 88\", \"9\\n16 20 30 40 50 60 70 80 90\", \"9\\n15 20 30 40 50 60 70 80 90\"]","prob_desc_input_spec":"The first line of the input contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u200990)\u00a0\u2014 the number of interesting minutes. The second line contains n integers t1,\u2009t2,\u2009...,\u2009tn (1\u2009\u2264\u2009t1\u2009&lt;\u2009t2\u2009&lt;\u2009... tn\u2009\u2264\u200990), given in the increasing order.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"5031b15e220f0ff6cc1dd3731ecdbf27","prob_desc_created_at":"1462633500","source_code":"#include <iostream>\n\nusing namespace std;\nint a[100];\nint main()\n{\n    int n,j;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    cin>>a[i];\n    int ans=90;\n    a[n+1]=90;\n    for(int i=1;i<=n+1;i++)\n    {\n        if(a[i]-a[i-1]>15)\n    {\n        ans=a[i-1]+15;\n        i=n+1;\n    }\n    }\n    cout<<ans;\n    return 0;\n}","prob_desc_sample_outputs":"[\"35\", \"15\", \"90\"]","lang_cluster":"C++","code_uid":"deb2cfec44576de32c47433df70f5361","prob_desc_notes":"NoteIn the first sample, minutes 21,\u200922,\u2009...,\u200935 are all boring and thus Limak will turn TV off immediately after the 35-th minute. So, he would watch the game for 35 minutes.In the second sample, the first 15 minutes are boring.In the third sample, there are no consecutive 15 boring minutes. So, Limak will watch the whole game.","prob_desc_output_spec":"Print the number of minutes Limak will watch the game.","prob_desc_output_to":"standard output","prob_desc_description":"Bear Limak likes watching sports on TV. He is going to watch a game today. The game lasts 90 minutes and there are no breaks.Each minute can be either interesting or boring. If 15 consecutive minutes are boring then Limak immediately turns TV off.You know that there will be n interesting minutes t1,\u2009t2,\u2009...,\u2009tn. Your task is to calculate for how many minutes Limak will watch the game.","hidden_unit_tests":"[{\"input\": \"3\\r\\n7 20 88\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"9\\r\\n16 20 30 40 50 60 70 80 90\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"9\\r\\n15 20 30 40 50 60 70 80 90\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"30\\r\\n6 11 12 15 22 24 30 31 32 33 34 35 40 42 44 45 47 50 53 54 57 58 63 67 75 77 79 81 83 88\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"60\\r\\n1 2 4 5 6 7 11 14 16 18 20 21 22 23 24 25 26 33 34 35 36 37 38 39 41 42 43 44 46 47 48 49 52 55 56 57 58 59 60 61 63 64 65 67 68 70 71 72 73 74 75 77 78 80 82 83 84 85 86 88\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"90\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"5\\r\\n15 30 45 60 75\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"6\\r\\n14 29 43 59 70 74\\r\\n\", \"output\": [\"58\"]}, {\"input\": \"1\\r\\n15\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"1\\r\\n16\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"14\\r\\n14 22 27 31 35 44 46 61 62 69 74 79 88 89\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"76\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"1\\r\\n90\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"6\\r\\n13 17 32 47 60 66\\r\\n\", \"output\": [\"81\"]}, {\"input\": \"84\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"9\\r\\n6 20 27 28 40 53 59 70 85\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"12\\r\\n14 22 27 31 35 44 62 69 74 79 88 89\\r\\n\", \"output\": [\"59\"]}, {\"input\": \"5\\r\\n15 30 45 60 74\\r\\n\", \"output\": [\"89\"]}, {\"input\": \"72\\r\\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"8\\r\\n1 16 30 31 32 33 34 50\\r\\n\", \"output\": [\"49\"]}, {\"input\": \"12\\r\\n1 3 6 10 15 21 28 36 45 55 66 78\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"25\\r\\n1 2 3 4 5 6 7 8 9 10 11 23 36 50 65 81 82 83 84 85 86 87 88 89 90\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"8\\r\\n5 17 20 35 42 53 67 76\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"9\\r\\n15 28 39 48 55 60 63 64 74\\r\\n\", \"output\": [\"89\"]}, {\"input\": \"10\\r\\n15 28 39 48 55 60 63 64 74 82\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"2\\r\\n1 18\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"9\\r\\n10 20 30 40 50 60 70 80 84\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"2\\r\\n16 50\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"6\\r\\n15 30 45 60 75 84\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"8\\r\\n15 20 30 40 50 60 73 83\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"8\\r\\n10 20 30 40 50 60 70 80\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"3\\r\\n1 20 90\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"6\\r\\n15 30 45 60 74 89\\r\\n\", \"output\": [\"90\"]}]","length":23,"num_hidden_unit_tests":34}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"40047\", \"7747774\", \"1000000000000000000\"]","prob_desc_input_spec":"The only line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091018). Please do not use the %lld specificator to read or write 64-bit numbers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"33b73fd9e7f19894ea08e98b790d07f1","prob_desc_created_at":"1314633600","source_code":"#include<iostream>\n#include<cmath>\n#include<cstring>\n#include<vector>\nusing namespace std;\nstring a;\nint main(){\n    cin>>a;\n    int n=a.length();\n    int k=0;\n    for(int i=0;i<n;i++){\n        if(a[i]!='7' && a[i]!='4')\n            k++;\n    }\n    if(k==n){\n        cout<<\"NO\";\n        return 0;\n    }\n    int f=n-k;\n    while(f>=1){\n        if((f-7)%10!=0 && (f-4)%10!=0){\n            cout << \"NO\";\n            return 0;\n        }\n        if((f-7)%10==0){\n            f-=7 ;\n            f\/=10 ;\n        }\n        if((f-4)%10==0){\n            f-=4 ;\n            f\/=10 ;\n        }\n    }\n    cout<<\"YES\";\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"NO\", \"YES\", \"NO\"]","lang_cluster":"C++","code_uid":"d867d0b20983e51d1d368ef979c81bf8","prob_desc_notes":"NoteIn the first sample there are 3 lucky digits (first one and last two), so the answer is \"NO\".In the second sample there are 7 lucky digits, 7 is lucky number, so the answer is \"YES\".In the third sample there are no lucky digits, so the answer is \"NO\".","prob_desc_output_spec":"Print on the single line \"YES\" if n is a nearly lucky number. Otherwise, print \"NO\" (without the quotes).","prob_desc_output_to":"standard output","prob_desc_description":"Petya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.Unfortunately, not all numbers are lucky. Petya calls a number nearly lucky if the number of lucky digits in it is a lucky number. He wonders whether number n is a nearly lucky number.","hidden_unit_tests":"[{\"input\": \"40047\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"7747774\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"474404774\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"4744000695826\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"10000000004744744\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"446486416781684178\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"7777\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"87414417444\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"111222333444555667\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"4700\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"3794555488744477\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"444444444444444444\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"474447447774444774\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"777777777777777\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"34777745021000000\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"963\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"855474448854788540\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"999999999999994744\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"400000000474\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"123456789123456789\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"740577777584945874\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"7777777\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"4444000111222333\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"9847745885202111\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"123456000000\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"4744447444444\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"7477\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"4747477\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"777777777444444444\\r\\n\", \"output\": [\"NO\"]}]","length":36,"num_hidden_unit_tests":34}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"4 3\\n2 3 2 1\", \"3 4\\n1 2 1\"]","prob_desc_input_spec":"The first line contains two integers n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009100). The next line contains n integers: a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009m).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"5c73d6e3770dff034d210cdd572ccf0f","prob_desc_created_at":"1401463800","source_code":"#include <iostream>\nusing namespace std;\nint main()\n{\n    int n,a,c=0,k=0;\n    cin>>n>>a;\n    int*arr=new int[n];\n    for(int i=0;i<n;i++)\n        cin>>arr[i];\n        if(n==1)\n        {\n            cout<<1;\n            return 0;\n        }\nfor(int i=0;i<n;i++)\n{\n    if((arr[i]+c)==a)\n    {\n    k++;\n     c=0;\n    }\n    else if(((arr[i]+c)<a)&&(i!=n-1))\n    {\n        c+=arr[i];\n    }\n    else if(((arr[i]+c)<a)&&(i==n-1))\n    {\n        k++;\n    }\n    else if(((arr[i]+c)>a)&&(i!=n-1))\n    {\n        k++;\n        c=arr[i];\n    }\n    else if(((arr[i]+c)>a)&&(i==n-1))\n        k+=2;\n}\ncout<<k;\n  delete[]arr;\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"3\", \"1\"]","lang_cluster":"C++","code_uid":"70626e8f3f355f7865c255b97be2082d","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the number of buses that is needed to transport all n groups to the dacha countryside.","prob_desc_output_to":"standard output","prob_desc_description":"It's that time of the year when the Russians flood their countryside summer cottages (dachas) and the bus stop has a lot of people. People rarely go to the dacha on their own, it's usually a group, so the people stand in queue by groups.The bus stop queue has n groups of people. The i-th group from the beginning has ai people. Every 30 minutes an empty bus arrives at the bus stop, it can carry at most m people. Naturally, the people from the first group enter the bus first. Then go the people from the second group and so on. Note that the order of groups in the queue never changes. Moreover, if some group cannot fit all of its members into the current bus, it waits for the next bus together with other groups standing after it in the queue.Your task is to determine how many buses is needed to transport all n groups to the dacha countryside.","hidden_unit_tests":"[{\"input\": \"4 3\\r\\n2 3 2 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3 4\\r\\n1 2 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 5\\r\\n4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5 1\\r\\n1 1 1 1 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"6 4\\r\\n1 3 2 3 4 1\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"6 8\\r\\n6 1 1 1 4 5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"10 10\\r\\n1 10 1 10 1 1 7 8 6 7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"100 100\\r\\n85 50 17 89 65 89 5 20 86 26 16 21 85 14 44 31 87 31 6 2 48 67 8 80 79 1 48 36 97 1 5 30 79 50 78 12 2 55 76 100 54 40 26 81 97 96 68 56 87 14 51 17 54 37 52 33 69 62 38 63 74 15 62 78 9 19 67 2 60 58 93 60 18 96 55 48 34 7 79 82 32 58 90 67 20 50 27 15 7 89 98 10 11 15 99 49 4 51 77 52\\r\\n\", \"output\": [\"63\"]}, {\"input\": \"10 1\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"10 2\\r\\n2 2 1 1 1 1 1 2 1 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"10 3\\r\\n1 3 1 1 3 2 2 2 3 3\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"10 4\\r\\n2 1 1 1 3 4 4 4 1 2\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"10 5\\r\\n2 2 3 4 4 1 5 3 1 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"100 3\\r\\n1 2 3 2 1 2 2 3 1 3 3 2 2 1 1 2 2 1 1 1 1 2 3 3 2 1 1 2 2 2 3 3 3 2 1 3 1 3 3 2 3 1 2 2 2 3 2 1 1 3 3 3 3 2 1 1 2 3 2 2 3 2 3 2 2 3 2 2 2 2 3 3 3 1 3 3 1 1 2 3 2 2 2 2 3 3 3 2 1 2 3 1 1 2 3 3 1 3 3 2\\r\\n\", \"output\": [\"83\"]}, {\"input\": \"100 7\\r\\n4 7 4 7 7 4 7 3 5 6 3 5 4 3 7 2 7 2 4 1 6 3 3 7 4 4 5 4 3 6 4 3 2 2 1 4 4 1 7 3 7 7 1 3 1 5 4 1 5 3 5 2 2 1 5 5 1 5 2 7 5 5 1 5 5 4 6 5 1 3 5 6 7 4 1 3 3 4 3 2 7 6 5 7 2 7 1 1 2 2 3 1 3 7 1 3 2 1 1 7\\r\\n\", \"output\": [\"71\"]}, {\"input\": \"100 10\\r\\n3 4 8 10 8 6 4 3 7 7 6 2 3 1 3 10 1 7 9 3 5 5 2 6 2 9 1 7 4 2 4 1 6 1 7 10 2 5 3 7 6 4 6 2 8 8 8 6 6 10 3 7 4 3 4 1 7 9 3 6 3 6 1 4 9 3 8 1 10 1 4 10 7 7 9 5 3 8 10 2 1 10 8 7 10 8 5 3 1 2 1 10 6 1 5 3 3 5 7 2\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"100 15\\r\\n3 12 8 3 11 14 12 14 1 11 13 3 5 13 4 14 2 11 7 8 12 9 15 7 15 1 4 11 6 12 1 3 8 13 1 8 14 4 3 14 1 3 1 6 10 15 13 11 12 1 14 13 11 14 11 3 12 7 3 15 14 4 5 6 5 14 7 14 6 2 6 12 6 13 13 1 9 13 15 11 6 3 15 11 9 4 15 8 15 12 1 15 10 10 4 1 15 1 4 1\\r\\n\", \"output\": [\"71\"]}, {\"input\": \"100 30\\r\\n7 14 22 16 11 13 7 29 20 19 22 6 12 16 1 8 27 21 22 3 15 27 20 12 4 19 1 26 26 22 25 17 29 25 16 29 29 28 16 26 25 14 16 20 5 21 5 15 19 13 17 21 17 19 23 13 1 25 6 30 16 19 12 10 28 8 15 13 14 24 19 30 12 19 22 1 3 14 16 3 20 26 15 19 9 10 19 27 2 16 10 22 15 13 19 3 24 9 8 13\\r\\n\", \"output\": [\"71\"]}, {\"input\": \"100 40\\r\\n39 19 13 36 11 21 32 12 1 2 39 26 32 39 24 1 4 19 10 4 16 39 32 34 13 24 30 35 3 10 8 18 13 12 39 27 31 40 37 20 17 17 37 5 10 12 22 17 7 1 31 13 11 10 2 6 22 16 2 4 9 27 6 35 22 16 22 30 33 2 26 20 35 19 40 37 19 17 21 28 37 28 40 4 5 4 35 19 26 36 19 12 21 20 21 30 9 16 9 32\\r\\n\", \"output\": [\"65\"]}, {\"input\": \"100 50\\r\\n2 46 4 6 38 19 15 34 10 35 37 30 3 25 5 45 40 45 33 31 6 20 10 44 11 9 2 14 35 5 9 23 20 2 48 22 25 35 38 31 24 33 35 16 4 30 27 10 12 22 6 24 12 30 23 21 14 12 32 21 7 12 25 43 18 34 34 28 47 13 28 43 18 39 44 42 35 26 35 14 8 29 32 20 29 3 20 6 20 9 9 27 8 42 10 37 42 27 8 1\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"100 60\\r\\n34 21 39 17 48 46 23 56 46 52 50 39 55 48 54 38 32 38 24 26 44 12 28 9 25 26 10 52 42 60 41 3 16 60 44 29 27 55 19 19 19 57 45 59 29 35 5 14 50 47 57 48 16 7 12 36 58 31 37 58 30 50 19 11 10 41 59 57 49 41 33 9 12 11 53 50 60 51 21 9 44 23 1 16 4 15 17 57 15 17 46 50 18 52 43 24 47 50 19 18\\r\\n\", \"output\": [\"74\"]}, {\"input\": \"100 90\\r\\n74 65 49 41 3 79 61 83 50 40 13 57 90 14 62 77 36 10 3 5 5 40 50 75 32 26 3 71 79 54 88 50 46 20 42 59 30 36 83 86 60 62 82 68 62 80 18 65 28 28 81 74 62 33 61 35 33 83 90 72 6 6 51 4 22 20 29 10 8 3 84 69 12 17 24 16 12 64 80 74 68 59 1 59 15 59 37 58 79 83 51 56 81 14 37 45 19 31 61 90\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"100 99\\r\\n69 46 76 47 71 9 66 46 78 17 96 83 56 96 29 3 43 48 79 23 93 61 19 9 29 72 15 84 93 46 71 87 11 43 96 44 54 75 3 66 2 95 46 32 69 52 79 38 57 53 37 60 71 82 28 31 84 58 89 40 62 74 22 50 45 38 99 67 24 28 28 12 69 88 33 10 31 71 46 7 42 81 54 81 96 44 8 1 20 24 28 19 54 35 69 32 71 13 66 15\\r\\n\", \"output\": [\"68\"]}, {\"input\": \"90 100\\r\\n25 52 88 89 36 17 57 64 66 11 89 61 54 92 48 51 18 42 44 92 6 14 67 100 16 21 17 88 85 73 33 11 94 84 56 72 4 80 90 78 96 5 62 70 54 70 94 80 10 91 100 89 98 87 69 74 88 63 53 79 38 94 89 52 21 82 67 79 100 81 2 40 30 69 34 15 12 33 87 52 95 18 51 30 15 39 30 99 46 84\\r\\n\", \"output\": [\"67\"]}, {\"input\": \"5 100\\r\\n14 67 15 28 21\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10 100\\r\\n2 17 53 94 95 57 36 47 68 48\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1 100\\r\\n18\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"30 100\\r\\n56 7 99 83 2 65 35 53 99 36 42 57 13 37 68 52 87 11 50 23 86 24 32 39 97 6 64 1 18 86\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"60 100\\r\\n18 75 43 88 45 43 20 59 59 79 62 39 53 21 28 46 54 53 97 81 18 15 2 95 84 9 36 70 30 76 17 19 83 40 45 32 31 70 23 14 44 35 79 84 97 96 99 60 3 73 64 83 6 12 67 86 70 89 18 61\\r\\n\", \"output\": [\"40\"]}, {\"input\": \"1 73\\r\\n24\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 4\\r\\n1 4 4 4\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"2 6\\r\\n1 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 5\\r\\n5 5\\r\\n\", \"output\": [\"2\"]}]","length":41,"num_hidden_unit_tests":34}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2\\n1 2\", \"3\\n2 4 6\", \"2\\n12 18\", \"5\\n45 12 27 30 18\"]","prob_desc_input_spec":"The first line contains an integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100). Then the second line contains n integers: x1, x2, ..., xn (1\u2009\u2264\u2009xi\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"042cf938dc4a0f46ff33d47b97dc6ad4","prob_desc_created_at":"1391442000","source_code":"#include<stdio.h>\n\n\n\nint n,i;\nint a[100];\n\nvoid docfile()\n{\n\n  scanf(\"%d\",&n);\n  for (i=0;i<=n-1;i++)\n      scanf(\"%d\",&a[i]);\n\n}\n\nint UCLN(int x,int y)\n  {\n if (y%x==0)\n return x;\n else \n return UCLN(y%x,x);\n }\n        \nint main ()\n    {\n    int t;\n    docfile();\n    t=a[0];\n    for (i=1;i<=n-1;i++)\n    {\n    if (t<a[i])\n        t=UCLN(t,a[i]);\n    else\n        t=UCLN(a[i],t);\n    }\n    printf (\"%d\",t*n);\n\n    return 0;\n    }\n  \n","prob_desc_sample_outputs":"[\"2\", \"6\", \"12\", \"15\"]","lang_cluster":"C++","code_uid":"3d5d15f653538b1596f6e44cae7a7cb4","prob_desc_notes":"NoteIn the first example the optimal way is to do the assignment: x2 = x2 - x1.In the second example the optimal sequence of operations is: x3 = x3 - x2, x2 = x2 - x1.","prob_desc_output_spec":"Output a single integer \u2014 the required minimal sum.","prob_desc_output_to":"standard output","prob_desc_description":"Fox Ciel is playing a game with numbers now. Ciel has n positive integers: x1, x2, ..., xn. She can do the following operation as many times as needed: select two different indexes i and j such that xi &gt; xj hold, and then apply assignment xi = xi - xj. The goal is to make the sum of all numbers as small as possible.Please help Ciel to find this minimal sum.","hidden_unit_tests":"[{\"input\": \"2\\r\\n1 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n2 4 6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2\\r\\n12 18\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"5\\r\\n45 12 27 30 18\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"2\\r\\n1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n100 100\\r\\n\", \"output\": [\"200\"]}, {\"input\": \"2\\r\\n87 58\\r\\n\", \"output\": [\"58\"]}, {\"input\": \"39\\r\\n52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52\\r\\n\", \"output\": [\"2028\"]}, {\"input\": \"59\\r\\n96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96\\r\\n\", \"output\": [\"5664\"]}, {\"input\": \"100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"10000\"]}, {\"input\": \"100\\r\\n70 70 77 42 98 84 56 91 35 21 7 70 77 77 56 63 14 84 56 14 77 77 63 70 14 7 28 91 63 49 21 84 98 56 77 98 98 84 98 14 7 56 49 28 91 98 7 56 14 91 14 98 49 28 98 14 98 98 14 70 35 28 63 28 49 63 63 56 91 98 35 42 42 35 63 35 42 14 63 21 77 56 42 77 35 91 56 21 28 84 56 70 70 91 98 70 84 63 21 98\\r\\n\", \"output\": [\"700\"]}, {\"input\": \"39\\r\\n63 21 21 42 21 63 21 84 42 21 84 63 42 63 84 84 84 42 42 84 21 63 42 63 42 42 63 42 42 63 84 42 21 84 21 63 42 21 42\\r\\n\", \"output\": [\"819\"]}, {\"input\": \"59\\r\\n70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70\\r\\n\", \"output\": [\"4130\"]}, {\"input\": \"87\\r\\n44 88 88 88 88 66 88 22 22 88 88 44 88 22 22 22 88 88 88 88 66 22 88 88 88 88 66 66 44 88 44 44 66 22 88 88 22 44 66 44 88 66 66 22 22 22 22 88 22 22 44 66 88 22 22 88 66 66 88 22 66 88 66 88 66 44 88 44 22 44 44 22 44 88 44 44 44 44 22 88 88 88 66 66 88 44 22\\r\\n\", \"output\": [\"1914\"]}, {\"input\": \"15\\r\\n63 63 63 63 63 63 63 63 63 63 63 63 63 63 63\\r\\n\", \"output\": [\"945\"]}, {\"input\": \"39\\r\\n63 77 21 14 14 35 21 21 70 42 21 70 28 77 28 77 7 42 63 7 98 49 98 84 35 70 70 91 14 42 98 7 42 7 98 42 56 35 91\\r\\n\", \"output\": [\"273\"]}, {\"input\": \"18\\r\\n18 18 18 36 36 36 54 72 54 36 72 54 36 36 36 36 18 36\\r\\n\", \"output\": [\"324\"]}, {\"input\": \"46\\r\\n71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71\\r\\n\", \"output\": [\"3266\"]}, {\"input\": \"70\\r\\n66 11 66 11 44 11 44 99 55 22 88 11 11 22 55 44 22 77 44 77 77 22 44 55 88 11 99 99 88 22 77 77 66 11 11 66 99 55 55 44 66 44 77 44 44 55 33 55 44 88 77 77 22 66 33 44 11 22 55 44 22 66 77 33 33 44 44 44 22 33\\r\\n\", \"output\": [\"770\"]}, {\"input\": \"10\\r\\n60 12 96 48 60 24 60 36 60 60\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"20\\r\\n51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51\\r\\n\", \"output\": [\"1020\"]}, {\"input\": \"50\\r\\n58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58\\r\\n\", \"output\": [\"2900\"]}, {\"input\": \"98\\r\\n70 60 100 30 70 20 30 50 50 30 90 40 30 40 60 80 60 60 80 50 10 80 20 10 20 10 50 70 30 80 30 50 60 90 90 100 60 30 90 20 30 60 90 80 60 60 10 90 10 50 40 40 80 90 100 40 70 40 30 50 60 50 60 30 40 20 90 60 20 20 20 70 60 70 50 100 90 50 20 40 80 60 10 60 50 40 40 10 50 10 40 10 80 100 100 90 10 90\\r\\n\", \"output\": [\"980\"]}, {\"input\": \"100\\r\\n82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82\\r\\n\", \"output\": [\"8200\"]}, {\"input\": \"100\\r\\n11 87 77 93 3 54 21 93 9 71 37 23 69 85 74 3 48 99 51 31 56 19 21 96 39 6 4 4 29 69 100 42 1 22 81 53 48 49 81 61 10 7 40 61 7 71 51 59 79 44 50 35 95 80 83 8 98 40 18 94 84 49 52 74 66 69 39 37 100 44 38 62 2 80 46 31 35 53 5 60 21 49 63 55 20 53 80 53 66 34 23 92 77 50 86 63 65 24 12 70\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"2\\r\\n100 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n18 30\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"2\\r\\n3 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n1 10\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2\\r\\n8 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\n2 3 5 8 18\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"5\\r\\n2 4 1 6 8\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3\\r\\n12 10 5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n6 10 15\\r\\n\", \"output\": [\"3\"]}]","length":41,"num_hidden_unit_tests":34}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 3 2\", \"4 3 2 2\"]","prob_desc_input_spec":"A single line contains four space-separated integers a, b, c, d (1\u2009\u2264\u2009a,\u2009b,\u2009c,\u2009d\u2009\u2264\u20091000).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"b0f435fc2f7334aee0d07524bc37cb1e","prob_desc_created_at":"1376668800","source_code":"#include <cstdio>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <cstdlib>\n#include <map>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <stack>\n#include <queue>\n#include <cmath>\n#include <set>\n#include <assert.h>\n#include <bitset>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define S second\n#define F first\n#define INF 0x3f3f3f3f\n#define ll long long\n#define mod (ll)10e9\n#define B 33\n#define MAX 1000001\n#define eps 1e-15\n#define pi 3.14159\n#define ull unsigned long long\n\ntypedef vector<int> vi;\ntypedef pair<int,int>ii;\ntypedef vector<ii> vii;\n\nint a,b,c,d;\nint p[10010];\nint w[8] = {4,2,4,2,4,6,2,6};\nint f[10010];\nvi primes;\nint bs(int lo, int hi, double key, int w){\n    \/\/ printf(\"w = %d\\n\",w);\n    while(hi >= lo){\n        int mid  = (hi + lo)\/2;\n        \/\/ printf(\"%d %d %d, w\/mid = %lf\\n\",lo,hi,mid,(double)w \/ mid);\n        if(fabs((double)w \/ mid - key) <= eps) return mid;\n        else if((double)w \/ mid > key) lo = mid + 1;\n        else hi = mid - 1; \n    }\n    return 1;\n}\nvoid test(double key){\n    \/\/ printf(\"buscando %lf\\n\",key);\n    for(int i=0; i<=1000000; ++i){\n        int j = bs(1,1000000,key,i);\n        if(fabs((double) i\/j - key) <= eps){\n            if(i == 0) j = 1;\n            printf(\"%d\/%d\\n\",i,j);\n            return;\n        }\n    }\n}\nint main(void){\n    cin >> a >> b >> c >> d;\n    \/\/ sieve(10000);\n    double nd = (double)a*d\/c;\n    double nc = (double)b*c\/d;\n    if((double)(b - nd)\/b > (double)(a - nc)\/a) test((double)(b-(double)nd)\/b);\n    else test((double)(a-(double)nc)\/a);\n    return 0;\n}","prob_desc_sample_outputs":"[\"1\/3\", \"1\/4\"]","lang_cluster":"C++","code_uid":"8edf6068f4a968e93da42c69de533a18","prob_desc_notes":"NoteSample 1. Manao's monitor has a square screen. The movie has 3:2 horizontal to vertical length ratio. Obviously, the movie occupies most of the screen if the width of the picture coincides with the width of the screen. In this case, only 2\/3 of the monitor will project the movie in the horizontal dimension: Sample 2. This time the monitor's width is 4\/3 times larger than its height and the movie's frame is square. In this case, the picture must take up the whole monitor in the vertical dimension and only 3\/4 in the horizontal dimension: ","prob_desc_output_spec":"Print the answer to the problem as \"p\/q\", where p is a non-negative integer, q is a positive integer and numbers p and q don't have a common divisor larger than 1.","prob_desc_output_to":"standard output","prob_desc_description":"Manao has a monitor. The screen of the monitor has horizontal to vertical length ratio a:b. Now he is going to watch a movie. The movie's frame has horizontal to vertical length ratio c:d. Manao adjusts the view in such a way that the movie preserves the original frame ratio, but also occupies as much space on the screen as possible and fits within it completely. Thus, he may have to zoom the movie in or out, but Manao will always change the frame proportionally in both dimensions.Calculate the ratio of empty screen (the part of the screen not occupied by the movie) to the total screen size. Print the answer as an irreducible fraction p\u2009\/\u2009q.","hidden_unit_tests":"[{\"input\": \"1 1 3 2\\r\\n\", \"output\": [\"1\/3\"]}, {\"input\": \"4 3 2 2\\r\\n\", \"output\": [\"1\/4\"]}, {\"input\": \"3 4 2 3\\r\\n\", \"output\": [\"1\/9\"]}, {\"input\": \"4 4 5 5\\r\\n\", \"output\": [\"0\/1\"]}, {\"input\": \"1 1 1 1\\r\\n\", \"output\": [\"0\/1\"]}, {\"input\": \"1000 1000 1000 1000\\r\\n\", \"output\": [\"0\/1\"]}, {\"input\": \"125 992 14 25\\r\\n\", \"output\": [\"10763\/13888\"]}, {\"input\": \"999 998 997 996\\r\\n\", \"output\": [\"1\/497503\"]}, {\"input\": \"984 286 976 284\\r\\n\", \"output\": [\"10\/8733\"]}, {\"input\": \"999 1000 1000 999\\r\\n\", \"output\": [\"1999\/1000000\"]}, {\"input\": \"999 1000 998 999\\r\\n\", \"output\": [\"1\/998001\"]}, {\"input\": \"1 1000 1000 1\\r\\n\", \"output\": [\"999999\/1000000\"]}, {\"input\": \"1 999 1000 1\\r\\n\", \"output\": [\"998999\/999000\"]}, {\"input\": \"50 80 6 3\\r\\n\", \"output\": [\"11\/16\"]}, {\"input\": \"114 891 20 3\\r\\n\", \"output\": [\"971\/990\"]}, {\"input\": \"10 13 75 57\\r\\n\", \"output\": [\"27\/65\"]}, {\"input\": \"21 35 34 51\\r\\n\", \"output\": [\"1\/10\"]}, {\"input\": \"41 95 82 30\\r\\n\", \"output\": [\"16\/19\"]}, {\"input\": \"123 150 82 60\\r\\n\", \"output\": [\"2\/5\"]}, {\"input\": \"100 175 164 82\\r\\n\", \"output\": [\"5\/7\"]}, {\"input\": \"101 202 37 72\\r\\n\", \"output\": [\"1\/37\"]}, {\"input\": \"103 305 34 61\\r\\n\", \"output\": [\"67\/170\"]}, {\"input\": \"100 131 70 77\\r\\n\", \"output\": [\"21\/131\"]}, {\"input\": \"193 246 82 95\\r\\n\", \"output\": [\"1837\/20172\"]}, {\"input\": \"188 199 121 123\\r\\n\", \"output\": [\"955\/24079\"]}, {\"input\": \"289 361 162 198\\r\\n\", \"output\": [\"70\/3249\"]}, {\"input\": \"294 356 178 185\\r\\n\", \"output\": [\"4489\/31684\"]}, {\"input\": \"201 335 268 402\\r\\n\", \"output\": [\"1\/10\"]}, {\"input\": \"202 404 404 505\\r\\n\", \"output\": [\"3\/8\"]}, {\"input\": \"206 412 309 515\\r\\n\", \"output\": [\"1\/6\"]}, {\"input\": \"803 949 657 730\\r\\n\", \"output\": [\"7\/117\"]}, {\"input\": \"804 938 871 938\\r\\n\", \"output\": [\"1\/13\"]}, {\"input\": \"826 944 826 885\\r\\n\", \"output\": [\"1\/16\"]}, {\"input\": \"603 938 804 871\\r\\n\", \"output\": [\"17\/56\"]}]","length":70,"num_hidden_unit_tests":34}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"Is it a melon?\", \"Is it an apple?\", \"Is     it a banana ?\", \"Is   it an apple  and a  banana   simultaneouSLY?\"]","prob_desc_input_spec":"The single line contains a question represented by a non-empty line consisting of large and small Latin letters, spaces and a question mark. The line length does not exceed 100. It is guaranteed that the question mark occurs exactly once in the line \u2014 as the last symbol and that the line contains at least one letter.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"dea7eb04e086a4c1b3924eff255b9648","prob_desc_created_at":"1292601600","source_code":"#include<cstdio>\n#include<iostream>\n#include<string>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\nchar s[1005],a;\nint main(){\n\/\/\tfreopen(\"cp.in\",\"r\",stdin);\n\tint l=0;\n\twhile(~scanf(\"%c\",&a)) s[++l]=a;\n\tfor(int i=l;i;i--)\n\t\tif(s[i]>='a'&&s[i]<='z'||s[i]>='A'&&s[i]<='Z'){ \n\t\t\tif(s[i]=='Y'||s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'||s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y'){printf(\"YES\");return 0;}\n\t\t\tbreak;\n\t\t}\n\tprintf(\"NO\");\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"NO\", \"YES\", \"YES\", \"YES\"]","lang_cluster":"C++","code_uid":"a9eaad422e8561288820c6ca65ec5bba","prob_desc_notes":null,"prob_desc_output_spec":"Print answer for the question in a single line: YES if the answer is \"Yes\", NO if the answer is \"No\". Remember that in the reply to the question the last letter, not the last character counts. I. e. the spaces and the question mark do not count as letters.","prob_desc_output_to":"standard output","prob_desc_description":"Vasya plays the sleuth with his friends. The rules of the game are as follows: those who play for the first time, that is Vasya is the sleuth, he should investigate a \"crime\" and find out what is happening. He can ask any questions whatsoever that can be answered with \"Yes\" or \"No\". All the rest agree beforehand to answer the questions like that: if the question\u2019s last letter is a vowel, they answer \"Yes\" and if the last letter is a consonant, they answer \"No\". Of course, the sleuth knows nothing about it and his task is to understand that.Unfortunately, Vasya is not very smart. After 5 hours of endless stupid questions everybody except Vasya got bored. That\u2019s why Vasya\u2019s friends ask you to write a program that would give answers instead of them.The English alphabet vowels are: A, E, I, O, U, YThe English alphabet consonants are: B, C, D, F, G, H, J, K, L, M, N, P, Q, R, S, T, V, W, X, Z","hidden_unit_tests":"[{\"input\": \"Is it a melon?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"Is it an apple?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"  Is     it a banana ?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"Is   it an apple  and a  banana   simultaneouSLY?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"oHtSbDwzHb?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"sZecYdUvZHrXx?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"uMtXK?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"U?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"aqFDkCUKeHMyvZFcAyWlMUSQTFomtaWjoKLVyxLCw vcufPBFbaljOuHWiDCROYTcmbgzbaqHXKPOYEbuEtRqqoxBbOETCsQzhw?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"dJcNqQiFXzcbsj fItCpBLyXOnrSBPebwyFHlxUJHqCUzzCmcAvMiKL NunwOXnKeIxUZmBVwiCUfPkjRAkTPbkYCmwRRnDSLaz?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"gxzXbdcAQMuFKuuiPohtMgeypr wpDIoDSyOYTdvylcg SoEBZjnMHHYZGEqKgCgBeTbyTwyGuPZxkxsnSczotBdYyfcQsOVDVC?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"FQXBisXaJFMiHFQlXjixBDMaQuIbyqSBKGsBfTmBKCjszlGVZxEOqYYqRTUkGpSDDAoOXyXcQbHcPaegeOUBNeSD JiKOdECPOF?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"YhCuZnrWUBEed?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"hh?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"whU?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"fgwg?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"GlEmEPKrYcOnBNJUIFjszWUyVdvWw DGDjoCMtRJUburkPToCyDrOtMr?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"n?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"BueDOlxgzeNlxrzRrMbKiQdmGujEKmGxclvaPpTuHmTqBp?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"iehvZNQXDGCuVmJPOEysLyUryTdfaIxIuTzTadDbqRQGoCLXkxnyfWSGoLXebNnQQNTqAQJebbyYvHOfpUnXeWdjx?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"                                                                                                J  ?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"       j                                                                                           ?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"                         o                           ?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"                                                              T             ?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"                      q             ?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"       j                                                                                     ?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"                                                   c  ?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"         B  ?\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"LuhxDHVwMPTtUIUMIQTuQETgXCOQPsfdFlyHvpfOVedjUTpGLAZGOHloIjJJtOLAlHPivzA?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"wmztmzFfwbGyOmNHENUFMTsFEMWYA?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"wGsfZCSwN PEUhNUrLfABrxA?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"mCDHENXjYbgMdBimAdPnewaHfpGWowjWrVAdvWczjw  iDcUbyzMsmsnwbviiKiAyGVA?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"ARIWnwqFqxsQXsXXzHqvFjxOCttAGPUzDtWzsenPYdNXuFOIUGYZsLLK IaoxiyjBBRThoelwdPTkuCQfcBLUEJpCPIrVZlvUWA?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \" PslvVpgpN BXkMFBEVXsyZFIQbBEFxGkYTeXKrOdcmhbiTUatYRUoYAayrchqbksswIlfIjerZPqptvCGnMUhyrQSvwltRhFzA?\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"HpBkttwSjBXDmyleGiRWNUMPaAIE uzTrp KJDzaUiCdsMYOoWKHoUhWUoecCPmACymMUUbGav UMRpCytPETwNFAObZJA?\\r\\n\", \"output\": [\"YES\"]}]","length":19,"num_hidden_unit_tests":35}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 1\\n2 1 4\", \"3 0\\n7 7 7\", \"6 3\\n1 3 4 6 9 10\"]","prob_desc_input_spec":"The first line contains two integers n and d (1\u2009\u2264\u2009n\u2009\u2264\u2009100,\u20090\u2009\u2264\u2009d\u2009\u2264\u2009100)\u00a0\u2014 the amount of points and the maximum allowed diameter respectively. The second line contains n space separated integers (1\u2009\u2264\u2009xi\u2009\u2264\u2009100)\u00a0\u2014 the coordinates of the points.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"6bcb324c072f796f4d50bafea5f624b2","prob_desc_created_at":"1519464900","source_code":"#include <iostream>\n#include <algorithm>\nusing namespace std;\nint main(int argc, const char * argv[]) {\n    int n,d;\n    cin>>n>>d;\n    int a[n];\n    int ans[n];\n    for(int i=0;i<n;i++){\n        cin>>a[i];\n    }\n    sort(a,a+n);\n    for(int f=0;f<n;f++){\n        for(int i=n-1;i>=f;i--){\n            if(a[i]-a[f]<=d){\n                ans[f] = n-1-i+f;\n                break;\n            }\n        }\n    }\n    sort(ans,ans+n);\n    cout<<ans[0];\n    return 0;\n}","prob_desc_sample_outputs":"[\"1\", \"0\", \"3\"]","lang_cluster":"C++","code_uid":"bc89c1c8a60dc81f52ed97a95c83e6b1","prob_desc_notes":"NoteIn the first test case the optimal strategy is to remove the point with coordinate 4. The remaining points will have coordinates 1 and 2, so the diameter will be equal to 2\u2009-\u20091\u2009=\u20091.In the second test case the diameter is equal to 0, so its is unnecessary to remove any points. In the third test case the optimal strategy is to remove points with coordinates 1, 9 and 10. The remaining points will have coordinates 3, 4 and 6, so the diameter will be equal to 6\u2009-\u20093\u2009=\u20093.","prob_desc_output_spec":"Output a single integer\u00a0\u2014 the minimum number of points you have to remove.","prob_desc_output_to":"standard output","prob_desc_description":"We've got no test cases. A big olympiad is coming up. But the problemsetters' number one priority should be adding another problem to the round. The diameter of a multiset of points on the line is the largest distance between two points from this set. For example, the diameter of the multiset {1,\u20093,\u20092,\u20091} is 2.Diameter of multiset consisting of one point is 0.You are given n points on the line. What is the minimum number of points you have to remove, so that the diameter of the multiset of the remaining points will not exceed d?","hidden_unit_tests":"[{\"input\": \"3 1\\r\\n2 1 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 0\\r\\n7 7 7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 3\\r\\n1 3 4 6 9 10\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"11 5\\r\\n10 11 12 13 14 15 16 17 18 19 20\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"1 100\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 10\\r\\n22 75 26 45 72 81 47 29 97 2 75 25 82 84 17 56 32 2 28 37 57 39 18 11 79 6 40 68 68 16 40 63 93 49 91 10 55 68 31 80 57 18 34 28 76 55 21 80 22 45 11 67 67 74 91 4 35 34 65 80 21 95 1 52 25 31 2 53 96 22 89 99 7 66 32 2 68 33 75 92 84 10 94 28 54 12 9 80 43 21 51 92 20 97 7 25 67 17 38 100\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"100 70\\r\\n22 75 26 45 72 81 47 29 97 2 75 25 82 84 17 56 32 2 28 37 57 39 18 11 79 6 40 68 68 16 40 63 93 49 91 10 55 68 31 80 57 18 34 28 76 55 21 80 22 45 11 67 67 74 91 4 35 34 65 80 21 95 1 52 25 31 2 53 96 22 89 99 7 66 32 2 68 33 75 92 84 10 94 28 54 12 9 80 43 21 51 92 20 97 7 25 67 17 38 100\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"1 10\\r\\n25\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"70 80\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 1\\r\\n25 26 27\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 5\\r\\n51 56 52 60 52 53 52 60 56 54 55 50 53 51 57 53 52 54 54 52 51 55 50 56 60 51 58 50 60 59 50 54 60 55 55 57 54 59 59 55 55 52 56 57 59 54 53 57 52 50 50 55 59 54 54 56 51 58 52 51 56 56 58 56 54 54 57 52 51 58 56 57 54 59 58 53 50 52 50 60 57 51 54 59 54 54 52 55 53 55 51 53 52 54 51 56 55 53 58 56\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"100 11\\r\\n44 89 57 64 94 96 73 96 55 52 91 73 73 93 51 62 63 85 43 75 60 78 98 55 80 84 65 75 61 88 62 71 53 57 94 85 60 96 66 96 61 72 97 64 51 44 63 82 67 86 60 57 74 85 57 79 61 94 86 78 84 56 60 75 91 91 92 62 89 85 79 57 76 97 65 56 46 78 51 69 50 52 85 80 76 71 81 51 90 71 77 60 63 62 84 59 79 84 69 81\\r\\n\", \"output\": [\"70\"]}, {\"input\": \"100 0\\r\\n22 75 26 45 72 81 47 29 97 2 75 25 82 84 17 56 32 2 28 37 57 39 18 11 79 6 40 68 68 16 40 63 93 49 91 10 55 68 31 80 57 18 34 28 76 55 21 80 22 45 11 67 67 74 91 4 35 34 65 80 21 95 1 52 25 31 2 53 96 22 89 99 7 66 32 2 68 33 75 92 84 10 94 28 54 12 9 80 43 21 51 92 20 97 7 25 67 17 38 100\\r\\n\", \"output\": [\"96\"]}, {\"input\": \"100 100\\r\\n22 75 26 45 72 81 47 29 97 2 75 25 82 84 17 56 32 2 28 37 57 39 18 11 79 6 40 68 68 16 40 63 93 49 91 10 55 68 31 80 57 18 34 28 76 55 21 80 22 45 11 67 67 74 91 4 35 34 65 80 21 95 1 52 25 31 2 53 96 22 89 99 7 66 32 2 68 33 75 92 84 10 94 28 54 12 9 80 43 21 51 92 20 97 7 25 67 17 38 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"76 32\\r\\n50 53 69 58 55 39 40 42 40 55 58 73 55 72 75 44 45 55 46 60 60 42 41 64 77 39 68 51 61 49 38 41 56 57 64 43 78 36 39 63 40 66 52 76 39 68 39 73 40 68 54 60 35 67 69 52 58 52 38 63 69 38 69 60 73 64 65 41 59 55 37 57 40 34 35 35\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"100 1\\r\\n22 75 26 45 72 81 47 29 97 2 75 25 82 84 17 56 32 2 28 37 57 39 18 11 79 6 40 68 68 16 40 63 93 49 91 10 55 68 31 80 57 18 34 28 76 55 21 80 22 45 11 67 67 74 91 4 35 34 65 80 21 95 1 52 25 31 2 53 96 22 89 99 7 66 32 2 68 33 75 92 84 10 94 28 54 12 9 80 43 21 51 92 20 97 7 25 67 17 38 100\\r\\n\", \"output\": [\"93\"]}, {\"input\": \"100 5\\r\\n22 75 26 45 72 81 47 29 97 2 75 25 82 84 17 56 32 2 28 37 57 39 18 11 79 6 40 68 68 16 40 63 93 49 91 10 55 68 31 80 57 18 34 28 76 55 21 80 22 45 11 67 67 74 91 4 35 34 65 80 21 95 1 52 25 31 2 53 96 22 89 99 7 66 32 2 68 33 75 92 84 10 94 28 54 12 9 80 43 21 51 92 20 97 7 25 67 17 38 100\\r\\n\", \"output\": [\"89\"]}, {\"input\": \"98 64\\r\\n2 29 36 55 58 15 25 33 7 16 61 1 4 24 63 26 36 16 16 3 57 39 56 7 11 24 20 12 22 10 56 5 11 39 61 52 27 54 21 6 61 36 40 52 54 5 15 52 58 23 45 39 65 16 27 40 13 64 47 24 51 29 9 18 49 49 8 47 2 64 7 63 49 10 20 26 34 3 45 66 8 46 16 32 16 38 3 6 15 17 35 48 36 5 57 29 61 15\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 56\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n\", \"output\": [\"43\"]}, {\"input\": \"100 0\\r\\n14 13 14 13 14 13 13 13 13 14 13 13 14 14 13 14 14 14 14 13 13 13 14 13 13 14 14 14 14 14 14 13 13 13 13 14 13 14 13 14 13 14 14 14 14 13 13 14 14 13 13 13 13 14 13 14 13 14 13 14 13 13 13 14 13 13 14 13 14 14 13 13 13 14 14 14 14 13 13 14 14 14 14 14 14 14 13 14 13 13 13 14 14 13 13 13 13 13 14 14\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"100 0\\r\\n14 17 18 22 19 18 19 21 19 19 22 22 19 21 24 23 24 19 25 24 24 21 20 13 26 18 17 15 25 13 17 20 20 21 13 22 27 15 18 27 19 15 16 25 18 17 18 22 19 17 18 24 14 16 18 16 22 16 17 27 18 17 18 24 22 13 14 20 23 19 16 21 19 13 14 14 25 15 27 24 26 22 16 20 16 14 21 27 15 23 23 24 27 14 24 17 19 24 15 27\\r\\n\", \"output\": [\"89\"]}, {\"input\": \"100 100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 100\\r\\n22\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 0\\r\\n22\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 99\\r\\n99\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 5\\r\\n6\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 1\\r\\n10 20 30\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 0\\r\\n1 2 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 2\\r\\n1 50 99\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"7 4\\r\\n1 3 4 9 10 11 12\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 5\\r\\n67 23\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 2\\r\\n1 4 7 9\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2 0\\r\\n1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8 1\\r\\n3 3 3 5 5 5 5 5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5 1\\r\\n3 5 5 5 6\\r\\n\", \"output\": [\"1\"]}]","length":24,"num_hidden_unit_tests":35}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\\n5 1 11 2 8\", \"4\\n1 8 8 8\", \"2\\n7 6\"]","prob_desc_input_spec":"The first line contains single integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100) - number of candidates. The second line contains n space-separated integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u20091000) - number of votes for each candidate. Limak is candidate number 1. Note that after bribing number of votes for some candidate might be zero or might be greater than 1000.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"aa8fabf7c817dfd3d585b96a07bb7f58","prob_desc_created_at":"1440865800","source_code":"#include <bits\/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n;\n    int a[10000];\n    int mx = 0;\n    int i;\n    int count = 0;\n    int f;\n\n    cin>>n;\n    for(i = 0; i < n; i++) {\n        cin>>a[i];\n    }\n    for(i = 1; i < n; i++) {\n        if(a[i] > mx) {\n            mx = a[i];\n        }\n    }\n    int x;\n    sort(a+1,a+n);\n    reverse(a+1,a+n);\n    \/*for(i = 0; i < n; i++) {\n        cout<<a[i]<<' ';\n    }\n    cout<<endl;*\/\n    if(mx == 0) {\n        cout<<0;\n        return 0;\n    }\n    int flag = 0;\n    f = a[0];\n\n    while(1) {\n        mx = 0;\n        for(i = 1; i < n; i++) {\n            if(a[i] > mx) {\n               mx = a[i];\n               x = i;\n            }\n        }\n        if(mx < f) {\n            break;\n        }\n        else {\n            f = f + 1;\n            count++;\n            a[x] = a[x] - 1;\n        }\n    }\n cout<<count;\n}\n","prob_desc_sample_outputs":"[\"4\", \"6\", \"0\"]","lang_cluster":"C++","code_uid":"a06ba6727c6bd8817c1045fdd46892ce","prob_desc_notes":"NoteIn the first sample Limak has 5 votes. One of the ways to achieve victory is to bribe 4 citizens who want to vote for the third candidate. Then numbers of votes would be 9,\u20091,\u20097,\u20092,\u20098 (Limak would have 9 votes). Alternatively, Limak could steal only 3 votes from the third candidate and 1 vote from the second candidate to get situation 9,\u20090,\u20098,\u20092,\u20098.In the second sample Limak will steal 2 votes from each candidate. Situation will be 7,\u20096,\u20096,\u20096.In the third sample Limak is a winner without bribing any citizen.","prob_desc_output_spec":"Print the minimum number of citizens Limak must bribe to have strictly more votes than any other candidate.","prob_desc_output_to":"standard output","prob_desc_description":"Limak is a grizzly bear who desires power and adoration. He wants to win in upcoming elections and rule over the Bearland.There are n candidates, including Limak. We know how many citizens are going to vote for each candidate. Now i-th candidate would get ai votes. Limak is candidate number 1. To win in elections, he must get strictly more votes than any other candidate.Victory is more important than everything else so Limak decided to cheat. He will steal votes from his opponents by bribing some citizens. To bribe a citizen, Limak must give him or her one candy - citizens are bears and bears like candies. Limak doesn't have many candies and wonders - how many citizens does he have to bribe?","hidden_unit_tests":"[{\"input\": \"5\\r\\n5 1 11 2 8\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"4\\r\\n1 8 8 8\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2\\r\\n7 6\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n100 200 57 99 1 1000 200 200 200 500\\r\\n\", \"output\": [\"451\"]}, {\"input\": \"16\\r\\n7 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\r\\n\", \"output\": [\"932\"]}, {\"input\": \"100\\r\\n47 64 68 61 68 66 69 61 69 65 69 63 62 60 68 65 64 65 65 62 63 68 60 70 63 63 65 67 70 69 68 69 61 65 63 60 60 65 61 60 70 66 66 65 62 60 65 68 61 62 67 64 66 65 67 68 60 69 70 63 65 62 64 65 67 67 69 68 66 69 70 67 65 70 60 66 70 67 67 64 69 69 66 68 60 64 62 62 68 69 67 69 60 70 69 68 62 63 68 66\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"2\\r\\n96 97\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n1000 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n999 1000 1000\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n1 2 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"7\\r\\n10 940 926 990 946 980 985\\r\\n\", \"output\": [\"817\"]}, {\"input\": \"10\\r\\n5 3 4 5 5 2 1 8 4 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"15\\r\\n17 15 17 16 13 17 13 16 14 14 17 17 13 15 17\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"20\\r\\n90 5 62 9 50 7 14 43 44 44 56 13 71 22 43 35 52 60 73 54\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"30\\r\\n27 85 49 7 77 38 4 68 23 28 81 100 40 9 78 38 1 60 60 49 98 44 45 92 46 39 98 24 37 39\\r\\n\", \"output\": [\"58\"]}, {\"input\": \"51\\r\\n90 47 100 12 21 96 2 68 84 60 2 9 33 8 45 13 59 50 100 93 22 97 4 81 51 2 3 78 19 16 25 63 52 34 79 32 34 87 7 42 96 93 30 33 33 43 69 8 63 58 57\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"77\\r\\n1000 2 2 3 1 1 1 3 3 2 1 1 3 2 2 2 3 2 3 1 3 1 1 2 2 2 3 1 1 2 2 2 3 2 1 3 3 1 2 3 3 3 2 1 3 2 1 3 3 2 3 3 2 1 3 1 1 1 2 3 2 3 1 3 1 2 1 2 2 2 1 2 2 3 2 2 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"91\\r\\n3 92 89 83 85 80 91 94 95 82 92 95 80 88 90 85 81 90 87 86 94 88 90 87 88 82 95 84 84 93 83 95 91 85 89 88 88 85 87 90 93 80 89 95 94 92 93 86 83 82 86 84 91 80 90 95 84 86 84 85 84 92 82 84 83 91 87 95 94 95 90 95 86 92 86 80 95 86 88 80 82 87 84 83 91 93 81 81 91 89 88\\r\\n\", \"output\": [\"89\"]}, {\"input\": \"100\\r\\n1 3 71 47 64 82 58 61 61 35 52 36 57 62 63 54 52 21 78 100 24 94 4 80 99 62 43 72 21 70 90 4 23 14 72 4 76 49 71 96 96 99 78 7 32 11 14 61 19 69 1 68 100 77 86 54 14 86 47 53 30 88 67 66 61 70 17 63 40 5 99 53 38 31 91 18 41 5 77 61 53 30 87 21 23 54 52 17 23 75 58 99 99 63 20 1 78 72 28 11\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"100\\r\\n1 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"94\\r\\n3 100 100 99 99 99 100 99 99 99 99 99 100 99 100 100 99 100 99 99 100 99 100 99 100 100 100 99 100 99 100 99 100 99 99 99 100 99 99 99 99 99 100 99 100 100 99 100 99 99 99 99 100 99 100 99 99 99 100 100 99 100 100 99 99 100 100 100 99 100 99 99 99 99 99 100 100 100 100 100 100 100 100 100 99 99 99 99 100 99 100 99 100 100\\r\\n\", \"output\": [\"97\"]}, {\"input\": \"97\\r\\n99 99 98 98 100 98 99 99 98 100 100 100 99 99 100 99 99 98 99 99 98 98 98 100 100 99 98 99 100 98 99 98 98 100 98 99 100 98 98 99 98 98 99 98 100 99 99 99 99 98 98 98 100 99 100 100 99 99 100 99 99 98 98 98 100 100 98 100 100 99 98 99 100 98 98 98 98 99 99 98 98 99 100 100 98 98 99 98 99 100 98 99 100 98 99 99 100\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100\\r\\n100 55 70 81 73 51 6 75 45 85 33 61 98 63 11 59 1 8 14 28 78 74 44 80 7 69 7 5 90 73 43 78 64 64 43 92 59 70 80 19 33 39 31 70 38 85 24 23 86 79 98 56 92 63 92 4 36 8 79 74 2 81 54 13 69 44 49 63 17 76 78 99 42 36 47 71 19 90 9 58 83 53 27 2 35 51 65 59 90 51 74 87 84 48 98 44 84 100 84 93\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\n100 637 498 246 615 901 724 673 793 33 282 908 477 185 185 969 34 859 90 70 107 492 227 918 919 131 620 182 802 703 779 184 403 891 448 499 628 553 905 392 70 396 8 575 66 908 992 496 792 174 667 355 836 610 855 377 244 827 836 808 667 354 800 114 746 556 75 894 162 367 99 718 394 273 833 776 151 433 315 470 759 12 552 613 85 793 775 649 225 86 296 624 557 201 209 595 697 527 282 168\\r\\n\", \"output\": [\"749\"]}, {\"input\": \"100\\r\\n107 172 549 883 564 56 399 970 173 990 224 217 601 381 948 631 159 958 512 136 61 584 633 202 652 355 26 723 663 237 410 721 688 552 699 24 748 186 461 88 34 243 872 205 471 298 654 693 244 33 359 533 471 116 386 653 654 887 531 303 335 829 319 340 827 89 602 191 422 289 361 200 593 421 592 402 256 813 606 589 741 9 148 893 3 142 50 169 219 360 642 45 810 818 507 624 561 743 303 111\\r\\n\", \"output\": [\"729\"]}, {\"input\": \"90\\r\\n670 694 651 729 579 539 568 551 707 638 604 544 502 531 775 805 558 655 506 729 802 778 653 737 591 770 594 535 588 604 658 713 779 705 504 563 513 651 529 572 505 553 515 750 621 574 727 774 714 725 665 798 670 747 751 635 755 798 635 717 583 682 517 546 740 802 743 507 658 700 645 671 533 594 506 633 768 584 672 666 703 522 530 501 592 528 678 708 619 786\\r\\n\", \"output\": [\"111\"]}, {\"input\": \"90\\r\\n10 265 429 431 343 305 806 746 284 313 503 221 594 351 83 653 232 431 427 610 458 88 255 215 529 205 492 549 55 694 535 104 45 327 816 432 595 549 454 141 216 557 250 415 531 494 190 749 718 380 78 447 784 347 196 814 16 780 262 462 776 315 160 307 593 694 692 41 528 725 376 777 337 44 438 630 345 502 384 184 742 429 570 361 394 267 820 778 662 377\\r\\n\", \"output\": [\"714\"]}, {\"input\": \"95\\r\\n800 280 176 472 587 763 588 838 760 378 667 231 566 278 713 305 354 815 140 220 188 409 109 180 251 268 474 590 853 143 235 691 313 785 386 92 783 471 43 342 718 592 678 404 256 362 239 504 163 85 521 81 356 73 754 589 380 159 196 862 838 509 149 42 366 630 467 292 698 123 187 796 576 37 689 800 186 518 488 432 159 860 349 799 282 304 880 283 23 312 55 507 734 370 490\\r\\n\", \"output\": [\"52\"]}, {\"input\": \"100\\r\\n95 88 84 85 74 97 100 52 91 94 62 66 90 56 86 66 95 73 79 68 54 67 99 52 82 62 81 71 93 85 72 72 95 52 72 63 57 90 92 89 88 77 84 78 95 59 72 86 98 64 89 64 80 70 54 93 88 86 79 78 94 64 89 66 50 90 54 82 52 96 99 54 81 66 83 79 69 80 51 73 81 69 93 82 76 52 58 87 93 92 52 67 78 63 63 87 77 95 58 78\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"100\\r\\nr\\n\", \"output\": [\"1\"]}, {\"input\": \"100\\r\\nr\\n\", \"output\": [\"2\"]}, {\"input\": \"100\\r\\nr\\n\", \"output\": [\"99\"]}, {\"input\": \"4\\r\\n8 5 11 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n3 10 1\\r\\n\", \"output\": [\"4\"]}]","length":53,"num_hidden_unit_tests":35}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 2 2\\n1 1 1\\n1 2 3 4 5 6\", \"0 0 10\\n3 2 3\\n1 2 3 4 5 6\"]","prob_desc_input_spec":"The fist input line contains three space-separated integers x, y and z (|x|,\u2009|y|,\u2009|z|\u2009\u2264\u2009106) \u2014 the coordinates of Vasya's position in space. The second line contains three space-separated integers x1, y1, z1 (1\u2009\u2264\u2009x1,\u2009y1,\u2009z1\u2009\u2264\u2009106) \u2014 the coordinates of the box's vertex that is opposite to the vertex at point (0,\u20090,\u20090). The third line contains six space-separated integers a1,\u2009a2,\u2009...,\u2009a6 (1\u2009\u2264\u2009ai\u2009\u2264\u2009106) \u2014 the numbers that are written on the box faces.  It is guaranteed that point (x,\u2009y,\u2009z) is located strictly outside the box.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"c7889a8f64c57cf7be4df870f68f749e","prob_desc_created_at":"1349623800","source_code":"#include<bits\/stdc++.h>\n#include<cmath>\n#define ll long long\n#define fr first\n#define sc second\n#define mod 1000000007\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define mp make_pair\nusing namespace std;\n\nstruct pt{\n    double x,y,z;\n    void read(){\n        cin>>x>>y>>z;\n    }\n    double dis(pt d){\n        return (x - d.x)*(x - d.x) + (y - d.y)*(y - d.y) + (z - d.z)*(z - d.z);\n    }\n};\nint a[6];\npt eyee;\npt s;\npt c[6];\n\n\nint main(){\n\n    eyee.read();\n    s.read();\n\n    for(int i=0 ; i<6 ; i++)cin>>a[i];\n\n    int res =0 ;\n\n    if(eyee.y < 0)res += a[0];\n    if(eyee.y > s.y)res += a[1];\n    if(eyee.z < 0)res += a[2];\n    if(eyee.z > s.z)res += a[3];\n    if(eyee.x < 0)res += a[4];\n    if(eyee.x > s.x)res += a[5];\n\n\n    cout<<res;\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"12\", \"4\"]","lang_cluster":"C++","code_uid":"c19a00b1a689bba111556ea51d4da2df","prob_desc_notes":"NoteThe first sample corresponds to perspective, depicted on the picture. Vasya sees numbers a2 (on the top face that is the darkest), a6 (on the right face that is the lightest) and a4 (on the left visible face).In the second sample Vasya can only see number a4.","prob_desc_output_spec":"Print a single integer \u2014 the sum of all numbers on the box faces that Vasya sees.","prob_desc_output_to":"standard output","prob_desc_description":"One day Vasya was going home when he saw a box lying on the road. The box can be represented as a rectangular parallelepiped. Vasya needed no time to realize that the box is special, as all its edges are parallel to the coordinate axes, one of its vertices is at point (0,\u20090,\u20090), and the opposite one is at point (x1,\u2009y1,\u2009z1). The six faces of the box contain some numbers a1,\u2009a2,\u2009...,\u2009a6, exactly one number right in the center of each face.  The numbers are located on the box like that:   number a1 is written on the face that lies on the ZOX plane;  a2 is written on the face, parallel to the plane from the previous point;  a3 is written on the face that lies on the XOY plane;  a4 is written on the face, parallel to the plane from the previous point;  a5 is written on the face that lies on the YOZ plane;  a6 is written on the face, parallel to the plane from the previous point. At the moment Vasya is looking at the box from point (x,\u2009y,\u2009z). Find the sum of numbers that Vasya sees. Note that all faces of the box are not transparent and Vasya can't see the numbers through the box. The picture contains transparent faces just to make it easier to perceive. You can consider that if Vasya is looking from point, lying on the plane of some face, than he can not see the number that is written on this face. It is enough to see the center of a face to see the corresponding number for Vasya. Also note that Vasya always reads correctly the ai numbers that he sees, independently of their rotation, angle and other factors (that is, for example, if Vasya sees some ai\u2009=\u20096, then he can't mistake this number for 9 and so on). ","hidden_unit_tests":"[{\"input\": \"2 2 2\\r\\n1 1 1\\r\\n1 2 3 4 5 6\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"0 0 10\\r\\n3 2 3\\r\\n1 2 3 4 5 6\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"0 1 2\\r\\n1 1 1\\r\\n634728 627299 454463 927148 298618 186257\\r\\n\", \"output\": [\"927148\"]}, {\"input\": \"5 2 -4\\r\\n1 1 1\\r\\n279519 704273 181008 670653 198973 996401\\r\\n\", \"output\": [\"1881682\"]}, {\"input\": \"5 5 0\\r\\n3 1 3\\r\\n832224 636838 995053 211585 505442 341920\\r\\n\", \"output\": [\"978758\"]}, {\"input\": \"-1 -9 14\\r\\n9 8 10\\r\\n172575 215800 344296 98651 566390 47011\\r\\n\", \"output\": [\"837616\"]}, {\"input\": \"95892 79497 69936\\r\\n7 4 6\\r\\n873850 132840 469930 271591 257864 626722\\r\\n\", \"output\": [\"1031153\"]}, {\"input\": \"-263980 -876063 613611\\r\\n2 3 14\\r\\n63640 300066 460766 222639 51956 412622\\r\\n\", \"output\": [\"338235\"]}, {\"input\": \"30 68 72\\r\\n51 54 95\\r\\n480054 561470 308678 472768 90393 992511\\r\\n\", \"output\": [\"561470\"]}, {\"input\": \"19 60 75\\r\\n11 64 92\\r\\n768641 208726 47379 514231 858941 959876\\r\\n\", \"output\": [\"959876\"]}, {\"input\": \"37 96 41\\r\\n27 74 97\\r\\n747624 148752 730329 406930 814825 993124\\r\\n\", \"output\": [\"1141876\"]}, {\"input\": \"573 79 619\\r\\n36 69 96\\r\\n955743 245262 675667 699027 275227 783730\\r\\n\", \"output\": [\"1728019\"]}, {\"input\": \"34271 -17508 -6147\\r\\n456 567 112\\r\\n804178 307516 306399 18981 989216 228388\\r\\n\", \"output\": [\"1338965\"]}, {\"input\": \"-33064 176437 217190\\r\\n181 507 575\\r\\n161371 827160 733690 99808 584032 954632\\r\\n\", \"output\": [\"1511000\"]}, {\"input\": \"967 -1346 2551\\r\\n769 331 28\\r\\n458319 885170 877010 533360 723416 248230\\r\\n\", \"output\": [\"1239909\"]}, {\"input\": \"46643 53735 -19637\\r\\n3268 9109 5377\\r\\n679826 208720 919306 797520 856404 373419\\r\\n\", \"output\": [\"1501445\"]}, {\"input\": \"7412 -524 9621\\r\\n8748 8870 1521\\r\\n1043 894084 881852 56954 415764 946495\\r\\n\", \"output\": [\"57997\"]}, {\"input\": \"409501 -349039 -285847\\r\\n4386 1034 7566\\r\\n166804 981888 780353 956617 563457 238748\\r\\n\", \"output\": [\"1185905\"]}, {\"input\": \"7669 1619 6208\\r\\n2230 2327 8551\\r\\n28791 762474 463311 687868 175185 383245\\r\\n\", \"output\": [\"383245\"]}, {\"input\": \"2581 12373 -1381\\r\\n2048 8481 7397\\r\\n118694 862180 426553 229109 698247 387794\\r\\n\", \"output\": [\"1676527\"]}, {\"input\": \"35273 82177 67365\\r\\n69755 14857 39718\\r\\n925457 138136 454985 609590 83655 611361\\r\\n\", \"output\": [\"747726\"]}, {\"input\": \"58224 94433 40185\\r\\n55683 99614 33295\\r\\n137430 61976 671256 929825 499631 90071\\r\\n\", \"output\": [\"1019896\"]}, {\"input\": \"-267768 -542892 844309\\r\\n53169 60121 20730\\r\\n760938 814929 213048 452483 867280 110687\\r\\n\", \"output\": [\"2080701\"]}, {\"input\": \"441810 183747 823363\\r\\n945702 484093 693802\\r\\n149570 186362 344439 753794 467269 643649\\r\\n\", \"output\": [\"753794\"]}, {\"input\": \"298742 556311 628232\\r\\n360973 607625 301540\\r\\n278905 531131 923271 701344 873950 969819\\r\\n\", \"output\": [\"701344\"]}, {\"input\": \"366317 904079 468911\\r\\n819427 99580 451147\\r\\n291702 801137 380674 646951 890909 998554\\r\\n\", \"output\": [\"1448088\"]}, {\"input\": \"722477 814197 501318\\r\\n670293 164127 180084\\r\\n665889 389403 663253 449990 909406 240043\\r\\n\", \"output\": [\"1079436\"]}, {\"input\": \"701521 392984 524392\\r\\n462491 968267 126043\\r\\n328074 993331 895443 352976 984911 318865\\r\\n\", \"output\": [\"671841\"]}, {\"input\": \"-827584 -680412 -103147\\r\\n897186 313672 388429\\r\\n892050 717946 505625 200144 311983 606037\\r\\n\", \"output\": [\"1709658\"]}, {\"input\": \"381718 587052 14730\\r\\n290055 960762 231879\\r\\n646112 249417 451908 49140 819134 575870\\r\\n\", \"output\": [\"575870\"]}, {\"input\": \"4 4 4\\r\\n6 3 3\\r\\n1 2 3 4 5 6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"8 4 4\\r\\n10 3 3\\r\\n1 2 3 4 5 6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"3 10 3\\r\\n6 6 6\\r\\n2 4 8 16 32 64\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 3 1\\r\\n2 2 2\\r\\n1 2 4 8 16 32\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 1 3\\r\\n2 2 2\\r\\n1 2 3 4 5 6\\r\\n\", \"output\": [\"4\"]}]","length":46,"num_hidden_unit_tests":35}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1900.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"0 0 2 3\\n1 1\\n1 2\", \"0 0 2 4\\n1 1\\n1 2\"]","prob_desc_input_spec":"The first line of the input file contains 4 integers x, y, n, d (\u2009-\u2009200\u2009\u2264\u2009x,\u2009y\u2009\u2264\u2009200,\u20091\u2009\u2264\u2009d\u2009\u2264\u2009200,\u20091\u2009\u2264\u2009n\u2009\u2264\u200920) \u2014 the initial coordinates of the dot, the distance d and the number of vectors. It is guaranteed that the initial dot is at the distance less than d from the origin of the coordinates. The following n lines each contain two non-negative numbers xi and yi (0\u2009\u2264\u2009xi,\u2009yi\u2009\u2264\u2009200) \u2014 the coordinates of the i-th vector. It is guaranteed that all the vectors are nonzero and different.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"645a6ca9a8dda6946c2cc055a4beb08f","prob_desc_created_at":"1300809600","source_code":"#include <iostream>\n#include <vector>\n#include <climits>\n#include<cstring>\n\nusing namespace std;\n\nint dp[402][402]= {};\n\nint x,y,n,d;\n\nint get(int a,int b){\n  if(a < -200 || a > 200) return -1;\n  if(b < -200 || b > 200) return -1;\n  return dp[a + 200][b+ 200];\n}\nvoid set(int a, int b, int val){\n  if(a < -200 || a > 200) return;\n  if(b < -200 || b > 200) return;\n  dp[a + 200][b+200] = val;\n  return;\n}\n\nint dist2(int a, int b){\n  return a * a + b * b;\n}\n\nint main(){\n  while(cin >> x){\n    memset(dp, 0,sizeof(dp));\n    cin >> y >> n >> d;\n\n    vector<int > a(n);    \n    vector<int > b(n);\n    for(int i = 0; i < n; i++){\n      cin >> a[i] >> b[i];\n    }\n    for(int i = -200; i <= 200; i++){\n      for(int j  = -200; j <= 200; j++){\n\tif(dist2(i, j) > d * d) {\n\t  set(i, j, -1);\n\t}\n      }\n    }\n\n    for(int rep = 0; rep < 600; rep++){\n      for(int i = -200; i <= 200; i++){\n\tfor(int j = -200; j <= 200; j++){\n\t  if(get(i, j) != 0) continue;\n\t  for(size_t k = 0; k < n; k++){\n\t    if(get(i + a[k], j + b[k]) == 1){\n\t      set(i, j, -1);\n\t      break;\n\t    }\n\t  }\n\t  bool flag = true;\n\t  for(size_t k = 0; k < n; k++){\n\t    if(get(i + a[k], j + b[k]) != -1){\n\t      flag = false;\n\t      break;\n\t    }\n\t  }\n\t  if(flag){\n\t    set(i, j, 1);\n\t  }\n\n\t}\n      }\n    }\n\n    if(get(x, y) == 1){\n      cout << \"Dasha\" <<endl;\n    }else if(get(x, y) == -1) {\n      cout << \"Anton\" <<endl;\n    }else{\n      cout << \"error\" << endl;\n    }\n\n  }\n  return 0;\n}\n","prob_desc_sample_outputs":"[\"Anton\", \"Dasha\"]","lang_cluster":"C++","code_uid":"f276446eb638580f042acf97770e42a9","prob_desc_notes":"NoteIn the first test, Anton goes to the vector (1;2), and Dasha loses. In the second test Dasha with her first move shifts the dot so that its coordinates are (2;3), and Anton loses, as he has the only possible move \u2014 to reflect relatively to the line y\u2009=\u2009x. Dasha will respond to it with the same move and return the dot in position (2;3).","prob_desc_output_spec":"You should print \"Anton\", if the winner is Anton in case of both players play the game optimally, and \"Dasha\" otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"Anton and Dasha like to play different games during breaks on checkered paper. By the 11th grade they managed to play all the games of this type and asked Vova the programmer to come up with a new game. Vova suggested to them to play a game under the code name \"dot\" with the following rules:  On the checkered paper a coordinate system is drawn. A dot is initially put in the position (x,\u2009y).  A move is shifting a dot to one of the pre-selected vectors. Also each player can once per game symmetrically reflect a dot relatively to the line y\u2009=\u2009x.  Anton and Dasha take turns. Anton goes first.  The player after whose move the distance from the dot to the coordinates' origin exceeds d, loses. Help them to determine the winner.","hidden_unit_tests":"[{\"input\": \"0 0 2 3\\r\\n1 1\\r\\n1 2\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 2 4\\r\\n1 1\\r\\n1 2\\r\\n\", \"output\": [\"Dasha\"]}, {\"input\": \"0 0 5 100\\r\\n12 105\\r\\n15 59\\r\\n21 1\\r\\n27 6\\r\\n27 76\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 5 100\\r\\n16 24\\r\\n29 6\\r\\n44 24\\r\\n66 37\\r\\n102 19\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 5 100\\r\\n4 108\\r\\n5 170\\r\\n7 30\\r\\n7 101\\r\\n21 117\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 5 100\\r\\n30 9\\r\\n53 14\\r\\n84 7\\r\\n94 18\\r\\n121 16\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 5 100\\r\\n52 144\\r\\n55 58\\r\\n56 103\\r\\n98 65\\r\\n134 16\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 5 100\\r\\n17 3\\r\\n42 24\\r\\n72 22\\r\\n72 25\\r\\n120 25\\r\\n\", \"output\": [\"Dasha\"]}, {\"input\": \"0 0 5 100\\r\\n21 38\\r\\n43 42\\r\\n59 29\\r\\n69 3\\r\\n84 52\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 5 100\\r\\n2 164\\r\\n23 107\\r\\n30 167\\r\\n46 178\\r\\n66 148\\r\\n\", \"output\": [\"Dasha\"]}, {\"input\": \"3 -1 20 200\\r\\n2 27\\r\\n12 61\\r\\n14 76\\r\\n16 20\\r\\n19 72\\r\\n20 22\\r\\n30 27\\r\\n39 61\\r\\n42 44\\r\\n45 8\\r\\n46 23\\r\\n57 13\\r\\n62 56\\r\\n64 67\\r\\n80 30\\r\\n94 34\\r\\n94 77\\r\\n100 36\\r\\n101 13\\r\\n107 9\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"3 -1 20 200\\r\\n1 139\\r\\n8 76\\r\\n10 97\\r\\n25 99\\r\\n26 147\\r\\n29 51\\r\\n48 79\\r\\n56 164\\r\\n67 80\\r\\n71 35\\r\\n89 90\\r\\n108 16\\r\\n108 127\\r\\n127 54\\r\\n137 13\\r\\n140 156\\r\\n146 104\\r\\n160 155\\r\\n164 138\\r\\n172 102\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"3 -1 20 200\\r\\n1 28\\r\\n9 80\\r\\n20 92\\r\\n29 82\\r\\n38 65\\r\\n42 9\\r\\n50 65\\r\\n67 57\\r\\n71 60\\r\\n73 51\\r\\n78 89\\r\\n86 31\\r\\n90 39\\r\\n97 96\\r\\n104 27\\r\\n115 49\\r\\n119 59\\r\\n125 18\\r\\n132 37\\r\\n133 9\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"3 -1 20 200\\r\\n3 51\\r\\n6 75\\r\\n7 105\\r\\n8 109\\r\\n12 59\\r\\n12 90\\r\\n15 71\\r\\n17 150\\r\\n18 161\\r\\n19 106\\r\\n23 71\\r\\n26 68\\r\\n34 95\\r\\n36 47\\r\\n38 29\\r\\n38 153\\r\\n41 91\\r\\n43 128\\r\\n43 164\\r\\n44 106\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"3 -1 20 200\\r\\n19 12\\r\\n24 121\\r\\n25 32\\r\\n28 19\\r\\n28 87\\r\\n29 49\\r\\n32 88\\r\\n33 70\\r\\n37 77\\r\\n54 33\\r\\n56 27\\r\\n61 59\\r\\n67 42\\r\\n73 15\\r\\n76 40\\r\\n80 73\\r\\n83 39\\r\\n91 34\\r\\n91 112\\r\\n95 95\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"-3 -14 20 200\\r\\n6 90\\r\\n7 12\\r\\n15 24\\r\\n16 67\\r\\n26 35\\r\\n34 63\\r\\n35 48\\r\\n36 30\\r\\n48 28\\r\\n56 35\\r\\n59 91\\r\\n60 34\\r\\n76 43\\r\\n77 90\\r\\n77 95\\r\\n79 34\\r\\n87 69\\r\\n93 6\\r\\n99 10\\r\\n99 41\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"-3 -14 20 200\\r\\n5 54\\r\\n10 62\\r\\n20 43\\r\\n20 79\\r\\n21 47\\r\\n32 75\\r\\n33 48\\r\\n40 61\\r\\n44 65\\r\\n52 7\\r\\n52 28\\r\\n55 65\\r\\n55 67\\r\\n59 78\\r\\n68 52\\r\\n70 20\\r\\n71 72\\r\\n76 50\\r\\n90 100\\r\\n99 9\\r\\n\", \"output\": [\"Dasha\"]}, {\"input\": \"-3 -14 20 200\\r\\n1 60\\r\\n5 47\\r\\n10 6\\r\\n14 17\\r\\n14 32\\r\\n34 93\\r\\n40 9\\r\\n43 85\\r\\n44 47\\r\\n49 59\\r\\n57 85\\r\\n68 50\\r\\n69 93\\r\\n71 42\\r\\n71 57\\r\\n73 5\\r\\n74 70\\r\\n83 41\\r\\n83 83\\r\\n89 8\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"-3 -14 20 200\\r\\n14 51\\r\\n26 54\\r\\n30 50\\r\\n38 41\\r\\n40 68\\r\\n47 12\\r\\n50 86\\r\\n63 4\\r\\n65 52\\r\\n67 83\\r\\n70 88\\r\\n71 61\\r\\n79 82\\r\\n82 53\\r\\n89 84\\r\\n90 16\\r\\n92 79\\r\\n97 37\\r\\n100 37\\r\\n100 93\\r\\n\", \"output\": [\"Dasha\"]}, {\"input\": \"-3 -14 20 200\\r\\n11 24\\r\\n13 8\\r\\n14 8\\r\\n15 44\\r\\n15 54\\r\\n20 79\\r\\n24 72\\r\\n27 7\\r\\n28 6\\r\\n30 18\\r\\n46 34\\r\\n51 5\\r\\n64 83\\r\\n69 48\\r\\n78 76\\r\\n79 2\\r\\n89 43\\r\\n92 31\\r\\n94 76\\r\\n99 64\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"12 -11 20 200\\r\\n12 147\\r\\n14 181\\r\\n14 198\\r\\n33 51\\r\\n34 93\\r\\n43 29\\r\\n47 44\\r\\n56 161\\r\\n66 111\\r\\n96 119\\r\\n102 71\\r\\n117 184\\r\\n133 69\\r\\n151 189\\r\\n152 28\\r\\n173 27\\r\\n173 120\\r\\n176 12\\r\\n183 1\\r\\n188 196\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"12 -11 20 200\\r\\n6 108\\r\\n14 188\\r\\n23 60\\r\\n28 44\\r\\n35 151\\r\\n36 82\\r\\n58 49\\r\\n65 81\\r\\n97 100\\r\\n104 26\\r\\n114 143\\r\\n136 156\\r\\n139 112\\r\\n142 119\\r\\n147 184\\r\\n148 46\\r\\n149 152\\r\\n175 178\\r\\n184 85\\r\\n187 12\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"12 -11 20 200\\r\\n11 189\\r\\n12 108\\r\\n19 190\\r\\n21 27\\r\\n24 193\\r\\n26 86\\r\\n26 123\\r\\n31 180\\r\\n39 196\\r\\n107 193\\r\\n122 46\\r\\n129 103\\r\\n131 129\\r\\n132 135\\r\\n142 51\\r\\n157 22\\r\\n161 27\\r\\n195 163\\r\\n198 55\\r\\n199 64\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"12 -11 20 200\\r\\n8 176\\r\\n11 162\\r\\n25 130\\r\\n32 124\\r\\n58 175\\r\\n59 170\\r\\n61 98\\r\\n66 37\\r\\n78 5\\r\\n87 150\\r\\n94 172\\r\\n99 171\\r\\n121 11\\r\\n121 31\\r\\n124 172\\r\\n131 71\\r\\n134 190\\r\\n162 50\\r\\n182 99\\r\\n194 119\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"12 -11 20 200\\r\\n6 80\\r\\n12 62\\r\\n14 15\\r\\n16 133\\r\\n41 28\\r\\n43 47\\r\\n79 136\\r\\n90 196\\r\\n99 151\\r\\n99 187\\r\\n119 42\\r\\n121 11\\r\\n147 132\\r\\n149 166\\r\\n161 102\\r\\n174 4\\r\\n182 122\\r\\n194 50\\r\\n200 182\\r\\n200 197\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 19 27\\r\\n1 25\\r\\n11 3\\r\\n12 38\\r\\n27 52\\r\\n35 111\\r\\n36 51\\r\\n44 7\\r\\n45 106\\r\\n58 104\\r\\n63 108\\r\\n75 4\\r\\n76 84\\r\\n89 2\\r\\n89 44\\r\\n92 23\\r\\n98 66\\r\\n111 58\\r\\n113 9\\r\\n114 76\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 15 98\\r\\n5 14\\r\\n9 133\\r\\n10 128\\r\\n15 140\\r\\n17 53\\r\\n33 43\\r\\n50 15\\r\\n69 55\\r\\n74 134\\r\\n77 100\\r\\n99 82\\r\\n100 140\\r\\n102 12\\r\\n110 65\\r\\n128 110\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 19 34\\r\\n0 116\\r\\n6 11\\r\\n6 32\\r\\n9 84\\r\\n14 3\\r\\n27 85\\r\\n42 58\\r\\n46 31\\r\\n52 104\\r\\n65 83\\r\\n66 37\\r\\n68 130\\r\\n69 69\\r\\n78 7\\r\\n78 23\\r\\n81 66\\r\\n90 27\\r\\n91 39\\r\\n96 10\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 17 141\\r\\n9 30\\r\\n9 55\\r\\n11 64\\r\\n18 37\\r\\n20 94\\r\\n23 37\\r\\n23 140\\r\\n28 134\\r\\n36 43\\r\\n38 77\\r\\n50 47\\r\\n54 42\\r\\n70 32\\r\\n74 151\\r\\n85 68\\r\\n87 53\\r\\n88 91\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"0 0 17 160\\r\\n31 75\\r\\n32 149\\r\\n49 132\\r\\n54 98\\r\\n54 100\\r\\n57 48\\r\\n65 20\\r\\n67 177\\r\\n72 76\\r\\n74 25\\r\\n99 49\\r\\n105 86\\r\\n128 116\\r\\n147 176\\r\\n156 130\\r\\n160 26\\r\\n178 177\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"-100 -100 10 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"-140 -140 2 200\\r\\n1 0\\r\\n0 1\\r\\n\", \"output\": [\"Dasha\"]}, {\"input\": \"-130 -130 20 200\\r\\n0 1\\r\\n1 0\\r\\n1 1\\r\\n31 41\\r\\n3 4\\r\\n5 2\\r\\n1 2\\r\\n3 3\\r\\n9 8\\r\\n10 2\\r\\n0 2\\r\\n0 3\\r\\n0 4\\r\\n0 5\\r\\n0 6\\r\\n2 0\\r\\n3 0\\r\\n4 0\\r\\n5 0\\r\\n6 0\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"-133 -133 20 200\\r\\n1 0\\r\\n0 1\\r\\n1 1\\r\\n2 0\\r\\n0 2\\r\\n2 1\\r\\n1 2\\r\\n3 0\\r\\n0 3\\r\\n3 1\\r\\n3 2\\r\\n3 3\\r\\n2 2\\r\\n2 3\\r\\n1 3\\r\\n4 0\\r\\n0 4\\r\\n4 1\\r\\n1 4\\r\\n2 4\\r\\n\", \"output\": [\"Anton\"]}, {\"input\": \"-12 -34 5 200\\r\\n1 0\\r\\n2 0\\r\\n3 1\\r\\n10 3\\r\\n11 4\\r\\n\", \"output\": [\"Dasha\"]}]","length":81,"num_hidden_unit_tests":35}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3\", \"11\"]","prob_desc_input_spec":"The only line of the input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091000)\u00a0\u2014 the position of the digit you need to print.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"2d46e34839261eda822f0c23c6e19121","prob_desc_created_at":"1462984500","source_code":"#include<stdio.h>\nint a[10100],b[5];\nint main()\n{\n    int i,ii,j,kk=1,k;\n    for(i=1;i<=400;i++)\n    {\n        k=0;ii=i;\n        while(ii)\n        {\n            b[k++]=ii%10;\n            ii\/=10;\n        }\n        for(j=k-1;j>=0;j--)\n            a[kk++]=b[j];\n    }\n    int n;\n    while(scanf(\"%d\",&n)!=EOF)\n    {\n        printf(\"%d\\n\",a[n]);\n    }\n    return 0;\n}\n\/*2018-02-13 14:07:19.622*\/","prob_desc_sample_outputs":"[\"3\", \"0\"]","lang_cluster":"C++","code_uid":"e520e883fe0fa8cd28a0441db9a8bd76","prob_desc_notes":"NoteIn the first sample the digit at position 3 is '3', as both integers 1 and 2 consist on one digit.In the second sample, the digit at position 11 is '0', it belongs to the integer 10.","prob_desc_output_spec":"Print the n-th digit of the line.","prob_desc_output_to":"standard output","prob_desc_description":"Every year, hundreds of people come to summer camps, they learn new algorithms and solve hard problems.This is your first year at summer camp, and you are asked to solve the following problem. All integers starting with 1 are written in one line. The prefix of these line is \"123456789101112131415...\". Your task is to print the n-th digit of this string (digits are numbered starting with 1.","hidden_unit_tests":"[{\"input\": \"3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"29\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"30\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"999\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"123\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"157\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"289\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"179\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"942\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"879\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"394\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"423\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"952\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"121\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"613\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"945\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"270\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"781\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"453\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"171\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"643\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"570\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"750\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"500\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"108\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"189\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"491\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"191\\r\\n\", \"output\": [\"0\"]}]","length":24,"num_hidden_unit_tests":36}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 10 3 3\", \"3 10 1 3\", \"100 100 1 1000\"]","prob_desc_input_spec":"The first line contains four space-separated integers k, a, b, v (2\u2009\u2264\u2009k\u2009\u2264\u20091000; 1\u2009\u2264\u2009a,\u2009b,\u2009v\u2009\u2264\u20091000) \u2014 the maximum number of sections in the box, the number of nuts, the number of divisors and the capacity of each section of the box.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"7cff20b1c63a694baca69bdf4bdb2652","prob_desc_created_at":"1394983800","source_code":"#include <bits\/stdc++.h>\n\nusing namespace std;\n\nint k, a, v, b, st, dr, piv;\n\nint check(int x){\n\tint nr = min(x * (k-1), b);\n\treturn ((x + nr) * v); \n}\n\nint main(){\n\/\/\tifstream in(\"tst.in\");\n\/\/\tofstream out(\"tst.out\");\n\tcin >> k >> a >> b >> v;\n\tst = 1;\n\tdr = 10000;\n\twhile(st <= dr){\n\t\tpiv = (st + dr) \/ 2;\n\t\tif(check(piv) >= a) dr = piv - 1;\n\t\telse st = piv + 1;\n\t}\n\tcout << st;\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"2\", \"3\", \"1\"]","lang_cluster":"C++","code_uid":"b7d203459bab9793e749f94826b5b191","prob_desc_notes":"NoteIn the first sample you can act like this:   Put two divisors to the first box. Now the first box has three sections and we can put three nuts into each section. Overall, the first box will have nine nuts.  Do not put any divisors into the second box. Thus, the second box has one section for the last nut. In the end we've put all the ten nuts into boxes.The second sample is different as we have exactly one divisor and we put it to the first box. The next two boxes will have one section each.","prob_desc_output_spec":"Print a single integer \u2014 the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"You have a nuts and lots of boxes. The boxes have a wonderful feature: if you put x (x\u2009\u2265\u20090) divisors (the spacial bars that can divide a box) to it, you get a box, divided into x\u2009+\u20091 sections.You are minimalist. Therefore, on the one hand, you are against dividing some box into more than k sections. On the other hand, you are against putting more than v nuts into some section of the box. What is the minimum number of boxes you have to use if you want to put all the nuts in boxes, and you have b divisors?Please note that you need to minimize the number of used boxes, not sections. You do not have to minimize the number of used divisors.","hidden_unit_tests":"[{\"input\": \"3 10 3 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 10 1 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"100 100 1 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5 347 20 1\\r\\n\", \"output\": [\"327\"]}, {\"input\": \"6 978 10 5\\r\\n\", \"output\": [\"186\"]}, {\"input\": \"6 856 50 35\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"8 399 13 36\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 787 48 4\\r\\n\", \"output\": [\"149\"]}, {\"input\": \"4 714 7 6\\r\\n\", \"output\": [\"112\"]}, {\"input\": \"7 915 12 24\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"8 995 3 28\\r\\n\", \"output\": [\"33\"]}, {\"input\": \"10 267 4 48\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10 697 1 34\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"7 897 49 42\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"10 849 3 28\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"477 492 438 690\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"461 790 518 105\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"510 996 830 417\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"763 193 388 346\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"958 380 405 434\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"346 991 4 4\\r\\n\", \"output\": [\"244\"]}, {\"input\": \"648 990 5 2\\r\\n\", \"output\": [\"490\"]}, {\"input\": \"810 1000 6 5\\r\\n\", \"output\": [\"194\"]}, {\"input\": \"683 995 10 1\\r\\n\", \"output\": [\"985\"]}, {\"input\": \"307 999 10 7\\r\\n\", \"output\": [\"133\"]}, {\"input\": \"974 999 3 4\\r\\n\", \"output\": [\"247\"]}, {\"input\": \"60 1000 2 2\\r\\n\", \"output\": [\"498\"]}, {\"input\": \"634 993 9 3\\r\\n\", \"output\": [\"322\"]}, {\"input\": \"579 990 8 9\\r\\n\", \"output\": [\"102\"]}, {\"input\": \"306 993 9 9\\r\\n\", \"output\": [\"102\"]}, {\"input\": \"845 996 1 1\\r\\n\", \"output\": [\"995\"]}, {\"input\": \"872 997 1 1\\r\\n\", \"output\": [\"996\"]}, {\"input\": \"2 990 1 1\\r\\n\", \"output\": [\"989\"]}, {\"input\": \"489 992 1 1\\r\\n\", \"output\": [\"991\"]}, {\"input\": \"638 1000 1 1\\r\\n\", \"output\": [\"999\"]}, {\"input\": \"2 4 1000 1\\r\\n\", \"output\": [\"2\"]}]","length":25,"num_hidden_unit_tests":36}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"6\", \"2\"]","prob_desc_input_spec":"The only line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^9$$$)\u00a0\u2014 the number of coins you have.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"95cb79597443461085e62d974d67a9a0","prob_desc_created_at":"1535898900","source_code":"#include <bits\/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int N;\n    scanf(\"%d\",&N);\n    int ans=floor(log2(1.0*N)),res=N-(1<<ans-1);\n    printf(\"%d\\n\",res==0?ans:ans+1);\n}\n","prob_desc_sample_outputs":"[\"3\", \"2\"]","lang_cluster":"C++","code_uid":"f9d3eedc564209262a94918877c5a24c","prob_desc_notes":"NoteIn the first example, three packets with $$$1$$$, $$$2$$$ and $$$3$$$ coins can be made to get any amount $$$x$$$ ($$$1\\leq x\\leq 6$$$).  To get $$$1$$$ use the packet with $$$1$$$ coin.  To get $$$2$$$ use the packet with $$$2$$$ coins.  To get $$$3$$$ use the packet with $$$3$$$ coins.  To get $$$4$$$ use packets with $$$1$$$ and $$$3$$$ coins.  To get $$$5$$$ use packets with $$$2$$$ and $$$3$$$ coins  To get $$$6$$$ use all packets. In the second example, two packets with $$$1$$$ and $$$1$$$ coins can be made to get any amount $$$x$$$ ($$$1\\leq x\\leq 2$$$).","prob_desc_output_spec":"Output a single integer\u00a0\u2014 the minimum possible number of packets, satisfying the condition above.","prob_desc_output_to":"standard output","prob_desc_description":"You have $$$n$$$ coins, each of the same value of $$$1$$$.Distribute them into packets such that any amount $$$x$$$ ($$$1 \\leq x \\leq n$$$) can be formed using some (possibly one or all) number of these packets.Each packet may only be used entirely or not used at all. No packet may be used more than once in the formation of the single $$$x$$$, however it may be reused for the formation of other $$$x$$$'s.Find the minimum number of packets in such a distribution.","hidden_unit_tests":"[{\"input\": \"6\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"96145460\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"47814355\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"33554430\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"33554431\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"33554432\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"33554434\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"946942894\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"40052789\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"781222222\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"723061816\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"108461089\\r\\n\", \"output\": [\"27\"]}, {\"input\": \"517188853\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"237913214\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"952679912\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"458841431\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"654645765\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"543654364\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"222222222\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"32453535\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"435543666\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"443566\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"56546546\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"1024\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"1023\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1025\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"1022\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"536870912\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"536870911\\r\\n\", \"output\": [\"29\"]}, {\"input\": \"536870913\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"536870911\\r\\n\", \"output\": [\"29\"]}]","length":10,"num_hidden_unit_tests":36}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3\", \"5\"]","prob_desc_input_spec":"The input contains a single line containing an integer p (2\u2009\u2264\u2009p\u2009&lt;\u20092000). It is guaranteed that p is a prime.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"3bed682b6813f1ddb54410218c233cff","prob_desc_created_at":"1363534200","source_code":"#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int inf=2000+5;\nint memo[inf][inf],m;\nint pow_mod(int x,int y)\n{\n    if(y==0)\n        return 1%m;\n\n    if(y==1)\n        return x%m;\n\n    if(~memo[x][y])\n        return memo[x][y];\n\n    int ret=pow_mod(x,y\/2) %m ;\n\n    ret=( (ret%m) * (ret%m) )%m;\n\n    return memo[x][y]=( pow_mod(x,y%2) *ret )%m;\n}\nint main()\n{\n    int x,y,temp,cnt=0;\n    bool fg;\n    cin>>m;\n    memset(memo,-1,sizeof memo);\n    for(x=1;x<m;x++)\n    {\n        fg=0;\n        for(y=1;y<m;y++)\n        {\n            temp=(pow_mod(x,y)-1+m)%m;\n\n            if(y==m-1){\n                if(temp)\n                    fg=1;\n            }\n            else if(!temp)\n                fg=1;\n        }\n        if(!fg)\n            cnt++;\n    }\n    printf(\"%d\\n\",cnt);\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"1\", \"2\"]","lang_cluster":"C++","code_uid":"3c0e45376ea7576a5d046b63a013905c","prob_desc_notes":"NoteThe only primitive root  is 2.The primitive roots  are 2 and 3.","prob_desc_output_spec":"Output on a single line the number of primitive roots .","prob_desc_output_to":"standard output","prob_desc_description":"The cows have just learned what a primitive root is! Given a prime p, a primitive root  is an integer x (1\u2009\u2264\u2009x\u2009&lt;\u2009p) such that none of integers x\u2009-\u20091,\u2009x2\u2009-\u20091,\u2009...,\u2009xp\u2009-\u20092\u2009-\u20091 are divisible by p, but xp\u2009-\u20091\u2009-\u20091 is. Unfortunately, computing primitive roots can be time consuming, so the cows need your help. Given a prime p, help the cows find the number of primitive roots .","hidden_unit_tests":"[{\"input\": \"3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1583\\r\\n\", \"output\": [\"672\"]}, {\"input\": \"997\\r\\n\", \"output\": [\"328\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1987\\r\\n\", \"output\": [\"660\"]}, {\"input\": \"1993\\r\\n\", \"output\": [\"656\"]}, {\"input\": \"1997\\r\\n\", \"output\": [\"996\"]}, {\"input\": \"1999\\r\\n\", \"output\": [\"648\"]}, {\"input\": \"1297\\r\\n\", \"output\": [\"432\"]}, {\"input\": \"163\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"1259\\r\\n\", \"output\": [\"576\"]}, {\"input\": \"821\\r\\n\", \"output\": [\"320\"]}, {\"input\": \"29\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"43\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"1949\\r\\n\", \"output\": [\"972\"]}, {\"input\": \"1879\\r\\n\", \"output\": [\"624\"]}, {\"input\": \"1759\\r\\n\", \"output\": [\"584\"]}, {\"input\": \"1597\\r\\n\", \"output\": [\"432\"]}, {\"input\": \"1619\\r\\n\", \"output\": [\"808\"]}, {\"input\": \"1277\\r\\n\", \"output\": [\"560\"]}, {\"input\": \"1097\\r\\n\", \"output\": [\"544\"]}, {\"input\": \"953\\r\\n\", \"output\": [\"384\"]}, {\"input\": \"751\\r\\n\", \"output\": [\"200\"]}, {\"input\": \"607\\r\\n\", \"output\": [\"200\"]}, {\"input\": \"509\\r\\n\", \"output\": [\"252\"]}, {\"input\": \"431\\r\\n\", \"output\": [\"168\"]}, {\"input\": \"317\\r\\n\", \"output\": [\"156\"]}, {\"input\": \"211\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"127\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"40\"]}, {\"input\": \"31\\r\\n\", \"output\": [\"8\"]}]","length":50,"num_hidden_unit_tests":36}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3\\n1 1\\n1 2\\n1 111111111111\", \"5\\n0 69\\n1 194\\n1 139\\n0 47\\n1 66\", \"10\\n4 1825\\n3 75\\n3 530\\n4 1829\\n4 1651\\n3 187\\n4 584\\n4 255\\n4 774\\n2 474\"]","prob_desc_input_spec":"The first line contains one integer q (1\u2009\u2264\u2009q\u2009\u2264\u200910)\u00a0\u2014 the number of Nephren's questions. Each of the next q lines describes Nephren's question and contains two integers n and k (0\u2009\u2264\u2009n\u2009\u2264\u2009105,\u20091\u2009\u2264\u2009k\u2009\u2264\u20091018).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"da09a893a33f2bf8fd00e321e16ab149","prob_desc_created_at":"1512223500","source_code":"\/\/ Artur Kraska, II UWr\n\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#include <list>\n#include <set>\n#include <map>\n\n#define forr(i, n)                  for(int i=0; i<n; i++)\n#define FOREACH(iter, coll)         for(typeof(coll.begin()) iter = coll.begin(); iter != coll.end(); ++iter)\n#define FOREACHR(iter, coll)        for(typeof(coll.rbegin()) iter = coll.rbegin(); iter != coll.rend(); ++iter)\n#define lbound(P,R,PRED)            ({typeof(P) X=P,RRR=(R), PPP = P; while(PPP<RRR) {X = (PPP+(RRR-PPP)\/2); if(PRED) RRR = X; else PPP = X+1;} PPP;})\n#define testy()                     int _tests; scanf(\"%d\", &_tests); FOR(_test, 1, _tests)\n#define CLEAR(tab)                  memset(tab, 0, sizeof(tab))\n#define CONTAIN(el, coll)           (coll.find(el) != coll.end())\n#define FOR(i, a, b)                for(int i=a; i<=b; i++)\n#define FORD(i, a, b)               for(int i=a; i>=b; i--)\n#define MP                          make_pair\n#define PB                          push_back\n#define deb(X)                      X;\n\n#define M 1000000007\n#define INF 1000000000000000007ll\n\nusing namespace std;\n\nchar pocz[] = \"What are you doing while sending \\\"\";\nchar sr[] = \"\\\"? Are you busy? Will you send \\\"\";\nchar base[] = \"What are you doing at the end of the world? Are you busy? Will you save us?\";\nchar kon[] = \"\\\"?\";\n\nint n, m, q;\nlong long l[1000007];\nlong long k;\nint dl0 = strlen(base);\nint dpocz = strlen(pocz);\nint dsr = strlen(sr);\nint dkon = strlen(kon);\n\nlong long len(int nr)\n{\n    if(nr >= 55)\n        return INF;\n    return l[nr];\n}\n\nvoid wypisz(int n, long long k)\n{\n    if(n == 0)\n    {\n\/\/        cout << \"wypisuje \" << k << endl;\n        cout << base[k];\n        return ;\n    }\n\n\/\/    cout << k << \" \" << dpocz << endl;\n    if(k < dpocz)\n        cout << pocz[k];\n    else\n    {\n        k -= dpocz;\n        if(k < len(n-1))\n        {\n            wypisz(n-1, k);\n        }\n        else\n        {\n            k -= len(n-1);\n            if(k < dsr)\n                cout << sr[k];\n            else\n            {\n                k -= dsr;\n                if(k < len(n-1))\n                    wypisz(n-1, k);\n                else\n                {\n                    k -= len(n-1);\n                    cout << kon[k];\n                }\n            }\n        }\n    }\n}\n\nint main()\n{\n    l[0] = dl0;\n    FOR(i, 1, 100)\n    {\n        l[i] = dpocz + dsr + dkon + 2*l[i-1];\n\/\/        cout << i << \" -> \" << l[i] << endl;\n    }\n    testy()\n    {\n        cin >> n >> k;\n        k--;\n\/\/        cout << len(n) << endl;\n        if(k >= len(n))\n            cout << '.';\n        else\n        {\n            wypisz(n, k);\n        }\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"Wh.\", \"abdef\", \"Areyoubusy\"]","lang_cluster":"C++","code_uid":"9679a8bfe8642d129caa3cc8e833e154","prob_desc_notes":"NoteFor the first two examples, refer to f0 and f1 given in the legend.","prob_desc_output_spec":"One line containing q characters. The i-th character in it should be the answer for the i-th query.","prob_desc_output_to":"standard output","prob_desc_description":"What are you doing at the end of the world? Are you busy? Will you save us?Nephren is playing a game with little leprechauns.She gives them an infinite array of strings, f0... \u221e.f0 is \"What are you doing at the end of the world? Are you busy? Will you save us?\".She wants to let more people know about it, so she defines fi\u2009=\u2009 \"What are you doing while sending \"fi\u2009-\u20091\"? Are you busy? Will you send \"fi\u2009-\u20091\"?\" for all i\u2009\u2265\u20091.For example, f1 is\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"?\". Note that the quotes in the very beginning and in the very end are for clarity and are not a part of f1.It can be seen that the characters in fi are letters, question marks, (possibly) quotation marks and spaces.Nephren will ask the little leprechauns q times. Each time she will let them find the k-th character of fn. The characters are indexed starting from 1. If fn consists of less than k characters, output '.' (without quotes).Can you answer her queries?","hidden_unit_tests":"[{\"input\": \"3\\r\\n1 1\\r\\n1 2\\r\\n1 111111111111\\r\\n\", \"output\": [\"Wh.\"]}, {\"input\": \"5\\r\\n0 69\\r\\n1 194\\r\\n1 139\\r\\n0 47\\r\\n1 66\\r\\n\", \"output\": [\"abdef\"]}, {\"input\": \"10\\r\\n4 1825\\r\\n3 75\\r\\n3 530\\r\\n4 1829\\r\\n4 1651\\r\\n3 187\\r\\n4 584\\r\\n4 255\\r\\n4 774\\r\\n2 474\\r\\n\", \"output\": [\"Areyoubusy\"]}, {\"input\": \"1\\r\\n0 1\\r\\n\", \"output\": [\"W\"]}, {\"input\": \"1\\r\\n999 1000000000000000000\\r\\n\", \"output\": [\"?\"]}, {\"input\": \"10\\r\\n1 8\\r\\n1 8\\r\\n9 5\\r\\n0 1\\r\\n8 1\\r\\n7 3\\r\\n5 2\\r\\n0 9\\r\\n4 6\\r\\n9 4\\r\\n\", \"output\": [\"ee WWah at\"]}, {\"input\": \"10\\r\\n5 235941360876088213\\r\\n10 65160787148797531\\r\\n0 531970131175601601\\r\\n2 938108094014908387\\r\\n3 340499457696664259\\r\\n5 56614532774539063\\r\\n5 719524142056884004\\r\\n10 370927072502555372\\r\\n2 555965798821270052\\r\\n10 492559401050725258\\r\\n\", \"output\": [\"..........\"]}, {\"input\": \"10\\r\\n72939 670999605706502447\\r\\n67498 428341803949410086\\r\\n62539 938370976591475035\\r\\n58889 657471364021290792\\r\\n11809 145226347556228466\\r\\n77111 294430864855433173\\r\\n29099 912050147755964704\\r\\n27793 196249143894732547\\r\\n118 154392540400153863\\r\\n62843 63234003203996349\\r\\n\", \"output\": [\"?usaglrnyh\"]}, {\"input\": \"10\\r\\n74 752400948436334811\\r\\n22 75900251524550494\\r\\n48 106700456127359025\\r\\n20 623493261724933249\\r\\n90 642991963097110817\\r\\n42 47750435275360941\\r\\n24 297055789449373682\\r\\n65 514620361483452045\\r\\n99 833434466044716497\\r\\n0 928523848526511085\\r\\n\", \"output\": [\"h... .. d.\"]}, {\"input\": \"10\\r\\n26302 2898997\\r\\n2168 31686909\\r\\n56241 27404733\\r\\n9550 44513376\\r\\n70116 90169838\\r\\n14419 95334944\\r\\n61553 16593205\\r\\n85883 42147334\\r\\n55209 74676056\\r\\n57866 68603505\\r\\n\", \"output\": [\"donts ly o\"]}, {\"input\": \"9\\r\\n50 161003686678495163\\r\\n50 161003686678495164\\r\\n50 161003686678495165\\r\\n51 322007373356990395\\r\\n51 322007373356990396\\r\\n51 322007373356990397\\r\\n52 644014746713980859\\r\\n52 644014746713980860\\r\\n52 644014746713980861\\r\\n\", \"output\": [\"\\\"?.\\\"?.\\\"?.\"]}, {\"input\": \"10\\r\\n100000 1000000000000000000\\r\\n99999 999999999999998683\\r\\n99998 999999999999997366\\r\\n99997 999999999999996049\\r\\n99996 999999999999994732\\r\\n99995 999999999999993415\\r\\n99994 999999999999992098\\r\\n99993 999999999999990781\\r\\n99992 999999999999989464\\r\\n99991 999999999999988147\\r\\n\", \"output\": [\"o u lugW?\"]}, {\"input\": \"10\\r\\n94455 839022536766957828\\r\\n98640 878267599238035211\\r\\n90388 54356607570140506\\r\\n93536 261222577013066170\\r\\n91362 421089574363407592\\r\\n95907 561235487589345620\\r\\n91888 938806156011561508\\r\\n90820 141726323964466814\\r\\n97856 461989202234320135\\r\\n92518 602709074380260370\\r\\n\", \"output\": [\"youni iiee\"]}, {\"input\": \"10\\r\\n100000 873326525630182716\\r\\n100000 620513733919162415\\r\\n100000 482953375281256917\\r\\n100000 485328193417229962\\r\\n100000 353549227094721271\\r\\n100000 367447590857326107\\r\\n100000 627193846053528323\\r\\n100000 243833127760837417\\r\\n100000 287297493528203749\\r\\n100000 70867563577617188\\r\\n\", \"output\": [\"o  W  rlot\"]}, {\"input\": \"10\\r\\n1 1\\r\\n1 34\\r\\n1 35\\r\\n1 109\\r\\n1 110\\r\\n1 141\\r\\n1 142\\r\\n1 216\\r\\n1 217\\r\\n1 218\\r\\n\", \"output\": [\"W\\\"W?\\\"\\\"W?\\\"?\"]}, {\"input\": \"10\\r\\n5 1\\r\\n5 34\\r\\n5 35\\r\\n5 2254\\r\\n5 2255\\r\\n5 2286\\r\\n5 2287\\r\\n5 4506\\r\\n5 4507\\r\\n5 4508\\r\\n\", \"output\": [\"W\\\"W?\\\"\\\"W?\\\"?\"]}, {\"input\": \"10\\r\\n10 1\\r\\n10 34\\r\\n10 35\\r\\n10 73182\\r\\n10 73183\\r\\n10 73214\\r\\n10 73215\\r\\n10 146362\\r\\n10 146363\\r\\n10 146364\\r\\n\", \"output\": [\"W\\\"W?\\\"\\\"W?\\\"?\"]}, {\"input\": \"10\\r\\n15 1\\r\\n15 34\\r\\n15 35\\r\\n15 2342878\\r\\n15 2342879\\r\\n15 2342910\\r\\n15 2342911\\r\\n15 4685754\\r\\n15 4685755\\r\\n15 4685756\\r\\n\", \"output\": [\"W\\\"W?\\\"\\\"W?\\\"?\"]}, {\"input\": \"10\\r\\n35 1\\r\\n35 34\\r\\n35 35\\r\\n35 2456721293278\\r\\n35 2456721293279\\r\\n35 2456721293310\\r\\n35 2456721293311\\r\\n35 4913442586554\\r\\n35 4913442586555\\r\\n35 4913442586556\\r\\n\", \"output\": [\"W\\\"W?\\\"\\\"W?\\\"?\"]}, {\"input\": \"10\\r\\n47 1\\r\\n47 34\\r\\n47 35\\r\\n47 10062730417405918\\r\\n47 10062730417405919\\r\\n47 10062730417405950\\r\\n47 10062730417405951\\r\\n47 20125460834811834\\r\\n47 20125460834811835\\r\\n47 20125460834811836\\r\\n\", \"output\": [\"W\\\"W?\\\"\\\"W?\\\"?\"]}, {\"input\": \"10\\r\\n50 1\\r\\n50 34\\r\\n50 35\\r\\n50 80501843339247582\\r\\n50 80501843339247583\\r\\n50 80501843339247614\\r\\n50 80501843339247615\\r\\n50 161003686678495162\\r\\n50 161003686678495163\\r\\n50 161003686678495164\\r\\n\", \"output\": [\"W\\\"W?\\\"\\\"W?\\\"?\"]}, {\"input\": \"10\\r\\n52 1\\r\\n52 34\\r\\n52 35\\r\\n52 322007373356990430\\r\\n52 322007373356990431\\r\\n52 322007373356990462\\r\\n52 322007373356990463\\r\\n52 644014746713980858\\r\\n52 644014746713980859\\r\\n52 644014746713980860\\r\\n\", \"output\": [\"W\\\"W?\\\"\\\"W?\\\"?\"]}, {\"input\": \"10\\r\\n54986 859285936548585889\\r\\n49540 198101079999865795\\r\\n96121 658386311981208488\\r\\n27027 787731514451843966\\r\\n60674 736617460878411577\\r\\n57761 569094390437687993\\r\\n93877 230086639196124716\\r\\n75612 765187050118682698\\r\\n75690 960915623784157529\\r\\n1788 121643460920471434\\r\\n\", \"output\": [\"oru A\\\" de\\\"\"]}, {\"input\": \"10\\r\\n13599 295514896417102030\\r\\n70868 206213281730527977\\r\\n99964 675362501525687265\\r\\n8545 202563221795027954\\r\\n62885 775051601455683055\\r\\n44196 552672589494215033\\r\\n38017 996305706075726957\\r\\n82157 778541544539864990\\r\\n13148 755735956771594947\\r\\n66133 739544460375378867\\r\\n\", \"output\": [\"t?W y  wnr\"]}, {\"input\": \"10\\r\\n23519 731743847695683578\\r\\n67849 214325487756157455\\r\\n39048 468966654215390234\\r\\n30476 617394929138211942\\r\\n40748 813485737737987237\\r\\n30632 759622821110550585\\r\\n30851 539152740395520686\\r\\n23942 567423516617312907\\r\\n93605 75958684925842506\\r\\n24977 610678262374451619\\r\\n\", \"output\": [\"WonreeuhAn\"]}, {\"input\": \"10\\r\\n66613 890998077399614704\\r\\n59059 389024292752123693\\r\\n10265 813853582068134597\\r\\n71434 128404685079108014\\r\\n76180 582880920044162144\\r\\n1123 411409570241705915\\r\\n9032 611954441092300071\\r\\n78951 57503725302368508\\r\\n32102 824738435154619172\\r\\n44951 53991552354407935\\r\\n\", \"output\": [\"i  oio u?\"]}, {\"input\": \"10\\r\\n96988 938722606709261427\\r\\n97034 794402579184858837\\r\\n96440 476737696947281053\\r\\n96913 651380108479508367\\r\\n99570 535723325634376015\\r\\n97425 180427887538234591\\r\\n97817 142113098762476646\\r\\n96432 446510004868669235\\r\\n98788 476529766139390976\\r\\n96231 263034481360542586\\r\\n\", \"output\": [\"eunWwdtnA\"]}, {\"input\": \"10\\r\\n99440 374951566577777567\\r\\n98662 802514785210488315\\r\\n97117 493713886491759829\\r\\n97252 66211820117659651\\r\\n98298 574157457621712902\\r\\n99067 164006086594761631\\r\\n99577 684960128787303079\\r\\n96999 12019940091341344\\r\\n97772 796752494293638534\\r\\n96958 134168283359615339\\r\\n\", \"output\": [\"idrd? o nl\"]}, {\"input\": \"10\\r\\n95365 811180517856359115\\r\\n97710 810626986941150496\\r\\n98426 510690080331205902\\r\\n99117 481043523165876343\\r\\n95501 612591593904017084\\r\\n96340 370956318211097183\\r\\n96335 451179199961872617\\r\\n95409 800901907873821965\\r\\n97650 893603181298142989\\r\\n96159 781930052798879580\\r\\n\", \"output\": [\"oisv\\\"sb ta\"]}, {\"input\": \"10\\r\\n96759 970434747560290241\\r\\n95684 985325796232084031\\r\\n99418 855577012478917561\\r\\n98767 992053283401739711\\r\\n99232 381986776210191990\\r\\n97804 22743067342252513\\r\\n95150 523980900658652001\\r\\n98478 290982116558877566\\r\\n98012 642382931526919655\\r\\n96374 448615375338644407\\r\\n\", \"output\": [\"e\\\"atdW? e\"]}, {\"input\": \"10\\r\\n5 929947814902665291\\r\\n0 270929202623248779\\r\\n10 917958578362357217\\r\\n3 674632947904782968\\r\\n7 19875145653630834\\r\\n8 744882317760093379\\r\\n4 471398991908637021\\r\\n7 253934163977433229\\r\\n7 125334789085610404\\r\\n10 841267552326270425\\r\\n\", \"output\": [\"..........\"]}, {\"input\": \"10\\r\\n3 366176770476214135\\r\\n10 55669371794102449\\r\\n1 934934767906835993\\r\\n0 384681214954881520\\r\\n4 684989729845321867\\r\\n8 231000356557573162\\r\\n1 336780423782602481\\r\\n2 300230185318227609\\r\\n7 23423148068105278\\r\\n1 733131408103947638\\r\\n\", \"output\": [\"..........\"]}, {\"input\": \"10\\r\\n6 25777762904538788\\r\\n1 63781573524764630\\r\\n5 951910961746282066\\r\\n9 280924325736375136\\r\\n6 96743418218239198\\r\\n1 712038707283212867\\r\\n4 780465093108032992\\r\\n4 608326071277553255\\r\\n8 542408204244362417\\r\\n3 360163123764607419\\r\\n\", \"output\": [\"..........\"]}, {\"input\": \"10\\r\\n1 185031988313502617\\r\\n8 461852423965441269\\r\\n2 296797889599026429\\r\\n3 15306118532047016\\r\\n6 866138600524414105\\r\\n10 587197493269144005\\r\\n2 853266793804812376\\r\\n2 98406279962608857\\r\\n3 291187954473139083\\r\\n0 26848446304372246\\r\\n\", \"output\": [\"..........\"]}, {\"input\": \"10\\r\\n27314 39\\r\\n71465 12\\r\\n29327 53\\r\\n33250 85\\r\\n52608 41\\r\\n19454 55\\r\\n72760 12\\r\\n83873 90\\r\\n67859 78\\r\\n91505 73\\r\\n\", \"output\": [\"u nrhuiy\"]}, {\"input\": \"10\\r\\n76311 57\\r\\n79978 83\\r\\n34607 89\\r\\n62441 98\\r\\n28700 35\\r\\n54426 67\\r\\n66596 15\\r\\n30889 21\\r\\n68793 7\\r\\n29916 71\\r\\n\", \"output\": [\"lohiW ohra\"]}]","length":112,"num_hidden_unit_tests":36}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"0.5 seconds","prob_desc_sample_inputs":"[\"5 3\", \"25 13\", \"26 13\"]","prob_desc_input_spec":"The only line contains two integers n and k (1\u2009\u2264\u2009n,\u2009k\u2009\u2264\u2009109).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"75f3835c969c871a609b978e04476542","prob_desc_created_at":"1465834200","source_code":"#include <iostream>\nusing namespace std;\nint main(void){\n    int n,k;\n    cin >> n >> k;\n    cout << (n\/k+1)*k << endl;\n    return 0;\n}","prob_desc_sample_outputs":"[\"6\", \"26\", \"39\"]","lang_cluster":"C++","code_uid":"d2b6dee13954506591372f2710b61df5","prob_desc_notes":null,"prob_desc_output_spec":"Print the smallest integer x\u2009&gt;\u2009n, so it is divisible by the number k.","prob_desc_output_to":"standard output","prob_desc_description":"Johny likes numbers n and k very much. Now Johny wants to find the smallest integer x greater than n, so it is divisible by the number k.","hidden_unit_tests":"[{\"input\": \"5 3\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"25 13\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"26 13\\r\\n\", \"output\": [\"39\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8 8\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"14 15\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"197 894\\r\\n\", \"output\": [\"894\"]}, {\"input\": \"6058 8581\\r\\n\", \"output\": [\"8581\"]}, {\"input\": \"97259 41764\\r\\n\", \"output\": [\"125292\"]}, {\"input\": \"453145 333625\\r\\n\", \"output\": [\"667250\"]}, {\"input\": \"2233224 4394826\\r\\n\", \"output\": [\"4394826\"]}, {\"input\": \"76770926 13350712\\r\\n\", \"output\": [\"80104272\"]}, {\"input\": \"687355301 142098087\\r\\n\", \"output\": [\"710490435\"]}, {\"input\": \"1000000000 999999999\\r\\n\", \"output\": [\"1999999998\"]}, {\"input\": \"1000000000 1000000000\\r\\n\", \"output\": [\"2000000000\"]}, {\"input\": \"999999999 1000000000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"1000000000 1\\r\\n\", \"output\": [\"1000000001\"]}, {\"input\": \"1000000000 2\\r\\n\", \"output\": [\"1000000002\"]}, {\"input\": \"999999999 1\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"100000000 1\\r\\n\", \"output\": [\"100000001\"]}, {\"input\": \"999999999 500000000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"999999990 10\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"1000000000 999999997\\r\\n\", \"output\": [\"1999999994\"]}, {\"input\": \"999999999 2\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"999999984 1\\r\\n\", \"output\": [\"999999985\"]}, {\"input\": \"999999983 1\\r\\n\", \"output\": [\"999999984\"]}, {\"input\": \"666666666 1\\r\\n\", \"output\": [\"666666667\"]}, {\"input\": \"1000000000 990000000\\r\\n\", \"output\": [\"1980000000\"]}, {\"input\": \"41 48\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"123456 2\\r\\n\", \"output\": [\"123458\"]}, {\"input\": \"111 111\\r\\n\", \"output\": [\"222\"]}, {\"input\": \"878787 1\\r\\n\", \"output\": [\"878788\"]}, {\"input\": \"121 1\\r\\n\", \"output\": [\"122\"]}, {\"input\": \"114514 114514\\r\\n\", \"output\": [\"229028\"]}, {\"input\": \"500000001 1000000000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"999999997 1\\r\\n\", \"output\": [\"999999998\"]}, {\"input\": \"100000000 10\\r\\n\", \"output\": [\"100000010\"]}]","length":8,"num_hidden_unit_tests":37}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"5 2 5\", \"4 3 5\"]","prob_desc_input_spec":"The only line of the input data contains three integers n, m, t (4\u2009\u2264\u2009n\u2009\u2264\u200930,\u20091\u2009\u2264\u2009m\u2009\u2264\u200930,\u20095\u2009\u2264\u2009t\u2009\u2264\u2009n\u2009+\u2009m).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"489e69c7a2fba5fac34e89d7388ed4b8","prob_desc_created_at":"1322233200","source_code":"#include<iostream>\n#define L long long\n\nusing namespace std;\n\nL c(L n,L r)\n{\n      L i;\n      L s=1,s1=1;\n                 for(i=n;i>r;i--)\n                 {\n                                 s*=i; \n                                 s\/=(n-i+1);\n                 } \n      \/\/cout<<s<<\"=s\\n\";\n      \/\/cout<<s1<<\"=s1\\n\";\n      return s;\n}\n    \nint main()\n{\n    L n,m,t,a,b,t1,ans,i;\n    cin>>n>>m>>t;\n    \/*a=c(n,4);\n    b=c(m,1);\n    ans=a*b;\n    if(t>5)\n    {\n           t1=t-5;\n           \/\/ans=c(n+m-5,t1);\n    }*\/\n    ans=0;\n    for(i=1;i<=(t-4);i++)\n    {\n          if(i<=m&&(t-i)<=n)\n          ans+=(c(n,t-i)*c(m,i));\n    }               \n    cout<<ans;                          \n    \/*ans=c(n+m,t);\n    cout<<c(60,30)<<\"h\\n\";\n    if(t-3<=m)\n    ans-=(c(n,3)*c(m,t-3));\n    if(t-2<=m)\n    ans-=(c(n,2)*c(m,t-2));\n    if(t-1<=m)\n    ans-=(c(n,1)*c(m,t-1));\n    if(t<=m)\n    ans-=(c(m,t));\n    if(t<=n)\n    ans-=(c(n,t));\n    cout<<ans;*\/\n    \/\/cout<<\"\\n\"<<c(n,n);\n    \/\/system(\"pause\");\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"10\", \"3\"]","lang_cluster":"C++","code_uid":"9c7f206d38939ea610a3b79227d069b2","prob_desc_notes":null,"prob_desc_output_spec":"Find the required number of ways. Please do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specificator.","prob_desc_output_to":"standard output","prob_desc_description":"There are n boys and m girls attending a theatre club. To set a play \"The Big Bang Theory\", they need to choose a group containing exactly t actors containing no less than 4 boys and no less than one girl. How many ways are there to choose a group? Of course, the variants that only differ in the composition of the troupe are considered different.Perform all calculations in the 64-bit type: long long for \u0421\/\u0421++, int64 for Delphi and long for Java.","hidden_unit_tests":"[{\"input\": \"5 2 5\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"4 3 5\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 1 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7 3 6\\r\\n\", \"output\": [\"168\"]}, {\"input\": \"30 30 30\\r\\n\", \"output\": [\"118264581548187697\"]}, {\"input\": \"10 10 8\\r\\n\", \"output\": [\"84990\"]}, {\"input\": \"10 10 10\\r\\n\", \"output\": [\"168229\"]}, {\"input\": \"10 10 20\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"20 15 27\\r\\n\", \"output\": [\"23535820\"]}, {\"input\": \"20 20 40\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"20 20 24\\r\\n\", \"output\": [\"62852101650\"]}, {\"input\": \"4 20 20\\r\\n\", \"output\": [\"4845\"]}, {\"input\": \"4 20 24\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"20 3 23\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"20 1 21\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"20 1 5\\r\\n\", \"output\": [\"4845\"]}, {\"input\": \"20 20 5\\r\\n\", \"output\": [\"96900\"]}, {\"input\": \"30 30 60\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"30 30 59\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"30 29 55\\r\\n\", \"output\": [\"455126\"]}, {\"input\": \"30 29 59\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 30 34\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"30 1 20\\r\\n\", \"output\": [\"54627300\"]}, {\"input\": \"30 1 31\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"29 30 57\\r\\n\", \"output\": [\"1711\"]}, {\"input\": \"25 30 40\\r\\n\", \"output\": [\"11899700525790\"]}, {\"input\": \"4 2 6\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5 1 6\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"30 30 50\\r\\n\", \"output\": [\"75394027566\"]}, {\"input\": \"30 30 57\\r\\n\", \"output\": [\"34220\"]}, {\"input\": \"30 30 58\\r\\n\", \"output\": [\"1770\"]}, {\"input\": \"25 25 48\\r\\n\", \"output\": [\"1225\"]}, {\"input\": \"30 1 30\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"28 28 50\\r\\n\", \"output\": [\"32468436\"]}, {\"input\": \"28 28 55\\r\\n\", \"output\": [\"56\"]}, {\"input\": \"30 30 55\\r\\n\", \"output\": [\"5461512\"]}, {\"input\": \"7 30 37\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 1 11\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 1 6\\r\\n\", \"output\": [\"252\"]}]","length":55,"num_hidden_unit_tests":39}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1\", \"2\"]","prob_desc_input_spec":"A single line contains number n (1\u2009\u2264\u2009n\u2009\u2264\u2009105) \u2014 the number of the gnomes divided by three.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"eae87ec16c284f324d86b7e65fda093c","prob_desc_created_at":"1444149000","source_code":"#include <bits\/stdc++.h>\nusing namespace std;\n\n#define MOD 1000000007\nint main() {\n    long long n;\n    cin >> n;\n\n    long long cnt = 0;\n    for(int i=1; i<=3; i++)for(int j=1;j<=3;j++)for(int k=1;k<=3;k++){\n        if (i+j+k==6)cnt++;\n    }\n\n\/\/    cout << cnt << \"\\n\";\n\n    long long total=27;\n    for(int i=0; i<n-1; i++) {\n        cnt*=7;\n        cnt%=MOD;\n\n        total*=27;\n        total%=MOD;\n    }\n\n\/\/    cout << total << \"\\n\";\n\n    cout << (total-cnt+MOD)%MOD << \"\\n\";\n\n\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"20\", \"680\"]","lang_cluster":"C++","code_uid":"fb29e5e2f4b11cb2c0ad7fb2b8eb2679","prob_desc_notes":"Note20 ways for n\u2009=\u20091 (gnome with index 0 sits on the top of the triangle, gnome 1 on the right vertex, gnome 2 on the left vertex):   ","prob_desc_output_spec":"Print a single number \u2014 the remainder of the number of variants of distributing coins that satisfy Tanya modulo 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"Kolya loves putting gnomes at the circle table and giving them coins, and Tanya loves studying triplets of gnomes, sitting in the vertexes of an equilateral triangle.More formally, there are 3n gnomes sitting in a circle. Each gnome can have from 1 to 3 coins. Let's number the places in the order they occur in the circle by numbers from 0 to 3n\u2009-\u20091, let the gnome sitting on the i-th place have ai coins. If there is an integer i (0\u2009\u2264\u2009i\u2009&lt;\u2009n) such that ai\u2009+\u2009ai\u2009+\u2009n\u2009+\u2009ai\u2009+\u20092n\u2009\u2260\u20096, then Tanya is satisfied. Count the number of ways to choose ai so that Tanya is satisfied. As there can be many ways of distributing coins, print the remainder of this number modulo 109\u2009+\u20097. Two ways, a and b, are considered distinct if there is index i (0\u2009\u2264\u2009i\u2009&lt;\u20093n), such that ai\u2009\u2260\u2009bi (that is, some gnome got different number of coins in these two ways).","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"680\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"19340\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"529040\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"14332100\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"459529590\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"848178170\"]}, {\"input\": \"14\\r\\n\", \"output\": [\"356372551\"]}, {\"input\": \"58000\\r\\n\", \"output\": [\"66667472\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"387302840\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"423769706\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"557078005\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"83420839\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"208683407\"]}, {\"input\": \"22\\r\\n\", \"output\": [\"695178405\"]}, {\"input\": \"48\\r\\n\", \"output\": [\"974152357\"]}, {\"input\": \"74\\r\\n\", \"output\": [\"972015869\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"364994225\"]}, {\"input\": \"866\\r\\n\", \"output\": [\"363347020\"]}, {\"input\": \"1673\\r\\n\", \"output\": [\"112069243\"]}, {\"input\": \"555\\r\\n\", \"output\": [\"506150275\"]}, {\"input\": \"2000\\r\\n\", \"output\": [\"394190362\"]}, {\"input\": \"9877\\r\\n\", \"output\": [\"915063121\"]}, {\"input\": \"5984\\r\\n\", \"output\": [\"546302050\"]}, {\"input\": \"2091\\r\\n\", \"output\": [\"982683445\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"246305722\"]}, {\"input\": \"10868\\r\\n\", \"output\": [\"118127713\"]}, {\"input\": \"66115\\r\\n\", \"output\": [\"413345995\"]}, {\"input\": \"62212\\r\\n\", \"output\": [\"587210092\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"192156836\"]}, {\"input\": \"2441\\r\\n\", \"output\": [\"149858187\"]}, {\"input\": \"18569\\r\\n\", \"output\": [\"54080463\"]}, {\"input\": \"69289\\r\\n\", \"output\": [\"582363404\"]}, {\"input\": \"85417\\r\\n\", \"output\": [\"796810422\"]}, {\"input\": \"68841\\r\\n\", \"output\": [\"371243141\"]}, {\"input\": \"4343\\r\\n\", \"output\": [\"682818914\"]}, {\"input\": \"12312\\r\\n\", \"output\": [\"837337190\"]}, {\"input\": \"5462\\r\\n\", \"output\": [\"719513799\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"550315374\"]}]","length":31,"num_hidden_unit_tests":39}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 3\", \"8 2\"]","prob_desc_input_spec":"The first line of the input contains two integers, given in the decimal notation, n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009109)\u00a0\u2014 the number of hours in one day and the number of minutes in one hour, respectively.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"0930c75f57dd88a858ba7bb0f11f1b1c","prob_desc_created_at":"1466699700","source_code":"#include <bits\/stdc++.h>\nusing namespace std;\n\nint MaxHr, MaxMin, ans;\nvector<int> hr, minute;\n\nint ok(vector<int> X)\n{\n    int mask = 0;\n    \n    for(int i=0; i<X.size(); i++)\n    {\n        if((1<<X[i])&mask)\n            return 0;\n        \n        mask += (1<<X[i]);\n    }\n    \n    int h = 0, m = 0;\n    \n    for(int i=0; i<hr.size(); i++)\n        h = h*10 + X[i];\n    for(int i=0; i<minute.size(); i++)\n        m = m*10 + X[i+hr.size()];\n    \n    if(h>MaxHr || m>MaxMin)\n        return 0;\n    \n    return 1;\n}\n\nvoid solve(vector<int> X, int num)\n{\n    if(num==hr.size() + minute.size())\n    {\n        if(ok(X))\n            ans++;\n        \n        return;\n    }\n    \n    for(int i=0; i<7; i++)\n    {\n        vector<int> Y = X;\n        Y.push_back(i);\n        solve(Y, num+1);\n    }\n}\n\nint main()\n{\n    int N, M;\n    cin >> N >> M;\n    \n    N--, M--;\n    \n    if(N==0)\n        hr.push_back(0);\n    if(M==0)\n        minute.push_back(0);\n    \n    while(N)\n    {\n        hr.push_back(N%7);\n        N\/= 7;\n    }\n    \n    while(M)\n    {\n        minute.push_back(M%7);\n        M\/= 7;\n    }\n    \n    reverse(hr.begin(), hr.end());\n    reverse(minute.begin(), minute.end());\n    \n    for(int i=0; i<hr.size(); i++)\n        MaxHr = MaxHr*10 + hr[i];\n    for(int i=0; i<minute.size(); i++)\n        MaxMin = MaxMin*10 + minute[i];\n    \n    if(hr.size()+minute.size()>7)\n        cout << 0 << endl;\n    else\n    {\n        vector<int> X;\n        solve(X, 0);\n        cout << ans << endl;\n    }\n    \n    return 0;\n}","prob_desc_sample_outputs":"[\"4\", \"5\"]","lang_cluster":"C++","code_uid":"2cbdd2eb7f71a2b8fc96e1ff6f114414","prob_desc_notes":"NoteIn the first sample, possible pairs are: (0:\u20091), (0:\u20092), (1:\u20090), (1:\u20092).In the second sample, possible pairs are: (02:\u20091), (03:\u20091), (04:\u20091), (05:\u20091), (06:\u20091).","prob_desc_output_spec":"Print one integer in decimal notation\u00a0\u2014 the number of different pairs of hour and minute, such that all digits displayed on the watches are distinct.","prob_desc_output_to":"standard output","prob_desc_description":"Robbers, who attacked the Gerda's cab, are very successful in covering from the kingdom police. To make the goal of catching them even harder, they use their own watches.First, as they know that kingdom police is bad at math, robbers use the positional numeral system with base 7. Second, they divide one day in n hours, and each hour in m minutes. Personal watches of each robber are divided in two parts: first of them has the smallest possible number of places that is necessary to display any integer from 0 to n\u2009-\u20091, while the second has the smallest possible number of places that is necessary to display any integer from 0 to m\u2009-\u20091. Finally, if some value of hours or minutes can be displayed using less number of places in base 7 than this watches have, the required number of zeroes is added at the beginning of notation.Note that to display number 0 section of the watches is required to have at least one place.Little robber wants to know the number of moments of time (particular values of hours and minutes), such that all digits displayed on the watches are distinct. Help her calculate this number.","hidden_unit_tests":"[{\"input\": \"2 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"8 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"8 8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50 50\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"344 344\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"282475250 282475250\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8 282475250\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000000000 1000000000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"16808 7\\r\\n\", \"output\": [\"720\"]}, {\"input\": \"2402 50\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"343 2401\\r\\n\", \"output\": [\"5040\"]}, {\"input\": \"1582 301\\r\\n\", \"output\": [\"2874\"]}, {\"input\": \"421414245 4768815\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2401 343\\r\\n\", \"output\": [\"5040\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"282475250 8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8 7\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"50 7\\r\\n\", \"output\": [\"120\"]}, {\"input\": \"16808 8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2402 49\\r\\n\", \"output\": [\"720\"]}, {\"input\": \"123 123\\r\\n\", \"output\": [\"360\"]}, {\"input\": \"123 456\\r\\n\", \"output\": [\"150\"]}, {\"input\": \"1 9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 10\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 67\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"7 117649\\r\\n\", \"output\": [\"5040\"]}, {\"input\": \"2400 342\\r\\n\", \"output\": [\"5040\"]}, {\"input\": \"2400 227\\r\\n\", \"output\": [\"3360\"]}, {\"input\": \"117648 5\\r\\n\", \"output\": [\"3600\"]}, {\"input\": \"16808 41\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 16808\\r\\n\", \"output\": [\"240\"]}, {\"input\": \"823542 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 823544\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"117650 5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50 50\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50 3\\r\\n\", \"output\": [\"40\"]}, {\"input\": \"2402 343\\r\\n\", \"output\": [\"0\"]}]","length":92,"num_hidden_unit_tests":39}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"code\\nedoc\", \"abb\\naba\", \"code\\ncode\"]","prob_desc_input_spec":"The first line contains word s, the second line contains word t. The words consist of lowercase Latin letters. The input data do not consist unnecessary spaces. The words are not empty and their lengths do not exceed 100 symbols.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"35a4be326690b58bf9add547fb63a5a5","prob_desc_created_at":"1289232000","source_code":"#include<iostream>\n#include<iomanip>\n#include<fstream>\n#include<algorithm>\nusing namespace std;\nint a,b,c;\nint sum;\nint main()\n{\n\tstring s,st,stt;\n\tcin>>s;\n\tcin>>stt;\n\tint len=s.size();\n\tfor(int i=len-1;i>-1;i--)\n\t{\n\t\tst+=s[i];\n\t}\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tif(stt[i]==st[i])\n\t\t{\n\t\t\tsum++;\n\t\t}\n\t}\n\tif(sum==len)\n\tcout<<\"YES\";\n\telse\n\tcout<<\"NO\";\n    return 0;\n}","prob_desc_sample_outputs":"[\"YES\", \"NO\", \"NO\"]","lang_cluster":"C++","code_uid":"bcf79ee784c8f578ed349fc78138324e","prob_desc_notes":null,"prob_desc_output_spec":"If the word t is a word s, written reversely, print YES, otherwise print NO.","prob_desc_output_to":"standard output","prob_desc_description":"The translation from the Berland language into the Birland language is not an easy task. Those languages are very similar: a berlandish word differs from a birlandish word with the same meaning a little: it is spelled (and pronounced) reversely. For example, a Berlandish word code corresponds to a Birlandish word edoc. However, it's easy to make a mistake during the \u00abtranslation\u00bb. Vasya translated word s from Berlandish into Birlandish as t. Help him: find out if he translated the word correctly.","hidden_unit_tests":"[{\"input\": \"code\\r\\nedoc\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"abb\\r\\naba\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"code\\r\\ncode\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"abacaba\\r\\nabacaba\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"q\\r\\nq\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"asrgdfngfnmfgnhweratgjkk\\r\\nasrgdfngfnmfgnhweratgjkk\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"z\\r\\na\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"asd\\r\\ndsa\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"abcdef\\r\\nfecdba\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"ywjjbirapvskozubvxoemscfwl\\r\\ngnduubaogtfaiowjizlvjcu\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"mfrmqxtzvgaeuleubcmcxcfqyruwzenguhgrmkuhdgnhgtgkdszwqyd\\r\\nmfxufheiperjnhyczclkmzyhcxntdfskzkzdwzzujdinf\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"bnbnemvybqizywlnghlykniaxxxlkhftppbdeqpesrtgkcpoeqowjwhrylpsziiwcldodcoonpimudvrxejjo\\r\\ntiynnekmlalogyvrgptbinkoqdwzuiyjlrldxhzjmmp\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"pwlpubwyhzqvcitemnhvvwkmwcaawjvdiwtoxyhbhbxerlypelevasmelpfqwjk\\r\\nstruuzebbcenziscuoecywugxncdwzyfozhljjyizpqcgkyonyetarcpwkqhuugsqjuixsxptmbnlfupdcfigacdhhrzb\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"gdvqjoyxnkypfvdxssgrihnwxkeojmnpdeobpecytkbdwujqfjtxsqspxvxpqioyfagzjxupqqzpgnpnpxcuipweunqch\\r\\nkkqkiwwasbhezqcfeceyngcyuogrkhqecwsyerdniqiocjehrpkljiljophqhyaiefjpavoom\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"umeszdawsvgkjhlqwzents\\r\\nhxqhdungbylhnikwviuh\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"juotpscvyfmgntshcealgbsrwwksgrwnrrbyaqqsxdlzhkbugdyx\\r\\nibqvffmfktyipgiopznsqtrtxiijntdbgyy\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"zbwueheveouatecaglziqmudxemhrsozmaujrwlqmppzoumxhamwugedikvkblvmxwuofmpafdprbcftew\\r\\nulczwrqhctbtbxrhhodwbcxwimncnexosksujlisgclllxokrsbnozthajnnlilyffmsyko\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"nkgwuugukzcv\\r\\nqktnpxedwxpxkrxdvgmfgoxkdfpbzvwsduyiybynbkouonhvmzakeiruhfmvrktghadbfkmwxduoqv\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"incenvizhqpcenhjhehvjvgbsnfixbatrrjstxjzhlmdmxijztphxbrldlqwdfimweepkggzcxsrwelodpnryntepioqpvk\\r\\ndhjbjjftlvnxibkklxquwmzhjfvnmwpapdrslioxisbyhhfymyiaqhlgecpxamqnocizwxniubrmpyubvpenoukhcobkdojlybxd\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"w\\r\\nw\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"vz\\r\\nzv\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"ry\\r\\nyr\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"xou\\r\\nuox\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"axg\\r\\ngax\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"zdsl\\r\\nlsdz\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"kudl\\r\\nldku\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"zzlzwnqlcl\\r\\nlclqnwzlzz\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"vzzgicnzqooejpjzads\\r\\nsdazjpjeooqzncigzzv\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"raqhmvmzuwaykjpyxsykr\\r\\nxkysrypjkyawuzmvmhqar\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"ngedczubzdcqbxksnxuavdjaqtmdwncjnoaicvmodcqvhfezew\\r\\nwezefhvqcdomvciaonjcnwdmtqajdvauxnskxbqcdzbuzcdegn\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"muooqttvrrljcxbroizkymuidvfmhhsjtumksdkcbwwpfqdyvxtrlymofendqvznzlmim\\r\\nmimlznzvqdnefomylrtxvydqfpwwbckdskmutjshhmfvdiumykziorbxcjlrrvttqooum\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"vxpqullmcbegsdskddortcvxyqlbvxmmkhevovnezubvpvnrcajpxraeaxizgaowtfkzywvhnbgzsxbhkaipcmoumtikkiyyaivg\\r\\ngviayyikkitmuomcpiakhbxszgbnhvwyzkftwoagzixaearxpjacrnvpvbuzenvovehkmmxvblqyxvctroddksdsgebcmlluqpxv\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"mnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfdc\\r\\ncdfmkdgrdptkpewbsqvszipgxvgvuiuzbkkwuowbafkikgvnqdkxnayzdjygvezmtsgywnupocdntipiyiorblqkrzjpzatxahnm\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"dgxmzbqofstzcdgthbaewbwocowvhqpinehpjatnnbrijcolvsatbblsrxabzrpszoiecpwhfjmwuhqrapvtcgvikuxtzbftydkw\\r\\nwkdytfbztxukivgctvparqhuwmjfhwpceiozsprzbaxrslbbqasvlocjirbnntajphenipthvwocowbweabhtgdcztsfoqbzmxgd\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"gxoixiecetohtgjgbqzvlaobkhstejxdklghowtvwunnnvauriohuspsdmpzckprwajyxldoyckgjivjpmbfqtszmtocovxwgeh\\r\\nhegwxvocotmzstqfbmpjvijgkcyodlxyjawrpkczpmdspsuhoiruavnnnuwvtwohglkdxjetshkboalvzqbgjgthoteceixioxg\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"sihxuwvmaambplxvjfoskinghzicyfqebjtkysotattkahssumfcgrkheotdxwjckpvapbkaepqrxseyfrwtyaycmrzsrsngkh\\r\\nhkgnsrszrmcyaytwrfyesxrqpeakbpavpkcjwxdtoehkrgcfmusshakttatosyktjbeqfycizhgniksofjvxlpbmaamvwuxhis\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"ycnahksbughnonldzrhkysujmylcgcfuludjvjiahtkyzqvkopzqcnwhltbzfugzojqkjjlggmvnultascmygelkiktmfieok\\r\\nkoeifmtkiklegkmcsatlunvmggkjjlqjozgufzbtlhwncqzpokvqzykthaijvjdulufcgclymjusyyhrzdlnonhgubskhancy\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"wbqasaehtkfojruzyhrlgwmtyiovmzyfifslvlemhqheyaelzwnthrenjsbmntwaoryzwfbxmscmypvxlfmzpnkkjlvwvmtz\\r\\nztmvwvljkknpzmflxvpymcsmxbfwzyroawtnmbsjnerhtnwzleayehqhmelvlsfifyzmvoiytmwglrhyzurjofktheasaqbw\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"imippqurprbhfugngtgifelytadegwrgaefnfhbjjnmzikvjaccotqzemufqieqldgnbmviisgkynzeldlhqxuqphjfmyij\\r\\njiymfjhpquxqhldleznykgsiivmbngdlqeiqfumezqtoccajvkizmnjjbhfnfeagrwgedatylefigtgngufhbrpruqppimi\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"bikydffiuisckpvzqlteqfhegsagimodb\\r\\nbdomigasgehfqetlqzvpkcsiuiffdykib\\r\\n\", \"output\": [\"YES\"]}]","length":30,"num_hidden_unit_tests":40}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\\n2\\n3\\n4\\n12\", \"2\\n3\\n4\\n5\\n24\"]","prob_desc_input_spec":"Input data contains integer numbers k,\u2009l,\u2009m,\u2009n and d, each number in a separate line (1\u2009\u2264\u2009k,\u2009l,\u2009m,\u2009n\u2009\u2264\u200910, 1\u2009\u2264\u2009d\u2009\u2264\u2009105).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"46bfdec9bfc1e91bd2f5022f3d3c8ce7","prob_desc_created_at":"1328198400","source_code":"#include<iostream>\n#include <deque>\n#include<stack>\n#include<queue>\n#include<math.h>\n#include<algorithm>\n#include<stdlib.h>\n#include<string>\n#include<stdio.h>\n#include<string.h>\ntypedef long long LL;\n#define $ acos(-1)\nusing namespace std;\nint main()\n{\n    for(;;)\n    {\n        int k,l,m,n,d,i,j,s=0,a[100000]={0};\n        if(scanf(\"%d\",&k)==EOF)\n            break;\n        scanf(\"%d%d%d%d\",&l,&m,&n,&d);\n        if((k==1)||(l==1)||(n==1)||(m==1))\n        {\n            printf(\"%d\\n\",d);\n            continue;\n        }\n        for(i=1;i<=d;i++)\n        {\n            if(i%k==0)\n                a[i]++;\n            if(i%l==0)\n                a[i]++;\n            if(i%m==0)\n                a[i]++;\n            if(i%n==0)\n                a[i]++;\n        }\n        for(i=0;i<=d;i++)\n            if(a[i]!=0)\n              s++;\n        printf(\"%d\\n\",s);\n\n    }\n    return 0;\n}\n\n\t\t   \t \t   \t  \t\t\t\t \t\t \t\t   \t  \t","prob_desc_sample_outputs":"[\"12\", \"17\"]","lang_cluster":"C++","code_uid":"ff88f76f17067696772a1e1ca79a0cf4","prob_desc_notes":"NoteIn the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.In the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.","prob_desc_output_spec":"Output the number of damaged dragons.","prob_desc_output_to":"standard output","prob_desc_description":"\u00abOne dragon. Two dragon. Three dragon\u00bb, \u2014 the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.However, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.How many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?","hidden_unit_tests":"[{\"input\": \"1\\r\\n2\\r\\n3\\r\\n4\\r\\n12\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"2\\r\\n3\\r\\n4\\r\\n5\\r\\n24\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n100000\\r\\n\", \"output\": [\"100000\"]}, {\"input\": \"10\\r\\n9\\r\\n8\\r\\n7\\r\\n6\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8\\r\\n4\\r\\n4\\r\\n3\\r\\n65437\\r\\n\", \"output\": [\"32718\"]}, {\"input\": \"8\\r\\n4\\r\\n1\\r\\n10\\r\\n59392\\r\\n\", \"output\": [\"59392\"]}, {\"input\": \"4\\r\\n1\\r\\n8\\r\\n7\\r\\n44835\\r\\n\", \"output\": [\"44835\"]}, {\"input\": \"6\\r\\n1\\r\\n7\\r\\n2\\r\\n62982\\r\\n\", \"output\": [\"62982\"]}, {\"input\": \"2\\r\\n7\\r\\n4\\r\\n9\\r\\n56937\\r\\n\", \"output\": [\"35246\"]}, {\"input\": \"2\\r\\n9\\r\\n8\\r\\n1\\r\\n75083\\r\\n\", \"output\": [\"75083\"]}, {\"input\": \"8\\r\\n7\\r\\n7\\r\\n6\\r\\n69038\\r\\n\", \"output\": [\"24656\"]}, {\"input\": \"4\\r\\n4\\r\\n2\\r\\n3\\r\\n54481\\r\\n\", \"output\": [\"36320\"]}, {\"input\": \"6\\r\\n4\\r\\n9\\r\\n8\\r\\n72628\\r\\n\", \"output\": [\"28244\"]}, {\"input\": \"9\\r\\n7\\r\\n8\\r\\n10\\r\\n42357\\r\\n\", \"output\": [\"16540\"]}, {\"input\": \"5\\r\\n6\\r\\n4\\r\\n3\\r\\n60504\\r\\n\", \"output\": [\"36302\"]}, {\"input\": \"7\\r\\n2\\r\\n3\\r\\n8\\r\\n21754\\r\\n\", \"output\": [\"15539\"]}, {\"input\": \"1\\r\\n2\\r\\n10\\r\\n4\\r\\n39901\\r\\n\", \"output\": [\"39901\"]}, {\"input\": \"3\\r\\n4\\r\\n7\\r\\n1\\r\\n58048\\r\\n\", \"output\": [\"58048\"]}, {\"input\": \"9\\r\\n10\\r\\n4\\r\\n6\\r\\n52003\\r\\n\", \"output\": [\"21956\"]}, {\"input\": \"5\\r\\n10\\r\\n9\\r\\n3\\r\\n70149\\r\\n\", \"output\": [\"32736\"]}, {\"input\": \"5\\r\\n5\\r\\n5\\r\\n10\\r\\n55592\\r\\n\", \"output\": [\"11118\"]}, {\"input\": \"1\\r\\n5\\r\\n2\\r\\n6\\r\\n49547\\r\\n\", \"output\": [\"49547\"]}, {\"input\": \"3\\r\\n7\\r\\n7\\r\\n7\\r\\n84046\\r\\n\", \"output\": [\"36019\"]}, {\"input\": \"10\\r\\n2\\r\\n1\\r\\n8\\r\\n63537\\r\\n\", \"output\": [\"63537\"]}, {\"input\": \"7\\r\\n2\\r\\n10\\r\\n5\\r\\n81684\\r\\n\", \"output\": [\"53678\"]}, {\"input\": \"7\\r\\n1\\r\\n6\\r\\n8\\r\\n99831\\r\\n\", \"output\": [\"99831\"]}, {\"input\": \"3\\r\\n9\\r\\n3\\r\\n3\\r\\n61082\\r\\n\", \"output\": [\"20360\"]}, {\"input\": \"5\\r\\n5\\r\\n8\\r\\n9\\r\\n79228\\r\\n\", \"output\": [\"29931\"]}, {\"input\": \"1\\r\\n5\\r\\n5\\r\\n6\\r\\n89535\\r\\n\", \"output\": [\"89535\"]}, {\"input\": \"5\\r\\n5\\r\\n2\\r\\n1\\r\\n7682\\r\\n\", \"output\": [\"7682\"]}, {\"input\": \"7\\r\\n4\\r\\n8\\r\\n8\\r\\n25829\\r\\n\", \"output\": [\"9224\"]}, {\"input\": \"3\\r\\n4\\r\\n3\\r\\n3\\r\\n87079\\r\\n\", \"output\": [\"43539\"]}, {\"input\": \"5\\r\\n8\\r\\n4\\r\\n9\\r\\n5226\\r\\n\", \"output\": [\"2438\"]}, {\"input\": \"4\\r\\n9\\r\\n6\\r\\n6\\r\\n1070\\r\\n\", \"output\": [\"415\"]}, {\"input\": \"10\\r\\n10\\r\\n10\\r\\n10\\r\\n100000\\r\\n\", \"output\": [\"10000\"]}, {\"input\": \"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n10\\r\\n10\\r\\n10\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n10\\r\\n1\\r\\n10\\r\\n10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"10\\r\\n10\\r\\n1\\r\\n10\\r\\n100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"2\\r\\n2\\r\\n2\\r\\n2\\r\\n1\\r\\n\", \"output\": [\"0\"]}]","length":47,"num_hidden_unit_tests":40}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2 3 4\"]","prob_desc_input_spec":"The first line contains three integers: a, b and c (2\u2009\u2264\u2009a,\u2009b,\u2009c\u2009\u2264\u20091000).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"8ab25ed4955d978fe20f6872cb94b0da","prob_desc_created_at":"1344958200","source_code":"#include<cstdio>\n#include<vector>\n#include<string>\n#include<iostream>\n\n\nusing namespace std;\n\n\n\nint main()\n{\n\n    int a, b, c;\n\n    cin>>a>>b>>c;\n\n    int count=0;\n\n    while(a>1 && b>1 && c>1)\n    {\n        count = count + 2*(a-1) + 2*(b-1) + 2*(c-1);\n        a--;b--;c--;\n    }\n    int ones = 0;\n    if(a==1)ones++;\n    if(b==1)ones++;\n    if(c==1)ones++;\n\n    if(ones==3)\n        count++;\n    else if(ones==2)\n    {\n        if(a!=1)count+=a;\n        if(b!=1)count+=b;\n        if(c!=1)count+=c;\n        \/\/count = count + a!=1?a:0 + b!=1?b:0 + c!=1?c:0;\n    }\n    else\n    {\n        if(a==1) count += (b)*(c);\n        if(b==1) count += (a)*(c);\n        if(c==1) count += (b)*(a);\n        \/\/count = count + 2*(a-1) + 2*(b-1) + 2*(c-1);\n    }\n\n    cout<<count<<endl;\n\n    return 0;\n}","prob_desc_sample_outputs":"[\"18\"]","lang_cluster":"C++","code_uid":"aea89d2f0182cdc0a93c7579513cc813","prob_desc_notes":null,"prob_desc_output_spec":"Print a single number \u2014 the total number of tiles on the hall floor.","prob_desc_output_to":"standard output","prob_desc_description":"Several ages ago Berland was a kingdom. The King of Berland adored math. That's why, when he first visited one of his many palaces, he first of all paid attention to the floor in one hall. The floor was tiled with hexagonal tiles.The hall also turned out hexagonal in its shape. The King walked along the perimeter of the hall and concluded that each of the six sides has a, b, c, a, b and c adjacent tiles, correspondingly.To better visualize the situation, look at the picture showing a similar hexagon for a\u2009=\u20092, b\u2009=\u20093 and c\u2009=\u20094.  According to the legend, as the King of Berland obtained the values a, b and c, he almost immediately calculated the total number of tiles on the hall floor. Can you do the same?","hidden_unit_tests":"[{\"input\": \"2 3 4\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"2 2 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"7 8 13\\r\\n\", \"output\": [\"224\"]}, {\"input\": \"14 7 75\\r\\n\", \"output\": [\"1578\"]}, {\"input\": \"201 108 304\\r\\n\", \"output\": [\"115032\"]}, {\"input\": \"999 998 996\\r\\n\", \"output\": [\"2983022\"]}, {\"input\": \"2 2 3\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"2 3 2\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"3 2 2\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"2 3 3\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"3 2 3\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"3 3 2\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"3 3 3\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"4 5 3\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"2 2 856\\r\\n\", \"output\": [\"2569\"]}, {\"input\": \"2 986 2\\r\\n\", \"output\": [\"2959\"]}, {\"input\": \"985 2 2\\r\\n\", \"output\": [\"2956\"]}, {\"input\": \"2 958 983\\r\\n\", \"output\": [\"943654\"]}, {\"input\": \"992 2 912\\r\\n\", \"output\": [\"906607\"]}, {\"input\": \"789 894 2\\r\\n\", \"output\": [\"707048\"]}, {\"input\": \"1000 1000 1000\\r\\n\", \"output\": [\"2997001\"]}, {\"input\": \"384 458 284\\r\\n\", \"output\": [\"413875\"]}, {\"input\": \"709 14 290\\r\\n\", \"output\": [\"218584\"]}, {\"input\": \"485 117 521\\r\\n\", \"output\": [\"369265\"]}, {\"input\": \"849 333 102\\r\\n\", \"output\": [\"401998\"]}, {\"input\": \"998 999 1000\\r\\n\", \"output\": [\"2991006\"]}, {\"input\": \"2 2 1000\\r\\n\", \"output\": [\"3001\"]}, {\"input\": \"2 1000 2\\r\\n\", \"output\": [\"3001\"]}, {\"input\": \"1000 2 2\\r\\n\", \"output\": [\"3001\"]}, {\"input\": \"1000 2 1000\\r\\n\", \"output\": [\"1001999\"]}, {\"input\": \"865 291 383\\r\\n\", \"output\": [\"692925\"]}, {\"input\": \"41 49 28\\r\\n\", \"output\": [\"4412\"]}, {\"input\": \"34 86 90\\r\\n\", \"output\": [\"13515\"]}, {\"input\": \"39 23 56\\r\\n\", \"output\": [\"4252\"]}, {\"input\": \"14 99 81\\r\\n\", \"output\": [\"10346\"]}, {\"input\": \"48 38 193\\r\\n\", \"output\": [\"18144\"]}, {\"input\": \"395 85 22\\r\\n\", \"output\": [\"43634\"]}, {\"input\": \"38 291 89\\r\\n\", \"output\": [\"39922\"]}, {\"input\": \"7 23 595\\r\\n\", \"output\": [\"17387\"]}, {\"input\": \"948 48 3\\r\\n\", \"output\": [\"47494\"]}]","length":50,"num_hidden_unit_tests":40}
{"prob_desc_memory_limit":"64 megabytes","difficulty":1900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"6 1\", \"4 2\"]","prob_desc_input_spec":"The first line contains a pair of integers n and t (3\u2009\u2264\u2009n\u2009\u2264\u200920, 1\u2009\u2264\u2009t\u2009\u2264\u200910).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"6d67559744583229455c5eafe68f7952","prob_desc_created_at":"1274283000","source_code":"#include <algorithm>\n#include <iostream>\n#include <sstream>\n#include <fstream>\n#include <memory>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <climits>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#define sz(a) int((a).size())\n#define foreach(i, v) for(typeof((v).begin()) i=(v).begin(); i!=(v).end(); i++)\nusing namespace std;\ntypedef long long llong;\ntypedef pair<int, int> Item;\n\nconst int Maxn = 1000+10;\nconst int INF = 0x7f7f7f7f;\nconst double eps = 1e-10;\nconst double pi = acos(-1.0);\ninline int compare(double a, double b){ return (a>b+eps) ? 1 : ((a+eps<b)?-1:0); }\n\nint f[22][5][5][22];\n\nint main()\n{\n\tint ans=0, n, t;\n\n    cin>>n>>t;\n    t += t-1;\n    for(int j=1; j<=4; j++)\n    \tfor(int k=1; k<=4; k++)\n    \t\tif( j != k )\n    \t\t\tf[2][j][k][0] = 1;\n    for(int i=2; i<n; i++)\n    \tfor(int j=1; j<=4; j++)\n    \t\tfor(int k=1; k<=4; k++)\n    \t\t\tif( j != k )\n\t\t\t\t\tfor(int c=0; c<=t; c++)\n\t\t\t\t\t\tfor(int x=1; x<=4; x++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( (k>j&&k>x) || (k<j&&k<x) )\n\t\t\t\t\t\t\t\tf[i+1][k][x][c+1] += f[i][j][k][c];\n\t\t\t\t\t\t\telse if( k != x )\n\t\t\t\t\t\t\t\tf[i+1][k][x][c] += f[i][j][k][c];\n\t\t\t\t\t\t}\n\tfor(int j=1; j<=4; j++)\n\t\tfor(int k=1; k<=4; k++)\n\t\t\tif( j != k )\n\t\t\t\tans += f[n][j][k][t];\n\tcout<<ans\/2<<endl;\n\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"6\", \"0\"]","lang_cluster":"C++","code_uid":"5d84b155fd60bf09c24a0b5b933e542d","prob_desc_notes":"NoteIn the first sample test sequences of y-coordinates for six camels are: 123421, 123431, 123432, 124321, 134321 \u0438 234321 (each digit corresponds to one value of yi).","prob_desc_output_spec":"Output the required amount of camels with t humps.","prob_desc_output_to":"standard output","prob_desc_description":"Bob likes to draw camels: with a single hump, two humps, three humps, etc. He draws a camel by connecting points on a coordinate plane. Now he's drawing camels with t humps, representing them as polylines in the plane. Each polyline consists of n vertices with coordinates (x1,\u2009y1), (x2,\u2009y2), ..., (xn,\u2009yn). The first vertex has a coordinate x1\u2009=\u20091, the second \u2014 x2\u2009=\u20092, etc. Coordinates yi might be any, but should satisfy the following conditions:  there should be t humps precisely, i.e. such indexes j (2\u2009\u2264\u2009j\u2009\u2264\u2009n\u2009-\u20091), so that yj\u2009-\u20091\u2009&lt;\u2009yj\u2009&gt;\u2009yj\u2009+\u20091,  there should be precisely t\u2009-\u20091 such indexes j (2\u2009\u2264\u2009j\u2009\u2264\u2009n\u2009-\u20091), so that yj\u2009-\u20091\u2009&gt;\u2009yj\u2009&lt;\u2009yj\u2009+\u20091,  no segment of a polyline should be parallel to the Ox-axis,  all yi are integers between 1 and 4. For a series of his drawings of camels with t humps Bob wants to buy a notebook, but he doesn't know how many pages he will need. Output the amount of different polylines that can be drawn to represent camels with t humps for a given number n.","hidden_unit_tests":"[{\"input\": \"6 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 1\\r\\n\", \"output\": [\"22\"]}, {\"input\": \"4 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 1\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"5 2\\r\\n\", \"output\": [\"70\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"6 2\\r\\n\", \"output\": [\"232\"]}, {\"input\": \"6 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"19 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"19 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"19 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"19 4\\r\\n\", \"output\": [\"32632\"]}, {\"input\": \"19 5\\r\\n\", \"output\": [\"4594423\"]}, {\"input\": \"19 6\\r\\n\", \"output\": [\"69183464\"]}, {\"input\": \"19 7\\r\\n\", \"output\": [\"197939352\"]}, {\"input\": \"19 8\\r\\n\", \"output\": [\"109824208\"]}, {\"input\": \"19 9\\r\\n\", \"output\": [\"5846414\"]}, {\"input\": \"19 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 4\\r\\n\", \"output\": [\"12628\"]}, {\"input\": \"20 5\\r\\n\", \"output\": [\"3715462\"]}, {\"input\": \"20 6\\r\\n\", \"output\": [\"96046590\"]}, {\"input\": \"20 7\\r\\n\", \"output\": [\"468541040\"]}, {\"input\": \"20 8\\r\\n\", \"output\": [\"503245466\"]}, {\"input\": \"20 9\\r\\n\", \"output\": [\"90700276\"]}, {\"input\": \"20 10\\r\\n\", \"output\": [\"0\"]}]","length":60,"num_hidden_unit_tests":40}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"46 2\", \"2018 214\"]","prob_desc_input_spec":"The only line of input contains two space-separated integers p and k (1\u2009\u2264\u2009p\u2009\u2264\u20091018, 2\u2009\u2264\u2009k\u2009\u2264\u20092\u2009000).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"f4dbaa8deb2bd5c054fe34bb83bc6cd5","prob_desc_created_at":"1518609900","source_code":"#include<bits\/stdc++.h>\n#define int long long\n#define double long double\n#define pb push_back\n#define sp ' '\n#define endl '\\n'\n#define fi first\n#define se second\nusing namespace std;\nconst int mod=1e9+7;\nconst int N=1e5+7;\nconst double pi=acos(-1);\nvector<int> ans;\nsigned main()\n{\nint p,k;   cin>>p>>k;\nans.pb(p%k);\nif(p<k) return cout<<\"1\\n\"<<p,0;\nint cur=p\/k;\ncur*=(-1);\nwhile(cur >= k || cur<0)\n{\n\tint tem=(cur+k*abs(cur))%k;\n\tans.pb(tem);\n\tcur=(tem-cur)\/k;\n}\nif(cur>0) ans.pb(cur);\n\ncout<<ans.size()<<endl;\n\nfor(int i=0;i<ans.size();++i) cout<<ans[i]<<\" \";\n}\t","prob_desc_sample_outputs":"[\"7\\n0 1 0 0 1 1 1\", \"3\\n92 205 1\"]","lang_cluster":"C++","code_uid":"d3f80c93926a2ecb6b1507b9bb00ddfb","prob_desc_notes":"NoteIn the first example, f(x)\u2009=\u2009x6\u2009+\u2009x5\u2009+\u2009x4\u2009+\u2009x\u2009=\u2009(x5\u2009-\u2009x4\u2009+\u20093x3\u2009-\u20096x2\u2009+\u200912x\u2009-\u200923)\u00b7(x\u2009+\u20092)\u2009+\u200946.In the second example, f(x)\u2009=\u2009x2\u2009+\u2009205x\u2009+\u200992\u2009=\u2009(x\u2009-\u20099)\u00b7(x\u2009+\u2009214)\u2009+\u20092018.","prob_desc_output_spec":"If the polynomial does not exist, print a single integer -1, or output two lines otherwise. In the first line print a non-negative integer d \u2014 the number of coefficients in the polynomial. In the second line print d space-separated integers a0,\u2009a1,\u2009...,\u2009ad\u2009-\u20091, describing a polynomial  fulfilling the given requirements. Your output should satisfy 0\u2009\u2264\u2009ai\u2009&lt;\u2009k for all 0\u2009\u2264\u2009i\u2009\u2264\u2009d\u2009-\u20091, and ad\u2009-\u20091\u2009\u2260\u20090. If there are many possible solutions, print any of them.","prob_desc_output_to":"standard output","prob_desc_description":"In order to put away old things and welcome a fresh new year, a thorough cleaning of the house is a must.Little Tommy finds an old polynomial and cleaned it up by taking it modulo another. But now he regrets doing this...Given two integers p and k, find a polynomial f(x) with non-negative integer coefficients strictly less than k, whose remainder is p when divided by (x\u2009+\u2009k). That is, f(x)\u2009=\u2009q(x)\u00b7(x\u2009+\u2009k)\u2009+\u2009p, where q(x) is a polynomial (not necessarily with integer coefficients).","hidden_unit_tests":"[{\"input\": \"46 2\\r\\n\", \"output\": [\"7\\r\\n0\\r\\n1\\r\\n0\\r\\n0\\r\\n1\\r\\n1\\r\\n1\", \"7\\r\\n0 1 0 0 1 1 1\"]}, {\"input\": \"2018 214\\r\\n\", \"output\": [\"3\\r\\n92\\r\\n205\\r\\n1\", \"3\\r\\n92 205 1\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"3\\r\\n0\\r\\n0\\r\\n1\", \"3\\r\\n0 0 1\"]}, {\"input\": \"5 2\\r\\n\", \"output\": [\"3\\r\\n1 0 1\", \"3\\r\\n1\\r\\n0\\r\\n1\"]}, {\"input\": \"10 3\\r\\n\", \"output\": [\"3\\r\\n1 0 1\", \"3\\r\\n1\\r\\n0\\r\\n1\"]}, {\"input\": \"250 1958\\r\\n\", \"output\": [\"1\\r\\n250\"]}, {\"input\": \"1000000000000000000 2000\\r\\n\", \"output\": [\"7\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n500\\r\\n1969\\r\\n1\", \"7\\r\\n0 0 0 0 500 1969 1\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"3\\r\\n0\\r\\n1\\r\\n1\", \"3\\r\\n0 1 1\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"3\\r\\n1 1 1\", \"3\\r\\n1\\r\\n1\\r\\n1\"]}, {\"input\": \"6 2\\r\\n\", \"output\": [\"5\\r\\n0\\r\\n1\\r\\n0\\r\\n1\\r\\n1\", \"5\\r\\n0 1 0 1 1\"]}, {\"input\": \"7 2\\r\\n\", \"output\": [\"5\\r\\n1 1 0 1 1\", \"5\\r\\n1\\r\\n1\\r\\n0\\r\\n1\\r\\n1\"]}, {\"input\": \"8 2\\r\\n\", \"output\": [\"5\\r\\n0\\r\\n0\\r\\n0\\r\\n1\\r\\n1\", \"5\\r\\n0 0 0 1 1\"]}, {\"input\": \"9 2\\r\\n\", \"output\": [\"5\\r\\n1 0 0 1 1\", \"5\\r\\n1\\r\\n0\\r\\n0\\r\\n1\\r\\n1\"]}, {\"input\": \"10 2\\r\\n\", \"output\": [\"5\\r\\n0\\r\\n1\\r\\n1\\r\\n1\\r\\n1\", \"5\\r\\n0 1 1 1 1\"]}, {\"input\": \"1 3\\r\\n\", \"output\": [\"1\\r\\n1\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"1\\r\\n2\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"3\\r\\n0\\r\\n2\\r\\n1\", \"3\\r\\n0 2 1\"]}, {\"input\": \"4 3\\r\\n\", \"output\": [\"3\\r\\n1 2 1\", \"3\\r\\n1\\r\\n2\\r\\n1\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"3\\r\\n2\\r\\n2\\r\\n1\", \"3\\r\\n2 2 1\"]}, {\"input\": \"6 3\\r\\n\", \"output\": [\"3\\r\\n0\\r\\n1\\r\\n1\", \"3\\r\\n0 1 1\"]}, {\"input\": \"7 3\\r\\n\", \"output\": [\"3\\r\\n1 1 1\", \"3\\r\\n1\\r\\n1\\r\\n1\"]}, {\"input\": \"8 3\\r\\n\", \"output\": [\"3\\r\\n2 1 1\", \"3\\r\\n2\\r\\n1\\r\\n1\"]}, {\"input\": \"9 3\\r\\n\", \"output\": [\"3\\r\\n0\\r\\n0\\r\\n1\", \"3\\r\\n0 0 1\"]}, {\"input\": \"462 2\\r\\n\", \"output\": [\"11\\r\\n0 1 0 0 1 0 1 1 0 1 1\", \"11\\r\\n0\\r\\n1\\r\\n0\\r\\n0\\r\\n1\\r\\n0\\r\\n1\\r\\n1\\r\\n0\\r\\n1\\r\\n1\"]}, {\"input\": \"462 3\\r\\n\", \"output\": [\"7\\r\\n0 2 1 1 0 1 1\", \"7\\r\\n0\\r\\n2\\r\\n1\\r\\n1\\r\\n0\\r\\n1\\r\\n1\"]}, {\"input\": \"2018 4\\r\\n\", \"output\": [\"7\\r\\n2 0 2 1 0 2 1\", \"7\\r\\n2\\r\\n0\\r\\n2\\r\\n1\\r\\n0\\r\\n2\\r\\n1\"]}, {\"input\": \"20180214 5\\r\\n\", \"output\": [\"11\\r\\n4\\r\\n3\\r\\n4\\r\\n4\\r\\n4\\r\\n3\\r\\n2\\r\\n2\\r\\n2\\r\\n0\\r\\n2\", \"11\\r\\n4 3 4 4 4 3 2 2 2 0 2\"]}, {\"input\": \"1317 221\\r\\n\", \"output\": [\"3\\r\\n212\\r\\n216\\r\\n1\", \"3\\r\\n212 216 1\"]}, {\"input\": \"1314 520\\r\\n\", \"output\": [\"3\\r\\n274 518 1\", \"3\\r\\n274\\r\\n518\\r\\n1\"]}, {\"input\": \"1562 862\\r\\n\", \"output\": [\"3\\r\\n700\\r\\n861\\r\\n1\", \"3\\r\\n700 861 1\"]}, {\"input\": \"6666666666666666 3\\r\\n\", \"output\": [\"35\\r\\n0\\r\\n1\\r\\n2\\r\\n0\\r\\n0\\r\\n2\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n0\\r\\n0\\r\\n0\\r\\n2\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n2\\r\\n0\\r\\n1\\r\\n1\\r\\n2\\r\\n1\", \"35\\r\\n0 1 2 0 0 2 2 1 2 2 1 1 2 2 2 2 0 0 0 2 1 2 1 1 1 1 1 2 1 2 0 1 1 2 1\"]}, {\"input\": \"252525252525252525 252\\r\\n\", \"output\": [\"9\\r\\n189 176 211 80 27 238 231 249 1\", \"9\\r\\n189\\r\\n176\\r\\n211\\r\\n80\\r\\n27\\r\\n238\\r\\n231\\r\\n249\\r\\n1\"]}, {\"input\": \"271828182845904523 536\\r\\n\", \"output\": [\"7\\r\\n3 157 21 240 147 288 12\", \"7\\r\\n3\\r\\n157\\r\\n21\\r\\n240\\r\\n147\\r\\n288\\r\\n12\"]}, {\"input\": \"314159265358979323 846\\r\\n\", \"output\": [\"7\\r\\n553 47 111 353 790 122 1\", \"7\\r\\n553\\r\\n47\\r\\n111\\r\\n353\\r\\n790\\r\\n122\\r\\n1\"]}, {\"input\": \"393939393939393939 393\\r\\n\", \"output\": [\"7\\r\\n237\\r\\n191\\r\\n82\\r\\n181\\r\\n11\\r\\n30\\r\\n107\", \"7\\r\\n237 191 82 181 11 30 107\"]}, {\"input\": \"233333333333333333 2000\\r\\n\", \"output\": [\"7\\r\\n1333 1334 1334 1334 584 1993 1\", \"7\\r\\n1333\\r\\n1334\\r\\n1334\\r\\n1334\\r\\n584\\r\\n1993\\r\\n1\"]}, {\"input\": \"998244353998244353 2000\\r\\n\", \"output\": [\"7\\r\\n353\\r\\n878\\r\\n500\\r\\n1456\\r\\n391\\r\\n1969\\r\\n1\", \"7\\r\\n353 878 500 1456 391 1969 1\"]}, {\"input\": \"1000000000000000000 2\\r\\n\", \"output\": [\"61\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 1 0 0 0 0 1 0 0 0 1 0 0 1\", \"61\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1\\r\\n0\\r\\n0\\r\\n1\\r\\n0\\r\\n1\\r\\n0\\r\\n0\\r\\n0\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n0\\r\\n0\\r\\n1\\r\\n0\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n0\\r\\n1\\r\\n0\\r\\n0\\r\\n1\\r\\n1\\r\\n1\\r\\n0\\r\\n0\\r\\n0\\r\\n0\\r\\n1\\r\\n0\\r\\n0\\r\\n0\\r\\n1\\r\\n0\\r\\n0\\r\\n1\"]}, {\"input\": \"1000000000000000000 3\\r\\n\", \"output\": [\"39\\r\\n1 0 0 0 2 0 2 2 0 2 0 0 1 1 1 2 1 1 1 0 1 2 2 0 1 1 1 2 0 0 0 1 0 0 0 1 1 1 1\", \"39\\r\\n1\\r\\n0\\r\\n0\\r\\n0\\r\\n2\\r\\n0\\r\\n2\\r\\n2\\r\\n0\\r\\n2\\r\\n0\\r\\n0\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n0\\r\\n1\\r\\n2\\r\\n2\\r\\n0\\r\\n1\\r\\n1\\r\\n1\\r\\n2\\r\\n0\\r\\n0\\r\\n0\\r\\n1\\r\\n0\\r\\n0\\r\\n0\\r\\n1\\r\\n1\\r\\n1\\r\\n1\"]}]","length":32,"num_hidden_unit_tests":40}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2100.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1\", \"2\", \"3\"]","prob_desc_input_spec":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u200940).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"c2cbc35012c6ff7ab0d6899e6015e4e7","prob_desc_created_at":"1348069500","source_code":"\/\/Tornike Mandzulashvili\n\/\/#pragma comment(linker, \"\/STACK:16777216\")\n#include <time.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <map>\n#include <queue>\n#include <iostream>\n#include <set>\n#define PI 3.14159265\n#define hash1 1000003\n#define hash2 1000033\n#define md 1000000007\n#define INF 1000000000\n\nusing namespace std;\n\nlong long d[41]={2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279, 2203, 2281, 3217, 4253, 4423, 9689, 9941, 11213, 19937, 21701, 23209, 44497, 86243, 110503, 132049, 216091, 756839, 859433, 1257787, 1398269, 2976221, 3021377, 6972593, 13466917, 20996011, 24036583};\nlong long n;\nlong long go(long long num)\n{\n    if (num==0) return 1;\n    long long h=go(num\/2);\n    if (num%2) return (h*h%md)*2LL%md;else\n    return h*h%md;\n}\nmain()\n{\n\/\/freopen(\"text.in\",\"r\",stdin);freopen(\"text.out\",\"w\",stdout);\n\n      cin>>n;\n      cout<<(go(d[n-1]-1)+md-1)%md<<endl;\n}\n","prob_desc_sample_outputs":"[\"1\", \"3\", \"15\"]","lang_cluster":"C++","code_uid":"4276d207f622e526066976606182dc37","prob_desc_notes":null,"prob_desc_output_spec":"Print a single integer \u2014 the number zn modulo 1000000007 (109\u2009+\u20097). It is guaranteed that the answer exists.","prob_desc_output_to":"standard output","prob_desc_description":"Consider the following equation:  where sign [a] represents the integer part of number a.Let's find all integer z (z\u2009&gt;\u20090), for which this equation is unsolvable in positive integers. The phrase \"unsolvable in positive integers\" means that there are no such positive integers x and y (x,\u2009y\u2009&gt;\u20090), for which the given above equation holds.Let's write out all such z in the increasing order: z1,\u2009z2,\u2009z3, and so on (zi\u2009&lt;\u2009zi\u2009+\u20091). Your task is: given the number n, find the number zn.","hidden_unit_tests":"[{\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"63\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"4095\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"65535\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"262143\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"73741816\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"536396503\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"140130950\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"487761805\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"319908070\"]}, {\"input\": \"13\\r\\n\", \"output\": [\"106681874\"]}, {\"input\": \"14\\r\\n\", \"output\": [\"373391776\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"317758023\"]}, {\"input\": \"16\\r\\n\", \"output\": [\"191994803\"]}, {\"input\": \"17\\r\\n\", \"output\": [\"416292236\"]}, {\"input\": \"18\\r\\n\", \"output\": [\"110940209\"]}, {\"input\": \"19\\r\\n\", \"output\": [\"599412198\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"383601260\"]}, {\"input\": \"21\\r\\n\", \"output\": [\"910358878\"]}, {\"input\": \"22\\r\\n\", \"output\": [\"532737550\"]}, {\"input\": \"23\\r\\n\", \"output\": [\"348927936\"]}, {\"input\": \"24\\r\\n\", \"output\": [\"923450985\"]}, {\"input\": \"25\\r\\n\", \"output\": [\"470083777\"]}, {\"input\": \"26\\r\\n\", \"output\": [\"642578561\"]}, {\"input\": \"27\\r\\n\", \"output\": [\"428308066\"]}, {\"input\": \"28\\r\\n\", \"output\": [\"485739298\"]}, {\"input\": \"29\\r\\n\", \"output\": [\"419990027\"]}, {\"input\": \"30\\r\\n\", \"output\": [\"287292016\"]}, {\"input\": \"31\\r\\n\", \"output\": [\"202484167\"]}, {\"input\": \"32\\r\\n\", \"output\": [\"389339971\"]}, {\"input\": \"33\\r\\n\", \"output\": [\"848994100\"]}, {\"input\": \"34\\r\\n\", \"output\": [\"273206869\"]}, {\"input\": \"35\\r\\n\", \"output\": [\"853092282\"]}, {\"input\": \"36\\r\\n\", \"output\": [\"411696552\"]}, {\"input\": \"37\\r\\n\", \"output\": [\"876153853\"]}, {\"input\": \"38\\r\\n\", \"output\": [\"90046024\"]}, {\"input\": \"39\\r\\n\", \"output\": [\"828945523\"]}, {\"input\": \"40\\r\\n\", \"output\": [\"697988359\"]}]","length":37,"num_hidden_unit_tests":40}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2600.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"4\\n3 2 3 2\", \"5\\n2 3 3 2 2\", \"5\\n2 2 2 2 2\", \"20\\n2 2 2 2 3 2 3 2 2 2 2 2 2 2 2 2 2 3 3 2\"]","prob_desc_input_spec":"The first line of input contains a positive integer n (3\u2009\u2264\u2009n\u2009\u2264\u200950) \u2014 the number of towns. The second line contains n space-separated integers d1,\u2009d2,\u2009...,\u2009dn (2\u2009\u2264\u2009di\u2009\u2264\u20093) \u2014 the number of roads connected to towns 1,\u20092,\u2009...,\u2009n, respectively. It is guaranteed that the sum of di over all i is even.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"db884d679d9cfb1dc4bc511f83beedda","prob_desc_created_at":"1496837700","source_code":"\/\/By Akanesasu\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cctype>\n#include<ctime>\n#include<cstdlib>\n#include<string>\n#include<queue>\n#include<cmath>\n#include<set>\n#include<map>\n#include<bitset>\n#include<vector>\n#define rep(x,a,b) for (int x=int(a);x<=(int)(b);x++)\n#define drp(x,a,b) for (int x=int(a);x>=(int)(b);x--)\n#define cross(x,a) for (int x=hd[a];~x;x=nx[x])\n#define ll long long\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define mk(a,b) make_pair(a,b)\n#define fs first\n#define sc second\n#define pb push_back\n#define VI vector<int>\n#define VS vector<string>\nusing namespace std;\ninline ll rd(){\n\tll x=0;int ch=getchar(),f=1;\n\twhile (!isdigit(ch)&&(ch!='-')&&(ch!=EOF)) ch=getchar();\n\tif (ch=='-'){f=-1;ch=getchar();}\n\twhile (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\ninline void rt(ll x){\n\tif (x<0) putchar('-'),x=-x;\n\tif (x>=10) rt(x\/10),putchar(x%10+'0');\n\t\telse putchar(x+'0');\n}\nconst int maxn=55,p=1000000007,inv2=500000004;\nint n;\nll f[maxn][maxn][maxn],g[maxn][maxn];\n\/\/f[i][j][k]\ufffd\ufffd\u02bei\ufffd\ufffd1 j\ufffd\ufffd2 \ufffd\ufffd\ufffd\ufffd\u0225k\ufffd\ufffd\ufffd\u07f5\u0137\ufffd\ufffd\ufffd\ufffd\ufffd\nvoid upd(ll &x,ll y){\n\tx=(x+y)%p;\n}\nvoid prepare(){\n\tf[0][0][0]=1;\n\trep(k,0,n-1) rep(j,0,n) rep(i,0,n-j){\n\t\tll &v=f[i][j][k];\n\t\tif (j){\n\t\t\tif (i>1) upd(v,f[i-2][j-1][k]*(i*(i-1)\/2));\t\t\/\/2-1 2-1\n\t\t\tif (i&&j>1) upd(v,f[i][j-2][k]*i*(j-1));\t\t\/\/2-1 2-2\n\t\t\tif (j>2) upd(v,f[i+2][j-3][k]*((j-1)*(j-2)\/2));\t\/\/2-2 2-2\n\t\t\tif (i) upd(v,f[i-1][j-1][k-1]*i);\t\t\t\t\/\/2-1\n\t\t\tif (j>1) upd(v,f[i+1][j-2][k-1]*(j-1));\t\t\t\/\/2-2\n\t\t\tupd(v,f[i][j-1][k-2]*inv2);\t\t\t\t\t\t\/\/Nope\n\t\t}\n\t\telse if (i){\n\t\t\tif (i>1) upd(v,f[i-2][j][k]*(i-1));\t\/\/1-1\n\t\t\tupd(v,f[i-1][j][k-1]);\t\t\t\t\/\/Nope\n\t\t}\n\t}\n\tll fac=1;\n\trep(k,0,n-1){\n\t\trep(i,0,n) rep(j,0,n-i) (f[i][j][k]*=fac)%=p;\n\t\t(fac*=k+1)%=p;\n\t}\n}\nint a[maxn];\nint main(){\n\tn=rd();\n\trep(i,1,n) a[i]=rd();\n\tprepare();\n\tg[1][a[1]]=1;\n\tll v;\n\trep(i,1,n-1) rep(j,1,n-i) if ((v=g[i][j])){\n\t\tint n1=0,n2=0;\n\t\trep(k,i+1,i+j) if (a[k]==2) n1++;else n2++;\n\t\trep(k,0,n1+2*n2) upd(g[i+j][k],v*f[n1][n2][k]);\n\t}\n\trt(g[n][0]),putchar('\\n');\n}\n","prob_desc_sample_outputs":"[\"1\", \"2\", \"2\", \"82944\"]","lang_cluster":"C++","code_uid":"c3eb46e72a6bff91339250903a0993ca","prob_desc_notes":"NoteIn the first example, the following structure is the only one to satisfy the constraints, the distances from towns 2,\u20093,\u20094 to the capital are all 1.  In the second example, the following two structures satisfy the constraints.  ","prob_desc_output_spec":"Output one integer \u2014 the total number of different possible ways in which the towns are connected, modulo 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"Those unwilling to return home from a long journey, will be affected by the oddity of the snail and lose their way. Mayoi, the oddity's carrier, wouldn't like this to happen, but there's nothing to do with this before a cure is figured out. For now, she would only like to know the enormous number of possibilities to be faced with if someone gets lost.There are n towns in the region, numbered from 1 to n. The town numbered 1 is called the capital. The traffic network is formed by bidirectional roads connecting pairs of towns. No two roads connect the same pair of towns, and no road connects a town with itself. The time needed to travel through each of the roads is the same. Lost travelers will not be able to find out how the towns are connected, but the residents can help them by providing the following facts:   Starting from each town other than the capital, the shortest path (i.e. the path passing through the minimum number of roads) to the capital exists, and is unique;  Let li be the number of roads on the shortest path from town i to the capital, then li\u2009\u2265\u2009li\u2009-\u20091 holds for all 2\u2009\u2264\u2009i\u2009\u2264\u2009n;  For town i, the number of roads connected to it is denoted by di, which equals either 2 or 3. You are to count the number of different ways in which the towns are connected, and give the answer modulo 109\u2009+\u20097. Two ways of connecting towns are considered different if a pair (u,\u2009v) (1\u2009\u2264\u2009u,\u2009v\u2009\u2264\u2009n) exists such there is a road between towns u and v in one of them but not in the other.","hidden_unit_tests":"[{\"input\": \"4\\r\\n3 2 3 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n2 3 3 2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5\\r\\n2 2 2 2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"20\\r\\n2 2 2 2 3 2 3 2 2 2 2 2 2 2 2 2 2 3 3 2\\r\\n\", \"output\": [\"82944\"]}, {\"input\": \"10\\r\\n2 3 3 2 2 3 2 3 3 3\\r\\n\", \"output\": [\"174\"]}, {\"input\": \"10\\r\\n3 2 2 2 2 3 3 3 2 2\\r\\n\", \"output\": [\"90\"]}, {\"input\": \"30\\r\\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\r\\n\", \"output\": [\"253834198\"]}, {\"input\": \"50\\r\\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\r\\n\", \"output\": [\"897520452\"]}, {\"input\": \"49\\r\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"8388608\"]}, {\"input\": \"50\\r\\n3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 3 2 2 2 2 3 2 2 3 3 2 2 2 2 2 3 3 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"625963067\"]}, {\"input\": \"50\\r\\n2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3\\r\\n\", \"output\": [\"605928958\"]}, {\"input\": \"50\\r\\n2 2 2 2 2 2 2 2 2 2 2 3 2 2 3 2 2 2 2 2 2 2 3 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 3 2 2 2 2\\r\\n\", \"output\": [\"572404299\"]}, {\"input\": \"50\\r\\n3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 3\\r\\n\", \"output\": [\"820793400\"]}, {\"input\": \"3\\r\\n2 2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3\\r\\n2 3 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n3 3 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8\\r\\n3 2 3 2 3 2 3 2\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"8\\r\\n3 3 2 3 2 3 2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"15\\r\\n3 3 3 3 3 2 3 2 3 2 3 2 3 2 3\\r\\n\", \"output\": [\"2948400\"]}, {\"input\": \"50\\r\\n2 2 3 2 2 3 3 3 3 2 2 2 3 3 2 3 2 3 2 3 2 3 3 3 2 3 3 3 3 3 2 2 2 2 2 2 2 3 3 2 3 2 2 3 3 2 2 2 2 3\\r\\n\", \"output\": [\"703208053\"]}, {\"input\": \"50\\r\\n2 3 2 2 3 3 2 2 2 3 2 3 3 3 3 3 2 3 3 2 3 2 3 2 2 3 2 2 2 3 2 3 2 3 2 2 2 2 2 2 2 2 3 2 2 2 2 3 2 3\\r\\n\", \"output\": [\"434156356\"]}, {\"input\": \"50\\r\\n2 3 2 2 2 2 3 2 2 3 2 3 3 2 2 2 2 3 3 3 2 2 2 3 3 2 3 3 3 3 2 2 3 2 2 2 3 3 3 3 3 3 2 3 3 3 3 3 2 2\\r\\n\", \"output\": [\"540587735\"]}, {\"input\": \"50\\r\\n3 3 3 3 3 3 3 3 2 3 3 2 3 2 3 2 3 2 2 2 2 2 3 2 2 3 2 2 3 3 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"11747611\"]}, {\"input\": \"50\\r\\n3 3 3 3 3 3 3 3 3 3 2 3 2 2 3 3 3 2 3 2 2 2 2 2 3 2 2 3 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"684567833\"]}, {\"input\": \"50\\r\\n2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 2 2 3 3 3 3 2 3 3 3 3 3 3 3 3 2 2 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3\\r\\n\", \"output\": [\"807598887\"]}, {\"input\": \"50\\r\\n2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 2 3 3 3 2 3 3 3 3 3 2 2 3 3 3 3 3 3 3 2 3 3 3 3 2 3 3 2 3 2 3 3 3 3\\r\\n\", \"output\": [\"803634890\"]}, {\"input\": \"50\\r\\n2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"872305797\"]}, {\"input\": \"50\\r\\n2 2 2 2 2 2 3 2 2 2 3 2 2 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 2 2 2 2\\r\\n\", \"output\": [\"786639413\"]}, {\"input\": \"50\\r\\n3 2 2 3 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 2 3 3 3 3 2 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3\\r\\n\", \"output\": [\"879153557\"]}, {\"input\": \"50\\r\\n3 3 3 3 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 2 3 2 2 3 3 3 3 3 3 2 3 3\\r\\n\", \"output\": [\"238531584\"]}, {\"input\": \"3\\r\\n3 2 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4\\r\\n3 3 2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5\\r\\n3 3 2 3 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6\\r\\n3 3 2 2 2 2\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"7\\r\\n3 2 3 3 2 3 2\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"8\\r\\n3 2 3 2 3 2 3 2\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"9\\r\\n3 2 2 3 2 3 2 3 2\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10\\r\\n2 2 3 2 2 3 3 2 2 3\\r\\n\", \"output\": [\"72\"]}, {\"input\": \"47\\r\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n\", \"output\": [\"4194304\"]}, {\"input\": \"49\\r\\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\r\\n\", \"output\": [\"63101281\"]}]","length":83,"num_hidden_unit_tests":40}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1 1 1 2\", \"1 2 3 1\", \"10 2 1 7\"]","prob_desc_input_spec":"The single line contains 4 integers a,\u2009b,\u2009c,\u2009l (1\u2009\u2264\u2009a,\u2009b,\u2009c\u2009\u2264\u20093\u00b7105, 0\u2009\u2264\u2009l\u2009\u2264\u20093\u00b7105).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"185ff90a8b0ae0e2b75605f772589410","prob_desc_created_at":"1440261000","source_code":"#include <bits\/stdc++.h>\n#define N 3\n\nusing namespace std;\ninline int MAX(int a,int b){return (a<b)?b:a;}\ninline int MIN(int a,int b){return (a>b)?b:a;} \nlong long int l,la,lb,lc;\nint g[N];\n\n\nint main()\n{\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  for(int i=0;i<N;++i)\n  \tcin>>g[i];\n  cin>>l;\n  sort(g,g+N);\n  long long int cnt=0;\n  long long int sum=(l+1)*(l+2)*(l+3)\/6;\n  for(int i=0;i<N;++i)\n  {\n  \tfor(la=0;la<=l;++la)\n  \t{\n  \t\tif(la+g[i]<g[(i+1)%3]+g[(i+2)%3])\n  \t\t\tcontinue;\n  \t\tlong long int x=MIN((g[i]+la-g[(i+1)%3]-g[(i+2)%3])\/2,la);\n  \t\tif(x>=0)\n  \t\t\tcnt+=(x+1)*(x+2)\/2;\n \t}\n  }\n  cout<<sum-cnt<<endl;\n  return 0;\n}","prob_desc_sample_outputs":"[\"4\", \"2\", \"0\"]","lang_cluster":"C++","code_uid":"def6071840dadc613cde5243bd5a9a1b","prob_desc_notes":"NoteIn the first sample test you can either not increase any stick or increase any two sticks by 1 centimeter.In the second sample test you can increase either the first or the second stick by one centimeter. Note that the triangle made from the initial sticks is degenerate and thus, doesn't meet the conditions.","prob_desc_output_spec":"Print a single integer \u2014 the number of ways to increase the sizes of the sticks by the total of at most l centimeters, so that you can make a non-degenerate triangle from it.","prob_desc_output_to":"standard output","prob_desc_description":"You are given three sticks with positive integer lengths of a,\u2009b, and c centimeters. You can increase length of some of them by some positive integer number of centimeters (different sticks can be increased by a different length), but in total by at most l centimeters. In particular, it is allowed not to increase the length of any stick.Determine the number of ways to increase the lengths of some sticks so that you can form from them a non-degenerate (that is, having a positive area) triangle. Two ways are considered different, if the length of some stick is increased by different number of centimeters in them.","hidden_unit_tests":"[{\"input\": \"1 1 1 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 2 3 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10 2 1 7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 2 1 5\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"10 15 17 10\\r\\n\", \"output\": [\"281\"]}, {\"input\": \"5 5 5 10000\\r\\n\", \"output\": [\"41841675001\"]}, {\"input\": \"5 7 30 100\\r\\n\", \"output\": [\"71696\"]}, {\"input\": \"5 5 5 300000\\r\\n\", \"output\": [\"1125157500250001\"]}, {\"input\": \"4 2 5 28\\r\\n\", \"output\": [\"1893\"]}, {\"input\": \"2 7 8 4\\r\\n\", \"output\": [\"25\"]}, {\"input\": \"85 50 17 89\\r\\n\", \"output\": [\"68620\"]}, {\"input\": \"17 28 19 5558\\r\\n\", \"output\": [\"7396315389\"]}, {\"input\": \"5276 8562 1074 8453\\r\\n\", \"output\": [\"49093268246\"]}, {\"input\": \"9133 7818 3682 82004\\r\\n\", \"output\": [\"38306048676255\"]}, {\"input\": \"81780 54799 231699 808\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"53553 262850 271957 182759\\r\\n\", \"output\": [\"834977070873802\"]}, {\"input\": \"300000 300000 300000 300000\\r\\n\", \"output\": [\"4500090000549998\"]}, {\"input\": \"1 1 300000 300000\\r\\n\", \"output\": [\"599999\"]}, {\"input\": \"300000 300000 1 300000\\r\\n\", \"output\": [\"2250045000350001\"]}, {\"input\": \"300000 300000 1 24234\\r\\n\", \"output\": [\"1186319275394\"]}, {\"input\": \"1 1 1 300000\\r\\n\", \"output\": [\"1125022500250001\"]}, {\"input\": \"3 5 7 300000\\r\\n\", \"output\": [\"1125157499050009\"]}, {\"input\": \"63 5 52 78\\r\\n\", \"output\": [\"46502\"]}, {\"input\": \"2 42 49 93\\r\\n\", \"output\": [\"72542\"]}, {\"input\": \"61 100 3 8502\\r\\n\", \"output\": [\"27050809786\"]}, {\"input\": \"30 918 702 591\\r\\n\", \"output\": [\"14315560\"]}, {\"input\": \"98406 37723 3 257918\\r\\n\", \"output\": [\"1154347569149860\"]}, {\"input\": \"552 250082 77579 278985\\r\\n\", \"output\": [\"596240712378446\"]}, {\"input\": \"183808 8 8 294771\\r\\n\", \"output\": [\"622921327009564\"]}, {\"input\": \"2958 4133 233463 259655\\r\\n\", \"output\": [\"65797591388150\"]}, {\"input\": \"300000 200000 100000 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"300000 200000 100000 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100000 300000 100000 100000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100000 300000 100000 100001\\r\\n\", \"output\": [\"100002\"]}, {\"input\": \"100000 300000 100000 100002\\r\\n\", \"output\": [\"200005\"]}, {\"input\": \"100000 300000 100000 100003\\r\\n\", \"output\": [\"400012\"]}, {\"input\": \"100000 300000 100000 100010\\r\\n\", \"output\": [\"3000195\"]}, {\"input\": \"100000 300000 100000 100100\\r\\n\", \"output\": [\"255131325\"]}, {\"input\": \"100000 300000 199999 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100000 300000 200001 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 1 29 1\\r\\n\", \"output\": [\"0\"]}]","length":34,"num_hidden_unit_tests":41}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 4 3\", \"1 1 1\", \"2 3 3\"]","prob_desc_input_spec":"The single line contains three integers r, g and b (0\u2009\u2264\u2009r,\u2009g,\u2009b\u2009\u2264\u20092\u00b7109) \u2014 the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"bae7cbcde19114451b8712d6361d2b01","prob_desc_created_at":"1413474000","source_code":"#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint main()\n{\n\tlong long a[3];\n\tcin >> a[0] >> a[1] >> a[2];\n\tsort(a, a + 3);\n\tif (2 * (a[0] + a[1]) <= a[2])cout << a[0] + a[1] << endl;\n\telse cout << (a[0] + a[1] + a[2]) \/ 3 << endl;\n\treturn 0;\n}\n\n                                                                                                      ","prob_desc_sample_outputs":"[\"4\", \"1\", \"2\"]","lang_cluster":"C++","code_uid":"be05d3fa58dbfeffa131b459d87fc43b","prob_desc_notes":"NoteIn the first sample you can decorate the tables with the following balloon sets: \"rgg\", \"gbb\", \"brr\", \"rrg\", where \"r\", \"g\" and \"b\" represent the red, green and blue balls, respectively.","prob_desc_output_spec":"Print a single integer t \u2014 the maximum number of tables that can be decorated in the required manner.","prob_desc_output_to":"standard output","prob_desc_description":"You have r red, g green and b blue balloons. To decorate a single table for the banquet you need exactly three balloons. Three balloons attached to some table shouldn't have the same color. What maximum number t of tables can be decorated if we know number of balloons of each color?Your task is to write a program that for given values r, g and b will find the maximum number t of tables, that can be decorated in the required manner.","hidden_unit_tests":"[{\"input\": \"5 4 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 3 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"0 1 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 3 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 0 4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1000000000 1000000000 1000000000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"100 99 56\\r\\n\", \"output\": [\"85\"]}, {\"input\": \"1000 1000 1002\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"0 1 1000000000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"500000000 1000000000 500000000\\r\\n\", \"output\": [\"666666666\"]}, {\"input\": \"1000000000 2000000000 1000000000\\r\\n\", \"output\": [\"1333333333\"]}, {\"input\": \"2000000000 2000000000 2000000000\\r\\n\", \"output\": [\"2000000000\"]}, {\"input\": \"0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 2000000000 1000000000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"1585222789 1889821127 2000000000\\r\\n\", \"output\": [\"1825014638\"]}, {\"input\": \"10000 7500 7500\\r\\n\", \"output\": [\"8333\"]}, {\"input\": \"150000 75000 75000\\r\\n\", \"output\": [\"100000\"]}, {\"input\": \"999288131 55884921 109298382\\r\\n\", \"output\": [\"165183303\"]}, {\"input\": \"100500 100500 3\\r\\n\", \"output\": [\"67001\"]}, {\"input\": \"1463615122 1988383731 837331500\\r\\n\", \"output\": [\"1429776784\"]}, {\"input\": \"1938 8999 1882\\r\\n\", \"output\": [\"3820\"]}, {\"input\": \"45 33 76\\r\\n\", \"output\": [\"51\"]}, {\"input\": \"100000 1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"198488 50 18\\r\\n\", \"output\": [\"68\"]}, {\"input\": \"82728372 939848 100139442\\r\\n\", \"output\": [\"61269220\"]}, {\"input\": \"99 5747 5298\\r\\n\", \"output\": [\"3714\"]}, {\"input\": \"3 5 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"7511 7512 7513\\r\\n\", \"output\": [\"7512\"]}, {\"input\": \"1234567890 123456789 987654321\\r\\n\", \"output\": [\"781893000\"]}, {\"input\": \"500000000 2000000000 500000000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"500000002 2000000000 500000001\\r\\n\", \"output\": [\"1000000001\"]}, {\"input\": \"520000000 1000000033 501000000\\r\\n\", \"output\": [\"673666677\"]}, {\"input\": \"10000 1000 100000\\r\\n\", \"output\": [\"11000\"]}, {\"input\": \"2000000000 500000000 499999999\\r\\n\", \"output\": [\"999999999\"]}, {\"input\": \"1999999999 500000000 500000000\\r\\n\", \"output\": [\"999999999\"]}, {\"input\": \"1 1 9\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2000000000 1999999999 1999999999\\r\\n\", \"output\": [\"1999999999\"]}, {\"input\": \"3 4 9\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"3 3 6\\r\\n\", \"output\": [\"4\"]}]","length":15,"num_hidden_unit_tests":42}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"8\", \"64\", \"5\", \"999999\"]","prob_desc_input_spec":"The first line contains the positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009106)\u00a0\u2014 the number of pixels display should have.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"f52af273954798a4ae38a1378bfbf77a","prob_desc_created_at":"1482113100","source_code":"#include<bits\/stdc++.h>\nusing namespace std;\nint main()\n{\n    int x;\n    cin>>x; \/\/\u8f93\u5165 \n    int a;\n\ta=sqrt(x);\/\/\u5e73\u65b9\u6839\u8ba1\u7b97\uff0c\u66b4\u529b \n\tint i=a; \n\twhile(i!=0)\/\/while\u5faa\u73af \n\t{\n\t\tfor(int j=a;j<=x;j++)\n\t\t{\n            if(x==i*j)\/\/\u5c42\u5c42\u5224\u65ad\uff0cif\u662f\u5426\u7b26\u5408\u9898\u610f \n            {\n                cout<<i<<\" \"<<j;\/\/\u8f93\u51fa \n                return 0;\n            }\n\t\t} \n\t\ti--;\/\/i\u6bcf\u6b21\u51cf\u63891 \n\t}\n}","prob_desc_sample_outputs":"[\"2 4\", \"8 8\", \"1 5\", \"999 1001\"]","lang_cluster":"C++","code_uid":"a3175f40048809a689a18b6774ddb0e5","prob_desc_notes":"NoteIn the first example the minimum possible difference equals 2, so on the display should be 2 rows of 4 pixels.In the second example the minimum possible difference equals 0, so on the display should be 8 rows of 8 pixels.In the third example the minimum possible difference equals 4, so on the display should be 1 row of 5 pixels.","prob_desc_output_spec":"Print two integers\u00a0\u2014 the number of rows and columns on the display. ","prob_desc_output_to":"standard output","prob_desc_description":"A big company decided to launch a new series of rectangular displays, and decided that the display must have exactly n pixels. Your task is to determine the size of the rectangular display \u2014 the number of lines (rows) of pixels a and the number of columns of pixels b, so that:  there are exactly n pixels on the display;  the number of rows does not exceed the number of columns, it means a\u2009\u2264\u2009b;  the difference b\u2009-\u2009a is as small as possible. ","hidden_unit_tests":"[{\"input\": \"8\\r\\n\", \"output\": [\"2 4\"]}, {\"input\": \"64\\r\\n\", \"output\": [\"8 8\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"1 5\"]}, {\"input\": \"999999\\r\\n\", \"output\": [\"999 1001\"]}, {\"input\": \"716539\\r\\n\", \"output\": [\"97 7387\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1 2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1 3\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2 2\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"2 3\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"1 7\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"3 3\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"2 5\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"1 11\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"3 4\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"3 5\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"10 10\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"1 101\"]}, {\"input\": \"169\\r\\n\", \"output\": [\"13 13\"]}, {\"input\": \"179\\r\\n\", \"output\": [\"1 179\"]}, {\"input\": \"190\\r\\n\", \"output\": [\"10 19\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"25 40\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"100 100\"]}, {\"input\": \"10001\\r\\n\", \"output\": [\"73 137\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"250 400\"]}, {\"input\": \"100001\\r\\n\", \"output\": [\"11 9091\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"1000 1000\"]}, {\"input\": \"999983\\r\\n\", \"output\": [\"1 999983\"]}, {\"input\": \"524288\\r\\n\", \"output\": [\"512 1024\"]}, {\"input\": \"954493\\r\\n\", \"output\": [\"971 983\"]}, {\"input\": \"966289\\r\\n\", \"output\": [\"983 983\"]}, {\"input\": \"944663\\r\\n\", \"output\": [\"961 983\"]}, {\"input\": \"912673\\r\\n\", \"output\": [\"97 9409\"]}, {\"input\": \"732641\\r\\n\", \"output\": [\"679 1079\"]}, {\"input\": \"232897\\r\\n\", \"output\": [\"343 679\"]}, {\"input\": \"16807\\r\\n\", \"output\": [\"49 343\"]}, {\"input\": \"999958\\r\\n\", \"output\": [\"2 499979\"]}, {\"input\": \"990151\\r\\n\", \"output\": [\"1 990151\"]}, {\"input\": \"997002\\r\\n\", \"output\": [\"998 999\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"4 5\"]}, {\"input\": \"20261\\r\\n\", \"output\": [\"1 20261\"]}, {\"input\": \"999123\\r\\n\", \"output\": [\"3 333041\"]}, {\"input\": \"901841\\r\\n\", \"output\": [\"1 901841\"]}]","length":22,"num_hidden_unit_tests":43}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"836 624 412 200\", \"1 334 667 1000\"]","prob_desc_input_spec":"The first line contains exactly four integer numbers between 1 and 1000, inclusively.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"68a9508d49fec672f9c61766d6051047","prob_desc_created_at":"1373662800","source_code":"\/\/\/INCLUDE\n#include<algorithm>\n#include<iostream>\n#include<fstream>\n#include<cstring>\n#include<cstdio>\n\/\/\/INPUT\n#define RI(n) scanf(\"%d\", &n)\n#define RII(n, m) scanf(\"%d%d\", &n, &m)\n#define RIII(n, m, k) scanf(\"%d%d%d\", &n, &m, &k)\n#define RIV(n, m, k, l) scanf(\"%d%d%d%d\", &n, &m, &k, &l)\n#define RFI(n) scanf(\"%lf\", &n)\n#define RFII(n, m) scanf(\"%lf%lf\", &n, &m)\n#define RFIII(n, m, k) scanf(\"%lf%lf%lf\", &n, &m, &k)\n#define RFIV(n, m, k, l) scanf(\"%lf%lf%lf%lf\", &n, &m, &k, &l)\n#define RS(s) scanf(\"%s\", s)\n\/\/\/OUTPUT\n#define PI(n) printf(\"%d\\n\", n)\n#define PIS(n) printf(\"%d \", n)\n#define PS(s) printf(\"%s\\n\", s)\n#define PSS(s) printf(\"%s \", s)\n\/\/\/LOOP\n#define REP(i, n) for(int i = 0; i < n; i++)\n#define FF(i, a, b) for(int i = a; i < b; i++)\n#define FFF(i, a, b) for(int i = a; i <= b; i++)\n#define FD(i, a, b) for(int i = a - 1; i >= b; i--)\n#define FDD(i, a, b) for(int i = a; i >= b; i--)\n#define CLR(a, b) memset(a, b, sizeof(a))\n#define CPY(a, b) memcpy(a, b, sizeof(a))\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int MOD = 1000;\nconst int INFI = 1e9;\nconst int N = 1111;\nconst int M = 11;\nconst int move[8][2] = {0, 1, 0, -1, 1, 0, -1, 0, 1, -1, 1, 1, -1, 1, -1, -1};\n\nofstream fout(\"out.txt\");\nifstream fin(\"in.txt\");\n\nint main()\n{\n    int a, b, c, d;\n    double e;\n    while(RIV(a, b, c, d) != EOF)\n    {\n        if(c - b == d - c && b - a == c - b)\n        {\n            PI(d + b - a);\n            continue;\n        }\n        if(b * b == a * c && c * c == b * d)\n        {\n            e = double(d * b) \/ double(a);\n            if(e == int(e))PI(int(e));\n            else PI(42);\n            continue;\n        }\n        PI(42);\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"-12\", \"1333\"]","lang_cluster":"C++","code_uid":"91165fee1809e83db1ef2f4a2add2735","prob_desc_notes":"NoteThis problem contains very weak pretests!","prob_desc_output_spec":"Print the required number. If the given sequence is arithmetic progression, print the next progression element. Similarly, if the given sequence is geometric progression, print the next progression element. Print 42 if the given sequence is not an arithmetic or geometric progression.","prob_desc_output_to":"standard output","prob_desc_description":"Petya is preparing for IQ test and he has noticed that there many problems like: you are given a sequence, find the next number. Now Petya can solve only problems with arithmetic or geometric progressions.Arithmetic progression is a sequence a1, a1\u2009+\u2009d, a1\u2009+\u20092d, ..., a1\u2009+\u2009(n\u2009-\u20091)d, where a1 and d are any numbers.Geometric progression is a sequence b1, b2\u2009=\u2009b1q, ..., bn\u2009=\u2009bn\u2009-\u20091q, where b1\u2009\u2260\u20090, q\u2009\u2260\u20090, q\u2009\u2260\u20091. Help Petya and write a program to determine if the given sequence is arithmetic or geometric. Also it should found the next number. If the sequence is neither arithmetic nor geometric, print 42 (he thinks it is impossible to find better answer). You should also print 42 if the next element of progression is not integer. So answer is always integer.","hidden_unit_tests":"[{\"input\": \"836 624 412 200\\r\\n\", \"output\": [\"-12\"]}, {\"input\": \"1 334 667 1000\\r\\n\", \"output\": [\"1333\"]}, {\"input\": \"501 451 400 350\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"11 234 457 680\\r\\n\", \"output\": [\"903\"]}, {\"input\": \"640 431 222 13\\r\\n\", \"output\": [\"-196\"]}, {\"input\": \"1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 10 100 1000\\r\\n\", \"output\": [\"10000\"]}, {\"input\": \"3 18 108 648\\r\\n\", \"output\": [\"3888\"]}, {\"input\": \"512 384 288 216\\r\\n\", \"output\": [\"162\"]}, {\"input\": \"891 297 99 33\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"64 160 400 1000\\r\\n\", \"output\": [\"2500\"]}, {\"input\": \"501 450 400 350\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"4 32 48 64\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"9 8 7 5\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"992 994 998 1000\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"2 6 6 8\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"2 4 8 8\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"2 4 6 14\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"2 12 4 14\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"2 4 4 2\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"1000 100 10 1\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"2 9 27 81\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"2 4 9 16\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"2 4 9 18\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"256 64 16 8\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"256 385 576 864\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"343 147 63 27\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"729 648 576 512\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"1000 980 960 941\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"2 5 10 16\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"1 2 3 10\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"24 36 54 81\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"1 2 4 8\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"16 24 36 54\\r\\n\", \"output\": [\"81\"]}, {\"input\": \"8 4 2 1\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"16 8 4 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"32 16 8 4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"10 11 12 12\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"1 2 10 20\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"27 9 3 1\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"81 108 144 192\\r\\n\", \"output\": [\"256\"]}, {\"input\": \"2 3 4 6\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"1000 500 170 40\\r\\n\", \"output\": [\"42\"]}]","length":65,"num_hidden_unit_tests":43}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"131\", \"320\", \"2010200\"]","prob_desc_input_spec":"The first line contains one integer number x (1\u2009\u2264\u2009x\u2009\u2264\u2009109). This number is given without any leading zeroes.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"d82278932881e3aa997086c909f29051","prob_desc_created_at":"1506006300","source_code":"#include<bits\/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main(){\n\tstring s;\n\tcin>>s;\n\tint fzero=0,lzero=0;\n\tint l=s.length();\n\tfor(int i=0; i<s.length(); i++){\n\t\tif((s[i]-'0')==0) fzero++;\n\t\tif((s[i]-'0')!=0) break;\n\t}\n\tfor(int i=l-1; i>=0; i--){\n\t\tif((s[i]-'0')==0) lzero++;\n\t\tif((s[i]-'0')!=0) break;\n\t}\n\tif(fzero > lzero) {\n\t\tcout<<\"NO\"<<endl;\n\t\treturn 0;\n\t}\n\tlzero=l-lzero-1;\n\tbool flag = true;\n\twhile(fzero <= lzero){\n\t\tif(s[fzero]==s[lzero]){\n\t\t\tfzero++;\n\t\t\tlzero--;\n\t\t\t\/\/cout<<fzero<<\" \"<<lzero<<endl;\n\t\t}\n\t\telse {\n\t\t\tflag=false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(flag) cout<<\"YES\"<<endl;\n\telse cout<<\"NO\"<<endl;\n\t\n\t\n\treturn 0;\n}\n\n","prob_desc_sample_outputs":"[\"YES\", \"NO\", \"YES\"]","lang_cluster":"C++","code_uid":"0b8e24b035e13dc457e1d1ce558414c1","prob_desc_notes":null,"prob_desc_output_spec":"Print \"YES\" if number x is quasi-palindromic. Otherwise, print \"NO\" (without quotes).","prob_desc_output_to":"standard output","prob_desc_description":"Let quasi-palindromic number be such number that adding some leading zeros (possible none) to it produces a palindromic string. String t is called a palindrome, if it reads the same from left to right and from right to left.For example, numbers 131 and 2010200 are quasi-palindromic, they can be transformed to strings \"131\" and \"002010200\", respectively, which are palindromes.You are given some integer number x. Check if it's a quasi-palindromic number.","hidden_unit_tests":"[{\"input\": \"131\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"320\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"2010200\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"999999999\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"999999998\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"102000\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"210000000\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"213443120\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"22002\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1010\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"1201\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"6460046\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"503435\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"21002\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"101001\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"200102\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"20010002\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"33003\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"100101\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1021\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1101\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10101100\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"1011\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"11010\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10110\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"110000\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"2011\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10020001\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"12505021\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"12310\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"100501\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"11001\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"20020002\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"202002\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1001\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"1020021\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"60660\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"98809\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"11000000\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"807008\\r\\n\", \"output\": [\"No\", \"NO\"]}]","length":41,"num_hidden_unit_tests":44}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2400.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"2 2\", \"3 4\"]","prob_desc_input_spec":"The first line contains two integers n and m \u2014 the sizes of the piece of paper (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009150).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"740eceed59d3c6ac55c1bf9d3d4160c7","prob_desc_created_at":"1360769400","source_code":"#include <algorithm>\n#include <bitset>\n#include <cctype>\n#include <cerrno>\n#include <clocale>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <cwchar>\n#include <cwctype>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <ostream>\n#include <limits>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\n#define mp make_pair\n#define pb push_back\n#define rep(i,m,n) for(long long i = m; i < n; ++i)\n#define re return\n#define fi first\n#define se second\n#define sz(x) ((int) (x).size())\n#define all(x) (x).begin(), (x).end()\n#define sqr(x) ((x) * (x))\n\ntypedef vector<int> vi;\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int, int> ii;\ntypedef vector<ii> vii;\ntypedef vector<string> vs;\ntypedef vector<ll> vll;\ntypedef vector<vi> vvi;\ntypedef vector<vll> vvll;\n\nconst ll mod = 1000000007;\n\nll dp[160][160][160][4]={0};\nll sol(int c,int u,int d,int i){\n  re (dp[c][u][d-1][i]+dp[c][u+1][d][i]-dp[c][u+1][d-1][i]+mod)%mod;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  int n,m;\n  cin>>n>>m;\n  rep(c,1,m+1)\n    rep(r,1,n+1)\n      rep(u,1,n+2-r) {\n        dp[c][u][u+r][0]=(sol(c,u,u+r,0)+1+dp[c-1][u][u+r][0]+10*mod)%mod;\n        dp[c][u][u+r][1]=(sol(c,u,u+r,1)+dp[c-1][u][n+1][0]-dp[c-1][u][u+r][0]-dp[c-1][u+r][n+1][0]+\n            dp[c-1][u][n+1][1]-dp[c-1][u][u+r-1][1]-dp[c-1][u+r][n+1][1]+10*mod)%mod;\n        dp[c][u][u+r][2]=(sol(c,u,u+r,2)+dp[c-1][1][u+r][0]-dp[c-1][1][u][0]-dp[c-1][u][u+r][0]+\n            dp[c-1][1][u+r][2]-dp[c-1][1][u][2]-dp[c-1][u+1][u+r][2]+10*mod)%mod;\n        dp[c][u][u+r][3]=(sol(c,u,u+r,3)+dp[c-1][1][n+1][3]-dp[c-1][u+1][n+1][3]-dp[c-1][1][u+r-1][3]+\n            dp[c-1][u+1][u+r-1][3]+dp[c-1][1][n+1][2]-dp[c-1][u+1][n+1][2]-dp[c-1][1][u+r][2]+\n            dp[c-1][u+1][u+r][2]+dp[c-1][1][n+1][1]-dp[c-1][u][n+1][1]-dp[c-1][1][u+r-1][1]+\n            dp[c-1][u][u+r-1][1]+dp[c-1][1][n+1][0]-dp[c-1][u][n+1][0]-dp[c-1][1][u+r][0]+\n            dp[c-1][u][u+r][0]+10*mod)%mod;\n      }\n  ll res=0;\n  rep(i,1,m+1)\n    rep(j,0,4){\n      res=(res+dp[i][1][n+1][j])%mod;}\n  cout<<res<<endl;\n  return 0;\n}\n","prob_desc_sample_outputs":"[\"13\", \"571\"]","lang_cluster":"C++","code_uid":"c3c62d3ac04889a2854c1604263c0c03","prob_desc_notes":null,"prob_desc_output_spec":"In a single line print the remainder after dividing the answer to the problem by number 1000000007\u00a0(109\u2009+\u20097).","prob_desc_output_to":"standard output","prob_desc_description":"Dima loves making pictures on a piece of squared paper. And yet more than that Dima loves the pictures that depict one of his favorite figures. A piece of squared paper of size n\u2009\u00d7\u2009m is represented by a table, consisting of n rows and m columns. All squares are white on blank squared paper. Dima defines a picture as an image on a blank piece of paper, obtained by painting some squares black.The picture portrays one of Dima's favorite figures, if the following conditions hold:  The picture contains at least one painted cell;  All painted cells form a connected set, that is, you can get from any painted cell to any other one (you can move from one cell to a side-adjacent one);  The minimum number of moves needed to go from the painted cell at coordinates (x1,\u2009y1) to the painted cell at coordinates (x2,\u2009y2), moving only through the colored cells, equals |x1\u2009-\u2009x2|\u2009+\u2009|y1\u2009-\u2009y2|. Now Dima is wondering: how many paintings are on an n\u2009\u00d7\u2009m piece of paper, that depict one of his favorite figures? Count this number modulo 1000000007\u00a0(109\u2009+\u20097).","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"3 4\\r\\n\", \"output\": [\"571\"]}, {\"input\": \"2 8\\r\\n\", \"output\": [\"948\"]}, {\"input\": \"5 1\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10 5\\r\\n\", \"output\": [\"10779285\"]}, {\"input\": \"9 9\\r\\n\", \"output\": [\"571345021\"]}, {\"input\": \"3 5\\r\\n\", \"output\": [\"1615\"]}, {\"input\": \"6 6\\r\\n\", \"output\": [\"839603\"]}, {\"input\": \"2 8\\r\\n\", \"output\": [\"948\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"146 93\\r\\n\", \"output\": [\"368200478\"]}, {\"input\": \"28 37\\r\\n\", \"output\": [\"3734743\"]}, {\"input\": \"142 55\\r\\n\", \"output\": [\"433027432\"]}, {\"input\": \"3 4\\r\\n\", \"output\": [\"571\"]}, {\"input\": \"143 83\\r\\n\", \"output\": [\"842711873\"]}, {\"input\": \"22 117\\r\\n\", \"output\": [\"793127317\"]}, {\"input\": \"69 96\\r\\n\", \"output\": [\"100750890\"]}, {\"input\": \"48 127\\r\\n\", \"output\": [\"357232393\"]}, {\"input\": \"72 139\\r\\n\", \"output\": [\"434779014\"]}, {\"input\": \"70 113\\r\\n\", \"output\": [\"71753563\"]}, {\"input\": \"18 50\\r\\n\", \"output\": [\"12437081\"]}, {\"input\": \"86 145\\r\\n\", \"output\": [\"366385145\"]}, {\"input\": \"54 112\\r\\n\", \"output\": [\"188504522\"]}, {\"input\": \"123 34\\r\\n\", \"output\": [\"545361930\"]}, {\"input\": \"124 15\\r\\n\", \"output\": [\"140640136\"]}, {\"input\": \"142 62\\r\\n\", \"output\": [\"639963561\"]}, {\"input\": \"54 119\\r\\n\", \"output\": [\"428252664\"]}, {\"input\": \"48 45\\r\\n\", \"output\": [\"740225031\"]}, {\"input\": \"113 58\\r\\n\", \"output\": [\"254095439\"]}, {\"input\": \"88 110\\r\\n\", \"output\": [\"29408305\"]}, {\"input\": \"24 142\\r\\n\", \"output\": [\"173373825\"]}, {\"input\": \"80 29\\r\\n\", \"output\": [\"93626305\"]}, {\"input\": \"17 36\\r\\n\", \"output\": [\"9671769\"]}, {\"input\": \"141 43\\r\\n\", \"output\": [\"502872090\"]}, {\"input\": \"139 107\\r\\n\", \"output\": [\"963974540\"]}, {\"input\": \"41 93\\r\\n\", \"output\": [\"684818482\"]}, {\"input\": \"65 149\\r\\n\", \"output\": [\"443564197\"]}, {\"input\": \"147 106\\r\\n\", \"output\": [\"472939563\"]}, {\"input\": \"141 130\\r\\n\", \"output\": [\"533425071\"]}, {\"input\": \"150 150\\r\\n\", \"output\": [\"498249215\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"167\"]}]","length":90,"num_hidden_unit_tests":44}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"^ &gt;\\n1\", \"&lt; ^\\n3\", \"^ v\\n6\"]","prob_desc_input_spec":"There are two characters in the first string\u00a0\u2013 the starting and the ending position of a spinner. The position is encoded with one of the following characters: v (ASCII code 118, lowercase v), &lt; (ASCII code 60), ^ (ASCII code 94) or &gt; (ASCII code 62) (see the picture above for reference). Characters are separated by a single space. In the second strings, a single number n is given (0\u2009\u2264\u2009n\u2009\u2264\u2009109)\u00a0\u2013 the duration of the rotation. It is guaranteed that the ending position of a spinner is a result of a n second spin in any of the directions, assuming the given starting position.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"fb99ef80fd21f98674fe85d80a2e5298","prob_desc_created_at":"1501425300","source_code":"#include<bits\/stdc++.h>\nusing namespace std;\nint main()\n{\nlong int n,i,ks,kf;\nchar s,e;\ncin>>s>>e;\nchar p[4]={'v','<','^','>'};\nfor(i=0;i<4;i++)\n{ if(s==p[i])\n{ ks=i;\n}\nif(e==p[i])\n{\nkf=i;\n}}\ncin>>n;\nn=n%4;\nint ans=2,q=ks;\nfor(i=1;i<=n;i++)\n{\n\nq=q+1;\nif(q==4)\n  q=0;\n}\nif(p[q]==p[kf])\n{\n\n    ans=0;\n}\n\n    q=ks;\nfor(i=1;i<=n;i++)\n{\n\nq=q-1;\nif(q<0)\nq=3;\n}\nif(p[q]==p[kf])\n{\n    if(ans!=0)\n    ans=1;\n    else\n        ans=2;\n}\n\nif(ans==0)\nprintf(\"cw\\n\");\nelse if(ans==1)\nprintf(\"ccw\\n\");\nelse if(ans==2)\nprintf(\"undefined\\n\");\n\nreturn 0;\n}\n","prob_desc_sample_outputs":"[\"cw\", \"ccw\", \"undefined\"]","lang_cluster":"C++","code_uid":"959cc1384029653f524bf3a4fb1a4d19","prob_desc_notes":null,"prob_desc_output_spec":"Output cw, if the direction is clockwise, ccw\u00a0\u2013 if counter-clockwise, and undefined otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"  Walking through the streets of Marshmallow City, Slastyona have spotted some merchants selling a kind of useless toy which is very popular nowadays\u00a0\u2013 caramel spinner! Wanting to join the craze, she has immediately bought the strange contraption.Spinners in Sweetland have the form of V-shaped pieces of caramel. Each spinner can, well, spin around an invisible magic axis. At a specific point in time, a spinner can take 4 positions shown below (each one rotated 90 degrees relative to the previous, with the fourth one followed by the first one):  After the spinner was spun, it starts its rotation, which is described by a following algorithm: the spinner maintains its position for a second then majestically switches to the next position in clockwise or counter-clockwise order, depending on the direction the spinner was spun in.Slastyona managed to have spinner rotating for exactly n seconds. Being fascinated by elegance of the process, she completely forgot the direction the spinner was spun in! Lucky for her, she managed to recall the starting position, and wants to deduct the direction given the information she knows. Help her do this.","hidden_unit_tests":"[{\"input\": \"^ >\\r\\n1\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"< ^\\r\\n3\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"^ v\\r\\n6\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"^ >\\r\\n999999999\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"> v\\r\\n1\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"v <\\r\\n1\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"< ^\\r\\n1\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"v <\\r\\n422435957\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"v >\\r\\n139018901\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"v ^\\r\\n571728018\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"^ ^\\r\\n0\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"< >\\r\\n2\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"> >\\r\\n1000000000\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"v v\\r\\n8\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"< <\\r\\n1568\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"^ v\\r\\n2\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"^ <\\r\\n1\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"< v\\r\\n1\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"v >\\r\\n1\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"> ^\\r\\n1\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"v v\\r\\n927162384\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"^ <\\r\\n467441155\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"^ >\\r\\n822875521\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"^ <\\r\\n821690113\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"^ <\\r\\n171288453\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"^ <\\r\\n110821381\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"^ ^\\r\\n539580280\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"^ >\\r\\n861895563\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"v v\\r\\n4\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"^ ^\\r\\n4\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"> >\\r\\n4\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"< <\\r\\n8\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"v v\\r\\n0\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"^ <\\r\\n11\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"< <\\r\\n4\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"< <\\r\\n0\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"< v\\r\\n3\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"^ <\\r\\n3\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"^ <\\r\\n7\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"< >\\r\\n6\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"v >\\r\\n3\\r\\n\", \"output\": [\"cw\"]}, {\"input\": \"> >\\r\\n300\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"> >\\r\\n0\\r\\n\", \"output\": [\"undefined\"]}, {\"input\": \"v <\\r\\n3\\r\\n\", \"output\": [\"ccw\"]}, {\"input\": \"> >\\r\\n12\\r\\n\", \"output\": [\"undefined\"]}]","length":57,"num_hidden_unit_tests":45}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\\nCY??Y\", \"5\\nC?C?Y\", \"5\\n?CYC?\", \"5\\nC??MM\", \"3\\nMMY\"]","prob_desc_input_spec":"The first line contains a single positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the length of the canvas. The second line contains a string s of n characters, the i-th of which is either 'C' (denoting a segment painted in cyan), 'M' (denoting one painted in magenta), 'Y' (one painted in yellow), or '?' (an unpainted one).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"f8adfa0dde7ac1363f269dbdf00212c3","prob_desc_created_at":"1521905700","source_code":"#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n\nusing namespace std;\n\nchar s[10000];\nint main () {\n\tint n;\n\tcin >> n;\n\tscanf(\"%s\",s+1);\n\tfor (int i=1; i<n; ++i) {\n\t\tif (s[i]==s[i+1] && s[i] != '?') {printf(\"No\");return 0;} \n\t}\n\tint t = 0;\n\tfor (int i=1; i<=n; ++i) {\n\t\tif (s[i]=='?') {\n\t\t\t\/\/if (s[i+1]!= s[i-1]&&s[i-1]!='?'&&s[i+1]!='?') t++;\n\t\t\t\/\/else {printf(\"Yes\");return 0;}\n\t\t\tif (s[i+1]=='?'||(s[i-1]==s[i+1]&&s[i-1]!='?')) \n\t\t\t{printf(\"Yes\");return 0;}\n\t\t}\n\t}\n\tif (s[1] == '?' || s[n]=='?') {printf(\"Yes\");return 0;}\n\tprintf(\"No\");\n\treturn 0;\n}","prob_desc_sample_outputs":"[\"Yes\", \"Yes\", \"Yes\", \"No\", \"No\"]","lang_cluster":"C++","code_uid":"af45e7483729fa3c49c5fdf389119dc7","prob_desc_notes":"NoteFor the first example, there are exactly two different ways of colouring: CYCMY and CYMCY.For the second example, there are also exactly two different ways of colouring: CMCMY and CYCMY.For the third example, there are four ways of colouring: MCYCM, MCYCY, YCYCM, and YCYCY.For the fourth example, no matter how the unpainted segments are coloured, the existing magenta segments will prevent the painting from satisfying the requirements. The similar is true for the fifth example.","prob_desc_output_spec":"If there are at least two different ways of painting, output \"Yes\"; otherwise output \"No\" (both without quotes). You can print each character in any case (upper or lower).","prob_desc_output_to":"standard output","prob_desc_description":"Overlooking the captivating blend of myriads of vernal hues, Arkady the painter lays out a long, long canvas.Arkady has a sufficiently large amount of paint of three colours: cyan, magenta, and yellow. On the one-dimensional canvas split into n consecutive segments, each segment needs to be painted in one of the colours.Arkady has already painted some (possibly none or all) segments and passes the paintbrush to you. You are to determine whether there are at least two ways of colouring all the unpainted segments so that no two adjacent segments are of the same colour. Two ways are considered different if and only if a segment is painted in different colours in them.","hidden_unit_tests":"[{\"input\": \"5\\r\\nCY??Y\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"5\\r\\nC?C?Y\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"5\\r\\n?CYC?\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"5\\r\\nC??MM\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"3\\r\\nMMY\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"15\\r\\n??YYYYYY??YYYY?\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"100\\r\\nYCY?CMCMCYMYMYC?YMYMYMY?CMC?MCMYCMYMYCM?CMCM?CMYMYCYCMCMCMCMCMYM?CYCYCMCM?CY?MYCYCMYM?CYCYCYMY?CYCYC\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1\\r\\nC\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1\\r\\n?\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"2\\r\\nMY\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"2\\r\\n?M\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"2\\r\\nY?\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"2\\r\\n??\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"3\\r\\n??C\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"3\\r\\nM??\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"3\\r\\nYCM\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"3\\r\\n?C?\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"3\\r\\nMC?\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"4\\r\\nCYCM\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"4\\r\\nM?CM\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"4\\r\\n??YM\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"4\\r\\nC???\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"10\\r\\nMCYM?MYM?C\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"50\\r\\nCMCMCYM?MY?C?MC??YM?CY?YM??M?MCMCYCYMCYCMCM?MCM?MC\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"97\\r\\nMCM?YCMYM?YMY?MY?MYCY?CMCMCYC?YMY?MYCMC?M?YCMC?YM?C?MCMCMYMCMY?MCM?YC?YMYMY?MYCYCM?YC?YCY?MYMYMYC\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"100\\r\\nC?M?M?M?YM??YMYC?MCYMYM??Y??YC?CYC???YM?YM??MYMY?CYCYMYC?YC?C?CYCMY??CMC?YMCMYCYCYMYM?CYM?M?MCMCMY?Y\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"100\\r\\n?YYYYYYYYYYYYYYYYYYYYYYYYYYYYY??YYY?YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY?\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"100\\r\\n????????????????????????????????????????????????????????????????????????????????????????????????????\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"100\\r\\nY?CYMYMYMYCYMY?CMCYMYMC?MYCY?CMCYCYMCM?YCMCYMYCYCY?MYMYCYCYCM?CYMYMY?CY?MYCYCY?M?YMYCY?CMCMCY?CY?M?C\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"4\\r\\nM??C\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"6\\r\\nY?C??C\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"5\\r\\nC???Y\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"5\\r\\nC??MY\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"5\\r\\nCY??M\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"4\\r\\nC??Y\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"52\\r\\n??????????????????????????????????????????????????YY\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"3\\r\\nYY?\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"5\\r\\nCC??Y\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"8\\r\\nCMC??MCM\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"7\\r\\nM?YCM??\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"6\\r\\n?CC???\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"100\\r\\n??????????????????????????????????????????????????????????????????????????????????????????????????MM\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"4\\r\\nC??M\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"4\\r\\n?C?M\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"6\\r\\nMC??MC\\r\\n\", \"output\": [\"YES\", \"Yes\"]}]","length":29,"num_hidden_unit_tests":45}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1400.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"1990 1\", \"300 0\", \"1034 2\", \"9090000078001234 6\"]","prob_desc_input_spec":"The single line contains two integers a and k (1\u2009\u2264\u2009a\u2009\u2264\u20091018;\u00a00\u2009\u2264\u2009k\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"e56f6c343167745821f0b18dcf0d0cde","prob_desc_created_at":"1401463800","source_code":"#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\/\/  freopen(\"0.in\",\"r\",stdin);\n\/\/  freopen(\"0.out\",\"w\",stdout);\n\n  int n,i,j,s,ix,k,ij;\n  char a[20];\n  char x;\n  \n  scanf(\"%s %d\",&a,&k);\n  n=strlen(a);     \n  for(i=0;i<n-1;i++){\n    if(k>0){                 \n      x=a[i+1];\n      ix=i+1;\n      for(j=i+2;j<n;j++){\n        if(j-i<=k){\n          if(a[j]>x){\n            x=a[j];\n            ix=j;         \n          }\n        } else j=n;\n      }\n      if(x>a[i])\n        for(ij=ix;ij>i;ij--){\n          swap(a[ij-1],a[ij]);\n          k--;\n        }\n    } else i=n;\n  }\n  \n  printf(\"%s\\n\",a);\n  return 0;  \n}\n","prob_desc_sample_outputs":"[\"9190\", \"300\", \"3104\", \"9907000008001234\"]","lang_cluster":"C++","code_uid":"0599a44117a02f9cf8d4eb15967a4245","prob_desc_notes":null,"prob_desc_output_spec":"Print the maximum number that Pasha can get if he makes at most k swaps.","prob_desc_output_to":"standard output","prob_desc_description":"Pasha has a positive integer a without leading zeroes. Today he decided that the number is too small and he should make it larger. Unfortunately, the only operation Pasha can do is to swap two adjacent decimal digits of the integer.Help Pasha count the maximum number he can get if he has the time to make at most k swaps.","hidden_unit_tests":"[{\"input\": \"1990 1\\r\\n\", \"output\": [\"9190\"]}, {\"input\": \"300 0\\r\\n\", \"output\": [\"300\"]}, {\"input\": \"1034 2\\r\\n\", \"output\": [\"3104\"]}, {\"input\": \"9090000078001234 6\\r\\n\", \"output\": [\"9907000008001234\"]}, {\"input\": \"1234 3\\r\\n\", \"output\": [\"4123\"]}, {\"input\": \"5 100\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"1234 5\\r\\n\", \"output\": [\"4312\"]}, {\"input\": \"1234 6\\r\\n\", \"output\": [\"4321\"]}, {\"input\": \"9022 2\\r\\n\", \"output\": [\"9220\"]}, {\"input\": \"66838 4\\r\\n\", \"output\": [\"86863\"]}, {\"input\": \"39940894417248510 10\\r\\n\", \"output\": [\"99984304417248510\"]}, {\"input\": \"5314 4\\r\\n\", \"output\": [\"5431\"]}, {\"input\": \"1026 9\\r\\n\", \"output\": [\"6210\"]}, {\"input\": \"4529 8\\r\\n\", \"output\": [\"9542\"]}, {\"input\": \"83811284 3\\r\\n\", \"output\": [\"88321184\"]}, {\"input\": \"92153348 6\\r\\n\", \"output\": [\"98215334\"]}, {\"input\": \"5846059 3\\r\\n\", \"output\": [\"8654059\"]}, {\"input\": \"521325125110071928 4\\r\\n\", \"output\": [\"552132125110071928\"]}, {\"input\": \"39940894417248510 10\\r\\n\", \"output\": [\"99984304417248510\"]}, {\"input\": \"77172428736634377 29\\r\\n\", \"output\": [\"87777764122363437\"]}, {\"input\": \"337775999910796051 37\\r\\n\", \"output\": [\"999997733751076051\"]}, {\"input\": \"116995340392134308 27\\r\\n\", \"output\": [\"999654331120134308\"]}, {\"input\": \"10120921290110921 20\\r\\n\", \"output\": [\"99221010120110921\"]}, {\"input\": \"929201010190831892 30\\r\\n\", \"output\": [\"999928201010103182\"]}, {\"input\": \"111111111111111119 8\\r\\n\", \"output\": [\"111111111911111111\"]}, {\"input\": \"219810011901120912 100\\r\\n\", \"output\": [\"999822211111110000\"]}, {\"input\": \"191919191919119911 100\\r\\n\", \"output\": [\"999999991111111111\"]}, {\"input\": \"801211288881101019 22\\r\\n\", \"output\": [\"982111028888110101\"]}, {\"input\": \"619911311932347059 3\\r\\n\", \"output\": [\"969111311932347059\"]}, {\"input\": \"620737553540689123 2\\r\\n\", \"output\": [\"672037553540689123\"]}, {\"input\": \"621563797296514835 3\\r\\n\", \"output\": [\"662153797296514835\"]}, {\"input\": \"915277434701161 9\\r\\n\", \"output\": [\"977541234701161\"]}, {\"input\": \"15603712376708 28\\r\\n\", \"output\": [\"87761503123670\"]}, {\"input\": \"784069392990841 0\\r\\n\", \"output\": [\"784069392990841\"]}, {\"input\": \"787464780004 2\\r\\n\", \"output\": [\"877644780004\"]}, {\"input\": \"74604713975 29\\r\\n\", \"output\": [\"97776544310\"]}, {\"input\": \"901000000954321789 5\\r\\n\", \"output\": [\"910009000054321789\"]}, {\"input\": \"901000000954321789 10\\r\\n\", \"output\": [\"991000000504321789\"]}, {\"input\": \"901000000954321789 28\\r\\n\", \"output\": [\"999100050000432178\"]}, {\"input\": \"901000000954321789 40\\r\\n\", \"output\": [\"999810000050043217\"]}, {\"input\": \"901000000954321789 70\\r\\n\", \"output\": [\"999875410000300021\"]}, {\"input\": \"1234567891234567 99\\r\\n\", \"output\": [\"9877665544332211\"]}, {\"input\": \"123456789123456789 100\\r\\n\", \"output\": [\"998877665544213123\"]}, {\"input\": \"12345670123456789 100\\r\\n\", \"output\": [\"98776655443322101\"]}, {\"input\": \"12 100\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"11223344556677889 47\\r\\n\", \"output\": [\"98821213344556677\"]}]","length":41,"num_hidden_unit_tests":46}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2230\", \"-10\", \"-100003\"]","prob_desc_input_spec":"The single line contains integer n (10\u2009\u2264\u2009|n|\u2009\u2264\u2009109) \u2014 the state of Ilya's bank account.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"4b0a8798a6d53351226d4f06e3356b1e","prob_desc_created_at":"1369927800","source_code":"#include <iostream>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nint main()\n{\n    string n;\n    stringstream ss;\n    int num;\n\n    cin >> n;\n    ss << n;\n    ss >> num;\n    if (num >= 0)\n        cout << num << endl;\n    else if (n.size() == 3 && n[2] == '0') \n        cout << 0 << endl;\n    else {\n        int min_ans = num;\n        int st;\n\n        for (int i = n.size() - 2; i < n.size(); i++) {\n            stringstream sst;\n            int tmp;\n\n            sst << n.substr(0, i) + n.substr(i + 1, n.size() - i - 1);\n            sst >> tmp;\n            min_ans = max(min_ans, tmp);\n        }\n        cout << min_ans << endl;\n    }\n    \n    return 0;\n}\n","prob_desc_sample_outputs":"[\"2230\", \"0\", \"-10000\"]","lang_cluster":"C++","code_uid":"ad021a68ef05513a2ef300047ab458d8","prob_desc_notes":"NoteIn the first test sample Ilya doesn't profit from using the present.In the second test sample you can delete digit 1 and get the state of the account equal to 0.","prob_desc_output_spec":"In a single line print an integer \u2014 the maximum state of the bank account that Ilya can get. ","prob_desc_output_to":"standard output","prob_desc_description":"Ilya is a very clever lion, he lives in an unusual city ZooVille. In this city all the animals have their rights and obligations. Moreover, they even have their own bank accounts. The state of a bank account is an integer. The state of a bank account can be a negative number. This means that the owner of the account owes the bank money.Ilya the Lion has recently had a birthday, so he got a lot of gifts. One of them (the gift of the main ZooVille bank) is the opportunity to delete the last digit or the digit before last from the state of his bank account no more than once. For example, if the state of Ilya's bank account is -123, then Ilya can delete the last digit and get his account balance equal to -12, also he can remove its digit before last and get the account balance equal to -13. Of course, Ilya is permitted not to use the opportunity to delete a digit from the balance.Ilya is not very good at math, and that's why he asks you to help him maximize his bank account. Find the maximum state of the bank account that can be obtained using the bank's gift.","hidden_unit_tests":"[{\"input\": \"2230\\r\\n\", \"output\": [\"2230\"]}, {\"input\": \"-10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-100003\\r\\n\", \"output\": [\"-10000\"]}, {\"input\": \"544883178\\r\\n\", \"output\": [\"544883178\"]}, {\"input\": \"-847251738\\r\\n\", \"output\": [\"-84725173\"]}, {\"input\": \"423654797\\r\\n\", \"output\": [\"423654797\"]}, {\"input\": \"-623563697\\r\\n\", \"output\": [\"-62356367\"]}, {\"input\": \"645894116\\r\\n\", \"output\": [\"645894116\"]}, {\"input\": \"-384381709\\r\\n\", \"output\": [\"-38438170\"]}, {\"input\": \"437587210\\r\\n\", \"output\": [\"437587210\"]}, {\"input\": \"-297534606\\r\\n\", \"output\": [\"-29753460\"]}, {\"input\": \"891773002\\r\\n\", \"output\": [\"891773002\"]}, {\"input\": \"-56712976\\r\\n\", \"output\": [\"-5671296\"]}, {\"input\": \"963662765\\r\\n\", \"output\": [\"963662765\"]}, {\"input\": \"-272656295\\r\\n\", \"output\": [\"-27265625\"]}, {\"input\": \"383441522\\r\\n\", \"output\": [\"383441522\"]}, {\"input\": \"-477665112\\r\\n\", \"output\": [\"-47766511\"]}, {\"input\": \"791725034\\r\\n\", \"output\": [\"791725034\"]}, {\"input\": \"-812168727\\r\\n\", \"output\": [\"-81216872\"]}, {\"input\": \"528894922\\r\\n\", \"output\": [\"528894922\"]}, {\"input\": \"-479977172\\r\\n\", \"output\": [\"-47997712\"]}, {\"input\": \"568044564\\r\\n\", \"output\": [\"568044564\"]}, {\"input\": \"-392784794\\r\\n\", \"output\": [\"-39278474\"]}, {\"input\": \"925596634\\r\\n\", \"output\": [\"925596634\"]}, {\"input\": \"-836078769\\r\\n\", \"output\": [\"-83607876\"]}, {\"input\": \"71036059\\r\\n\", \"output\": [\"71036059\"]}, {\"input\": \"-337396162\\r\\n\", \"output\": [\"-33739612\"]}, {\"input\": \"87129297\\r\\n\", \"output\": [\"87129297\"]}, {\"input\": \"-648171877\\r\\n\", \"output\": [\"-64817187\"]}, {\"input\": \"20218400\\r\\n\", \"output\": [\"20218400\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1000000000\\r\\n\", \"output\": [\"1000000000\"]}, {\"input\": \"-1000000000\\r\\n\", \"output\": [\"-100000000\"]}, {\"input\": \"-102\\r\\n\", \"output\": [\"-10\"]}, {\"input\": \"-120\\r\\n\", \"output\": [\"-10\"]}, {\"input\": \"-20\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-15\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"-5575533\\r\\n\", \"output\": [\"-557553\"]}, {\"input\": \"-50\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-31\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"-55\\r\\n\", \"output\": [\"-5\"]}, {\"input\": \"-81\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"-99\\r\\n\", \"output\": [\"-9\"]}, {\"input\": \"-23\\r\\n\", \"output\": [\"-2\"]}, {\"input\": \"-41\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"-24\\r\\n\", \"output\": [\"-2\"]}, {\"input\": \"46\\r\\n\", \"output\": [\"46\"]}]","length":36,"num_hidden_unit_tests":47}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"05:50\\n05:44\", \"00:00\\n01:00\", \"00:01\\n00:00\"]","prob_desc_input_spec":"The first line contains current time s as a string in the format \"hh:mm\". The second line contains time t in the format \"hh:mm\" \u2014 the duration of George's sleep. It is guaranteed that the input contains the correct time in the 24-hour format, that is, 00\u2009\u2264\u2009hh\u2009\u2264\u200923, 00\u2009\u2264\u2009mm\u2009\u2264\u200959.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"595c4a628c261104c8eedad767e85775","prob_desc_created_at":"1391095800","source_code":"#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nstring s,s1;\nint main() {\n    while(cin>>s) {\n        int k1,k2;\n        int a,b,c,d;\n        cin>>s1;\n        a=s[0]-'0';\n        b=s[1]-'0';\n        c=s[3]-'0';\n        d=s[4]-'0';\n        int aa,bb,cc,dd;\n        aa=s1[0]-'0';\n        bb=s1[1]-'0';\n        cc=s1[3]-'0';\n        dd=s1[4]-'0';\n        int e,f;\n        e=a*10+b;\n        f=c*10+d;\n        int ee,ff;\n        ee=aa*10+bb;\n        ff=cc*10+dd;\n        if((e*60+f)<(ee*60+ff)) {\n            int sum=24*60+f+e*60;\n            sum-=ee*60+ff;\n            k1=sum\/60,k2=sum%60;\n            if(k1<=9) {\n                cout<<0<<k1;\n                cout<<\":\";\n                if(k2<=9) {\n                    cout<<0<<k2<<endl;\n                } else {\n                    cout<<k2<<endl;\n                }\n            } else {\n                cout<<k1<<\":\";\n                if(k2<=9) {\n                    cout<<0<<k2<<endl;\n                } else {\n                    cout<<k2<<endl;\n                }\n            }\n        } else {\n            int sum1=e*60+f;\n            sum1-=(ee*60+ff);\n            k1=sum1\/60,k2=sum1%60;\n            if(k1<=9) {\n                cout<<0<<k1;\n                cout<<\":\";\n                if(k2<=9) {\n                    cout<<0<<k2<<endl;\n                } else {\n                    cout<<k2<<endl;\n                }\n            } else {\n                cout<<k1<<\":\";\n                if(k2<=9) {\n                    cout<<0<<k2<<endl;\n                } else {\n                    cout<<k2<<endl;\n                }\n            }\n        }\n    }\n    return 0;\n}","prob_desc_sample_outputs":"[\"00:06\", \"23:00\", \"00:01\"]","lang_cluster":"C++","code_uid":"bce1b585a357e9b50ee669d6fd610b94","prob_desc_notes":"NoteIn the first sample George went to bed at \"00:06\". Note that you should print the time only in the format \"00:06\". That's why answers \"0:06\", \"00:6\" and others will be considered incorrect. In the second sample, George went to bed yesterday.In the third sample, George didn't do to bed at all.","prob_desc_output_spec":"In the single line print time p \u2014 the time George went to bed in the format similar to the format of the time in the input.","prob_desc_output_to":"standard output","prob_desc_description":"George woke up and saw the current time s on the digital clock. Besides, George knows that he has slept for time t. Help George! Write a program that will, given time s and t, determine the time p when George went to bed. Note that George could have gone to bed yesterday relatively to the current time (see the second test sample). ","hidden_unit_tests":"[{\"input\": \"05:50\\r\\n05:44\\r\\n\", \"output\": [\"00:06\"]}, {\"input\": \"00:00\\r\\n01:00\\r\\n\", \"output\": [\"23:00\"]}, {\"input\": \"00:01\\r\\n00:00\\r\\n\", \"output\": [\"00:01\"]}, {\"input\": \"23:59\\r\\n23:59\\r\\n\", \"output\": [\"00:00\"]}, {\"input\": \"23:44\\r\\n23:55\\r\\n\", \"output\": [\"23:49\"]}, {\"input\": \"00:00\\r\\n13:12\\r\\n\", \"output\": [\"10:48\"]}, {\"input\": \"12:00\\r\\n23:59\\r\\n\", \"output\": [\"12:01\"]}, {\"input\": \"12:44\\r\\n12:44\\r\\n\", \"output\": [\"00:00\"]}, {\"input\": \"05:55\\r\\n07:12\\r\\n\", \"output\": [\"22:43\"]}, {\"input\": \"07:12\\r\\n05:55\\r\\n\", \"output\": [\"01:17\"]}, {\"input\": \"22:22\\r\\n22:22\\r\\n\", \"output\": [\"00:00\"]}, {\"input\": \"22:22\\r\\n22:23\\r\\n\", \"output\": [\"23:59\"]}, {\"input\": \"23:24\\r\\n23:23\\r\\n\", \"output\": [\"00:01\"]}, {\"input\": \"00:00\\r\\n00:00\\r\\n\", \"output\": [\"00:00\"]}, {\"input\": \"23:30\\r\\n00:00\\r\\n\", \"output\": [\"23:30\"]}, {\"input\": \"01:00\\r\\n00:00\\r\\n\", \"output\": [\"01:00\"]}, {\"input\": \"05:44\\r\\n06:00\\r\\n\", \"output\": [\"23:44\"]}, {\"input\": \"00:00\\r\\n23:59\\r\\n\", \"output\": [\"00:01\"]}, {\"input\": \"21:00\\r\\n01:00\\r\\n\", \"output\": [\"20:00\"]}, {\"input\": \"21:21\\r\\n12:21\\r\\n\", \"output\": [\"09:00\"]}, {\"input\": \"12:21\\r\\n21:12\\r\\n\", \"output\": [\"15:09\"]}, {\"input\": \"12:33\\r\\n23:33\\r\\n\", \"output\": [\"13:00\"]}, {\"input\": \"07:55\\r\\n05:53\\r\\n\", \"output\": [\"02:02\"]}, {\"input\": \"19:30\\r\\n02:00\\r\\n\", \"output\": [\"17:30\"]}, {\"input\": \"21:30\\r\\n02:00\\r\\n\", \"output\": [\"19:30\"]}, {\"input\": \"19:30\\r\\n09:30\\r\\n\", \"output\": [\"10:00\"]}, {\"input\": \"13:08\\r\\n00:42\\r\\n\", \"output\": [\"12:26\"]}, {\"input\": \"13:04\\r\\n09:58\\r\\n\", \"output\": [\"03:06\"]}, {\"input\": \"21:21\\r\\n23:06\\r\\n\", \"output\": [\"22:15\"]}, {\"input\": \"20:53\\r\\n10:23\\r\\n\", \"output\": [\"10:30\"]}, {\"input\": \"12:59\\r\\n00:45\\r\\n\", \"output\": [\"12:14\"]}, {\"input\": \"12:39\\r\\n22:21\\r\\n\", \"output\": [\"14:18\"]}, {\"input\": \"21:10\\r\\n13:50\\r\\n\", \"output\": [\"07:20\"]}, {\"input\": \"03:38\\r\\n23:46\\r\\n\", \"output\": [\"03:52\"]}, {\"input\": \"03:48\\r\\n00:41\\r\\n\", \"output\": [\"03:07\"]}, {\"input\": \"07:43\\r\\n12:27\\r\\n\", \"output\": [\"19:16\"]}, {\"input\": \"03:23\\r\\n08:52\\r\\n\", \"output\": [\"18:31\"]}, {\"input\": \"16:04\\r\\n10:28\\r\\n\", \"output\": [\"05:36\"]}, {\"input\": \"12:53\\r\\n08:37\\r\\n\", \"output\": [\"04:16\"]}, {\"input\": \"13:43\\r\\n17:23\\r\\n\", \"output\": [\"20:20\"]}, {\"input\": \"00:00\\r\\n00:01\\r\\n\", \"output\": [\"23:59\"]}, {\"input\": \"10:10\\r\\n01:01\\r\\n\", \"output\": [\"09:09\"]}, {\"input\": \"10:05\\r\\n00:00\\r\\n\", \"output\": [\"10:05\"]}, {\"input\": \"09:09\\r\\n00:00\\r\\n\", \"output\": [\"09:09\"]}, {\"input\": \"09:10\\r\\n00:01\\r\\n\", \"output\": [\"09:09\"]}, {\"input\": \"23:24\\r\\n00:28\\r\\n\", \"output\": [\"22:56\"]}, {\"input\": \"10:00\\r\\n01:00\\r\\n\", \"output\": [\"09:00\"]}]","length":70,"num_hidden_unit_tests":47}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5 7 1 3 2 2\", \"5 5 2 3 1 1\"]","prob_desc_input_spec":"The first line of the input contains six integers n,\u2009m,\u2009i,\u2009j,\u2009a,\u2009b (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009106;\u00a01\u2009\u2264\u2009i\u2009\u2264\u2009n;\u00a01\u2009\u2264\u2009j\u2009\u2264\u2009m;\u00a01\u2009\u2264\u2009a,\u2009b\u2009\u2264\u2009106). You can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. Position (i,\u2009j) in the statement is a chessboard cell on the intersection of the i-th row and the j-th column. You can consider that the corners are: (1,\u2009m), (n,\u20091), (n,\u2009m), (1,\u20091).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"51155e9bfa90e0ff29d049cedc3e1862","prob_desc_created_at":"1387380600","source_code":"#include<stdio.h>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=1e5+7, INF=0x3f3f3f3f;\nvoid read(int &x){\n    int f=1;x=0;char s=getchar();\n    while((s<'0')|(s>'9')){if(s=='-')f=-1;s=getchar();}\n    while(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n    x*=f;\n}\nvoid write(int x){\n    if(x==0){putchar(48);return;}\n    int len=0,dg[20];\n    while(x>0){dg[++len]=x%10;x\/=10;}\n    for(int i=len;i>=1;i--)putchar(dg[i]+48);\n}\nint main(){\n    int n, m, i, j ,a, b, c=INF, d=INF, e=INF, f=INF;\n    scanf(\"%d%d%d%d%d%d\", &n, &m, &i, &j, &a, &b);\n    if(i==1&&j==1||i==1&&j==m||i==n&&j==1||i==n&&j==m){\n        puts(\"0\");\n        return 0;\n    }\n    if(i+a>n&&i-a<1||j+b>m&&j-b<1){\n        puts(\"Poor Inna and pony!\");\n        return 0;\n    }\n    n--, m--, i--, j--;\n    if(i%a==0&&j%b==0&&(i\/a)%2==(j\/b)%2){\n        c=max(i\/a, j\/b);\n    }\n    if((n-i)%a==0&&j%b==0&&((n-i)\/a)%2==(j\/b)%2){\n        d=max((n-i)\/a, j\/b);\n    }\n    if(i%a==0&&(m-j)%b==0&&(i\/a)%2==((m-j)\/b)%2){\n        e=max((i\/a), ((m-j)\/b));\n    }\n    if((n-i)%a==0&&(m-j)%b==0&&(((n-i)\/a)%2)==(((m-j)\/b)%2)){\n        f=max(((n-i)\/a), ((m-j)\/b));\n    }\n    if(c!=INF||d!=INF||e!=INF||f!=INF)\n        printf(\"%d\\n\", min(c, min(d, min(e, f))));\n    else puts(\"Poor Inna and pony!\");\n    return 0;\n}\n\/*2018-07-31 20:48:40.175*\/","prob_desc_sample_outputs":"[\"2\", \"Poor Inna and pony!\"]","lang_cluster":"C++","code_uid":"b7964508a7674be40e37968ec2da2226","prob_desc_notes":"NoteNote to sample 1:Inna and the pony can move the candy to position (1\u2009+\u20092,\u20093\u2009+\u20092)\u2009=\u2009(3,\u20095), from there they can move it to positions (3\u2009-\u20092,\u20095\u2009+\u20092)\u2009=\u2009(1,\u20097) and (3\u2009+\u20092,\u20095\u2009+\u20092)\u2009=\u2009(5,\u20097). These positions correspond to the corner squares of the chess board. Thus, the answer to the test sample equals two.","prob_desc_output_spec":"In a single line print a single integer \u2014 the minimum number of moves needed to get the candy. If Inna and the pony cannot get the candy playing by Dima's rules, print on a single line \"Poor Inna and pony!\" without the quotes.","prob_desc_output_to":"standard output","prob_desc_description":"Dima and Inna are doing so great! At the moment, Inna is sitting on the magic lawn playing with a pink pony. Dima wanted to play too. He brought an n\u2009\u00d7\u2009m chessboard, a very tasty candy and two numbers a and b.Dima put the chessboard in front of Inna and placed the candy in position (i,\u2009j) on the board. The boy said he would give the candy if it reaches one of the corner cells of the board. He's got one more condition. There can only be actions of the following types:  move the candy from position (x,\u2009y) on the board to position (x\u2009-\u2009a,\u2009y\u2009-\u2009b);  move the candy from position (x,\u2009y) on the board to position (x\u2009+\u2009a,\u2009y\u2009-\u2009b);  move the candy from position (x,\u2009y) on the board to position (x\u2009-\u2009a,\u2009y\u2009+\u2009b);  move the candy from position (x,\u2009y) on the board to position (x\u2009+\u2009a,\u2009y\u2009+\u2009b). Naturally, Dima doesn't allow to move the candy beyond the chessboard borders.Inna and the pony started shifting the candy around the board. They wonder what is the minimum number of allowed actions that they need to perform to move the candy from the initial position (i,\u2009j) to one of the chessboard corners. Help them cope with the task! ","hidden_unit_tests":"[{\"input\": \"5 7 1 3 2 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5 5 2 3 1 1\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"1 1 1 1 1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"23000 15500 100 333 9 1\\r\\n\", \"output\": [\"15167\"]}, {\"input\": \"33999 99333 33000 99000 3 9\\r\\n\", \"output\": [\"333\"]}, {\"input\": \"5 7 1 3 1 2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 100 1 50 1 50\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"1000 1 1 1 1 500\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"304 400 12 20 4 4\\r\\n\", \"output\": [\"95\"]}, {\"input\": \"1000000 1000000 1000000 1000000 1000000 1000000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000000 99999 12345 23456 23 54\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"50000 100000 500 1000 500 1000\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"50000 100000 500 1000 500 2000\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"50000 100000 500 1000 500 500\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"99999 99999 1 2 1 1\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"5 4 2 3 2 2\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"5 4 2 3 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5 5 1 3 1 2\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"2347 2348 234 48 238 198\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"1000000 2 2 2 2 1\\r\\n\", \"output\": [\"499999\"]}, {\"input\": \"100 100 50 50 500 500\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"1000 2000 100 200 90 90\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"1000 1000 10 15 10 5\\r\\n\", \"output\": [\"197\"]}, {\"input\": \"23000 15500 100 333 9 1\\r\\n\", \"output\": [\"15167\"]}, {\"input\": \"5 5 4 3 1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5 5 4 4 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"5 5 4 2 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 3 2 2 2 2\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"5 8 4 1 2 1\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"5 8 4 2 1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"2 8 1 2 1 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1000000 1000000 500000 500000 1 1\\r\\n\", \"output\": [\"499999\"]}, {\"input\": \"500000 100000 400 80000 2 2\\r\\n\", \"output\": [\"249800\"]}, {\"input\": \"1004 999004 4 4 5 5\\r\\n\", \"output\": [\"199800\"]}, {\"input\": \"11 11 3 3 4 4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100 100 70 5 1 1\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"1 5 1 3 1 1\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"1 5 1 3 10 1\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"6 1 5 1 2 2\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"2 10 1 5 2 2\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"5 1 3 1 1 1\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"1000 1000 1 3 10000 1\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"2 6 1 2 2 2\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"2 6 1 2 6 2\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"7 1 5 1 2 2\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"2 20 2 5 2 2\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}, {\"input\": \"4 4 3 4 1 5\\r\\n\", \"output\": [\"Poor Inna and pony!\"]}]","length":47,"num_hidden_unit_tests":47}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"7 3 7 3 20\", \"7 9 3 1 8\", \"10 10 10 10 10\"]","prob_desc_input_spec":"The only line of the input contains five integers t1, t2, t3, t4 and t5 (1\u2009\u2264\u2009ti\u2009\u2264\u2009100)\u00a0\u2014 numbers written on cards.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"a9c17ce5fd5f39ffd70917127ce3408a","prob_desc_created_at":"1465403700","source_code":"#include <bits\/stdc++.h>\nusing namespace std;\nint main()\n{\nint a[100],sum=0;\nfor(int i=0;i<5;i++)\n{\ncin>>a[i];\nsum+=a[i];\n}\nsort(a,a+5);\n\nint r = 1000;\nfor(int i=0;i<=4;i++)\n{\nif(a[i]==a[i+1])\n{\nif(i<3 && a[i]==a[i+2])\nr = min(r,sum-3*a[i]);\nelse\n{r = min(r,sum-2*a[i]);}\n}\n}\nr=min(r,sum);\ncout<<r<<endl;\n}\n","prob_desc_sample_outputs":"[\"26\", \"28\", \"20\"]","lang_cluster":"C++","code_uid":"b6879484be3c6c736656247f9b19da1f","prob_desc_notes":"NoteIn the first sample, Limak has cards with numbers 7, 3, 7, 3 and 20. Limak can do one of the following.  Do nothing and the sum would be 7\u2009+\u20093\u2009+\u20097\u2009+\u20093\u2009+\u200920\u2009=\u200940.  Remove two cards with a number 7. The remaining sum would be 3\u2009+\u20093\u2009+\u200920\u2009=\u200926.  Remove two cards with a number 3. The remaining sum would be 7\u2009+\u20097\u2009+\u200920\u2009=\u200934. You are asked to minimize the sum so the answer is 26.In the second sample, it's impossible to find two or three cards with the same number. Hence, Limak does nothing and the sum is 7\u2009+\u20099\u2009+\u20091\u2009+\u20093\u2009+\u20098\u2009=\u200928.In the third sample, all cards have the same number. It's optimal to discard any three cards. The sum of two remaining numbers is 10\u2009+\u200910\u2009=\u200920.","prob_desc_output_spec":"Print the minimum possible sum of numbers written on remaining cards.","prob_desc_output_to":"standard output","prob_desc_description":"A little bear Limak plays a game. He has five cards. There is one number written on each card. Each number is a positive integer.Limak can discard (throw out) some cards. His goal is to minimize the sum of numbers written on remaining (not discarded) cards.He is allowed to at most once discard two or three cards with the same number. Of course, he won't discard cards if it's impossible to choose two or three cards with the same number.Given five numbers written on cards, cay you find the minimum sum of numbers on remaining cards?","hidden_unit_tests":"[{\"input\": \"7 3 7 3 20\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"7 9 3 1 8\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"10 10 10 10 10\\r\\n\", \"output\": [\"20\"]}, {\"input\": \"8 7 1 8 7\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"7 7 7 8 8\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"8 8 8 2 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"8 8 2 2 2\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"5 50 5 5 60\\r\\n\", \"output\": [\"110\"]}, {\"input\": \"100 100 100 100 100\\r\\n\", \"output\": [\"200\"]}, {\"input\": \"1 1 1 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"29 29 20 20 20\\r\\n\", \"output\": [\"58\"]}, {\"input\": \"20 29 20 29 20\\r\\n\", \"output\": [\"58\"]}, {\"input\": \"31 31 20 20 20\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"20 20 20 31 31\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"20 31 20 31 20\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"20 20 20 30 30\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"30 30 20 20 20\\r\\n\", \"output\": [\"60\"]}, {\"input\": \"8 1 8 8 8\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"1 1 1 8 1\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"1 2 3 4 5\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"100 99 98 97 96\\r\\n\", \"output\": [\"490\"]}, {\"input\": \"1 1 100 100 100\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"100 100 99 99 98\\r\\n\", \"output\": [\"296\"]}, {\"input\": \"98 99 100 99 100\\r\\n\", \"output\": [\"296\"]}, {\"input\": \"1 90 1 91 1\\r\\n\", \"output\": [\"181\"]}, {\"input\": \"60 1 75 1 92\\r\\n\", \"output\": [\"227\"]}, {\"input\": \"15 40 90 40 90\\r\\n\", \"output\": [\"95\"]}, {\"input\": \"1 1 15 20 20\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"90 11 11 10 10\\r\\n\", \"output\": [\"110\"]}, {\"input\": \"20 21 22 23 24\\r\\n\", \"output\": [\"110\"]}, {\"input\": \"1 1 2 98 99\\r\\n\", \"output\": [\"199\"]}, {\"input\": \"3 7 7 7 10\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"1 3 3 3 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 9 9 9 10\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"100 1 1 1 1\\r\\n\", \"output\": [\"101\"]}, {\"input\": \"2 2 2 100 100\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 2 2 2 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"1 1 2 2 5\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1 2 3 4 1\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"11 10 10 10 10\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"2 2 2 10 10\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 1 1 1 4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"98 98 98 98 23\\r\\n\", \"output\": [\"121\"]}, {\"input\": \"1 2 3 100 100\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2 2 5 10 10\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"2 2 3 3 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"1 1 1 1 2\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"12 12 7 7 7\\r\\n\", \"output\": [\"21\"]}]","length":26,"num_hidden_unit_tests":48}
{"prob_desc_memory_limit":"256 megabytes","difficulty":900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"7\\naogogob\", \"13\\nogogmgogogogo\", \"9\\nogoogoogo\"]","prob_desc_input_spec":"The first line contains a positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100)\u00a0\u2014 the length of the interview. The second line contains the string s of length n, consisting of lowercase English letters.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"619665bed79ecf77b083251fe6fe7eb3","prob_desc_created_at":"1479632700","source_code":"#include<bits\/stdc++.h>\nusing namespace std;\nint main(){\n\tint n;\n\tcin>>n;\n\tstring str;\n\tcin>>str;\n\tstring ans;\n\tint start=0;\n\twhile(str!=\"\\0\"){\n\t\tif(str.find(\"ogo\")==string::npos){\n\t\t\tans.append(str);\n\t\t\tbreak;\n\t\t}\n\t\tint pos=str.find(\"ogo\");\n\t\tfor(int i=0;i<pos;i++)\n\t\t\tans+=str[i];\n\t\tint i=pos+3;\n\t\twhile(str[i]=='g'&&str[i+1]=='o')\n\t\t\ti=i+2;\n\t\tans.append(\"***\");\n\t\ti--;\n\t\tstr.erase(start,i-start+1);\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"a***b\", \"***gmg***\", \"*********\"]","lang_cluster":"C++","code_uid":"9c03e095b195a26e8fcfd9dca2bb4248","prob_desc_notes":"NoteThe first sample contains one filler word ogogo, so the interview for printing is \"a***b\".The second sample contains two fillers ogo and ogogogo. Thus, the interview is transformed to \"***gmg***\".","prob_desc_output_spec":"Print the interview text after the replacement of each of the fillers with \"***\". It is allowed for the substring \"***\" to have several consecutive occurences.","prob_desc_output_to":"standard output","prob_desc_description":"Polycarp has interviewed Oleg and has written the interview down without punctuation marks and spaces to save time. Thus, the interview is now a string s consisting of n lowercase English letters.There is a filler word ogo in Oleg's speech. All words that can be obtained from ogo by adding go several times to the end of it are also considered to be fillers. For example, the words ogo, ogogo, ogogogo are fillers, but the words go, og, ogog, ogogog and oggo are not fillers.The fillers have maximal size, for example, for ogogoo speech we can't consider ogo a filler and goo as a normal phrase. We should consider ogogo as a filler here.To print the interview, Polycarp has to replace each of the fillers with three asterisks. Note that a filler word is replaced with exactly three asterisks regardless of its length.Polycarp has dealt with this problem in no time. Can you do the same? The clock is ticking!","hidden_unit_tests":"[{\"input\": \"7\\r\\naogogob\\r\\n\", \"output\": [\"a***b\"]}, {\"input\": \"13\\r\\nogogmgogogogo\\r\\n\", \"output\": [\"***gmg***\"]}, {\"input\": \"9\\r\\nogoogoogo\\r\\n\", \"output\": [\"*********\"]}, {\"input\": \"32\\r\\nabcdefogoghijklmnogoopqrstuvwxyz\\r\\n\", \"output\": [\"abcdef***ghijklmn***opqrstuvwxyz\"]}, {\"input\": \"100\\r\\nggogogoooggogooggoggogggggogoogoggooooggooggoooggogoooggoggoogggoogoggogggoooggoggoggogggogoogggoooo\\r\\n\", \"output\": [\"gg***oogg***oggoggoggggg******ggooooggooggooogg***ooggoggoogggo***ggogggoooggoggoggoggg***ogggoooo\"]}, {\"input\": \"10\\r\\nogooggoggo\\r\\n\", \"output\": [\"***oggoggo\"]}, {\"input\": \"20\\r\\nooggooogooogooogooog\\r\\n\", \"output\": [\"ooggoo***o***o***oog\"]}, {\"input\": \"30\\r\\ngoggogoooggooggggoggoggoogoggo\\r\\n\", \"output\": [\"gogg***ooggooggggoggoggo***ggo\"]}, {\"input\": \"40\\r\\nogggogooggoogoogggogooogogggoogggooggooo\\r\\n\", \"output\": [\"oggg***oggo***oggg***o***gggoogggooggooo\"]}, {\"input\": \"50\\r\\noggggogoogggggggoogogggoooggooogoggogooogogggogooo\\r\\n\", \"output\": [\"ogggg***ogggggggo***gggoooggoo***gg***o***ggg***oo\"]}, {\"input\": \"60\\r\\nggoooogoggogooogogooggoogggggogogogggggogggogooogogogggogooo\\r\\n\", \"output\": [\"ggooo***gg***o***oggooggggg***gggggoggg***o***ggg***oo\"]}, {\"input\": \"70\\r\\ngogoooggggoggoggggggoggggoogooogogggggooogggogoogoogoggogggoggogoooooo\\r\\n\", \"output\": [\"g***ooggggoggoggggggoggggo***o***gggggoooggg*********ggogggogg***ooooo\"]}, {\"input\": \"80\\r\\nooogoggoooggogogoggooooogoogogooogoggggogggggogoogggooogooooooggoggoggoggogoooog\\r\\n\", \"output\": [\"oo***ggooogg***ggoooo******o***ggggoggggg***ogggoo***oooooggoggoggogg***ooog\"]}, {\"input\": \"90\\r\\nooogoggggooogoggggoooogggggooggoggoggooooooogggoggogggooggggoooooogoooogooggoooogggggooooo\\r\\n\", \"output\": [\"oo***ggggoo***ggggoooogggggooggoggoggooooooogggoggogggooggggooooo***oo***oggoooogggggooooo\"]}, {\"input\": \"100\\r\\ngooogoggooggggoggoggooooggogoogggoogogggoogogoggogogogoggogggggogggggoogggooogogoggoooggogoooooogogg\\r\\n\", \"output\": [\"goo***ggooggggoggoggoooogg***ogggo***gggo***gg***ggogggggogggggoogggoo***ggooogg***oooo***gg\"]}, {\"input\": \"100\\r\\ngoogoogggogoooooggoogooogoogoogogoooooogooogooggggoogoggogooogogogoogogooooggoggogoooogooooooggogogo\\r\\n\", \"output\": [\"go***oggg***ooooggo***o*********oooo***o***oggggo***gg***o******oooggogg***oo***ooooogg***\"]}, {\"input\": \"100\\r\\ngoogoggggogggoooggoogoogogooggoggooggggggogogggogogggoogogggoogoggoggogooogogoooogooggggogggogggoooo\\r\\n\", \"output\": [\"go***ggggogggoooggo******oggoggoogggggg***ggg***gggo***gggo***ggogg***o***oo***oggggogggogggoooo\"]}, {\"input\": \"100\\r\\nogogogogogoggogogogogogogoggogogogoogoggoggooggoggogoogoooogogoogggogogogogogoggogogogogogogogogogoe\\r\\n\", \"output\": [\"***gg***gg******ggoggooggogg******oo***oggg***gg***e\"]}, {\"input\": \"5\\r\\nogoga\\r\\n\", \"output\": [\"***ga\"]}, {\"input\": \"1\\r\\no\\r\\n\", \"output\": [\"o\"]}, {\"input\": \"100\\r\\nogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogog\\r\\n\", \"output\": [\"***g\"]}, {\"input\": \"99\\r\\nogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogogo\\r\\n\", \"output\": [\"***\"]}, {\"input\": \"5\\r\\nggggg\\r\\n\", \"output\": [\"ggggg\"]}, {\"input\": \"6\\r\\ngoogoo\\r\\n\", \"output\": [\"go***o\"]}, {\"input\": \"7\\r\\nooogooo\\r\\n\", \"output\": [\"oo***oo\"]}, {\"input\": \"8\\r\\ngggggggg\\r\\n\", \"output\": [\"gggggggg\"]}, {\"input\": \"9\\r\\nogggogggg\\r\\n\", \"output\": [\"ogggogggg\"]}, {\"input\": \"10\\r\\nogogoggogo\\r\\n\", \"output\": [\"***gg***\"]}, {\"input\": \"11\\r\\noooggooggog\\r\\n\", \"output\": [\"oooggooggog\"]}, {\"input\": \"12\\r\\nogggooooggog\\r\\n\", \"output\": [\"ogggooooggog\"]}, {\"input\": \"13\\r\\nogoggogogooog\\r\\n\", \"output\": [\"***gg***oog\"]}, {\"input\": \"15\\r\\nggooogoooggoggg\\r\\n\", \"output\": [\"ggoo***ooggoggg\"]}, {\"input\": \"14\\r\\noogooooggooggo\\r\\n\", \"output\": [\"o***oooggooggo\"]}, {\"input\": \"1\\r\\na\\r\\n\", \"output\": [\"a\"]}, {\"input\": \"1\\r\\ng\\r\\n\", \"output\": [\"g\"]}, {\"input\": \"1\\r\\nz\\r\\n\", \"output\": [\"z\"]}, {\"input\": \"46\\r\\nsdfkogogogogergergogogergerogogogogoergoegogog\\r\\n\", \"output\": [\"sdfk***gergerg***gerger***ergoeg***g\"]}, {\"input\": \"86\\r\\ngdfggogogodfogogdofgoodfogodgodgfogoogdodhbofgobgbgfogoogdfogogogogogoogggsgfosogodgon\\r\\n\", \"output\": [\"gdfgg***df***gdofgoodf***dgodgf***ogdodhbofgobgbgf***ogdf***ogggsgfos***dgon\"]}, {\"input\": \"83\\r\\nergegergoogogogerogoerorogroeorgefxcfgzdgawofqpwzxcvbnmsdfkfpweoriqgtogooggsdgogoog\\r\\n\", \"output\": [\"ergegergo***ger***erorogroeorgefxcfgzdgawofqpwzxcvbnmsdfkfpweoriqgt***oggsdg***og\"]}, {\"input\": \"2\\r\\nog\\r\\n\", \"output\": [\"og\"]}, {\"input\": \"4\\r\\nogog\\r\\n\", \"output\": [\"***g\"]}, {\"input\": \"4\\r\\nogoo\\r\\n\", \"output\": [\"***o\"]}, {\"input\": \"29\\r\\naaaogogogogogogogogogogogobbb\\r\\n\", \"output\": [\"aaa***bbb\"]}, {\"input\": \"11\\r\\nogogogogogo\\r\\n\", \"output\": [\"***\"]}, {\"input\": \"9\\r\\nogogogogo\\r\\n\", \"output\": [\"***\"]}, {\"input\": \"3\\r\\nogo\\r\\n\", \"output\": [\"***\"]}, {\"input\": \"15\\r\\nogogogogogogogo\\r\\n\", \"output\": [\"***\"]}, {\"input\": \"25\\r\\nogogogogogogogogogogogogo\\r\\n\", \"output\": [\"***\"]}]","length":27,"num_hidden_unit_tests":48}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 2 8\", \"1 2 -18\", \"2 2 -1\"]","prob_desc_input_spec":"The first line contains three space-separated integers: a,\u2009b,\u2009c (1\u2009\u2264\u2009a\u2009\u2264\u20095;\u00a01\u2009\u2264\u2009b\u2009\u2264\u200910000;\u00a0\u2009-\u200910000\u2009\u2264\u2009c\u2009\u2264\u200910000).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"e477185b94f93006d7ae84c8f0817009","prob_desc_created_at":"1408548600","source_code":"#include <vector> \n#include <list> \n#include <map> \n#include <set> \n#include <queue>\n#include <stack> \n#include <bitset> \n#include <algorithm> \n#include <numeric> \n#include <utility> \n#include <sstream> \n#include <iostream> \n#include <iomanip> \n#include <cstdio> \n#include <cmath> \n#include <cstdlib> \n#include <ctime> \n#include <cstring> \n\nusing namespace std; \n\ntypedef long long ll; \ntypedef pair<int, int> pii;\n\n#define INF 1000000000\n#define pb push_back \n#define itr iterator \n#define sz size() \n#define mp make_pair\nbool soma (ll num,ll res){\n\tll rest = 0;\n\twhile(num){\n\t\trest+=(num%10);\n\t\tnum\/=10;\n\t}\n\tif(res == rest)return true;\n\treturn false;\n}\nint main(){\n\tll a,b,c;\n\tcin >> a >> b >> c;\n\tvector<ll> xi;\n\tfor(ll i = 1;i < 82;i++){\n\t\tll resp = 1;\n\t\tfor(int i1 = 0;i1 <a;i1++)resp*=i;\n\t\tll num= (b*resp)+c;\n\t\tif(num < INF && num > 0)\t\n\t\t\tif(soma(num,i))xi.pb(num);\n\t}\n\tsort(xi.begin(),xi.end());\n\tcout << xi.size() << endl;\n\tfor(ll i = 0;i < xi.size();i++){\n\t\t\/\/cout << xi[i] << \" \";\n\t\tprintf(\"%lli%c\",xi[i],\" \\n\"[i==(int)xi.size()-1]);\n\t}\n\n}","prob_desc_sample_outputs":"[\"3\\n10 2008 13726\", \"0\", \"4\\n1 31 337 967\"]","lang_cluster":"C++","code_uid":"e3b081e2b94c5d68446500023bc56ae4","prob_desc_notes":null,"prob_desc_output_spec":"Print integer n \u2014 the number of the solutions that you've found. Next print n integers in the increasing order \u2014 the solutions of the given equation. Print only integer solutions that are larger than zero and strictly less than 109.","prob_desc_output_to":"standard output","prob_desc_description":"Little Dima misbehaved during a math lesson a lot and the nasty teacher Mr. Pickles gave him the following problem as a punishment. Find all integer solutions x (0\u2009&lt;\u2009x\u2009&lt;\u2009109) of the equation:x\u2009=\u2009b\u00b7s(x)a\u2009+\u2009c,\u2009 where a, b, c are some predetermined constant values and function s(x) determines the sum of all digits in the decimal representation of number x.The teacher gives this problem to Dima for each lesson. He changes only the parameters of the equation: a, b, c. Dima got sick of getting bad marks and he asks you to help him solve this challenging problem.","hidden_unit_tests":"[{\"input\": \"3 2 8\\r\\n\", \"output\": [\"3\\r\\n10 2008 13726\"]}, {\"input\": \"1 2 -18\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 2 -1\\r\\n\", \"output\": [\"4\\r\\n1 31 337 967\"]}, {\"input\": \"1 1 0\\r\\n\", \"output\": [\"9\\r\\n1 2 3 4 5 6 7 8 9\"]}, {\"input\": \"1 37 963\\r\\n\", \"output\": [\"16\\r\\n1000 1111 1222 1333 1370 1407 1444 1481 1518 1555 1592 1629 1666 1777 1888 1999\"]}, {\"input\": \"1 298 -1665\\r\\n\", \"output\": [\"17\\r\\n123 421 1017 1315 1613 1911 2209 2507 2805 4295 4593 4891 5189 5487 5785 6679 6977\"]}, {\"input\": \"1 3034 -9234\\r\\n\", \"output\": [\"23\\r\\n12004 21106 24140 30208 33242 39310 42344 48412 51446 54480 57514 60548 63582 66616 69650 72684 75718 78752 81786 87854 90888 96956 99990\"]}, {\"input\": \"5 9998 9998\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 10000 10000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 65 352\\r\\n\", \"output\": [\"1\\r\\n208000352\"]}, {\"input\": \"5 9999 9999\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 2099 -38\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 1 -6708\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 36 -46\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 8975 -4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 2794 -3354\\r\\n\", \"output\": [\"5\\r\\n165733932 308990694 392855398 415958984 999999980\"]}, {\"input\": \"5 1 4473\\r\\n\", \"output\": [\"11\\r\\n1424330 14353380 17214841 52526348 60470649 69348430 164920697 184532598 205967449 418199966 459169497\"]}, {\"input\": \"5 1 -9999\\r\\n\", \"output\": [\"6\\r\\n90001 2466100 17200369 52511876 60456177 205952977\"]}, {\"input\": \"4 4 6\\r\\n\", \"output\": [\"13\\r\\n10 1030 40006 114250 202506 262150 521290 937030 1562506 2458630 3694090 4743690 7496650\"]}, {\"input\": \"5 19 -666\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 5 -865\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 8468 -3666\\r\\n\", \"output\": [\"2\\r\\n7117922 14933886\"]}, {\"input\": \"4 9359 -3039\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 5706 -1856\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 6828 -39\\r\\n\", \"output\": [\"2\\r\\n7435653 17759589\"]}, {\"input\": \"5 3903 -9847\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 1727 4771\\r\\n\", \"output\": [\"1\\r\\n42124574\"]}, {\"input\": \"4 1870 9912\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 6300 7035\\r\\n\", \"output\": [\"1\\r\\n466761435\"]}, {\"input\": \"5 8704 -6190\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 68 3\\r\\n\", \"output\": [\"1\\r\\n45971\"]}, {\"input\": \"5 6 -95\\r\\n\", \"output\": [\"1\\r\\n416063647\"]}, {\"input\": \"2 28 12\\r\\n\", \"output\": [\"2\\r\\n4044 7180\"]}, {\"input\": \"3 37 -70\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 3 53\\r\\n\", \"output\": [\"1\\r\\n100663349\"]}, {\"input\": \"3 2570 4109\\r\\n\", \"output\": [\"2\\r\\n427587859 999777799\"]}, {\"input\": \"3 1139 6335\\r\\n\", \"output\": [\"2\\r\\n12134407 499999999\"]}, {\"input\": \"3 2278 -1329\\r\\n\", \"output\": [\"3\\r\\n61504671 145790671 999985999\"]}, {\"input\": \"4 30 719\\r\\n\", \"output\": [\"2\\r\\n21219149 899597999\"]}, {\"input\": \"4 9023 312\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 10000 9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 7698 5337\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 1 0\\r\\n\", \"output\": [\"5\\r\\n1 17210368 52521875 60466176 205962976\"]}, {\"input\": \"5 12 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 3903 153\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 10000 0\\r\\n\", \"output\": [\"1\\r\\n10000\"]}, {\"input\": \"3 2570 -6691\\r\\n\", \"output\": [\"1\\r\\n999766999\"]}, {\"input\": \"5 5 13\\r\\n\", \"output\": [\"1\\r\\n579281018\"]}]","length":57,"num_hidden_unit_tests":48}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"3 seconds","prob_desc_sample_inputs":"[\"4 4\", \"3 9\", \"9 3\", \"3 6\", \"506 2708\"]","prob_desc_input_spec":"A single line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^{14}$$$) \u2014 the number of tiles red marker should color and the number of tiles blue marker should color, respectively.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"7d0c5f77bca792b6ab4fd4088fe18ff1","prob_desc_created_at":"1535122200","source_code":"#include <bits\/stdc++.h>\n#define N 300005\n#define ll long long \n#define inf 0x3f3f3f3f3f3f3f3f\nusing namespace std;\nint main()\n{\n\tll a,b,num=0,i=0,result=0,sum=0,ans=inf,l,r;\n\tcin>>a>>b;\n\tnum=sqrt(a+b);\n\tsum=a+b;\n\tll nummm=0;\n\tfor( i=1;i<=num;++i)\n\t{\n\t\tif(a%i==0)\n\t\t\tl=a\/i;\n\t\tif(b%i==0)\n\t\t\tr=b\/i;\n\t\tif( sum%i==0&&(sum\/i>=l||sum\/i>=r) )\n\t\t{\n\t\t\tans=min(ans,i+sum\/i);\n\t\t}\n\t\t\t\n\t}\n\tresult=2*ans;\n\tcout<<result<<endl;\n\treturn 0;\n } ","prob_desc_sample_outputs":"[\"12\", \"14\", \"14\", \"12\", \"3218\"]","lang_cluster":"C++","code_uid":"e5d5ded266a0e3b0751338868bbd796e","prob_desc_notes":"NoteThe first four examples correspond to the first picture of the statement.Note that for there exist multiple correct colorings for all of the examples.In the first example you can also make a rectangle with sides $$$1$$$ and $$$8$$$, though its perimeter will be $$$18$$$ which is greater than $$$8$$$.In the second example you can make the same resulting rectangle with sides $$$3$$$ and $$$4$$$, but red tiles will form the rectangle with sides $$$1$$$ and $$$3$$$ and blue tiles will form the rectangle with sides $$$3$$$ and $$$3$$$.","prob_desc_output_spec":"Print a single integer \u2014 the minimal perimeter of a colored rectangle Vova can obtain by coloring exactly $$$a$$$ tiles red and exactly $$$b$$$ tiles blue. It is guaranteed that there exists at least one correct coloring.","prob_desc_output_to":"standard output","prob_desc_description":"There is an infinite board of square tiles. Initially all tiles are white.Vova has a red marker and a blue marker. Red marker can color $$$a$$$ tiles. Blue marker can color $$$b$$$ tiles. If some tile isn't white then you can't use marker of any color on it. Each marker must be drained completely, so at the end there should be exactly $$$a$$$ red tiles and exactly $$$b$$$ blue tiles across the board.Vova wants to color such a set of tiles that:  they would form a rectangle, consisting of exactly $$$a+b$$$ colored tiles;  all tiles of at least one color would also form a rectangle. Here are some examples of correct colorings:  Here are some examples of incorrect colorings:  Among all correct colorings Vova wants to choose the one with the minimal perimeter. What is the minimal perimeter Vova can obtain?It is guaranteed that there exists at least one correct coloring.","hidden_unit_tests":"[{\"input\": \"4 4\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"3 9\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"9 3\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"3 6\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"506 2708\\r\\n\", \"output\": [\"3218\"]}, {\"input\": \"11 24\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"92 91\\r\\n\", \"output\": [\"128\"]}, {\"input\": \"58 53\\r\\n\", \"output\": [\"80\"]}, {\"input\": \"39 97\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"47 96\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"49 39\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"76 100\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"97821761637600 97821761637600\\r\\n\", \"output\": [\"55949068\"]}, {\"input\": \"65214507758400 97821761637600\\r\\n\", \"output\": [\"51074268\"]}, {\"input\": \"97821761637600 65214507758400\\r\\n\", \"output\": [\"51074268\"]}, {\"input\": \"10293281928930 11003163441270\\r\\n\", \"output\": [\"18459236\"]}, {\"input\": \"11003163441270 11003163441270\\r\\n\", \"output\": [\"18764374\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 3\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"2 3\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"4 1\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"4 3\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"5 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"5 2\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"5 4\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"1 6\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"2 6\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"4 6\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"5 6\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"6 6\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"99999999999973 99999999999971\\r\\n\", \"output\": [\"199999999999948\"]}, {\"input\": \"11 17\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"99999999999972 100000000000000\\r\\n\", \"output\": [\"502512564406\"]}, {\"input\": \"100000000000000 100000000000000\\r\\n\", \"output\": [\"56850000\"]}, {\"input\": \"99999999999962 99999999999973\\r\\n\", \"output\": [\"133333333333296\"]}, {\"input\": \"99999999999973 99999999999930\\r\\n\", \"output\": [\"399999999999808\"]}, {\"input\": \"25 25\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"11 49\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"87897897895 29835496161\\r\\n\", \"output\": [\"728999990\"]}, {\"input\": \"49999819999926 50000000000155\\r\\n\", \"output\": [\"199999640000164\"]}, {\"input\": \"67280421310721 67280421310723\\r\\n\", \"output\": [\"813183752\"]}, {\"input\": \"100004 5\\r\\n\", \"output\": [\"1588\"]}]","length":28,"num_hidden_unit_tests":48}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\\nweird\", \"4\\nword\", \"5\\naaeaa\"]","prob_desc_input_spec":"The first line contains one integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of letters in word s before the correction. The second line contains a string s consisting of exactly n lowercase Latin letters \u2014 the word before the correction.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"63a4a5795d94f698b0912bb8d4cdf690","prob_desc_created_at":"1518793500","source_code":"#include<iostream>\nusing namespace std;\n\nbool isVowel(char c)\n{\n\tif(c=='a' ||c=='e'||c=='i'||c=='o'||c=='u' || c == 'y')\n\t\treturn true;\n\treturn false;\n}\nint main()\n{\n\tint n;\n\tstring s;\n\tcin >> n >> s;\n\tint count=0;\n\tfor(int i=0;i<s.size();i++)\n\t{\n\t\tif(isVowel(s[i]))\n\t\t\tcount++;\n\t\telse\n\t\t\tcount=0;\n\t\tif(count==2)\n\t\t{\n\t\t\tcount=0;\n\t\t\ts.erase(i,1);\n\t\t\ti-=2;\t\t\t\n\t\t}\n\t}\t\n\tcout << s << endl;\t\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"werd\", \"word\", \"a\"]","lang_cluster":"C++","code_uid":"06da613c0a500025dc967362c8d2737d","prob_desc_notes":"NoteExplanations of the examples:  There is only one replace: weird  werd; No replace needed since there are no two consecutive vowels; aaeaa  aeaa  aaa  aa  a. ","prob_desc_output_spec":"Output the word s after the correction.","prob_desc_output_to":"standard output","prob_desc_description":"Victor tries to write his own text editor, with word correction included. However, the rules of word correction are really strange.Victor thinks that if a word contains two consecutive vowels, then it's kinda weird and it needs to be replaced. So the word corrector works in such a way: as long as there are two consecutive vowels in the word, it deletes the first vowel in a word such that there is another vowel right before it. If there are no two consecutive vowels in the word, it is considered to be correct.You are given a word s. Can you predict what will it become after correction?In this problem letters a, e, i, o, u and y are considered to be vowels.","hidden_unit_tests":"[{\"input\": \"5\\r\\nweird\\r\\n\", \"output\": [\"werd\"]}, {\"input\": \"4\\r\\nword\\r\\n\", \"output\": [\"word\"]}, {\"input\": \"5\\r\\naaeaa\\r\\n\", \"output\": [\"a\"]}, {\"input\": \"100\\r\\naaaaabbbbboyoyoyoyoyacadabbbbbiuiufgiuiuaahjabbbklboyoyoyoyoyaaaaabbbbbiuiuiuiuiuaaaaabbbbbeyiyuyzyw\\r\\n\", \"output\": [\"abbbbbocadabbbbbifgihjabbbklbobbbbbibbbbbezyw\"]}, {\"input\": \"69\\r\\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\r\\n\", \"output\": [\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"]}, {\"input\": \"12\\r\\nmmmmmmmmmmmm\\r\\n\", \"output\": [\"mmmmmmmmmmmm\"]}, {\"input\": \"18\\r\\nyaywptqwuyiqypwoyw\\r\\n\", \"output\": [\"ywptqwuqypwow\"]}, {\"input\": \"85\\r\\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\r\\n\", \"output\": [\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"]}, {\"input\": \"13\\r\\nmmmmmmmmmmmmm\\r\\n\", \"output\": [\"mmmmmmmmmmmmm\"]}, {\"input\": \"10\\r\\nmmmmmmmmmm\\r\\n\", \"output\": [\"mmmmmmmmmm\"]}, {\"input\": \"11\\r\\nmmmmmmmmmmm\\r\\n\", \"output\": [\"mmmmmmmmmmm\"]}, {\"input\": \"15\\r\\nmmmmmmmmmmmmmmm\\r\\n\", \"output\": [\"mmmmmmmmmmmmmmm\"]}, {\"input\": \"1\\r\\na\\r\\n\", \"output\": [\"a\"]}, {\"input\": \"14\\r\\nmmmmmmmmmmmmmm\\r\\n\", \"output\": [\"mmmmmmmmmmmmmm\"]}, {\"input\": \"33\\r\\nmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\\r\\n\", \"output\": [\"mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\"]}, {\"input\": \"79\\r\\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\r\\n\", \"output\": [\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"]}, {\"input\": \"90\\r\\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\r\\n\", \"output\": [\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"]}, {\"input\": \"2\\r\\naa\\r\\n\", \"output\": [\"a\"]}, {\"input\": \"18\\r\\niuiuqpyyaoaetiwliu\\r\\n\", \"output\": [\"iqpytiwli\"]}, {\"input\": \"5\\r\\nxxxxx\\r\\n\", \"output\": [\"xxxxx\"]}, {\"input\": \"6\\r\\nxxxahg\\r\\n\", \"output\": [\"xxxahg\"]}, {\"input\": \"3\\r\\nzcv\\r\\n\", \"output\": [\"zcv\"]}, {\"input\": \"4\\r\\naepo\\r\\n\", \"output\": [\"apo\"]}, {\"input\": \"5\\r\\nqqqqq\\r\\n\", \"output\": [\"qqqqq\"]}, {\"input\": \"6\\r\\naaaaaa\\r\\n\", \"output\": [\"a\"]}, {\"input\": \"4\\r\\naeta\\r\\n\", \"output\": [\"ata\"]}, {\"input\": \"20\\r\\nttyttlwaoieulyiluuri\\r\\n\", \"output\": [\"ttyttlwalyluri\"]}, {\"input\": \"1\\r\\nb\\r\\n\", \"output\": [\"b\"]}, {\"input\": \"3\\r\\nanc\\r\\n\", \"output\": [\"anc\"]}, {\"input\": \"1\\r\\ne\\r\\n\", \"output\": [\"e\"]}, {\"input\": \"3\\r\\naie\\r\\n\", \"output\": [\"a\"]}, {\"input\": \"3\\r\\nvio\\r\\n\", \"output\": [\"vi\"]}, {\"input\": \"2\\r\\nea\\r\\n\", \"output\": [\"e\"]}, {\"input\": \"3\\r\\nuas\\r\\n\", \"output\": [\"us\"]}, {\"input\": \"2\\r\\nba\\r\\n\", \"output\": [\"ba\"]}, {\"input\": \"2\\r\\naq\\r\\n\", \"output\": [\"aq\"]}, {\"input\": \"2\\r\\nya\\r\\n\", \"output\": [\"y\"]}, {\"input\": \"2\\r\\nou\\r\\n\", \"output\": [\"o\"]}, {\"input\": \"2\\r\\nbb\\r\\n\", \"output\": [\"bb\"]}, {\"input\": \"7\\r\\nayylmao\\r\\n\", \"output\": [\"alma\"]}, {\"input\": \"2\\r\\nab\\r\\n\", \"output\": [\"ab\"]}, {\"input\": \"19\\r\\nyuouiyaoiiweqrryqqp\\r\\n\", \"output\": [\"yweqrryqqp\"]}, {\"input\": \"25\\r\\niqypwqpriiioetiuqqqttouei\\r\\n\", \"output\": [\"iqypwqpritiqqqtto\"]}, {\"input\": \"100\\r\\naaaaabbbbboyoyoyoyoyacadabbbbbiuiufgiuiuaahjabbbklboyoyoyoyoyaaaaabbbbbiuiuiuiuiuaaaaabbbbbeyiyuyzyz\\r\\n\", \"output\": [\"abbbbbocadabbbbbifgihjabbbklbobbbbbibbbbbezyz\"]}, {\"input\": \"17\\r\\naccccccccccccccca\\r\\n\", \"output\": [\"accccccccccccccca\"]}, {\"input\": \"5\\r\\nababa\\r\\n\", \"output\": [\"ababa\"]}, {\"input\": \"10\\r\\naaaaaaaaaa\\r\\n\", \"output\": [\"a\"]}, {\"input\": \"22\\r\\naaaaabbbbboyoyoyoyoyac\\r\\n\", \"output\": [\"abbbbboc\"]}, {\"input\": \"7\\r\\nmahmoud\\r\\n\", \"output\": [\"mahmod\"]}]","length":31,"num_hidden_unit_tests":49}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2600.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"1 0\", \"2 1\", \"3 2\", \"4 1\", \"7 4\"]","prob_desc_input_spec":"The single line contains two space-separated integers n and k (1\u2009\u2264\u2009n\u2009\u2264\u20091000,\u20090\u2009\u2264\u2009k\u2009\u2264\u2009n).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"1243e98fe2ebd6e6d1de851984b96079","prob_desc_created_at":"1363879800","source_code":"#include<cstdio>\nusing namespace std;\nint n,m,MO=1e9+7;\nlong long f[1010][1010][2][2];\nlong long C[1010][1010];\nlong long jc[1010],ans[1010];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);f[0][0][1][0]=1;C[0][0]=1;jc[0]=1;\n\tfor(int i=0;i<=n;i++)\n\tfor(int j=0;j<=i;j++)\n\tif (i==j||i==0||j==0) C[i][j]=1;\n\telse C[i][j]=(C[i-1][j]+C[i-1][j-1])%MO;\n\tfor(int i=1;i<=n;i++) jc[i]=(jc[i-1]*i)%MO;\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=0;j<i;j++)\n\tfor(int k=0;k<=1;k++)\n\tfor(int w=0;w<=1;w++)\n\t{\n\t\tf[i][j][w][0]=(f[i][j][w][0]+f[i-1][j][k][w])%MO;\n\t\tif (k==0) f[i][j+1][w][0]=(f[i][j+1][w][0]+f[i-1][j][k][w])%MO;\n\t\tif (i!=n) f[i][j+1][w][1]=(f[i][j+1][w][1]+f[i-1][j][k][w])%MO;\n\t}\n\tfor(int i=0;i<=n;i++)\n\t{\n\t\tfor(int k=0;k<=1;k++)\n\t\tfor(int w=0;w<=1;w++) ans[i]=(ans[i]+f[n][i][k][w])%MO;\n\t\tans[i]=(ans[i]*jc[n-i])%MO;\n\t}\n\tint sd=0;\n\tfor(int i=m+1;i<=n;i++)\n\t{\n\t\tif (sd) ans[m]=(ans[m]+ans[i]*C[i][m]+MO)%MO;\n\t\telse ans[m]=(ans[m]-ans[i]*C[i][m]+MO)%MO;\n\t\tsd^=1;\n\t}\n\tprintf(\"%lld\\n\",ans[m]);\n\treturn 0;\n}\n\/*#include <bits\/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int maxn = 2005;\nconst ll mo = (ll) 1e9 + 7;\nll dp[maxn][maxn][2][2],n,k;\nll c[maxn][maxn],ans[maxn],fac[maxn];\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    for (int i=1;i<=n;++i)\n    {\n        c[i][0]=c[i][i]=1LL;\n        for (int j=1;j<=i-1;++j)\n        {c[i][j]=(c[i][j]+c[i-1][j]+c[i-1][j-1])%mo;}\n     } \n     fac[0] = fac[1] = 1LL;\n     for (int i = 2; i <= 2001; ++i) fac[i] = (fac[i - 1] * i * 1LL) % mo;\n     dp[0][0][1][0]=1;    \n     for (int i=1;i<=n;++i)\n     {\n         for (int j=0;j<=i-1;++j)\n         for (int now=0;now<2;++now)\n         for (int ne=0;ne<2;++ne)\n         {\n             dp[i][j][ne][0]=(dp[i][j][ne][0]+dp[i-1][j][now][ne])%mo;\n             if (!now) dp[i][j+1][ne][0]=(dp[i][j+1][ne][0]+dp[i-1][j][now][ne])%mo;\n             if (i<n) dp[i][j+1][ne][1]=(dp[i][j+1][ne][1]+dp[i-1][j][now][ne])%mo;\n         }\n     }\n     for (int i=0;i<=n;++i)\n     {\n         for (int now=0;now<2;++now)\n         for (int ne=0;ne<2;++ne)\n         ans[i]=(ans[i]+dp[n][i][now][ne])%mo;\n         ans[i] = ans[i] * fac[n - i] % mo;\n     } \n     int flag=-1;\n\n     for (int i=k+1;i<=n;++i)\n     {\n         ans[k]=(ans[k]+flag*c[i][k]*ans[i]+mo)%mo;\n         flag*=-1;\n     }\n     printf(\"%lld\\n\",ans[k]);\n}*\/","prob_desc_sample_outputs":"[\"1\", \"0\", \"4\", \"6\", \"328\"]","lang_cluster":"C++","code_uid":"b421bc05c6a7606a0a182ffc02ff457b","prob_desc_notes":"NoteThe only permutation of size 1 has 0 good positions.Permutation (1,\u20092) has 0 good positions, and permutation (2,\u20091) has 2 positions.Permutations of size 3: (1,\u20092,\u20093) \u2014 0 positions  \u2014 2 positions  \u2014 2 positions  \u2014 2 positions  \u2014 2 positions (3,\u20092,\u20091) \u2014 0 positions","prob_desc_output_spec":"Print the number of permutations of length n with exactly k good positions modulo 1000000007 (109\u2009+\u20097).","prob_desc_output_to":"standard output","prob_desc_description":"Permutation p is an ordered set of integers p1,\u2009\u2009p2,\u2009\u2009...,\u2009\u2009pn, consisting of n distinct positive integers, each of them doesn't exceed n. We'll denote the i-th element of permutation p as pi. We'll call number n the size or the length of permutation p1,\u2009\u2009p2,\u2009\u2009...,\u2009\u2009pn.We'll call position i (1\u2009\u2264\u2009i\u2009\u2264\u2009n) in permutation p1,\u2009p2,\u2009...,\u2009pn good, if |p[i]\u2009-\u2009i|\u2009=\u20091. Count the number of permutations of size n with exactly k good positions. Print the answer modulo 1000000007 (109\u2009+\u20097).","hidden_unit_tests":"[{\"input\": \"1 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"4 1\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"7 4\\r\\n\", \"output\": [\"328\"]}, {\"input\": \"7 7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8 4\\r\\n\", \"output\": [\"2658\"]}, {\"input\": \"8 5\\r\\n\", \"output\": [\"688\"]}, {\"input\": \"10 3\\r\\n\", \"output\": [\"614420\"]}, {\"input\": \"20 0\\r\\n\", \"output\": [\"111008677\"]}, {\"input\": \"100 99\\r\\n\", \"output\": [\"2450\"]}, {\"input\": \"13 13\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1000 0\\r\\n\", \"output\": [\"845393494\"]}, {\"input\": \"1000 1\\r\\n\", \"output\": [\"418947603\"]}, {\"input\": \"1000 2\\r\\n\", \"output\": [\"819706485\"]}, {\"input\": \"1000 10\\r\\n\", \"output\": [\"305545369\"]}, {\"input\": \"1000 99\\r\\n\", \"output\": [\"115316732\"]}, {\"input\": \"1000 500\\r\\n\", \"output\": [\"979041279\"]}, {\"input\": \"1000 700\\r\\n\", \"output\": [\"642759746\"]}, {\"input\": \"1000 900\\r\\n\", \"output\": [\"301804159\"]}, {\"input\": \"1000 999\\r\\n\", \"output\": [\"249500\"]}, {\"input\": \"1000 998\\r\\n\", \"output\": [\"583666213\"]}, {\"input\": \"1000 1000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"999 0\\r\\n\", \"output\": [\"184907578\"]}, {\"input\": \"999 1\\r\\n\", \"output\": [\"167859862\"]}, {\"input\": \"999 5\\r\\n\", \"output\": [\"642835575\"]}, {\"input\": \"999 13\\r\\n\", \"output\": [\"740892203\"]}, {\"input\": \"999 300\\r\\n\", \"output\": [\"562270116\"]}, {\"input\": \"999 600\\r\\n\", \"output\": [\"553332041\"]}, {\"input\": \"999 999\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999 989\\r\\n\", \"output\": [\"254295912\"]}, {\"input\": \"999 998\\r\\n\", \"output\": [\"250000\"]}, {\"input\": \"10 0\\r\\n\", \"output\": [\"543597\"]}, {\"input\": \"5 0\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"5 1\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"5 2\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"5 3\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"5 4\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"5 5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 0\\r\\n\", \"output\": [\"2\"]}]","length":85,"num_hidden_unit_tests":49}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"0.5 second","prob_desc_sample_inputs":"[\"3 1 1\", \"5 2 3\"]","prob_desc_input_spec":"The only line contains three integers n, a and b (0\u2009\u2264\u2009a,\u2009b\u2009&lt;\u2009n\u2009\u2264\u2009100).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"51a072916bff600922a77da0c4582180","prob_desc_created_at":"1320333000","source_code":"\/\/ Codeforces.com - Problem 124A\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <stack>\n#include <set>\n#include <queue>\nusing namespace std;\nint main(int argc, char *argv[])\n{\n    unsigned short n,a,b;\n    cin>>n>>a>>b;\n    n = n - a;\n    if(b >= n)\n        cout<<n;\n    else\n        cout<<b+1;\n    return 0;\n}","prob_desc_sample_outputs":"[\"2\", \"3\"]","lang_cluster":"C++","code_uid":"5fb364cd0eb003eb5104733e13fe4d24","prob_desc_notes":"NoteThe possible positions in the first sample are: 2 and 3 (if we number the positions starting with 1).In the second sample they are 3, 4 and 5.","prob_desc_output_spec":"Print the single number \u2014 the number of the sought positions.","prob_desc_output_to":"standard output","prob_desc_description":"Petr stands in line of n people, but he doesn't know exactly which position he occupies. He can say that there are no less than a people standing in front of him and no more than b people standing behind him. Find the number of different positions Petr can occupy.","hidden_unit_tests":"[{\"input\": \"3 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"5 2 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5 4 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"6 5 5\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"9 4 3\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"11 4 6\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"13 8 7\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"14 5 5\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"16 6 9\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"20 13 17\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"22 4 8\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"23 8 14\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"26 18 22\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"28 6 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"29 5 23\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"32 27 15\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"33 11 5\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"37 21 15\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"39 34 33\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"41 27 11\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"42 25 16\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"45 7 43\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"47 16 17\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"49 11 37\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"51 38 39\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"52 29 7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"56 43 12\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"58 57 28\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"59 12 39\\r\\n\", \"output\": [\"40\"]}, {\"input\": \"62 9 52\\r\\n\", \"output\": [\"53\"]}, {\"input\": \"63 29 44\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"65 30 22\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"66 27 38\\r\\n\", \"output\": [\"39\"]}, {\"input\": \"71 33 53\\r\\n\", \"output\": [\"38\"]}, {\"input\": \"73 14 12\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"73 37 35\\r\\n\", \"output\": [\"36\"]}, {\"input\": \"76 69 44\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"79 25 20\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"81 60 20\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"81 79 14\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"84 0 42\\r\\n\", \"output\": [\"43\"]}, {\"input\": \"88 79 8\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"90 76 59\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"92 2 22\\r\\n\", \"output\": [\"23\"]}, {\"input\": \"94 5 88\\r\\n\", \"output\": [\"89\"]}, {\"input\": \"94 62 48\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"96 22 72\\r\\n\", \"output\": [\"73\"]}, {\"input\": \"100 11 88\\r\\n\", \"output\": [\"89\"]}, {\"input\": \"100 81 91\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"1 0 0\\r\\n\", \"output\": [\"1\"]}]","length":19,"num_hidden_unit_tests":50}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"1.5 seconds","prob_desc_sample_inputs":"[\"14\", \"20\", \"8192\"]","prob_desc_input_spec":"The input contains a single integer X2 (4\u2009\u2264\u2009X2\u2009\u2264\u2009106). It is guaranteed that the integer X2 is composite, that is, is not prime.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"43ff6a223c68551eff793ba170110438","prob_desc_created_at":"1520696100","source_code":"#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\n#include<cmath>\nusing namespace std;\n\nint f[1000010],op[100010],ans=1<<30;\nbool b[1000010];\n\nint main()\n{\n\tfor (int i=2;i<=1000000;i++)\n\t{\n\t\tif (b[i]==false) op[++op[0]]=i;\n\t\tfor (int j=1;j<=op[0];j++)\n\t\tif (i*op[j]<=1000000) b[i*op[j]]=true;\n\t\telse break;\n\t}\n\t\n\tint x,y,o;\n\tscanf(\"%d\",&x);\n\tfor (int i=x-1;i>1;i--)\n\tif (x%i==0 && b[i]==false)\n\t{\n\t\t\/\/printf(\"%d\\n\",i);\n\t\ty=(x\/i-1)*i+1;\n\t\to=0;\n\t\tfor (int j=y;j<=x;j++)\n\t\tif (f[j]==0)\n\t\t{\n\t\t\to++;\n\t\t\tif (o>500) break;\n\t\t\tf[j]=j;\n\t\t\t\/\/if (pd(j)) continue;\n\t\t\tfor (int k=j-1;k>1;k--)\n\t\t\tif (j%k==0 && b[k]==false)\n\t\t\t{\n\t\t\t\tf[j]=min(f[j],(j\/k-1)*k+1);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tans=min(ans,f[j]);\n\t\t}\n\t\tcontinue;\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n","prob_desc_sample_outputs":"[\"6\", \"15\", \"8191\"]","lang_cluster":"C++","code_uid":"ab0073f814ee2d4e616f4e63be3125af","prob_desc_notes":"NoteIn the first test, the smallest possible starting number is X0\u2009=\u20096. One possible course of the game is as follows:   Alice picks prime 5 and announces X1\u2009=\u200910  Bob picks prime 7 and announces X2\u2009=\u200914. In the second case, let X0\u2009=\u200915.   Alice picks prime 2 and announces X1\u2009=\u200916  Bob picks prime 5 and announces X2\u2009=\u200920. ","prob_desc_output_spec":"Output a single integer\u00a0\u2014 the minimum possible X0.","prob_desc_output_to":"standard output","prob_desc_description":"Alice and Bob begin their day with a quick game. They first choose a starting number X0\u2009\u2265\u20093 and try to reach one million by the process described below. Alice goes first and then they take alternating turns. In the i-th turn, the player whose turn it is selects a prime number smaller than the current number, and announces the smallest multiple of this prime number that is not smaller than the current number.Formally, he or she selects a prime p\u2009&lt;\u2009Xi\u2009-\u20091 and then finds the minimum Xi\u2009\u2265\u2009Xi\u2009-\u20091 such that p divides Xi. Note that if the selected prime p already divides Xi\u2009-\u20091, then the number does not change.Eve has witnessed the state of the game after two turns. Given X2, help her determine what is the smallest possible starting number X0. Note that the players don't necessarily play optimally. You should consider all possible game evolutions.","hidden_unit_tests":"[{\"input\": \"14\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"8192\\r\\n\", \"output\": [\"8191\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"998677\"]}, {\"input\": \"959806\\r\\n\", \"output\": [\"239958\"]}, {\"input\": \"1452\\r\\n\", \"output\": [\"1206\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"16\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"110880\\r\\n\", \"output\": [\"55440\"]}, {\"input\": \"166320\\r\\n\", \"output\": [\"110879\"]}, {\"input\": \"221760\\r\\n\", \"output\": [\"110880\"]}, {\"input\": \"277200\\r\\n\", \"output\": [\"138600\"]}, {\"input\": \"332640\\r\\n\", \"output\": [\"166320\"]}, {\"input\": \"498960\\r\\n\", \"output\": [\"332639\"]}, {\"input\": \"554400\\r\\n\", \"output\": [\"415798\"]}, {\"input\": \"665280\\r\\n\", \"output\": [\"498958\"]}, {\"input\": \"720720\\r\\n\", \"output\": [\"540538\"]}, {\"input\": \"510510\\r\\n\", \"output\": [\"255248\"]}, {\"input\": \"570570\\r\\n\", \"output\": [\"285282\"]}, {\"input\": \"690690\\r\\n\", \"output\": [\"460455\"]}, {\"input\": \"959818\\r\\n\", \"output\": [\"239958\"]}, {\"input\": \"959878\\r\\n\", \"output\": [\"239978\"]}, {\"input\": \"959902\\r\\n\", \"output\": [\"239978\"]}, {\"input\": \"974847\\r\\n\", \"output\": [\"324954\"]}, {\"input\": \"974859\\r\\n\", \"output\": [\"324978\"]}, {\"input\": \"974931\\r\\n\", \"output\": [\"324980\"]}, {\"input\": \"885481\\r\\n\", \"output\": [\"442272\"]}, {\"input\": \"896809\\r\\n\", \"output\": [\"447944\"]}, {\"input\": \"908209\\r\\n\", \"output\": [\"453632\"]}, {\"input\": \"935089\\r\\n\", \"output\": [\"467064\"]}, {\"input\": \"720721\\r\\n\", \"output\": [\"355298\"]}, {\"input\": \"690691\\r\\n\", \"output\": [\"342864\"]}, {\"input\": \"959903\\r\\n\", \"output\": [\"479702\"]}, {\"input\": \"974932\\r\\n\", \"output\": [\"470060\"]}, {\"input\": \"935090\\r\\n\", \"output\": [\"463950\"]}, {\"input\": \"524288\\r\\n\", \"output\": [\"524287\"]}, {\"input\": \"524289\\r\\n\", \"output\": [\"174768\"]}, {\"input\": \"524286\\r\\n\", \"output\": [\"262110\"]}, {\"input\": \"531441\\r\\n\", \"output\": [\"526737\"]}, {\"input\": \"531442\\r\\n\", \"output\": [\"262490\"]}, {\"input\": \"531440\\r\\n\", \"output\": [\"265704\"]}, {\"input\": \"81\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"999958\\r\\n\", \"output\": [\"250008\"]}, {\"input\": \"2048\\r\\n\", \"output\": [\"1959\"]}]","length":47,"num_hidden_unit_tests":50}
{"prob_desc_memory_limit":"64 megabytes","difficulty":2600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2\", \"4\"]","prob_desc_input_spec":"The input data contain the only even integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009106).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"dbcb1077e7421554ba5d69b64d22c937","prob_desc_created_at":"1275145200","source_code":"\/\/be name oo\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <set>\n#include <string>\n#include <map>\n#include <utility>\n#include <cstring>\n#include <sstream>\n#include <complex>\n#include <vector>\n\n#define FOR(i, n) for(int i = 0; i < (n); i++)\n#define SZ(x) ((int)x.size())\n#define PB push_back\n\nusing namespace std;\ntypedef pair<int, int> joft;\ntypedef complex<double> point;\n\nconst int MOD = 1000 * 1000 * 1000 + 9;\nconst int MAX_N = 1000 * 1000 + 10;\n\nlong long dp1[MAX_N];\n\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tn \/= 2;\n\tif(n == 1){\n\t\tprintf(\"%d\\n\", 10);\n\t\treturn 0;\n\t}\n\tdp1[1] = 5;\n\tfor(int i = 2; i <= n - 2; i++)\n\t\tdp1[i] = (3 + 2 * dp1[i - 1]) % MOD;\n\tlong long dp2 = 1;\n\tFOR(i, n - 2)\n\t\tdp2 = (1 + dp1[n - 2 - i] * (3 + dp2)) % MOD;\n\tdp2 += 5;\n\tdp2 = 1 + dp2 * dp2;\n\tdp2 *= 2;\n\tdp2 %= MOD;\n\tprintf(\"%d\\n\", (int)dp2);\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"10\", \"74\"]","lang_cluster":"C++","code_uid":"2df315cd5bc5c2001ec58d4f02a170c5","prob_desc_notes":null,"prob_desc_output_spec":"Output the only number \u2014 the amount of Peter's routes modulo 1000000009.","prob_desc_output_to":"standard output","prob_desc_description":"Last summer Peter was at his granny's in the country, when a wolf attacked sheep in the nearby forest. Now he fears to walk through the forest, to walk round the forest, even to get out of the house. He explains this not by the fear of the wolf, but by a strange, in his opinion, pattern of the forest that has n levels, where n is an even number.In the local council you were given an area map, where the granny's house is marked by point H, parts of dense forest are marked grey (see the picture to understand better).After a long time at home Peter decided to yield to his granny's persuasions and step out for a breath of fresh air. Being prudent, Peter plans the route beforehand. The route, that Peter considers the most suitable, has the following characteristics:   it starts and ends in the same place \u2014 the granny's house;  the route goes along the forest paths only (these are the segments marked black in the picture);  the route has positive length (to step out for a breath of fresh air Peter has to cover some distance anyway);  the route cannot cross itself;  there shouldn't be any part of dense forest within the part marked out by this route; You should find the amount of such suitable oriented routes modulo 1000000009.  The example of the area map for n\u2009=\u200912 is given in the picture. Since the map has a regular structure, you can construct it for other n by analogy using the example.","hidden_unit_tests":"[{\"input\": \"2\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"74\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"1354\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"163594\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"122492554\"]}, {\"input\": \"966\\r\\n\", \"output\": [\"154440215\"]}, {\"input\": \"9158\\r\\n\", \"output\": [\"481655864\"]}, {\"input\": \"95576\\r\\n\", \"output\": [\"52134285\"]}, {\"input\": \"804974\\r\\n\", \"output\": [\"830331886\"]}, {\"input\": \"635758\\r\\n\", \"output\": [\"524558133\"]}, {\"input\": \"982894\\r\\n\", \"output\": [\"610514474\"]}, {\"input\": \"813678\\r\\n\", \"output\": [\"195839973\"]}, {\"input\": \"524288\\r\\n\", \"output\": [\"858669864\"]}, {\"input\": \"908550\\r\\n\", \"output\": [\"307673807\"]}, {\"input\": \"988794\\r\\n\", \"output\": [\"57571447\"]}, {\"input\": \"939636\\r\\n\", \"output\": [\"402023314\"]}, {\"input\": \"956022\\r\\n\", \"output\": [\"864671299\"]}, {\"input\": \"972408\\r\\n\", \"output\": [\"377259665\"]}, {\"input\": \"905180\\r\\n\", \"output\": [\"247958166\"]}, {\"input\": \"921566\\r\\n\", \"output\": [\"838186871\"]}, {\"input\": \"975778\\r\\n\", \"output\": [\"995284797\"]}, {\"input\": \"992164\\r\\n\", \"output\": [\"184482083\"]}, {\"input\": \"924936\\r\\n\", \"output\": [\"867859567\"]}, {\"input\": \"906864\\r\\n\", \"output\": [\"748483990\"]}, {\"input\": \"974094\\r\\n\", \"output\": [\"9604500\"]}, {\"input\": \"38\\r\\n\", \"output\": [\"913760132\"]}, {\"input\": \"94\\r\\n\", \"output\": [\"45354328\"]}, {\"input\": \"48\\r\\n\", \"output\": [\"980993190\"]}, {\"input\": \"54\\r\\n\", \"output\": [\"111356740\"]}, {\"input\": \"14\\r\\n\", \"output\": [\"809112458\"]}, {\"input\": \"68\\r\\n\", \"output\": [\"940618832\"]}, {\"input\": \"24\\r\\n\", \"output\": [\"697629445\"]}, {\"input\": \"30\\r\\n\", \"output\": [\"698593821\"]}, {\"input\": \"84\\r\\n\", \"output\": [\"222712293\"]}, {\"input\": \"941322\\r\\n\", \"output\": [\"359985814\"]}, {\"input\": \"923250\\r\\n\", \"output\": [\"463682665\"]}, {\"input\": \"999994\\r\\n\", \"output\": [\"381170049\"]}, {\"input\": \"999996\\r\\n\", \"output\": [\"629260868\"]}, {\"input\": \"999998\\r\\n\", \"output\": [\"336683304\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"958220352\"]}, {\"input\": \"140\\r\\n\", \"output\": [\"256406051\"]}, {\"input\": \"168\\r\\n\", \"output\": [\"816814227\"]}, {\"input\": \"160\\r\\n\", \"output\": [\"176472603\"]}, {\"input\": \"188\\r\\n\", \"output\": [\"249468441\"]}, {\"input\": \"180\\r\\n\", \"output\": [\"320858917\"]}, {\"input\": \"448\\r\\n\", \"output\": [\"511315133\"]}, {\"input\": \"410\\r\\n\", \"output\": [\"485353876\"]}, {\"input\": \"372\\r\\n\", \"output\": [\"993326044\"]}, {\"input\": \"726\\r\\n\", \"output\": [\"827884602\"]}, {\"input\": \"716\\r\\n\", \"output\": [\"687598196\"]}]","length":47,"num_hidden_unit_tests":50}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"0 1 0 0 0 0 0\", \"0 2 0 0 0 0 0\", \"1 1 1 0 0 0 0\", \"5 1 0 3 0 0 1\"]","prob_desc_input_spec":"The single line of the input contains 7 numbers w1,\u2009w2,\u2009...,\u2009w7 (0\u2009\u2264\u2009wi\u2009\u2264\u2009105). It is guaranteed that at least one of the wi's isn't equal to zero.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"a4bda63b95dc14185c47a08652fe41bd","prob_desc_created_at":"1419438600","source_code":"#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int maxN = 1<<7, maxL = 7, M = 1e9+7;\nstruct Matr {\n  int size;\n  int ele[maxN][maxN];\n} m[maxL+1];\nint ans, w[maxL+1], dp[maxL][2], sum[maxL+1][maxN];\nint solve(int u, int v, int n) {\n  memset(dp, 0, sizeof dp);\n  dp[0][1] = 1;\n  for (int i = 0; i < n; i++) {\n    dp[i+1][0] = (dp[i][0]+dp[i][1])%M;\n    dp[i+1][1] = dp[i][0];\n    if (((u>>i)&1)==1 || ((v>>i)&1)==1) dp[i+1][1] = (dp[i+1][1]+dp[i][1])%M;\n  }\n  return dp[n][1];\n}\nvoid init(int x) {\n  m[x].size = x;\n  for (int i = 0; i < (1<<x); i++)\n    for (int j = 0; j < (1<<x); j++)\n      m[x].ele[i][j] = solve(i, j, x);\n}\nMatr muti(Matr &x, Matr &y) {\n  int n;\n  Matr t;\n  t.size = n = x.size;\n  for (int i = 0; i < (1<<n); i++)\n    for (int j = 0; j < (1<<n); j++) {\n      t.ele[i][j] = 0;\n      for (int k = 0; k < (1<<n); k++)\n        t.ele[i][j] = (1LL*x.ele[i][k]*y.ele[k][j]+t.ele[i][j])%M;\n    }\n  return t;\n}\nMatr pow(Matr x, int k) {\n  if (k == 1) return x;\n  Matr t = pow(x, k>>1);\n  t = muti(t, t);\n  if (k&1) t = muti(t, x);\n  return t;\n}\nint main()\n{\n  for (int i = 1; i <= maxL; i++) init(i);\n  for (int i = 1; i <= maxL; i++) scanf(\"%d\", &w[i]);\n  sum[0][0] = 1;\n  for (int i = 1; i <= maxL; i++) \n    if (w[i] > 0) {\n      m[i] = pow(m[i], w[i]);\n      for (int u = 0; u < (1<<i); u++)\n        for (int v = 0; v < (1<<i); v++)\n          sum[i][v] = (1LL*m[i].ele[v][u]*sum[i-1][u]+sum[i][v])%M;\n      ans = sum[i][0];\n    } else {\n      for (int u = 0; u < (1<<i); u++) sum[i][u] = sum[i-1][u];\n    }\n  printf(\"%d\\n\", ans);\n}\n","prob_desc_sample_outputs":"[\"1\", \"7\", \"9\", \"411199181\"]","lang_cluster":"C++","code_uid":"9bdffe1d8549d194c59bc2ffb3c7905a","prob_desc_notes":"NoteAll the possible ways of painting the third sample are given below:  ","prob_desc_output_spec":"In the single line of the output display a single number \u2014 the answer to the problem modulo 109\u2009+\u20097.","prob_desc_output_to":"standard output","prob_desc_description":"You are given a figure on a grid representing stairs consisting of 7 steps. The width of the stair on height i is wi squares. Formally, the figure is created by consecutively joining rectangles of size wi\u2009\u00d7\u2009i so that the wi sides lie on one straight line. Thus, for example, if all wi\u2009=\u20091, the figure will look like that (different colors represent different rectangles):  And if w\u2009=\u2009{5,\u20091,\u20090,\u20093,\u20090,\u20090,\u20091}, then it looks like that:  Find the number of ways to color some borders of the figure's inner squares so that no square had all four borders colored. The borders of the squares lying on the border of the figure should be considered painted. The ways that differ with the figure's rotation should be considered distinct. ","hidden_unit_tests":"[{\"input\": \"0 1 0 0 0 0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 2 0 0 0 0 0\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1 1 1 0 0 0 0\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"5 1 0 3 0 0 1\\r\\n\", \"output\": [\"411199181\"]}, {\"input\": \"1 0 0 0 0 0 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 0 0 0 0 0 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"100000 0 0 0 0 0 0\\r\\n\", \"output\": [\"56182730\"]}, {\"input\": \"0 1 0 0 1 0 1\\r\\n\", \"output\": [\"22919\"]}, {\"input\": \"0 1 0 1 0 1 0\\r\\n\", \"output\": [\"3577\"]}, {\"input\": \"0 0 1 1 0 1 1\\r\\n\", \"output\": [\"24194747\"]}, {\"input\": \"0 0 1 1 1 0 1\\r\\n\", \"output\": [\"6847385\"]}, {\"input\": \"0 1 1 0 1 1 0\\r\\n\", \"output\": [\"274197\"]}, {\"input\": \"0 1 0 0 0 0 1\\r\\n\", \"output\": [\"61\"]}, {\"input\": \"2 9 1 4 8 10 0\\r\\n\", \"output\": [\"558116421\"]}, {\"input\": \"8 6 0 8 10 10 5\\r\\n\", \"output\": [\"905199207\"]}, {\"input\": \"6 8 1 9 10 1 10\\r\\n\", \"output\": [\"940638354\"]}, {\"input\": \"8 10 0 3 1 5 9\\r\\n\", \"output\": [\"86667542\"]}, {\"input\": \"10 0 6 6 6 5 3\\r\\n\", \"output\": [\"674053733\"]}, {\"input\": \"8 6 7 0 3 8 8\\r\\n\", \"output\": [\"794608861\"]}, {\"input\": \"53 91 91 47 65 70 40\\r\\n\", \"output\": [\"955570466\"]}, {\"input\": \"66 100 11 81 19 55 96\\r\\n\", \"output\": [\"806282508\"]}, {\"input\": \"44 8 21 71 7 29 40\\r\\n\", \"output\": [\"639986260\"]}, {\"input\": \"22 18 6 93 51 70 18\\r\\n\", \"output\": [\"473275942\"]}, {\"input\": \"68 16 16 83 74 44 41\\r\\n\", \"output\": [\"919840330\"]}, {\"input\": \"13 93 26 73 18 29 18\\r\\n\", \"output\": [\"969841570\"]}, {\"input\": \"610 733 623 505 595 316 299\\r\\n\", \"output\": [\"502335618\"]}, {\"input\": \"711 437 970 279 610 924 660\\r\\n\", \"output\": [\"422250703\"]}, {\"input\": \"812 761 936 52 245 158 12\\r\\n\", \"output\": [\"823236381\"]}, {\"input\": \"913 474 893 827 268 773 754\\r\\n\", \"output\": [\"904500124\"]}, {\"input\": \"394 798 239 974 284 1000 727\\r\\n\", \"output\": [\"868715722\"]}, {\"input\": \"876 884 197 747 308 615 87\\r\\n\", \"output\": [\"550075104\"]}, {\"input\": \"4378 6891 3337 4735 7196 5076 4509\\r\\n\", \"output\": [\"396740014\"]}, {\"input\": \"9442 1550 839 7549 7902 6377 591\\r\\n\", \"output\": [\"459254146\"]}, {\"input\": \"8821 6211 6590 770 8202 3769 4516\\r\\n\", \"output\": [\"75140867\"]}, {\"input\": \"8200 870 4499 1833 659 3318 192\\r\\n\", \"output\": [\"655121181\"]}, {\"input\": \"5421 5530 2001 5055 1365 2461 4117\\r\\n\", \"output\": [\"113648169\"]}, {\"input\": \"2642 190 7752 7870 3823 2011 9793\\r\\n\", \"output\": [\"818612801\"]}, {\"input\": \"24855 82667 4601 56243 9444 90804 11324\\r\\n\", \"output\": [\"718330126\"]}, {\"input\": \"59122 75888 25928 75089 48529 93085 17189\\r\\n\", \"output\": [\"658273774\"]}, {\"input\": \"69042 53044 47256 53523 52372 11430 39120\\r\\n\", \"output\": [\"794436758\"]}, {\"input\": \"3309 70612 8996 7609 56216 89365 20639\\r\\n\", \"output\": [\"29063799\"]}, {\"input\": \"37576 12526 5976 86044 95300 91646 2157\\r\\n\", \"output\": [\"603356528\"]}, {\"input\": \"71843 30095 92064 4890 23490 34339 48435\\r\\n\", \"output\": [\"337725955\"]}, {\"input\": \"65535 65535 65535 65535 65535 65535 65535\\r\\n\", \"output\": [\"265270793\"]}, {\"input\": \"100000 100000 100000 100000 100000 100000 100000\\r\\n\", \"output\": [\"722575602\"]}, {\"input\": \"100000 99999 100000 100000 100000 99999 100000\\r\\n\", \"output\": [\"258172454\"]}, {\"input\": \"100000 99997 100000 99996 99998 100000 99999\\r\\n\", \"output\": [\"914495724\"]}, {\"input\": \"98303 98303 98303 98303 98303 98303 98303\\r\\n\", \"output\": [\"306934455\"]}, {\"input\": \"1 98303 98303 98303 98303 98303 98303\\r\\n\", \"output\": [\"851265807\"]}, {\"input\": \"98303 98303 1 98303 98303 98303 98303\\r\\n\", \"output\": [\"555597981\"]}]","length":61,"num_hidden_unit_tests":50}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"0 0\", \"0 1\", \"0 2\", \"1 1\"]","prob_desc_input_spec":"The first line contains two integers n and k, separated by a space (0\u2009\u2264\u2009n,\u2009k\u2009\u2264\u2009200).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"fa649fed687d72b1431ac82bc7288116","prob_desc_created_at":"1376062200","source_code":"#include <cstdlib>\n#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cstring>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\n#define SIZE(x) (int((x).size()))\n#define rep(i,l,r) for (int i=(l); i<=(r); i++)\n#define repd(i,r,l) for (int i=(r); i>=(l); i--)\n#define rept(i,c) for (typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)\n\n#ifndef ONLINE_JUDGE\n#define debug(x) { cerr<<#x<<\" = \"<<(x)<<endl; }\n#else\n#define debug(x) {}\n#endif\n\n#define MD 1000000007\n\nvoid su(int &a, int b)\n{\n\ta+=b; if (a>=MD) a-=MD;\n}\n\nint bitcount(int x)\n{\n\tint ret=0;\n\twhile (x) x-=x&-x, ret++;\n\treturn ret;\n}\n\nint tmask[7]={0,3,6,12,9,15,15};\nint tcost[7]={0,1,1,1,1,2,2};\nint C[10][10], g[16][13][16], all[16], cs[16][210][3], dp[210][210][16];\n\nvoid lemon()\n{\n\tint n,m; scanf(\"%d%d\",&n,&m);\n\tC[0][0]=1;\n\trep(i,1,5)\n\t{\n\t\tC[i][0]=C[i][i]=1;\n\t\trep(j,1,i-1) C[i][j]=C[i-1][j-1]+C[i-1][j];\n\t}\n\t\/\/dp[h][c][mask]\n\t\/\/current height h, c triangles, covering section mask\n\trep(mask,0,15)\n\t\trep(ti,0,6)\n\t\t\tif ((mask&tmask[ti])==tmask[ti])\n\t\t\t\trep(tk,0,15)\n\t\t\t\t\tif (((mask^tmask[ti])&tk)==tk)\n\t\t\t\t\t{\n\t\t\t\t\t\tint nmask=tmask[ti]|tk, cav=0;\n\t\t\t\t\t\trep(i,0,3) if ((!(nmask&(1<<i))) && (!(nmask&(1<<((i+1)&3))))) cav|=(1<<i);\n\t\t\t\t\t\trep(ci,0,15)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint cover=(ci|((ci&7)<<1)|(ci>>3));\n\t\t\t\t\t\t\tif ((cav&ci)==ci && (mask&cover)==cover)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint av[4], tv[4]; \n\t\t\t\t\t\t\t\trep(i,0,3) if (nmask&(1<<i)) av[i]=0; else av[i]=3;\n\t\t\t\t\t\t\t\trep(i,0,3) if (ci&(1<<i)) av[i]--, av[(i+1)&3]--;\n\t\t\t\t\t\t\t\trep(t0,0,av[0])\n\t\t\t\t\t\t\t\t\trep(t1,0,av[1])\n\t\t\t\t\t\t\t\t\t\trep(t2,0,av[2])\n\t\t\t\t\t\t\t\t\t\t\trep(t3,0,av[3])\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tint cost=tcost[ti]+bitcount(tk)+bitcount(ci)+t0+t1+t2+t3; \n\t\t\t\t\t\t\t\t\t\t\t\ttv[0]=t0; tv[1]=t1; tv[2]=t2; tv[3]=t3;\n\t\t\t\t\t\t\t\t\t\t\t\tint gmask=0; rep(i,0,3) if (tv[i]) gmask|=(1<<i);\n\t\t\t\t\t\t\t\t\t\t\t\tif ((mask&gmask)!=gmask) continue;\n\t\t\t\t\t\t\t\t\t\t\t\tint co=1;\n\t\t\t\t\t\t\t\t\t\t\t\trep(i,0,3) co=co*C[av[i]][tv[i]];\n\t\t\t\t\t\t\t\t\t\t\t\trep(mmask,0,15)\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ((mmask&nmask)==0 && (mmask|nmask|gmask|cover)==mask)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsu(g[mask][cost][mmask],co);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\tmemset(all,0,sizeof all);\n\trep(mask,0,15)\n\t\trep(cost,0,12)\n\t\t\trep(mmask,0,15)\n\t\t\t\tif (g[mask][cost][mmask])\n\t\t\t\t{\n\t\t\t\t\tall[mask]++;\n\t\t\t\t\tcs[mask][all[mask]][0]=cost;\n\t\t\t\t\tcs[mask][all[mask]][1]=mmask;\n\t\t\t\t\tcs[mask][all[mask]][2]=g[mask][cost][mmask];\n\t\t\t\t}\n\t\t\t\t\n\tdp[0][0][0]=1; \n\tdp[0][1][1]=1; dp[0][1][2]=1; dp[0][1][4]=1; dp[0][1][8]=1;\n\tdp[0][1][3]=1; dp[0][1][6]=1; dp[0][1][12]=1; dp[0][1][9]=1;\n\tdp[0][2][3]=1; dp[0][2][5]=1; dp[0][2][9]=1; \n\tdp[0][2][6]=1; dp[0][2][10]=1; dp[0][2][12]=1;\n\tdp[0][2][14]=2; dp[0][2][13]=2; dp[0][2][11]=2; dp[0][2][7]=2; dp[0][2][15]=2;\n\tdp[0][3][14]=1; dp[0][3][13]=1; dp[0][3][11]=1; dp[0][3][7]=1; dp[0][3][15]=4;\n\tdp[0][4][15]=1;\n\trep(h,1,n)\n\t\trep(c,0,m)\n\t\t\trep(mask,0,15)\n\t\t\t\trep(k,1,all[mask])\n\t\t\t\t\tif (c>=cs[mask][k][0])\n\t\t\t\t\t\tsu(dp[h][c][mask],LL(dp[h-1][c-cs[mask][k][0]][cs[mask][k][1]])*cs[mask][k][2]%MD);\n\t\n\tint s=0;\n\trep(mask,0,15) su(s,dp[n][m][mask]);\n\trep(i,1,m) s=LL(s)*i%MD;\n\tprintf(\"%d\\n\",s);\n}\n\nint main()\n{\n\tios::sync_with_stdio(true);\n\t#ifndef ONLINE_JUDGE\n\t\tfreopen(\"336E.in\",\"r\",stdin);\n\t#endif\n\tlemon();\n\treturn 0;\n}\n\n","prob_desc_sample_outputs":"[\"1\", \"8\", \"32\", \"32\"]","lang_cluster":"C++","code_uid":"ce4c71c3e9142e868c15890444752899","prob_desc_notes":null,"prob_desc_output_spec":"Print exactly one integer \u2014 the answer to the problem modulo 1000000007 (109\u2009+\u20097).","prob_desc_output_to":"standard output","prob_desc_description":"Vasily the bear has two favorite integers n and k and a pencil. Besides, he's got k jars with different water color paints. All jars are numbered in some manner from 1 to k, inclusive. The jar number i contains the paint of the i-th color. Initially the bear took a pencil and drew four segments on the coordinate plane. All of them end at point (0,\u20090). They begin at: (0,\u20092n), (0,\u2009\u2009-\u20092n), (2n,\u20090), (\u2009-\u20092n,\u20090). Then for each i\u2009=\u20091,\u20092,\u2009...,\u2009n, the bear drew two squares. The first square has the following vertex coordinates: (2i,\u20090), (\u2009-\u20092i,\u20090), (0,\u2009\u2009-\u20092i), (0,\u20092i). The second square has the following vertex coordinates: (\u2009-\u20092i\u2009-\u20091,\u2009\u2009-\u20092i\u2009-\u20091), (\u2009-\u20092i\u2009-\u20091,\u20092i\u2009-\u20091), (2i\u2009-\u20091,\u2009\u2009-\u20092i\u2009-\u20091), (2i\u2009-\u20091,\u20092i\u2009-\u20091). After that, the bear drew another square: (1,\u20090), (\u2009-\u20091,\u20090), (0,\u2009\u2009-\u20091), (0,\u20091). All points mentioned above form the set of points A.The sample of the final picture at n\u2009=\u20090The sample of the final picture at n\u2009=\u20092The bear decided to paint the resulting picture in k moves. The i-th move consists of the following stages:   The bear chooses 3 distinct points in set \u0410 so that any pair of the chosen points has a segment on the picture between them. The chosen points and segments mark the area that mustn't contain any previously painted points.  The bear paints the area bounded by the chosen points and segments the i-th color. Note that after the k-th move some parts of the picture can stay unpainted.The bear asked you to calculate, how many distinct ways there are to paint his picture. A way to paint the picture is a sequence of three-element sets of points he chose on each step. Two sequences are considered distinct if there is such number i (1\u2009\u2264\u2009i\u2009\u2264\u2009k), that the i-th members of these sequences do not coincide as sets. As the sought number can be rather large, you only need to calculate the remainder after dividing it by number 1000000007 (109\u2009+\u20097).","hidden_unit_tests":"[{\"input\": \"0 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"0 1\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"0 2\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"100 100\\r\\n\", \"output\": [\"785212144\"]}, {\"input\": \"50 50\\r\\n\", \"output\": [\"733689613\"]}, {\"input\": \"200 1\\r\\n\", \"output\": [\"4808\"]}, {\"input\": \"200 200\\r\\n\", \"output\": [\"872125998\"]}, {\"input\": \"100 101\\r\\n\", \"output\": [\"809106948\"]}, {\"input\": \"50 200\\r\\n\", \"output\": [\"198451898\"]}, {\"input\": \"100 200\\r\\n\", \"output\": [\"415632601\"]}, {\"input\": \"200 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"200 30\\r\\n\", \"output\": [\"343436440\"]}, {\"input\": \"200 199\\r\\n\", \"output\": [\"85668249\"]}, {\"input\": \"43 23\\r\\n\", \"output\": [\"182063296\"]}, {\"input\": \"3 36\\r\\n\", \"output\": [\"652771394\"]}, {\"input\": \"5 22\\r\\n\", \"output\": [\"738800137\"]}, {\"input\": \"0 3\\r\\n\", \"output\": [\"48\"]}, {\"input\": \"0 4\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"1 200\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 0\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 16\\r\\n\", \"output\": [\"468890816\"]}, {\"input\": \"2 17\\r\\n\", \"output\": [\"96043716\"]}, {\"input\": \"2 18\\r\\n\", \"output\": [\"387887146\"]}, {\"input\": \"2 19\\r\\n\", \"output\": [\"640439699\"]}, {\"input\": \"2 27\\r\\n\", \"output\": [\"765368415\"]}, {\"input\": \"2 28\\r\\n\", \"output\": [\"35757887\"]}, {\"input\": \"2 29\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 30\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 16\\r\\n\", \"output\": [\"789741546\"]}, {\"input\": \"1 17\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"35 42\\r\\n\", \"output\": [\"258115371\"]}, {\"input\": \"0 199\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"70 70\\r\\n\", \"output\": [\"91329544\"]}, {\"input\": \"45 65\\r\\n\", \"output\": [\"305456181\"]}, {\"input\": \"89 42\\r\\n\", \"output\": [\"770318781\"]}, {\"input\": \"32 11\\r\\n\", \"output\": [\"995121400\"]}, {\"input\": \"17 1\\r\\n\", \"output\": [\"416\"]}, {\"input\": \"200 65\\r\\n\", \"output\": [\"623627086\"]}, {\"input\": \"74 11\\r\\n\", \"output\": [\"455784203\"]}, {\"input\": \"11 200\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10 200\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 200\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"0 5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"16 196\\r\\n\", \"output\": [\"289903466\"]}, {\"input\": \"16 197\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"15 100\\r\\n\", \"output\": [\"816869683\"]}, {\"input\": \"16 198\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"16 199\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"16 200\\r\\n\", \"output\": [\"0\"]}]","length":133,"num_hidden_unit_tests":50}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"30 5 20 20 3 5\", \"10 4 100 5 5 1\"]","prob_desc_input_spec":"The single line of the input contains six integers x,\u2009t,\u2009a,\u2009b,\u2009da,\u2009db (0\u2009\u2264\u2009x\u2009\u2264\u2009600;\u00a01\u2009\u2264\u2009t,\u2009a,\u2009b,\u2009da,\u2009db\u2009\u2264\u2009300) \u2014 Valera's result, the contest's duration, the initial cost of the first problem, the initial cost of the second problem, the number of points that the first and the second problem lose per minute, correspondingly. It is guaranteed that at each minute of the contest each problem has a non-negative cost, that is, a\u2009-\u2009i\u00b7da\u2009\u2265\u20090 and b\u2009-\u2009i\u00b7db\u2009\u2265\u20090 for all 0\u2009\u2264\u2009i\u2009\u2264\u2009t\u2009-\u20091.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"f98168cdd72369303b82b5a7ac45c3af","prob_desc_created_at":"1341329400","source_code":"#include <stdio.h>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    long int x,t,a,b,da,db;\n    scanf(\"%ld %ld %ld %ld %ld %ld\", &x, &t, &a, &b, &da, &db);\n    if(x == 0)\n    {printf(\"%s \\n\", \"YES\");\n            goto exit;}\n            else{\n\n    for(int tz = 0; tz < t; ++tz)\n    {\n        for(int tu = 0; tu < t; ++tu)\n        {\n            if(a - da*tz == x)\n            {printf(\"%s \\n\", \"YES\");\n            goto exit;}\n        }\n    }\n\n    for(int tz = 0; tz < t; ++tz)\n    {\n        for(int tu = 0; tu < t; ++tu)\n        {\n            if(b - db*tu == x)\n            {printf(\"%s \\n\", \"YES\");\n            goto exit;}\n        }\n    }\n\n\n    for(int tz = 0; tz < t; ++tz)\n    {\n        for(int tu = 0; tu < t; ++tu)\n        {\n            if(a - da*tz + b - db*tu == x)\n            {printf(\"%s \\n\", \"YES\");\n            goto exit;}\n        }\n    }\n    printf(\"%s \\n\", \"NO\");\n            }\n    exit:\n    return 0;\n}","prob_desc_sample_outputs":"[\"YES\", \"NO\"]","lang_cluster":"C++","code_uid":"725fc651007b85cb5914ca2e215c5443","prob_desc_notes":"NoteIn the first sample Valera could have acted like this: he could have submitted the first problem at minute 0 and the second problem \u2014 at minute 2. Then the first problem brings him 20 points and the second problem brings him 10 points, that in total gives the required 30 points.","prob_desc_output_spec":"If Valera could have earned exactly x points at a contest, print \"YES\", otherwise print \"NO\" (without the quotes).","prob_desc_output_to":"standard output","prob_desc_description":"A boy Valera registered on site Codeforces as Valera, and wrote his first Codeforces Round #300. He boasted to a friend Arkady about winning as much as x points for his first contest. But Arkady did not believe his friend's words and decided to check whether Valera could have shown such a result.He knows that the contest number 300 was unusual because there were only two problems. The contest lasted for t minutes, the minutes are numbered starting from zero. The first problem had the initial cost of a points, and every minute its cost reduced by da points. The second problem had the initial cost of b points, and every minute this cost reduced by db points. Thus, as soon as the zero minute of the contest is over, the first problem will cost a\u2009-\u2009da points, and the second problem will cost b\u2009-\u2009db points. It is guaranteed that at any moment of the contest each problem has a non-negative cost.Arkady asks you to find out whether Valera could have got exactly x points for this contest. You should assume that Valera could have solved any number of the offered problems. You should also assume that for each problem Valera made no more than one attempt, besides, he could have submitted both problems at the same minute of the contest, starting with minute 0 and ending with minute number t\u2009-\u20091. Please note that Valera can't submit a solution exactly t minutes after the start of the contest or later.","hidden_unit_tests":"[{\"input\": \"30 5 20 20 3 5\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"10 4 100 5 5 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"0 7 30 50 3 4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"50 10 30 20 1 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"40 1 40 5 11 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"35 8 20 20 1 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"10 2 27 4 11 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"64 12 258 141 10 7\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"5 3 11 100 2 4\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"5 4 11 80 2 4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"28 3 16 20 3 10\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"6 2 11 1 11 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"15 5 230 213 32 25\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"223 92 123 118 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"375 6 133 267 19 36\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"80 5 39 40 1 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"543 4 31 69 6 5\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"38 100 99 245 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"3 1 20 15 17 5\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"360 5 215 4 52 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"363 2 280 239 5 231\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"46 7 18 6 3 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"5 3 135 12 21 6\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"15 5 230 213 32 25\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"2 5 29 36 5 6\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"59 4 113 45 25 12\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"74 72 104 71 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"16 24 26 23 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"11 1 10 1 10 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"13 3 11 14 5 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1 2 1 2 1 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"145 26 25 150 1 4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"59 18 50 17 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"230 125 175 124 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"142 1 66 76 18 39\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 3 5 6 1 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"6 46 95 45 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"16 73 92 72 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"3 18 272 17 6 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"1 21 178 20 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 15 86 84 5 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 35 208 98 6 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"0 11 67 82 6 4\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"30 9 18 83 1 7\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"18 12 11 54 1 3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"41 77 96 145 1 1\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"27 45 44 169 1 2\\r\\n\", \"output\": [\"YES\"]}, {\"input\": \"50 5 30 60 3 3\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"49 2 50 20 2 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"49 2 50 20 2 1\\r\\n\", \"output\": [\"NO\"]}, {\"input\": \"17 10 10 20 1 2\\r\\n\", \"output\": [\"YES\"]}]","length":48,"num_hidden_unit_tests":51}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1600.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\", \"2 1\\n1 0\\n2 2\\n3 1\"]","prob_desc_input_spec":"The first line contains two space-separated integers R,\u2009B(1\u2009\u2264\u2009R,\u2009B\u2009\u2264\u200910). For 1\u2009\u2264\u2009i\u2009\u2264\u2009R, the i\u2009+\u20091-th line contains two space-separated integers xi and yi (|xi|,\u2009|yi|\u2009\u2264\u200910000) denoting the coordinates of the i-th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"65f81f621c228c09915adcb05256c634","prob_desc_created_at":"1523689500","source_code":"#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int MAX_N=100005;\n\n\nstruct Fly\n{\n    int x,y;\n}F[MAX_N];\n\n\nstruct Land\n{\n    int a,b;\n}L[MAX_N];\n\n\nint main()\n{\n    int R,B;\n    cin>>R>>B;\n    for(int i=0;i<R;i++)\n    {\n        cin>>F[i].x>>F[i].y;\n    }\n    for(int j=0;j<B;j++)\n    {\n        cin>>L[j].a>>L[j].b;\n    }\n    if(R==B)\n    {\n        cout<<\"Yes\"<<endl;\n        return 0;\n    }\n    else \n    {\n        cout<<\"No\"<<endl;\n        return 0;\n    }\n}\n","prob_desc_sample_outputs":"[\"Yes\", \"No\"]","lang_cluster":"C++","code_uid":"aea0a6d20dd4304ce29363f5eefcd737","prob_desc_notes":"NoteFor the first example, one possible way is to connect the Rebels and bases in order.For the second example, there is no perfect matching between Rebels and bases.","prob_desc_output_spec":"If it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).","prob_desc_output_to":"standard output","prob_desc_description":"The Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths \u2013 from a base to its assigned spaceship \u2013 do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.","hidden_unit_tests":"[{\"input\": \"3 3\\r\\n0 0\\r\\n2 0\\r\\n3 1\\r\\n-2 1\\r\\n0 3\\r\\n2 2\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"2 1\\r\\n1 0\\r\\n2 2\\r\\n3 1\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1 1\\r\\n3686 4362\\r\\n-7485 5112\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"1 2\\r\\n1152 -7324\\r\\n-5137 -35\\r\\n-6045 -5271\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1 3\\r\\n-8824 -9306\\r\\n-5646 -9767\\r\\n8123 9355\\r\\n-6203 -1643\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1 5\\r\\n-8775 6730\\r\\n-3806 -6906\\r\\n-9256 -8240\\r\\n-1320 6849\\r\\n8155 746\\r\\n8284 -7317\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1 8\\r\\n8741 3638\\r\\n381 -9191\\r\\n7534 8792\\r\\n-8848 -414\\r\\n2926 -7444\\r\\n9475 559\\r\\n6938 2359\\r\\n2570 4721\\r\\n3329 -9365\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1 9\\r\\n6207 1655\\r\\n2728 8520\\r\\n9142 3418\\r\\n-1258 -8727\\r\\n5370 3161\\r\\n-5167 -7691\\r\\n517 2242\\r\\n3702 -9904\\r\\n-6862 -2997\\r\\n2524 -5492\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"1 10\\r\\n9424 3979\\r\\n-8582 9252\\r\\n-2432 -3287\\r\\n-4247 1932\\r\\n-9491 5544\\r\\n-635 5689\\r\\n8260 -6790\\r\\n8841 3067\\r\\n-5624 -1990\\r\\n1569 1045\\r\\n-8844 -8462\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"2 1\\r\\n2893 -5488\\r\\n-5087 -5042\\r\\n-8928 -9453\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"2 2\\r\\n359 -29\\r\\n6964 -7332\\r\\n2384 -4529\\r\\n4434 2253\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"2 3\\r\\n-9617 845\\r\\n4195 -2181\\r\\n-6305 -9903\\r\\n-535 -6060\\r\\n9417 -8419\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"2 5\\r\\n-9568 -3121\\r\\n-1408 2942\\r\\n-827 -7497\\r\\n4348 2432\\r\\n-7958 231\\r\\n6440 1896\\r\\n2647 -1305\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"2 8\\r\\n7948 3490\\r\\n2779 3512\\r\\n3403 -3024\\r\\n-3180 -4831\\r\\n6815 4601\\r\\n7631 9772\\r\\n-6320 -1060\\r\\n5592 362\\r\\n-785 4040\\r\\n8030 3272\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"2 9\\r\\n5414 -8195\\r\\n-5171 -1634\\r\\n5012 4161\\r\\n-5888 -585\\r\\n9258 2646\\r\\n5548 1523\\r\\n7259 -8619\\r\\n9580 5738\\r\\n-8715 706\\r\\n-2232 -3280\\r\\n1866 1775\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"2 10\\r\\n-5118 -3971\\r\\n-1169 -9140\\r\\n-7807 -3139\\r\\n9702 -5328\\r\\n8555 3460\\r\\n-1442 -733\\r\\n701 -2802\\r\\n-5784 2578\\r\\n8186 -4810\\r\\n-2722 -1013\\r\\n-9437 4021\\r\\n-5403 -1331\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"3 1\\r\\n-8199 -7896\\r\\n7015 -4898\\r\\n-499 -8710\\r\\n9953 -6411\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"3 2\\r\\n9268 -9879\\r\\n4245 2515\\r\\n-9188 -3786\\r\\n-2458 -2165\\r\\n3420 463\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"3 3\\r\\n-8149 697\\r\\n6593 7667\\r\\n2123 -9160\\r\\n-5165 9523\\r\\n747 -8933\\r\\n-1536 -2691\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"3 5\\r\\n-658 7030\\r\\n990 3086\\r\\n-4958 -6755\\r\\n7159 -1986\\r\\n5634 -7726\\r\\n1740 -1450\\r\\n1947 7835\\r\\n-2755 -4709\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"3 8\\r\\n-3143 -6360\\r\\n-5121 -6641\\r\\n-727 -9723\\r\\n-369 454\\r\\n-9298 4086\\r\\n5787 -1016\\r\\n2683 -9660\\r\\n-1089 1121\\r\\n-4898 7743\\r\\n418 5485\\r\\n7425 -6644\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"3 9\\r\\n6882 -8342\\r\\n4669 -8932\\r\\n882 4904\\r\\n-220 4700\\r\\n587 -5311\\r\\n3704 -1823\\r\\n6559 -6921\\r\\n-7399 6497\\r\\n-5387 -5890\\r\\n-9844 -1067\\r\\n5367 -7237\\r\\n-8314 -939\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"3 10\\r\\n-7100 -1623\\r\\n-3459 2172\\r\\n9676 1595\\r\\n-6053 4558\\r\\n-842 8819\\r\\n-9691 3144\\r\\n3440 -9112\\r\\n7034 4946\\r\\n4851 -2513\\r\\n430 4372\\r\\n-7175 -3497\\r\\n5719 381\\r\\n-8859 -1347\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"5 1\\r\\n9621 -154\\r\\n6694 -2348\\r\\n944 -7225\\r\\n-1568 -5543\\r\\n-3805 -872\\r\\n1204 -2651\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"5 2\\r\\n-355 -9579\\r\\n-1256 -4638\\r\\n-4890 7402\\r\\n-1420 -1297\\r\\n-1362 2290\\r\\n-879 9101\\r\\n9514 -6689\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"5 3\\r\\n9670 8440\\r\\n1091 -9784\\r\\n6422 4884\\r\\n3314 -9610\\r\\n8523 -7107\\r\\n-2963 8293\\r\\n3092 -3950\\r\\n-4093 -6502\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"5 5\\r\\n-2840 4475\\r\\n2931 -6923\\r\\n-659 -8125\\r\\n8197 -1118\\r\\n851 -5899\\r\\n313 6679\\r\\n-9751 6115\\r\\n-6415 4250\\r\\n-227 -9732\\r\\n-6282 5041\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"5 8\\r\\n-5325 1383\\r\\n-5441 3351\\r\\n-3870 1465\\r\\n669 -8381\\r\\n-4377 5913\\r\\n4360 -329\\r\\n8725 8620\\r\\n7810 -2479\\r\\n4019 4850\\r\\n8052 9911\\r\\n4130 -4668\\r\\n3744 2537\\r\\n-7171 -3933\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"5 9\\r\\n-2742 -600\\r\\n6609 8502\\r\\n-5118 6389\\r\\n-4300 5568\\r\\n-1934 -3484\\r\\n9719 -1137\\r\\n2303 -8641\\r\\n1500 2897\\r\\n-6172 -8783\\r\\n-2210 -6939\\r\\n9514 -5262\\r\\n-3773 -4081\\r\\n1983 -4032\\r\\n4503 -3496\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"5 10\\r\\n1493 7658\\r\\n-598 7650\\r\\n9226 -964\\r\\n2439 -3114\\r\\n366 2391\\r\\n-1008 -2258\\r\\n6063 8568\\r\\n7488 6824\\r\\n-4674 9523\\r\\n9590 9960\\r\\n-8361 -8234\\r\\n520 -1312\\r\\n-3878 -1142\\r\\n-8261 -239\\r\\n-2346 -2362\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"8 1\\r\\n-796 -1\\r\\n3591 -2510\\r\\n-6330 4706\\r\\n-7422 -9093\\r\\n7860 -7002\\r\\n5375 -5310\\r\\n3538 3108\\r\\n-9851 -9798\\r\\n-8884 -170\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"8 2\\r\\n-3330 -1983\\r\\n-6621 -4800\\r\\n-4721 9630\\r\\n9871 -4847\\r\\n-2256 -8957\\r\\n3292 -6118\\r\\n4558 -6712\\r\\n-5863 5282\\r\\n-9373 3938\\r\\n-5179 -8073\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"8 3\\r\\n6695 8593\\r\\n-7129 352\\r\\n6590 -5447\\r\\n-2540 -3457\\r\\n7630 1647\\r\\n8651 5634\\r\\n-1864 -6829\\r\\n7828 -1901\\r\\n-7005 -9695\\r\\n4561 -4921\\r\\n-4782 -6478\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"8 5\\r\\n6744 2367\\r\\n-5290 -7085\\r\\n-491 6662\\r\\n2343 -2407\\r\\n-43 2855\\r\\n-8075 6875\\r\\n-7265 -4206\\r\\n-4197 8851\\r\\n7433 780\\r\\n4038 -8321\\r\\n-1455 -7665\\r\\n3139 -1225\\r\\n9884 -167\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"8 8\\r\\n4260 1536\\r\\n-8545 6045\\r\\n-3702 3693\\r\\n-5185 -2228\\r\\n-5271 -5335\\r\\n-4027 4453\\r\\n-8790 8598\\r\\n7172 -5320\\r\\n-880 -4638\\r\\n-1630 -3452\\r\\n2076 8296\\r\\n-9116 -5599\\r\\n2461 9832\\r\\n4268 5116\\r\\n-7582 -805\\r\\n3548 3776\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"8 9\\r\\n-5716 6995\\r\\n1245 3754\\r\\n7610 8617\\r\\n-451 -5424\\r\\n-2828 5270\\r\\n-6111 6502\\r\\n-2653 1039\\r\\n3718 7498\\r\\n-8810 -7973\\r\\n667 -300\\r\\n-2838 -2001\\r\\n3367 5523\\r\\n-8386 -2827\\r\\n6929 -6260\\r\\n3247 1167\\r\\n1873 6265\\r\\n4376 -8781\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"8 10\\r\\n5844 -8156\\r\\n9676 -8121\\r\\n-6302 -1050\\r\\n-4823 -8343\\r\\n4736 -3859\\r\\n9129 5920\\r\\n-3990 2792\\r\\n3615 -8930\\r\\n-7831 -8703\\r\\n-5542 931\\r\\n7599 -7930\\r\\n8705 -8735\\r\\n-6438 1724\\r\\n-7568 -8351\\r\\n5893 2316\\r\\n2574 -9723\\r\\n2416 3827\\r\\n856 -4877\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"9 1\\r\\n8114 -9851\\r\\n872 -9807\\r\\n9541 5449\\r\\n7948 -3808\\r\\n8892 -7517\\r\\n-6767 3903\\r\\n-18 -311\\r\\n-3973 5845\\r\\n-3295 3533\\r\\n-4790 -4426\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"9 2\\r\\n5580 8167\\r\\n-7078 -4655\\r\\n3707 -9628\\r\\n2980 438\\r\\n1632 -9472\\r\\n-8850 -4346\\r\\n-6440 2428\\r\\n-2841 923\\r\\n6515 -2658\\r\\n-2492 -8716\\r\\n8219 5104\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"9 3\\r\\n8163 6185\\r\\n-4731 2757\\r\\n-4982 -4704\\r\\n3128 4684\\r\\n-8483 1132\\r\\n6807 2288\\r\\n4878 2311\\r\\n-6295 6299\\r\\n8882 -5992\\r\\n-195 4733\\r\\n6162 4510\\r\\n-7264 -1020\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"9 5\\r\\n-4347 -5222\\r\\n-2891 5618\\r\\n-4621 7404\\r\\n-4548 -6825\\r\\n3846 2340\\r\\n2640 3530\\r\\n-7965 4934\\r\\n-8617 -2950\\r\\n-9240 4483\\r\\n-718 6451\\r\\n-8251 -6379\\r\\n558 3484\\r\\n9861 -6432\\r\\n483 -7331\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"9 8\\r\\n-6832 -872\\r\\n1295 -4109\\r\\n-7832 -8123\\r\\n-2373 -6646\\r\\n-1383 -5849\\r\\n3832 -6334\\r\\n-7229 -2263\\r\\n-6951 -9678\\r\\n4709 1326\\r\\n-6386 -1239\\r\\n2721 -8159\\r\\n-4255 -890\\r\\n9880 3567\\r\\n3349 5921\\r\\n2487 -828\\r\\n-783 2422\\r\\n-5497 -8399\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"9 9\\r\\n3193 -2855\\r\\n787 -6399\\r\\n3479 9360\\r\\n5217 -9842\\r\\n1061 4755\\r\\n1748 -7142\\r\\n-6209 -2380\\r\\n6740 -4302\\r\\n-5482 5433\\r\\n3353 -5529\\r\\n664 1546\\r\\n8228 -9769\\r\\n-8409 -1650\\r\\n893 9365\\r\\n-9542 8585\\r\\n7245 -9972\\r\\n-475 -6359\\r\\n-3775 2139\\r\\n\", \"output\": [\"YES\", \"Yes\"]}, {\"input\": \"9 10\\r\\n-3581 3894\\r\\n7385 3191\\r\\n-8820 6540\\r\\n-577 -5900\\r\\n2781 -5943\\r\\n8322 -7944\\r\\n-1251 -5779\\r\\n-3567 3140\\r\\n8835 -6406\\r\\n-2390 -1126\\r\\n7006 4553\\r\\n-174 -7023\\r\\n-6538 1530\\r\\n3318 2477\\r\\n7864 -9657\\r\\n-2379 -6961\\r\\n4456 9852\\r\\n1462 -5871\\r\\n-9931 6466\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10 1\\r\\n3362 3137\\r\\n-6006 -2168\\r\\n-9207 8006\\r\\n-6284 -114\\r\\n4617 -4997\\r\\n-4360 3540\\r\\n-6423 2328\\r\\n-8768 8468\\r\\n2899 1032\\r\\n-7561 -3623\\r\\n6979 653\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10 2\\r\\n5945 8596\\r\\n-3658 -4459\\r\\n-7598 -7071\\r\\n3567 4132\\r\\n7060 -1835\\r\\n-6443 -4709\\r\\n4895 2211\\r\\n-4780 3546\\r\\n5266 7400\\r\\n2178 -472\\r\\n4922 -9643\\r\\n4163 6030\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10 3\\r\\n3411 6614\\r\\n8392 693\\r\\n-8846 7555\\r\\n-1402 -4181\\r\\n-3055 -3789\\r\\n4033 -5516\\r\\n-1527 4950\\r\\n-792 8922\\r\\n-4925 4065\\r\\n4475 5536\\r\\n-9695 9764\\r\\n6943 -2849\\r\\n7022 1986\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10 5\\r\\n3460 5504\\r\\n529 -6744\\r\\n4075 9961\\r\\n-3961 4311\\r\\n-7871 9977\\r\\n7308 -4275\\r\\n-6928 7573\\r\\n-3114 -327\\r\\n-3046 -5461\\r\\n3953 4398\\r\\n-4106 -3981\\r\\n-8092 -8048\\r\\n7590 9228\\r\\n9433 -4\\r\\n-8808 -6742\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10 8\\r\\n8417 -444\\r\\n-5582 6386\\r\\n863 6992\\r\\n-4047 6751\\r\\n-5658 1788\\r\\n-1204 5862\\r\\n-6192 -2480\\r\\n813 -7056\\r\\n-9098 -1176\\r\\n-1715 -3292\\r\\n6866 -2905\\r\\n-7788 137\\r\\n7609 -774\\r\\n-7702 -6753\\r\\n-6622 -3090\\r\\n3089 -7006\\r\\n-9374 1882\\r\\n-481 -5698\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10 9\\r\\n-9001 -9868\\r\\n4207 1240\\r\\n-7826 1618\\r\\n-6755 3555\\r\\n-3214 -167\\r\\n4155 -4648\\r\\n-2316 259\\r\\n4801 -1679\\r\\n-6730 8048\\r\\n-4535 -9843\\r\\n4809 -5759\\r\\n4695 -8742\\r\\n9321 -5991\\r\\n2401 4133\\r\\n6468 6324\\r\\n1414 -9103\\r\\n-6613 3922\\r\\n5544 -5092\\r\\n-6777 -788\\r\\n\", \"output\": [\"No\", \"NO\"]}, {\"input\": \"10 10\\r\\n8530 -3814\\r\\n-9330 -6035\\r\\n3951 -217\\r\\n-9276 8291\\r\\n636 -3118\\r\\n5024 -2403\\r\\n4601 7977\\r\\n-3620 -1428\\r\\n4954 -9632\\r\\n-9852 6553\\r\\n-3457 5430\\r\\n-8866 -7343\\r\\n1020 -5748\\r\\n5043 -3820\\r\\n-2832 1528\\r\\n-5058 -825\\r\\n2406 -3530\\r\\n9152 -7463\\r\\n-8547 7108\\r\\n2492 8953\\r\\n\", \"output\": [\"YES\", \"Yes\"]}]","length":41,"num_hidden_unit_tests":51}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"a6 b4 c8 a8\", \"a6 c4 b6 b8\", \"a2 b1 a3 a1\"]","prob_desc_input_spec":"The input contains 4 space-separated piece positions: positions of the two rooks, the white king and the black king. Each position on 8\u2009\u00d7\u20098 chessboard is denoted by two symbols \u2014 ('a' - 'h') and ('1' - '8') \u2014 which stand for horizontal and vertical coordinates of the cell occupied by the piece. It is guaranteed, that no two pieces occupy the same cell, and kings cannot take each other.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"5d05af36c7ccb0cd26a4ab45966b28a3","prob_desc_created_at":"1290096000","source_code":"#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\n#define fori(i, n) for ( int i = 0; i < (n); ++i )\n#define forr(i, a, b) for ( int i = (a); i <= (b); ++i )\n#define ford(i, a, b) for ( int i = (a); i >= (b); --i )\n#define tr(it, a, b) for ( typeof(a) it = (a); it != (b); ++it )\n#define all(x) (x).begin(),(x).end()\n#define sz size()\n#define pb push_back\n\n#define TRACE(x...)\n#define PRINT(x...) TRACE(printf(x))\n#define WATCH(x) TRACE(cout << #x\" = \" << x << \"\\n\")\n\ntemplate<class T> string a2s(T x) { ostringstream o; o << x; return o.str(); }\ntemplate<class T> T s2a(string s) { istringstream i(s); T x; i >> x; return x; }\n\nconst double EPS = 1e-9;\nconst int INF = 0x3F3F3F3F;\n\nint cmpD(double x, double y = 0, double tol = EPS)\n{\n    return ( x <= y + tol ) ? ( x + tol < y ) ? -1 : 0 : 1;\n}\n\n#define VALID(x,y) x >= 0 && x < 8 && y >= 0 && y < 8\nint dx[9] = {0, -1, -1, -1, 0, 1, 1, 1, 0};\nint dy[9] = {0, -1, 0, 1, 1, 1, 0, -1, -1};\nint pos[3][2];\nint king[2];\n\nbool ok( int y, int x )\n{\n\tint nx, ny;\n\t\n\t\/\/ atacado por torre\n\tfori(i,2) \n\t{\n\t\tif ( pos[i][0] == y && pos[i][1] != x )\n\t\t{\n\t\t\tint minx = min( pos[i][1], x ) + 1;\n\t\t\tint maxx = max( pos[i][1], x );\n\t\t\tint j = minx;\n\t\t\tfor( j = minx; j < maxx; ++j ) if ( y == pos[2][0] && j == pos[2][1] ) break;\n\t\t\tif ( j == maxx ) return false;\n\t\t}\n\t\tif ( pos[i][0] != y && pos[i][1] == x )\n\t\t{\n\t\t\tint miny = min( pos[i][0], y ) + 1;\n\t\t\tint maxy = max( pos[i][0], y );\n\t\t\tint j = miny;\n\t\t\tfor( j = miny; j < maxy; ++j ) if ( x == pos[2][1] && j == pos[2][0] ) break;\n\t\t\tif ( j == maxy ) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\/\/ atacado por rei\n\tforr(i,1,8)\n\t{\n\t\tny = pos[2][0] + dy[i];\n\t\tnx = pos[2][1] + dx[i];\n\t\t\n\t\tif ( ny == y && nx == x )\n\t\t{\n\t\t\treturn false; \n\t\t}\n\t}\n\t\n\treturn true;\n}\n\nbool can_move()\n{\n\tint y, x;\n\t\n\tfori(i,9)\n\t{\n\t\ty = king[0] + dy[i];\n\t\tx = king[1] + dx[i];\n\t\tif ( VALID( x, y ) && ok( y, x ) ) return true;\n\t}\n\t\n\treturn false;\n}\n\nint main()\n{\t\n\tstring a, b, c, d;\n\twhile ( cin >> a >> b >> c >> d )\n\t{\n\t\tpos[0][0] = a[0]-'a';\n\t\tpos[0][1] = a[1]-'1';\n\t\t\n\t\tpos[1][0] = b[0]-'a';\n\t\tpos[1][1] = b[1]-'1';\n\t\t\n\t\tpos[2][0] = c[0]-'a';\n\t\tpos[2][1] = c[1]-'1';\n\t\t\n\t\tking[0] = d[0]-'a';\n\t\tking[1] = d[1]-'1';\n\t\t\n\t\tif ( can_move() )\n\t\t{\n\t\t\tcout << \"OTHER\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"CHECKMATE\" << endl;\n\t\t}\n\t}\n    \n    return 0;\n}\n\n","prob_desc_sample_outputs":"[\"CHECKMATE\", \"OTHER\", \"OTHER\"]","lang_cluster":"C++","code_uid":"f03b1f055feb07a5a1e834b017b9cc97","prob_desc_notes":null,"prob_desc_output_spec":"Output should contain one word: \"CHECKMATE\" if whites mate blacks, and \"OTHER\" otherwise.","prob_desc_output_to":"standard output","prob_desc_description":"Once Volodya was at the museum and saw a regular chessboard as a museum piece. And there were only four chess pieces on it: two white rooks, a white king and a black king. \"Aha, blacks certainly didn't win!\", \u2014 Volodya said and was right for sure. And your task is to say whether whites had won or not.Pieces on the chessboard are guaranteed to represent a correct position (every piece occupies one cell, no two pieces occupy the same cell and kings cannot take each other). Thus, your task is only to decide whether whites mate blacks. We would remind you that it means that the black king can be taken by one of the opponent's pieces at the moment and also it cannot move to an unbeaten position. A rook moves vertically or horizontally by any number of free cells (assuming there are no other pieces on its path), a king \u2014 to the adjacent cells (either by corner or by side). Certainly, pieces cannot leave the board. The black king might be able to take opponent's rooks at his turn (see sample 3).","hidden_unit_tests":"[{\"input\": \"a6 b4 c8 a8\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"a6 c4 b6 b8\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"a2 b1 a3 a1\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"a5 c5 c2 a1\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"a5 c5 c3 a1\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"c1 c2 d1 f1\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"a1 a2 c4 c2\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"a1 a2 d4 c2\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"a1 a2 b4 c2\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"b2 c2 b3 c1\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"b2 c2 b3 b1\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"b3 a8 c2 a3\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"b3 a8 c4 a3\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"b3 a8 d3 a3\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"d4 e5 a7 a5\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"d4 e5 b7 a5\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"d4 e5 c7 a5\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"h7 h8 d8 a8\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"h7 h8 c7 a8\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"a6 a8 c2 a1\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"a7 b7 d8 a6\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"a5 b5 g2 a8\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"a2 f1 g3 d1\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"b3 a5 g6 a8\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"c6 b2 g6 b4\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"c6 b4 h4 d1\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"d8 b4 f2 c5\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"e1 c8 g5 b3\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"e6 e7 d4 h2\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"f1 a2 c7 d1\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"f6 d5 h5 b6\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"f7 h7 f4 h4\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"f1 h2 h5 c8\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"g5 c1 a3 c2\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"g5 c4 a7 g3\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"g4 e5 h2 e1\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"g8 h5 a6 h3\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"h7 c8 c2 e8\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"h1 g8 b8 h6\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"h2 h4 h8 f5\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"h7 g7 h6 h8\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"h7 g7 g6 g8\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"h7 g7 h6 f7\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"h7 g8 f8 h8\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"h7 g8 h6 h8\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"e8 e7 d8 g8\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"e8 e7 h8 f8\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"d8 d7 h8 f8\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"e8 e7 f8 h8\\r\\n\", \"output\": [\"OTHER\"]}, {\"input\": \"f7 h5 f8 h8\\r\\n\", \"output\": [\"CHECKMATE\"]}, {\"input\": \"a1 a2 h1 e1\\r\\n\", \"output\": [\"CHECKMATE\"]}]","length":132,"num_hidden_unit_tests":51}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1900.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"2 2\\n1 2 3 4\\n1 5 3 4\", \"2 2\\n1 2 3 4\\n1 5 6 4\", \"2 3\\n1 2 4 5\\n1 2 1 3 2 3\"]","prob_desc_input_spec":"The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 12$$$) \u2014 the number of pairs the first participant communicated to the second and vice versa. The second line contains $$$n$$$ pairs of integers, each between $$$1$$$ and $$$9$$$, \u2014 pairs of numbers communicated from first participant to the second. The third line contains $$$m$$$ pairs of integers, each between $$$1$$$ and $$$9$$$, \u2014 pairs of numbers communicated from the second participant to the first. All pairs within each set are distinct (in particular, if there is a pair $$$(1,2)$$$, there will be no pair $$$(2,1)$$$ within the same set), and no pair contains the same number twice. It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"cb4de190ae26127df6eeb7a1a1db8a6d","prob_desc_created_at":"1529166900","source_code":"\/* DHUOJ solution #343263 @ 2018-07-06 20:17:08.805 *\/\n\n#include <bits\/stdc++.h>\n#define ll long long\n#define INF 0x7fffffff\n#define inf 0x7fffffffffffffff\n#define ms(a,val) memset((a),(val),(sizeof(a)))\n#define sqr(x) ((x)*(x))\n\nusing namespace std;\n\npair<int,int> a[15],b[15];\nset<int> ans,store[15];\n\nint main(){\n    int n,m,x,y;\n    while(cin>>n>>m){\n        for(int i=0;i<n;i++){\n            cin>>x>>y;\n            a[i]=make_pair(min(x,y),max(x,y));\n        }\n        for(int i=0;i<m;i++){\n            cin>>x>>y;\n            b[i]=make_pair(min(x,y),max(x,y));\n        }\n        int flag=0,sum=0;\n        for(int i=0;i<n;i++){\n            set<int> dict;\n            for(int j=0;j<m;j++){\n                if(a[i]==b[j])continue;\n                if(a[i].first==b[j].first||a[i].first==b[j].second){\n                    dict.insert(a[i].first);\n                    if(store[j].size()==1&&*store[j].begin()!=a[i].first){\n                        flag=1;\n                        break;\n                    }\n                    store[j].insert(a[i].first);\n                }\n                if(a[i].second==b[j].second||a[i].second==b[j].first){\n                    dict.insert(a[i].second);\n                    if(store[j].size()==1&&*store[j].begin()!=a[i].second){\n                        flag=1;\n                        break;\n                    }\n                    store[j].insert(a[i].second);\n                }\n            }\n            if(dict.size()>1){\n                flag=1;\n                break;\n            }\n            else if(dict.size()==1){\n                ans.insert(*dict.begin());\n                sum++;\n            }\n        }\n        if(flag)cout<<-1<<endl;\n        else if(ans.size()==1)cout<<*ans.begin()<<endl;\n        else cout<<0<<endl;\n\n        \/\/dict.clear();\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"1\", \"0\", \"-1\"]","lang_cluster":"C++","code_uid":"256b892b5309dc96c4294c1e23f6b26d","prob_desc_notes":"NoteIn the first example the first participant communicated pairs $$$(1,2)$$$ and $$$(3,4)$$$, and the second communicated $$$(1,5)$$$, $$$(3,4)$$$. Since we know that the actual pairs they received share exactly one number, it can't be that they both have $$$(3,4)$$$. Thus, the first participant has $$$(1,2)$$$ and the second has $$$(1,5)$$$, and at this point you already know the shared number is $$$1$$$.In the second example either the first participant has $$$(1,2)$$$ and the second has $$$(1,5)$$$, or the first has $$$(3,4)$$$ and the second has $$$(6,4)$$$. In the first case both of them know the shared number is $$$1$$$, in the second case both of them know the shared number is $$$4$$$. You don't have enough information to tell $$$1$$$ and $$$4$$$ apart.In the third case if the first participant was given $$$(1,2)$$$, they don't know what the shared number is, since from their perspective the second participant might have been given either $$$(1,3)$$$, in which case the shared number is $$$1$$$, or $$$(2,3)$$$, in which case the shared number is $$$2$$$. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is $$$-1$$$.","prob_desc_output_spec":"If you can deduce the shared number with certainty, print that number. If you can with certainty deduce that both participants know the shared number, but you do not know it, print $$$0$$$. Otherwise print $$$-1$$$.","prob_desc_output_to":"standard output","prob_desc_description":"Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.","hidden_unit_tests":"[{\"input\": \"2 2\\r\\n1 2 3 4\\r\\n1 5 3 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n1 2 3 4\\r\\n1 5 6 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 3\\r\\n1 2 4 5\\r\\n1 2 1 3 2 3\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"2 1\\r\\n1 2 1 3\\r\\n1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 4\\r\\n1 2 3 4 5 6 7 8\\r\\n2 3 4 5 6 7 8 1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"3 3\\r\\n1 2 5 6 7 8\\r\\n2 3 4 5 8 9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 3\\r\\n1 2 4 5 6 7 8 9\\r\\n1 2 8 9 3 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 4\\r\\n2 1 8 9 3 1\\r\\n1 2 4 5 6 7 8 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 8\\r\\n8 9 8 5 9 2\\r\\n8 4 8 3 2 6 4 2 4 3 3 7 3 6 1 6\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"9 1\\r\\n3 4 3 2 3 7 3 5 9 4 1 9 6 4 5 2 7 6\\r\\n8 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5 6\\r\\n4 7 7 3 4 3 9 4 3 9\\r\\n7 5 7 8 1 7 7 2 6 2 1 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"7 3\\r\\n2 6 6 7 6 4 6 1 9 6 7 4 1 9\\r\\n6 5 3 6 6 8\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"9 2\\r\\n9 6 1 6 2 5 7 3 8 1 7 2 9 1 2 8 3 8\\r\\n6 4 4 5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 6\\r\\n1 7 5 6 6 9 3 6 1 9\\r\\n2 7 2 5 8 5 4 8 4 2 8 2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 9\\r\\n9 7 9 2 7 2\\r\\n9 8 1 9 3 9 6 3 8 6 4 6 1 3 5 4 5 3\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"9 4\\r\\n2 8 8 9 8 1 9 2 5 9 3 5 3 2 5 2 9 1\\r\\n8 4 8 7 6 8 4 7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"1 12\\r\\n6 8\\r\\n8 4 8 2 5 8 9 8 8 3 8 7 8 1 1 3 1 9 4 3 7 3 5 7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"12 12\\r\\n7 6 3 8 8 4 4 7 1 9 9 5 7 5 4 9 8 6 2 7 7 3 3 6\\r\\n9 1 2 4 9 8 5 3 6 7 3 8 2 7 5 9 6 4 3 1 2 6 1 4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"12 12\\r\\n1 6 2 6 8 3 6 4 4 8 7 2 7 5 9 4 2 4 9 5 8 5 3 6\\r\\n2 8 6 9 2 6 7 4 6 5 6 3 5 8 7 8 7 1 1 9 9 7 7 3\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"12 12\\r\\n6 7 5 4 7 8 2 9 8 5 3 5 1 6 7 3 7 9 5 7 1 8 6 8\\r\\n6 4 2 1 7 8 1 6 8 5 9 8 1 5 7 2 5 9 6 3 9 2 9 4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1 10\\r\\n3 9\\r\\n3 2 3 4 5 3 5 7 8 6 2 5 7 8 2 4 1 7 5 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"3 10\\r\\n6 1 4 1 4 6\\r\\n7 1 8 1 8 5 3 2 9 7 9 3 5 9 5 3 5 7 7 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 7\\r\\n2 7 2 5\\r\\n7 1 9 7 8 9 4 9 8 1 3 9 3 8\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"12 1\\r\\n6 2 6 4 8 6 6 9 5 6 6 1 9 1 1 3 3 9 2 4 5 2 8 1\\r\\n6 7\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2 11\\r\\n6 1 3 6\\r\\n1 7 1 2 1 5 1 4 5 3 3 2 9 8 4 2 7 5 4 9 2 9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 9\\r\\n8 1 8 4 2 8 2 1 4 1 4 2\\r\\n8 3 8 6 7 8 5 8 6 7 5 7 9 6 5 6 5 3\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"6 4\\r\\n2 7 3 2 8 3 1 5 7 4 3 5\\r\\n2 6 9 8 8 6 6 9\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 10\\r\\n1 5 7 1 2 1\\r\\n9 5 5 6 3 5 4 7 8 3 9 6 8 4 9 8 4 6 3 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 7\\r\\n8 4\\r\\n9 8 8 2 6 8 8 1 7 8 2 1 9 5\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"3 6\\r\\n3 5 7 4 7 5\\r\\n3 9 3 2 8 6 6 2 8 2 6 9\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"8 5\\r\\n7 9 6 7 4 7 2 1 4 9 2 9 4 2 9 6\\r\\n8 7 1 8 8 5 3 5 3 8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8 1\\r\\n1 6 7 6 7 3 9 2 1 2 8 6 2 3 4 1\\r\\n8 3\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"12 5\\r\\n9 2 6 7 7 8 3 4 8 4 7 1 2 1 7 3 7 2 5 6 3 8 1 5\\r\\n3 7 7 5 7 4 5 8 4 6\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"11 1\\r\\n2 6 1 4 7 9 7 6 8 1 4 8 4 7 7 2 1 7 9 6 6 5\\r\\n3 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 2\\r\\n4 9 2 1 5 1 6 2 6 7 2 7 5 8 1 7 5 3 9 1\\r\\n9 7 1 4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"9 1\\r\\n1 8 7 6 7 2 7 9 4 1 4 3 3 8 4 6 9 6\\r\\n9 4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"4 7\\r\\n9 2 4 1 2 3 2 7\\r\\n6 1 5 4 7 5 6 3 1 5 8 1 1 4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"3 7\\r\\n8 2 7 9 8 1\\r\\n3 1 8 1 2 7 4 7 4 2 1 4 4 6\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"12 2\\r\\n3 1 8 2 6 9 2 6 5 4 4 3 4 1 4 2 6 3 9 7 9 4 3 2\\r\\n7 1 4 1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"7 6\\r\\n6 2 9 2 6 5 2 4 1 2 4 5 6 7\\r\\n3 9 5 1 9 8 9 5 3 4 2 3\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"4 12\\r\\n2 8 3 1 2 1 9 4\\r\\n9 5 5 3 1 6 3 7 7 1 8 5 6 5 4 6 1 9 1 4 2 5 9 8\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"2 2\\r\\n1 2 2 3\\r\\n2 3 3 4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 2\\r\\n1 2 1 3\\r\\n1 2 1 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 3\\r\\n1 2 1 3 2 3\\r\\n1 2 1 3 2 3\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"2 3\\r\\n1 2 1 3\\r\\n1 2 1 3 2 3\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"2 2\\r\\n1 2 2 4\\r\\n1 2 1 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1\\r\\n4 5 6 7\\r\\n4 7\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"3 2\\r\\n1 2 1 3 2 3\\r\\n1 2 4 5\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"4 4\\r\\n1 2 1 3 6 7 6 8\\r\\n1 4 1 5 6 1 6 9\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"4 4\\r\\n1 2 2 3 1 3 4 5\\r\\n1 3 3 2 1 2 4 6\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"3 2\\r\\n1 2 4 5 6 7\\r\\n4 7 1 3\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"2 3\\r\\n1 2 7 8\\r\\n1 3 2 4 7 9\\r\\n\", \"output\": [\"-1\"]}]","length":64,"num_hidden_unit_tests":52}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5071\", \"705\", \"1241367\"]","prob_desc_input_spec":"The first line contains an integer $$$n$$$ ($$$1 \\le n \\le 10^{18}$$$). It is guaranteed that the first (left) digit of the number $$$n$$$ is not a zero.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"ea1c737956f88be94107f2565ca8bbfd","prob_desc_created_at":"1527863700","source_code":"#include <bits\/stdc++.h>\n\nusing namespace std;\ntypedef unsigned long long ull;\nconst int N_MAX = 50;\nint N;\nchar str[N_MAX];\nint cnt[N_MAX];\n\ninline bool can00() {\n  return cnt[0] >= 2;\n}\ninline bool can25() {\n  return cnt[2] && cnt[5];\n}\ninline bool can50() {\n  return cnt[5] && cnt[0];\n}\ninline bool can75() {\n  return cnt[7] && cnt[5];\n}\n\ninline int calc(int l, int r) {\n  int cnt = 0;\n  char tmp[N_MAX];\n  memcpy(tmp, str, sizeof(str));\n  for (int i = N; i >= 1; i--) {\n    if (tmp[i] == r) {\n      while(i < N) swap(tmp[i], tmp[i+1]), cnt++, i++;\n      break;\n    }\n  }\n  for (int i = N-1; i >= 1; i--) {\n    if (tmp[i] == l) {\n      while(i < N-1) swap(tmp[i], tmp[i+1]), cnt++, i++;\n      break;\n    }\n  }\n  for (int i = 1; i <= N - 2; i++) {\n    if (tmp[i] != 0) {\n      while(i > 1) swap(tmp[i], tmp[i-1]), cnt++, i--;\n      break;\n    }\n  }\n  return cnt;\n}\nint main() {\n  scanf(\"%s\", str + 1);\n  N = (int) strlen(str + 1);\n  for (int i = 1; i <= N; i++) {\n    cnt[str[i]-='0']++;\n  }\n  int ans = 0x3f3f3f3f;\n  if (can00()) ans = min(ans, calc(0, 0));\n  if (can25()) ans = min(ans, calc(2, 5));\n  if (can50()) ans = min(ans, calc(5, 0));\n  if (can75()) ans = min(ans, calc(7, 5));\n  if (ans == 0x3f3f3f3f) ans = -1;\n  printf(\"%d\\n\", ans);\n  \n}","prob_desc_sample_outputs":"[\"4\", \"1\", \"-1\"]","lang_cluster":"C++","code_uid":"5686c5d201a3dc97c065b0b1e2822731","prob_desc_notes":"NoteIn the first example one of the possible sequences of moves is 5071 $$$\\rightarrow$$$ 5701 $$$\\rightarrow$$$ 7501 $$$\\rightarrow$$$ 7510 $$$\\rightarrow$$$ 7150.","prob_desc_output_spec":"If it is impossible to obtain a number that is divisible by $$$25$$$, print -1. Otherwise print the minimum number of moves required to obtain such number. Note that you can swap only adjacent digits in the given number.","prob_desc_output_to":"standard output","prob_desc_description":"You are given an integer $$$n$$$ from $$$1$$$ to $$$10^{18}$$$ without leading zeroes.In one move you can swap any two adjacent digits in the given number in such a way that the resulting number will not contain leading zeroes. In other words, after each move the number you have cannot contain any leading zeroes.What is the minimum number of moves you have to make to obtain a number that is divisible by $$$25$$$? Print -1 if it is impossible to obtain a number that is divisible by $$$25$$$.","hidden_unit_tests":"[{\"input\": \"5071\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"705\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1241367\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"7501\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"507\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"17010\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"52231\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"50267\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"574196831896431419\\r\\n\", \"output\": [\"33\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"123456123450\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000000000000000000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100000000000762582\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"123456789987654321\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"213716413141380147\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"5284691\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"750000000000000001\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"275257725752725722\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"50932\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"50272\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"25\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"52\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"57\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"75\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"50\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"71\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"500111117\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"50011117\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"1002\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"521\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"50011111112\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"50000111111112\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"250070000011111111\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"502727272727272727\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"500044444444442\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"2057\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"700777111111222222\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"50001111312\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"700272727272727272\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"700777711111222222\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"20029292929292929\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"257025702570257025\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5001111117\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"227782777298772774\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"205727272727272727\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"50011112\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"500272727272727272\\r\\n\", \"output\": [\"19\"]}, {\"input\": \"222772277289624486\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"5002727272727272\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"200000000222222222\\r\\n\", \"output\": [\"18\"]}]","length":61,"num_hidden_unit_tests":52}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"tour\", \"Codeforces\", \"aBAcAba\"]","prob_desc_input_spec":"The first line represents input string of Petya's program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"db9520e85b3e9186dd3a09ff8d1e8c1b","prob_desc_created_at":"1317999600","source_code":"#include<cstdio>  \n#include<cstring>  \n  \nchar str[101];  \n  \nint main()  \n{  \n    scanf(\"%s\", str);  \n    int len = strlen(str);  \n    for (int i = 0; i < len; ++i)  \n    {  \n        if (str[i] < 'a')  \n            str[i] += 32;  \n        if (str[i] != 'a' && str[i] != 'e' && str[i] != 'i' && str[i] != 'o' && str[i] != 'u' && str[i] != 'y')  \n            printf(\".%c\", str[i]);  \n    }  \n    return 0;  \n}  \n     \t     \t  \t\t\t\t  \t   \t  \t","prob_desc_sample_outputs":"[\".t.r\", \".c.d.f.r.c.s\", \".b.c.b\"]","lang_cluster":"C++","code_uid":"78a5662ac469dfd0990e4e30095b9f89","prob_desc_notes":null,"prob_desc_output_spec":"Print the resulting string. It is guaranteed that this string is not empty.","prob_desc_output_to":"standard output","prob_desc_description":"Petya started to attend programming lessons. On the first lesson his task was to write a simple program. The program was supposed to do the following: in the given string, consisting if uppercase and lowercase Latin letters, it:   deletes all the vowels,  inserts a character \".\" before each consonant,  replaces all uppercase consonants with corresponding lowercase ones. Vowels are letters \"A\", \"O\", \"Y\", \"E\", \"U\", \"I\", and the rest are consonants. The program's input is exactly one string, it should return the output as a single string, resulting after the program's processing the initial string.Help Petya cope with this easy task.","hidden_unit_tests":"[{\"input\": \"tour\\r\\n\", \"output\": [\".t.r\"]}, {\"input\": \"Codeforces\\r\\n\", \"output\": [\".c.d.f.r.c.s\"]}, {\"input\": \"aBAcAba\\r\\n\", \"output\": [\".b.c.b\"]}, {\"input\": \"obn\\r\\n\", \"output\": [\".b.n\"]}, {\"input\": \"wpwl\\r\\n\", \"output\": [\".w.p.w.l\"]}, {\"input\": \"ggdvq\\r\\n\", \"output\": [\".g.g.d.v.q\"]}, {\"input\": \"pumesz\\r\\n\", \"output\": [\".p.m.s.z\"]}, {\"input\": \"g\\r\\n\", \"output\": [\".g\"]}, {\"input\": \"zjuotps\\r\\n\", \"output\": [\".z.j.t.p.s\"]}, {\"input\": \"jzbwuehe\\r\\n\", \"output\": [\".j.z.b.w.h\"]}, {\"input\": \"tnkgwuugu\\r\\n\", \"output\": [\".t.n.k.g.w.g\"]}, {\"input\": \"kincenvizh\\r\\n\", \"output\": [\".k.n.c.n.v.z.h\"]}, {\"input\": \"xattxjenual\\r\\n\", \"output\": [\".x.t.t.x.j.n.l\"]}, {\"input\": \"ktajqhpqsvhw\\r\\n\", \"output\": [\".k.t.j.q.h.p.q.s.v.h.w\"]}, {\"input\": \"xnhcigytnqcmy\\r\\n\", \"output\": [\".x.n.h.c.g.t.n.q.c.m\"]}, {\"input\": \"jfmtbejyilxcec\\r\\n\", \"output\": [\".j.f.m.t.b.j.l.x.c.c\"]}, {\"input\": \"D\\r\\n\", \"output\": [\".d\"]}, {\"input\": \"ab\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"Ab\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"aB\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"AB\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"ba\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"bA\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"Ba\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"BA\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"aab\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"baa\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"femOZeCArKCpUiHYnbBPTIOFmsHmcpObtPYcLCdjFrUMIyqYzAokKUiiKZRouZiNMoiOuGVoQzaaCAOkquRjmmKKElLNqCnhGdQM\\r\\n\", \"output\": [\".f.m.z.c.r.k.c.p.h.n.b.b.p.t.f.m.s.h.m.c.p.b.t.p.c.l.c.d.j.f.r.m.q.z.k.k.k.z.r.z.n.m.g.v.q.z.c.k.q.r.j.m.m.k.k.l.l.n.q.c.n.h.g.d.q.m\"]}, {\"input\": \"VMBPMCmMDCLFELLIISUJDWQRXYRDGKMXJXJHXVZADRZWVWJRKFRRNSAWKKDPZZLFLNSGUNIVJFBEQsMDHSBJVDTOCSCgZWWKvZZN\\r\\n\", \"output\": [\".v.m.b.p.m.c.m.m.d.c.l.f.l.l.s.j.d.w.q.r.x.r.d.g.k.m.x.j.x.j.h.x.v.z.d.r.z.w.v.w.j.r.k.f.r.r.n.s.w.k.k.d.p.z.z.l.f.l.n.s.g.n.v.j.f.b.q.s.m.d.h.s.b.j.v.d.t.c.s.c.g.z.w.w.k.v.z.z.n\"]}, {\"input\": \"MCGFQQJNUKuAEXrLXibVjClSHjSxmlkQGTKZrRaDNDomIPOmtSgjJAjNVIVLeUGUAOHNkCBwNObVCHOWvNkLFQQbFnugYVMkJruJ\\r\\n\", \"output\": [\".m.c.g.f.q.q.j.n.k.x.r.l.x.b.v.j.c.l.s.h.j.s.x.m.l.k.q.g.t.k.z.r.r.d.n.d.m.p.m.t.s.g.j.j.j.n.v.v.l.g.h.n.k.c.b.w.n.b.v.c.h.w.v.n.k.l.f.q.q.b.f.n.g.v.m.k.j.r.j\"]}, {\"input\": \"iyaiuiwioOyzUaOtAeuEYcevvUyveuyioeeueoeiaoeiavizeeoeyYYaaAOuouueaUioueauayoiuuyiuovyOyiyoyioaoyuoyea\\r\\n\", \"output\": [\".w.z.t.c.v.v.v.v.z.v\"]}, {\"input\": \"yjnckpfyLtzwjsgpcrgCfpljnjwqzgVcufnOvhxplvflxJzqxnhrwgfJmPzifgubvspffmqrwbzivatlmdiBaddiaktdsfPwsevl\\r\\n\", \"output\": [\".j.n.c.k.p.f.l.t.z.w.j.s.g.p.c.r.g.c.f.p.l.j.n.j.w.q.z.g.v.c.f.n.v.h.x.p.l.v.f.l.x.j.z.q.x.n.h.r.w.g.f.j.m.p.z.f.g.b.v.s.p.f.f.m.q.r.w.b.z.v.t.l.m.d.b.d.d.k.t.d.s.f.p.w.s.v.l\"]}, {\"input\": \"RIIIUaAIYJOiuYIUWFPOOAIuaUEZeIooyUEUEAoIyIHYOEAlVAAIiLUAUAeiUIEiUMuuOiAgEUOIAoOUYYEYFEoOIIVeOOAOIIEg\\r\\n\", \"output\": [\".r.j.w.f.p.z.h.l.v.l.m.g.f.v.g\"]}, {\"input\": \"VBKQCFBMQHDMGNSGBQVJTGQCNHHRJMNKGKDPPSQRRVQTZNKBZGSXBPBRXPMVFTXCHZMSJVBRNFNTHBHGJLMDZJSVPZZBCCZNVLMQ\\r\\n\", \"output\": [\".v.b.k.q.c.f.b.m.q.h.d.m.g.n.s.g.b.q.v.j.t.g.q.c.n.h.h.r.j.m.n.k.g.k.d.p.p.s.q.r.r.v.q.t.z.n.k.b.z.g.s.x.b.p.b.r.x.p.m.v.f.t.x.c.h.z.m.s.j.v.b.r.n.f.n.t.h.b.h.g.j.l.m.d.z.j.s.v.p.z.z.b.c.c.z.n.v.l.m.q\"]}, {\"input\": \"iioyoaayeuyoolyiyoeuouiayiiuyTueyiaoiueyioiouyuauouayyiaeoeiiigmioiououeieeeyuyyaYyioiiooaiuouyoeoeg\\r\\n\", \"output\": [\".l.t.g.m.g\"]}, {\"input\": \"ueyiuiauuyyeueykeioouiiauzoyoeyeuyiaoaiiaaoaueyaeydaoauexuueafouiyioueeaaeyoeuaueiyiuiaeeayaioeouiuy\\r\\n\", \"output\": [\".k.z.d.x.f\"]}, {\"input\": \"FSNRBXLFQHZXGVMKLQDVHWLDSLKGKFMDRQWMWSSKPKKQBNDZRSCBLRSKCKKFFKRDMZFZGCNSMXNPMZVDLKXGNXGZQCLRTTDXLMXQ\\r\\n\", \"output\": [\".f.s.n.r.b.x.l.f.q.h.z.x.g.v.m.k.l.q.d.v.h.w.l.d.s.l.k.g.k.f.m.d.r.q.w.m.w.s.s.k.p.k.k.q.b.n.d.z.r.s.c.b.l.r.s.k.c.k.k.f.f.k.r.d.m.z.f.z.g.c.n.s.m.x.n.p.m.z.v.d.l.k.x.g.n.x.g.z.q.c.l.r.t.t.d.x.l.m.x.q\"]}, {\"input\": \"EYAYAYIOIOYOOAUOEUEUOUUYIYUUMOEOIIIAOIUOAAOIYOIOEUIERCEYYAOIOIGYUIAOYUEOEUAEAYPOYEYUUAUOAOEIYIEYUEEY\\r\\n\", \"output\": [\".m.r.c.g.p\"]}, {\"input\": \"jvvzcdcxjstbbksmqjsngxkgtttdxrljjxtwptgwwqzpvqchvgrkqlzxmptzblxhhsmrkmzzmgdfskhtmmnqzzflpmqdctvrfgtx\\r\\n\", \"output\": [\".j.v.v.z.c.d.c.x.j.s.t.b.b.k.s.m.q.j.s.n.g.x.k.g.t.t.t.d.x.r.l.j.j.x.t.w.p.t.g.w.w.q.z.p.v.q.c.h.v.g.r.k.q.l.z.x.m.p.t.z.b.l.x.h.h.s.m.r.k.m.z.z.m.g.d.f.s.k.h.t.m.m.n.q.z.z.f.l.p.m.q.d.c.t.v.r.f.g.t.x\"]}, {\"input\": \"YB\\r\\n\", \"output\": [\".b\"]}, {\"input\": \"fly\\r\\n\", \"output\": [\".f.l\"]}, {\"input\": \"YyyYYYyyYxdwdawdDAWDdaddYYYY\\r\\n\", \"output\": [\".x.d.w.d.w.d.d.w.d.d.d.d\"]}, {\"input\": \"SDTFZPLMKFLZGTRPLMQVHTMCDFWPKZNZMHQDSWZKBZFFWZVJKGNDHRBGTVGKNCQRVFCXPSNBVVBGQNVN\\r\\n\", \"output\": [\".s.d.t.f.z.p.l.m.k.f.l.z.g.t.r.p.l.m.q.v.h.t.m.c.d.f.w.p.k.z.n.z.m.h.q.d.s.w.z.k.b.z.f.f.w.z.v.j.k.g.n.d.h.r.b.g.t.v.g.k.n.c.q.r.v.f.c.x.p.s.n.b.v.v.b.g.q.n.v.n\"]}, {\"input\": \"QKFSVTNJRDJGLWTHXHWRNVFHFSCSGWTCNBVBXVWDBMZPLGWFKXNLJMGTGFHQJTZZRBVSZDTHZWJSFWRNZV\\r\\n\", \"output\": [\".q.k.f.s.v.t.n.j.r.d.j.g.l.w.t.h.x.h.w.r.n.v.f.h.f.s.c.s.g.w.t.c.n.b.v.b.x.v.w.d.b.m.z.p.l.g.w.f.k.x.n.l.j.m.g.t.g.f.h.q.j.t.z.z.r.b.v.s.z.d.t.h.z.w.j.s.f.w.r.n.z.v\"]}, {\"input\": \"MFZHRXPFZCQWHKGJLBDNGWWNGSQJNSCGPSPJSLDXZZGPPVKBZGNSKGLJHCKVFNJGNHPPLFBZMPHFSRXMPHBN\\r\\n\", \"output\": [\".m.f.z.h.r.x.p.f.z.c.q.w.h.k.g.j.l.b.d.n.g.w.w.n.g.s.q.j.n.s.c.g.p.s.p.j.s.l.d.x.z.z.g.p.p.v.k.b.z.g.n.s.k.g.l.j.h.c.k.v.f.n.j.g.n.h.p.p.l.f.b.z.m.p.h.f.s.r.x.m.p.h.b.n\"]}, {\"input\": \"KBTTNSRZRBNDMMSBZVKKMZPDHHTNKQJXPMTGXLBJZLBZDLVWBWPPLLZMKBLQBGRMLDXKGQHQQRQRWBTMTRTBWM\\r\\n\", \"output\": [\".k.b.t.t.n.s.r.z.r.b.n.d.m.m.s.b.z.v.k.k.m.z.p.d.h.h.t.n.k.q.j.x.p.m.t.g.x.l.b.j.z.l.b.z.d.l.v.w.b.w.p.p.l.l.z.m.k.b.l.q.b.g.r.m.l.d.x.k.g.q.h.q.q.r.q.r.w.b.t.m.t.r.t.b.w.m\"]}, {\"input\": \"HWPJKXTVZXLJSPGCMPQGSLWKXGJDHMPCQFNDCLWDXXWZHRXSQPPWMFFBLXNWGXZTHKQFRBXJSJPPLVQMXDZWLBWC\\r\\n\", \"output\": [\".h.w.p.j.k.x.t.v.z.x.l.j.s.p.g.c.m.p.q.g.s.l.w.k.x.g.j.d.h.m.p.c.q.f.n.d.c.l.w.d.x.x.w.z.h.r.x.s.q.p.p.w.m.f.f.b.l.x.n.w.g.x.z.t.h.k.q.f.r.b.x.j.s.j.p.p.l.v.q.m.x.d.z.w.l.b.w.c\"]}, {\"input\": \"SJMBDQJRZGCFHRVKQCTGTJJQSMWVVBFSJVHKLLWBNRTNXJXXMLLVVZJZNLLXLPJWQSXKKWGWCMHVFPHMDRHMZPQHGQ\\r\\n\", \"output\": [\".s.j.m.b.d.q.j.r.z.g.c.f.h.r.v.k.q.c.t.g.t.j.j.q.s.m.w.v.v.b.f.s.j.v.h.k.l.l.w.b.n.r.t.n.x.j.x.x.m.l.l.v.v.z.j.z.n.l.l.x.l.p.j.w.q.s.x.k.k.w.g.w.c.m.h.v.f.p.h.m.d.r.h.m.z.p.q.h.g.q\"]}, {\"input\": \"MSPPDBGPBTFRCQBSSJXCNXZLCTDPBGJCCJDJNSZVVDFNKBBZKVLQXJHQMQBXHTMRKRSLGZVRFCTBWJWNBTPQLQLCFHNK\\r\\n\", \"output\": [\".m.s.p.p.d.b.g.p.b.t.f.r.c.q.b.s.s.j.x.c.n.x.z.l.c.t.d.p.b.g.j.c.c.j.d.j.n.s.z.v.v.d.f.n.k.b.b.z.k.v.l.q.x.j.h.q.m.q.b.x.h.t.m.r.k.r.s.l.g.z.v.r.f.c.t.b.w.j.w.n.b.t.p.q.l.q.l.c.f.h.n.k\"]}, {\"input\": \"GSSMNBNMDZXFMGVDFFDJSXQGKCZJRKXLVMZWCBDQCNPNGSDPWWCMKRRHKWRNDJRVDQNNMDBMWRRRDSCNXXVTMRFHDXZKWW\\r\\n\", \"output\": [\".g.s.s.m.n.b.n.m.d.z.x.f.m.g.v.d.f.f.d.j.s.x.q.g.k.c.z.j.r.k.x.l.v.m.z.w.c.b.d.q.c.n.p.n.g.s.d.p.w.w.c.m.k.r.r.h.k.w.r.n.d.j.r.v.d.q.n.n.m.d.b.m.w.r.r.r.d.s.c.n.x.x.v.t.m.r.f.h.d.x.z.k.w.w\"]}, {\"input\": \"PDLBZLWTVPBBWGCMRLWFMMRBDTFCHFMTPZGVFJWTZPZCBLGPTHRRWBRWJCRNXNVBHQTQJHQQZHFHVMRXHBCMWSXNCPBTFFFZ\\r\\n\", \"output\": [\".p.d.l.b.z.l.w.t.v.p.b.b.w.g.c.m.r.l.w.f.m.m.r.b.d.t.f.c.h.f.m.t.p.z.g.v.f.j.w.t.z.p.z.c.b.l.g.p.t.h.r.r.w.b.r.w.j.c.r.n.x.n.v.b.h.q.t.q.j.h.q.q.z.h.f.h.v.m.r.x.h.b.c.m.w.s.x.n.c.p.b.t.f.f.f.z\"]}, {\"input\": \"JDPZZLTQXFDNSFWVFRBBGCJVMCBVWJRDJCCKSQBPGBTCMDSGHRHNKKRNQHJNTRBFBPPRPKGLRXSWMGHXFDTQJSRJBFMTWMFRWJ\\r\\n\", \"output\": [\".j.d.p.z.z.l.t.q.x.f.d.n.s.f.w.v.f.r.b.b.g.c.j.v.m.c.b.v.w.j.r.d.j.c.c.k.s.q.b.p.g.b.t.c.m.d.s.g.h.r.h.n.k.k.r.n.q.h.j.n.t.r.b.f.b.p.p.r.p.k.g.l.r.x.s.w.m.g.h.x.f.d.t.q.j.s.r.j.b.f.m.t.w.m.f.r.w.j\"]}, {\"input\": \"GSFSDNNTRGXKGPGNJBWCMSMCNHSMFWMNGGXLPTJXZDSNMLJNSXQDGLLJBMJJQGPXGGQGPHBQPNHJSFPBQKMZLTWCSKKQSDCCXJTW\\r\\n\", \"output\": [\".g.s.f.s.d.n.n.t.r.g.x.k.g.p.g.n.j.b.w.c.m.s.m.c.n.h.s.m.f.w.m.n.g.g.x.l.p.t.j.x.z.d.s.n.m.l.j.n.s.x.q.d.g.l.l.j.b.m.j.j.q.g.p.x.g.g.q.g.p.h.b.q.p.n.h.j.s.f.p.b.q.k.m.z.l.t.w.c.s.k.k.q.s.d.c.c.x.j.t.w\"]}]","length":19,"num_hidden_unit_tests":53}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1300.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"10\", \"12\"]","prob_desc_input_spec":"The first and only line of input contains one integer, n (1\u2009\u2264\u2009n\u2009\u2264\u20091012).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"6d0da975fa0961acfdbe75f2f29aeb92","prob_desc_created_at":"1444926600","source_code":"\/*\n**************\n*   Good     *\n*  Luck!!!   *\n*            *\n**************\n*\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n#include<iostream>\n#include<stdio.h>\n#include<set>\n#include<map>\n#include<stdlib.h>\n#include<ctime>\n#include<memory.h>\n#include<vector>\n#include<math.h>\n#include<deque>\n#include<stack>\n#include<list>\n#include<queue>\n#include<algorithm>\n#include<string>\n#include<string.h>\n#include<cmath>\n#include<fstream>\n#include<iomanip>\n\/\/#include<bits\/stdc++.h>\n\nusing namespace std;\n\n#define ll long long\n#define db double\n#define file \"file\"\n\/\/#define M_PI 3.1415926535897931\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\ntypedef map<int, int> mpi;\ntypedef set<int, int> sti;\n\nconst int maxN = 1e5;\nconst int INF = 1e9;\nconst int eps = 1e-9;\nconst int inf = -INF;\nconst int base = 1000 * 1000 * 1000;\nconst int mod = 1e9 + 7;\ntypedef ll mass[maxN + 1];\n\nll readInt ()\n{\n    bool minus = false;\n    ll result = 0;\n    char ch;\n    ch = getchar();\n    while (true)\n    {\n        if (ch == '-') break;\n        if (ch >= '0' && ch <= '9') break;\n        ch = getchar();\n    }\n    if (ch == '-') minus = true;\n    else result = ch-'0';\n    while (true)\n    {\n        ch = getchar();\n        if (ch < '0' || ch > '9') break;\n        result = result*10 + (ch - '0');\n    }\n    if (minus)\n        return -result;\n    else\n        return result;\n}\nstruct pt\n{\n    int x, y, id;\n};\nbool comp(pt a, pt b)\n{\n    return a.x < b.x || (a.x == b.x && a.y < b.y);\n}\nll gcd(ll a, ll b)\n{\n    return b ? gcd(b, a % b) : a;\n}\nll lcm(ll a, ll b)\n{\n    return a \/ gcd(a, b) * b;\n}\nll binary_power(ll a, ll n)\n{\n    ll res = 1;\n    while(n > 0)\n    {\n        if(n % 2 == 0)\n        {\n            a *= a;\n            n >>= 1;\n        }\n        else\n        {\n            res *= a;\n            n--;\n        }\n    }\n    return res;\n}\nint bitCount(ll n)\n{\n    return __builtin_popcount(n);\n}\nint LowerBound(int L, int R, int x, ll w[])\n{\n    \/\/ L = 0, R = n\n    while(R - L > 1)\n    {\n        int mid = (L + R) >> 1;\n        if(w[mid] >= x)\n            R = mid;\n        else\n            L = mid;\n    }\n    if(w[R] == x)\n        return R;\n    return -1;\n}\nint UpperBound(int L, int R, int x, ll w[])\n{\n    \/\/ L = 1, R = n + 1\n    while(R - L > 1)\n    {\n        int mid = (L + R) >> 1;\n        if(w[mid] <= x)\n            L = mid;\n        else\n            R = mid;\n    }\n    if(w[L] == x)\n        return L;\n    return -1;\n}\ndb dis(db x1, db y1, db x2, db y2);\ndouble triangle_area (int x1, int y1, int x2, int y2, int x3, int y3) ;\nint triangle_area_2 (int x1, int y1, int x2, int y2, int x3, int y3) ;\nmain()\n{\n    \/\/ios::sync_with_stdio(false);\n    \/\/cin.tie(NULL);\n    \/\/freopen(file\".in\", \"rt\", stdin);\n    \/\/freopen(file\".out\", \"wt\", stdout);\n    ll n = readInt();\n    set<ll> st;\n    map<ll, ll> mp;\n    for(ll i = 2; i * i <= n; i++)\n    {\n        if(n % i == 0)\n        {\n            while(n % i == 0)\n            {\n                n \/= i;\n                mp[i]++;\n            }\n        }\n    }\n    if(n > 1)\n    {\n        mp[n]++;\n    }\n    ll ans = 1;\n    for(map<ll, ll> :: iterator it = mp.begin(); it != mp.end(); it++)\n    {\n        ans *= (*it).first;\n    }\n    cout << ans;\n    \/\/system(\"pause\");\n    return 0;\n}\ndb dis(db x1, db y1, db x2, db y2)\n{\n    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\nint triangle_area_2 (int x1, int y1, int x2, int y2, int x3, int y3) {\n        return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1);\n}\ndouble triangle_area (int x1, int y1, int x2, int y2, int x3, int y3) {\n        return abs (triangle_area_2 (x1, y1, x2, y2, x3, y3)) \/ 2.0;\n}\n\n\/\/\/","prob_desc_sample_outputs":"[\"10\", \"6\"]","lang_cluster":"C++","code_uid":"3e0f2120e250516f02ee72416289fef3","prob_desc_notes":"NoteIn first sample case, there are numbers 1, 2, 5 and 10 in the shop. 10 isn't divisible by any perfect square, so 10 is lovely.In second sample case, there are numbers 1, 2, 3, 4, 6 and 12 in the shop. 12 is divisible by 4\u2009=\u200922, so 12 is not lovely, while 6 is indeed lovely.","prob_desc_output_spec":"Print the answer in one line.","prob_desc_output_to":"standard output","prob_desc_description":"Duff is in love with lovely numbers! A positive integer x is called lovely if and only if there is no such positive integer a\u2009&gt;\u20091 such that a2 is a divisor of x.  Malek has a number store! In his store, he has only divisors of positive integer n (and he has all of them). As a birthday present, Malek wants to give her a lovely number from his store. He wants this number to be as big as possible.Malek always had issues in math, so he asked for your help. Please tell him what is the biggest lovely number in his store.","hidden_unit_tests":"[{\"input\": \"10\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"8\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"31\\r\\n\", \"output\": [\"31\"]}, {\"input\": \"97\\r\\n\", \"output\": [\"97\"]}, {\"input\": \"1000000000000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"894\\r\\n\", \"output\": [\"894\"]}, {\"input\": \"271\\r\\n\", \"output\": [\"271\"]}, {\"input\": \"2457\\r\\n\", \"output\": [\"273\"]}, {\"input\": \"2829\\r\\n\", \"output\": [\"2829\"]}, {\"input\": \"5000\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"68\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"3096\\r\\n\", \"output\": [\"258\"]}, {\"input\": \"1024\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1048576\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"413933789280\\r\\n\", \"output\": [\"25870861830\"]}, {\"input\": \"817634153013\\r\\n\", \"output\": [\"817634153013\"]}, {\"input\": \"56517269141\\r\\n\", \"output\": [\"56517269141\"]}, {\"input\": \"30707328551\\r\\n\", \"output\": [\"30707328551\"]}, {\"input\": \"279564127218\\r\\n\", \"output\": [\"10354226934\"]}, {\"input\": \"491159577042\\r\\n\", \"output\": [\"18191095446\"]}, {\"input\": \"734337660466\\r\\n\", \"output\": [\"734337660466\"]}, {\"input\": \"808453785117\\r\\n\", \"output\": [\"808453785117\"]}, {\"input\": \"55926835837\\r\\n\", \"output\": [\"55926835837\"]}, {\"input\": \"294809951965\\r\\n\", \"output\": [\"294809951965\"]}, {\"input\": \"537988035389\\r\\n\", \"output\": [\"76855433627\"]}, {\"input\": \"822722434952\\r\\n\", \"output\": [\"205680608738\"]}, {\"input\": \"699511759613\\r\\n\", \"output\": [\"699511759613\"]}, {\"input\": \"942689843037\\r\\n\", \"output\": [\"104743315893\"]}, {\"input\": \"663634158717\\r\\n\", \"output\": [\"663634158717\"]}, {\"input\": \"213612977250\\r\\n\", \"output\": [\"11730\"]}, {\"input\": \"999999999989\\r\\n\", \"output\": [\"999999999989\"]}, {\"input\": \"999999999988\\r\\n\", \"output\": [\"499999999994\"]}, {\"input\": \"87178291200\\r\\n\", \"output\": [\"30030\"]}, {\"input\": \"927668721948\\r\\n\", \"output\": [\"463834360974\"]}, {\"input\": \"562436815639\\r\\n\", \"output\": [\"37927\"]}, {\"input\": \"302981118597\\r\\n\", \"output\": [\"35853\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"36\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"2231\\r\\n\", \"output\": [\"2231\"]}, {\"input\": \"27648\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"40320\\r\\n\", \"output\": [\"210\"]}, {\"input\": \"648000\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"999966000289\\r\\n\", \"output\": [\"999983\"]}, {\"input\": \"999985999949\\r\\n\", \"output\": [\"999985999949\"]}, {\"input\": \"991921850317\\r\\n\", \"output\": [\"9973\"]}]","length":198,"num_hidden_unit_tests":53}
{"prob_desc_memory_limit":"256 megabytes","difficulty":800.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"9 3\", \"14 28\", \"4 20\"]","prob_desc_input_spec":"A single line contains two integers n,\u2009m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u20091000) \u2014 the parameters of the system. The numbers on the line are separated by a space.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"03caf4ddf07c1783e42e9f9085cc6efd","prob_desc_created_at":"1343662200","source_code":"#include<iostream>\n#include<cmath>\nusing namespace std;\nint main(){\n\tint n,m;\n\twhile (cin>>n>>m){\n\t\tint num=0;\n\t\tfor (int i=0;i<=sqrt(n*1.0);i++)\n\t\t\tfor (int j=0;j<=sqrt(m*1.0);j++){\n\t\t\t\tif (i*i+j==n && i+j*j==m) num++;\n\t\t\t}\n\t\t\tcout<<num<<endl;\n\t}\n}","prob_desc_sample_outputs":"[\"1\", \"1\", \"0\"]","lang_cluster":"C++","code_uid":"c51dd369f9456fb67c6fad4ba2451521","prob_desc_notes":"NoteIn the first sample the suitable pair is integers (3,\u20090). In the second sample the suitable pair is integers (3,\u20095). In the third sample there is no suitable pair.","prob_desc_output_spec":"On a single line print the answer to the problem.","prob_desc_output_to":"standard output","prob_desc_description":"Furik loves math lessons very much, so he doesn't attend them, unlike Rubik. But now Furik wants to get a good mark for math. For that Ms. Ivanova, his math teacher, gave him a new task. Furik solved the task immediately. Can you?You are given a system of equations:   You should count, how many there are pairs of integers (a,\u2009b) (0\u2009\u2264\u2009a,\u2009b) which satisfy the system.","hidden_unit_tests":"[{\"input\": \"9 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"14 28\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"4 20\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"18 198\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"22 326\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"26 104\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"14 10\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"8 20\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"20 11\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"57 447\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"66 296\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"75 683\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"227 975\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"247 499\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"266 116\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"286 916\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"307 341\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"451 121\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"471 921\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"502 346\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"535 59\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"555 699\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"747 351\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"790 64\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"810 704\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"855 225\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"902 34\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"922 514\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"971 131\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"991 931\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"840 780\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"102 595\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"139 433\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"968 288\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"563 354\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"994 975\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"456 221\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"205 210\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 11\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"11 99\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"11 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 6\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 452\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"420 380\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"31 31\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 6\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"112 134\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"13 13\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1 571\\r\\n\", \"output\": [\"0\"]}]","length":14,"num_hidden_unit_tests":54}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1500.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"7 2\", \"59 9\"]","prob_desc_input_spec":"The input consists of two integers n and k, separated by spaces \u2014 the size of the program in lines and the productivity reduction coefficient, 1\u2009\u2264\u2009n\u2009\u2264\u2009109, 2\u2009\u2264\u2009k\u2009\u2264\u200910.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"41dfc86d341082dd96e089ac5433dc04","prob_desc_created_at":"1331911800","source_code":"#include <iostream>\n\nusing namespace std;\nint search(int v,int n,int k)\n{\n    int k_p=k;\/\/\u5b58\u50a8\u7684\u662f\u9898\u76ee\u4e2d\u7684k^p\n    int total=v;\n    while (v\/k_p>=1)\n    {\n        total+=(int)v\/k_p;\n        k_p*=k;\n    }\n    if(total>n) return 1;\n    if(total==n) return 0;\n    return -1;\n}\nint main()\n{\n    int n,k;\n    int t=0;\n    while (cin>>n>>k)\n    {\n       \/\/ t++;\n        int up=n;\n        int low=0;\n      \/\/  int t=0;\n        while(up>low)\n        {\n          \/\/  t++;\n           \/\/ cout<<\"up=\"<<up<<endl;\n          \/\/  cout<<\"low=\"<<low<<endl;\n            int mid=(up+low)\/2;\n            if (search(mid,n,k)>=0) up=mid;\/\/v\u504f\u5927\u4e86\n            else if(search(mid,n,k)<0)low=mid;\n            \/\/else {up=mid;break;}\/\/\u914d\u5408\u8f93\u51fa\n            \/\/cout<<\"mid=\"<<mid<<endl;\n            \/\/if (t==20) break;\n            if (up-low==1&&(mid==low)) break;\n\n        }\n        \/\/if(t==46) cout<<up+1<<endl;else\n        cout<<up<<endl;\n    }\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"4\", \"54\"]","lang_cluster":"C++","code_uid":"02521bcf4ed9e238a51329d5c5686905","prob_desc_notes":"NoteIn the first sample the answer is v\u2009=\u20094. Vasya writes the code in the following portions: first 4 lines, then 2, then 1, and then Vasya falls asleep. Thus, he manages to write 4\u2009+\u20092\u2009+\u20091\u2009=\u20097 lines in a night and complete the task.In the second sample the answer is v\u2009=\u200954. Vasya writes the code in the following portions: 54, 6. The total sum is 54\u2009+\u20096\u2009=\u200960, that's even more than n\u2009=\u200959.","prob_desc_output_spec":"Print the only integer \u2014 the minimum value of v that lets Vasya write the program in one night.","prob_desc_output_to":"standard output","prob_desc_description":"One day a highly important task was commissioned to Vasya \u2014 writing a program in a night. The program consists of n lines of code. Vasya is already exhausted, so he works like that: first he writes v lines of code, drinks a cup of tea, then he writes as much as  lines, drinks another cup of tea, then he writes  lines and so on: , , , ...The expression  is regarded as the integral part from dividing number a by number b.The moment the current value  equals 0, Vasya immediately falls asleep and he wakes up only in the morning, when the program should already be finished.Vasya is wondering, what minimum allowable value v can take to let him write not less than n lines of code before he falls asleep.","hidden_unit_tests":"[{\"input\": \"7 2\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"59 9\\r\\n\", \"output\": [\"54\"]}, {\"input\": \"1 9\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"11 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"747 2\\r\\n\", \"output\": [\"376\"]}, {\"input\": \"6578 2\\r\\n\", \"output\": [\"3293\"]}, {\"input\": \"37212 2\\r\\n\", \"output\": [\"18609\"]}, {\"input\": \"12357 2\\r\\n\", \"output\": [\"6181\"]}, {\"input\": \"7998332 2\\r\\n\", \"output\": [\"3999172\"]}, {\"input\": \"86275251 2\\r\\n\", \"output\": [\"43137632\"]}, {\"input\": \"75584551 2\\r\\n\", \"output\": [\"37792280\"]}, {\"input\": \"6 3\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"43 4\\r\\n\", \"output\": [\"33\"]}, {\"input\": \"811 3\\r\\n\", \"output\": [\"543\"]}, {\"input\": \"3410 4\\r\\n\", \"output\": [\"2560\"]}, {\"input\": \"21341 4\\r\\n\", \"output\": [\"16009\"]}, {\"input\": \"696485 4\\r\\n\", \"output\": [\"522368\"]}, {\"input\": \"8856748 3\\r\\n\", \"output\": [\"5904504\"]}, {\"input\": \"2959379 4\\r\\n\", \"output\": [\"2219538\"]}, {\"input\": \"831410263 3\\r\\n\", \"output\": [\"554273516\"]}, {\"input\": \"2 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"19 6\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"715 7\\r\\n\", \"output\": [\"615\"]}, {\"input\": \"9122 5\\r\\n\", \"output\": [\"7300\"]}, {\"input\": \"89117 6\\r\\n\", \"output\": [\"74268\"]}, {\"input\": \"689973 7\\r\\n\", \"output\": [\"591408\"]}, {\"input\": \"3024524 5\\r\\n\", \"output\": [\"2419624\"]}, {\"input\": \"67127156 6\\r\\n\", \"output\": [\"55939302\"]}, {\"input\": \"412262167 7\\r\\n\", \"output\": [\"353367574\"]}, {\"input\": \"6 8\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"246 10\\r\\n\", \"output\": [\"222\"]}, {\"input\": \"5314 8\\r\\n\", \"output\": [\"4651\"]}, {\"input\": \"15309 9\\r\\n\", \"output\": [\"13609\"]}, {\"input\": \"35648 10\\r\\n\", \"output\": [\"32085\"]}, {\"input\": \"3018012 8\\r\\n\", \"output\": [\"2640764\"]}, {\"input\": \"92153348 9\\r\\n\", \"output\": [\"81914089\"]}, {\"input\": \"177583558 10\\r\\n\", \"output\": [\"159825206\"]}, {\"input\": \"1000000000 2\\r\\n\", \"output\": [\"500000008\"]}, {\"input\": \"1000000000 3\\r\\n\", \"output\": [\"666666672\"]}, {\"input\": \"1000000000 4\\r\\n\", \"output\": [\"750000005\"]}, {\"input\": \"1000000000 5\\r\\n\", \"output\": [\"800000003\"]}, {\"input\": \"1000000000 6\\r\\n\", \"output\": [\"833333338\"]}, {\"input\": \"1000000000 7\\r\\n\", \"output\": [\"857142861\"]}, {\"input\": \"1000000000 8\\r\\n\", \"output\": [\"875000004\"]}, {\"input\": \"1000000000 9\\r\\n\", \"output\": [\"888888894\"]}, {\"input\": \"1000000000 10\\r\\n\", \"output\": [\"900000001\"]}, {\"input\": \"1 4\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 10\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"1 2\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"987862820 9\\r\\n\", \"output\": [\"878100288\"]}, {\"input\": \"979591791 9\\r\\n\", \"output\": [\"870748262\"]}, {\"input\": \"948889213 9\\r\\n\", \"output\": [\"843457081\"]}, {\"input\": \"8 9\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"999999999 10\\r\\n\", \"output\": [\"900000000\"]}]","length":45,"num_hidden_unit_tests":54}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2400.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"0 2 0 4\", \"0 2 1 1\", \"0 2 0 1\"]","prob_desc_input_spec":"The first line contains four space-separated integers \u2014 x1, x2, a and b (x1\u2009\u2260\u2009x2, a\u2009\u2264\u2009b, \u2009-\u2009109\u2009\u2264\u2009x1,\u2009x2,\u2009a,\u2009b\u2009\u2264\u2009109) \u2014 coordinates of the points where the first and the second participant start, and the numbers that determine the players' moves, correspondingly.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"4ea8cc3305a0ee2c1e580b43e5bc46c6","prob_desc_created_at":"1330095600","source_code":"#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\nlong long x1, x2, x, a, b, res, sgn;\n\nint gao() {\n\tif (x + a <= 0 && x + b >= 0) {\n\t\tres = x2;\n\t\treturn 1;\n\t} else if (a + b >= 0) {\n\t\treturn 0;\n\t} else if (b >= 0) {\n\t\treturn 0;\n\t} else {\n\t\ta = -a;\n\t\tb = -b;\n\t\tlong long r = x % (a + b);\n\t\tif (r == 0) {\n\t\t\treturn -1;\n\t\t} else if (r >= b && r <= a) {\n\t\t\tres = x1 - r * sgn;\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\nint main() {\n\tcin >> x1 >> x2 >> a >> b;\n\tx = x1 - x2;\n\tsgn = x < 0 ? -1 : 1;\n\tif (x < 0) {\n\t\tx = -x;\n\t\ta = -a;\n\t\tb = -b;\n\t\tswap(a, b);\n\t}\n\tres = 0;\n\tswitch (gao()) {\n\tcase -1: cout << \"SECOND\" << endl; break;\n\tcase 0: cout << \"DRAW\" << endl; break;\n\tcase 1: cout << \"FIRST\" << endl << res << endl; break;\n\t}\n\treturn 0;\n}\n","prob_desc_sample_outputs":"[\"FIRST\\n2\", \"SECOND\", \"DRAW\"]","lang_cluster":"C++","code_uid":"985cec9cff5bebc4be73568eb0c35762","prob_desc_notes":"NoteIn the first sample the first player can win in one move.In the second sample the first participant must go to point 1, where the second participant immediately goes and wins. In the third sample changing the position isn't profitable to either participant, so nobody wins.","prob_desc_output_spec":"On the first line print the outcome of the battle as \"FIRST\" (without the quotes), if both players play optimally and the first player wins. Print \"SECOND\" (without the quotes) if the second player wins and print \"DRAW\" (without the quotes), if nobody is able to secure the victory. If the first player wins, print on the next line the single integer x \u2014 the coordinate of the point where the first player should transfer to win. The indicated move should be valid, that is, it should meet the following condition: x1\u2009+\u2009a\u2009\u2264\u2009x\u2009\u2264\u2009x1\u2009+\u2009b. If there are several winning moves, print any of them. If the first participant can't secure the victory, then you do not have to print anything.","prob_desc_output_to":"standard output","prob_desc_description":"The King of Flatland will organize a knights' tournament! The winner will get half the kingdom and the favor of the princess of legendary beauty and wisdom. The final test of the applicants' courage and strength will be a fencing tournament. The tournament is held by the following rules: the participants fight one on one, the winner (or rather, the survivor) transfers to the next round.Before the battle both participants stand at the specified points on the Ox axis with integer coordinates. Then they make moves in turn. The first participant moves first, naturally. During a move, the first participant can transfer from the point x to any integer point of the interval [x\u2009+\u2009a; x\u2009+\u2009b]. The second participant can transfer during a move to any integer point of the interval [x\u2009-\u2009b; x\u2009-\u2009a]. That is, the options for the players' moves are symmetric (note that the numbers a and b are not required to be positive, and if a\u2009\u2264\u20090\u2009\u2264\u2009b, then staying in one place is a correct move). At any time the participants can be located arbitrarily relative to each other, that is, it is allowed to \"jump\" over the enemy in any direction. A participant wins if he uses his move to transfer to the point where his opponent is.Of course, the princess has already chosen a husband and now she wants to make her sweetheart win the tournament. He has already reached the tournament finals and he is facing the last battle. The princess asks the tournament manager to arrange the tournament finalists in such a way that her sweetheart wins the tournament, considering that both players play optimally. However, the initial location of the participants has already been announced, and we can only pull some strings and determine which participant will be first and which one will be second. But how do we know which participant can secure the victory? Alas, the princess is not learned in the military affairs... Therefore, she asks you to determine how the battle will end considering that both opponents play optimally. Also, if the first player wins, your task is to determine his winning move.","hidden_unit_tests":"[{\"input\": \"0 2 0 4\\r\\n\", \"output\": [\"FIRST\\r\\n2\"]}, {\"input\": \"0 2 1 1\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"0 2 0 1\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"3 1 -2 2\\r\\n\", \"output\": [\"FIRST\\r\\n1\"]}, {\"input\": \"3 10 1 6\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"1 2 2 2\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"0 10 -1 1\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"0 15 5 5\\r\\n\", \"output\": [\"FIRST\\r\\n5\"]}, {\"input\": \"20 1 -5 -1\\r\\n\", \"output\": [\"FIRST\\r\\n19\"]}, {\"input\": \"0 100 2 31\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"31 39 0 8\\r\\n\", \"output\": [\"FIRST\\r\\n39\"]}, {\"input\": \"75 37 9 33\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"-44 -17 12 13\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"-80 60 17 23\\r\\n\", \"output\": [\"FIRST\\r\\n-60\"]}, {\"input\": \"-343 -119 -194 -60\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"439 722 206 325\\r\\n\", \"output\": [\"FIRST\\r\\n722\"]}, {\"input\": \"1621 733 -732 -156\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"2062 4167 2 2\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"45390 21963 -2047 -1023\\r\\n\", \"output\": [\"FIRST\\r\\n43453\"]}, {\"input\": \"258358 241272 -2 -1\\r\\n\", \"output\": [\"FIRST\\r\\n258357\"]}, {\"input\": \"965398 678942 -6666 -666\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"1234577 1234573 -3 3\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"-186611 -745388 -776721 -308073\\r\\n\", \"output\": [\"FIRST\\r\\n-745388\"]}, {\"input\": \"2408736 -3517525 413342 557733\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"-8006393 7731100 -478756 3592795\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"-48549196 47782227 17235 109857\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"61190539 -40142693 -666666 -666666\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"25882413 -80674370 -999999 -9\\r\\n\", \"output\": [\"FIRST\\r\\n25326478\"]}, {\"input\": \"48011031 230545656 12345 67890\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"-730305467 -514687698 2 7\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"411443207 739161876 -1 0\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"402211447 260733897 -52 275\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"35406031 214492689 -307333182 -305473200\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"44789577 44789576 -1 0\\r\\n\", \"output\": [\"FIRST\\r\\n44789576\"]}, {\"input\": \"434676805 434676075 -878 345\\r\\n\", \"output\": [\"FIRST\\r\\n434676075\"]}, {\"input\": \"547686188 61562151 -496372503 -115242932\\r\\n\", \"output\": [\"FIRST\\r\\n61562151\"]}, {\"input\": \"775517456 -869957101 -1 -1\\r\\n\", \"output\": [\"FIRST\\r\\n775517455\"]}, {\"input\": \"637107829 -403198378 -2 -2\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"-318865784 794140986 2 3\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"999763526 -998481439 -815 -157\\r\\n\", \"output\": [\"FIRST\\r\\n999762965\"]}, {\"input\": \"416100128 -709112339 -190811 -190811\\r\\n\", \"output\": [\"FIRST\\r\\n415909317\"]}, {\"input\": \"183003032 -631999413 -1000002 -1\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"847094637 -152905363 -1000000000 -1000000000\\r\\n\", \"output\": [\"FIRST\\r\\n-152905363\"]}, {\"input\": \"-1000000000 1000000000 1 1\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"-1000000000 1000000000 0 0\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"1000000000 999999999 -1000000000 -2\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"0 1 -1000000000 1000000000\\r\\n\", \"output\": [\"FIRST\\r\\n1\"]}, {\"input\": \"-1000000000 1000000000 1230987 9871231\\r\\n\", \"output\": [\"FIRST\\r\\n-998399240\"]}, {\"input\": \"-1000000000 1000000000 0 1000000000\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"-1000000000 1000000000 1 999999999\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"-1000000000 1000000000 499999999 500000000\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"-1000000000 1000000000 1000000000 1000000000\\r\\n\", \"output\": [\"SECOND\"]}, {\"input\": \"1000000000 -1000000000 1000000000 1000000000\\r\\n\", \"output\": [\"DRAW\"]}, {\"input\": \"0 6 2 5\\r\\n\", \"output\": [\"DRAW\"]}]","length":49,"num_hidden_unit_tests":54}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1000.0,"prob_desc_time_limit":"0.5 second","prob_desc_sample_inputs":"[\"cAPS\", \"Lock\"]","prob_desc_input_spec":"The first line of the input data contains a word consisting of uppercase and lowercase Latin letters. The word's length is from 1 to 100 characters, inclusive.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"db0eb44d8cd8f293da407ba3adee10cf","prob_desc_created_at":"1322233200","source_code":"#include <bits\/stdc++.h>\n\nusing namespace std;\n\n#define sz s.size()\n\nstring s;\n\nint c;\n\nint main () {\n    cin >>s;\n    for (int i=0;i<sz;i++){\n        if ('A'<=s[i] && s[i]<='Z'){\n            c++;\n        }\n    }                                             \n    if (c==sz){\n        for (int i=0;i<sz;i++){\n            s[i]=tolower (s[i]);\n        }\n    }\n    if (('a'<=s[0] && s[0]<='z') && c+1==sz){\n        s[0]=toupper (s[0]);\n        for (int i=1;i<sz;++i){\n            s[i]=tolower (s[i]);\n        }\n    }\n    cout <<s;\n    return 0;\n} \n","prob_desc_sample_outputs":"[\"Caps\", \"Lock\"]","lang_cluster":"C++","code_uid":"c2089c877312d540f77ecb420cbf89ba","prob_desc_notes":null,"prob_desc_output_spec":"Print the result of the given word's processing.","prob_desc_output_to":"standard output","prob_desc_description":"wHAT DO WE NEED cAPS LOCK FOR?Caps lock is a computer keyboard key. Pressing it sets an input mode in which typed letters are capital by default. If it is pressed by accident, it leads to accidents like the one we had in the first passage. Let's consider that a word has been typed with the Caps lock key accidentally switched on, if:   either it only contains uppercase letters;  or all letters except for the first one are uppercase. In this case we should automatically change the case of all letters. For example, the case of the letters that form words \"hELLO\", \"HTTP\", \"z\" should be changed.Write a program that applies the rule mentioned above. If the rule cannot be applied, the program should leave the word unchanged.","hidden_unit_tests":"[{\"input\": \"cAPS\\r\\n\", \"output\": [\"Caps\"]}, {\"input\": \"Lock\\r\\n\", \"output\": [\"Lock\"]}, {\"input\": \"cAPSlOCK\\r\\n\", \"output\": [\"cAPSlOCK\"]}, {\"input\": \"CAPs\\r\\n\", \"output\": [\"CAPs\"]}, {\"input\": \"LoCK\\r\\n\", \"output\": [\"LoCK\"]}, {\"input\": \"OOPS\\r\\n\", \"output\": [\"oops\"]}, {\"input\": \"oops\\r\\n\", \"output\": [\"oops\"]}, {\"input\": \"a\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"A\\r\\n\", \"output\": [\"a\"]}, {\"input\": \"aA\\r\\n\", \"output\": [\"Aa\"]}, {\"input\": \"Zz\\r\\n\", \"output\": [\"Zz\"]}, {\"input\": \"Az\\r\\n\", \"output\": [\"Az\"]}, {\"input\": \"zA\\r\\n\", \"output\": [\"Za\"]}, {\"input\": \"AAA\\r\\n\", \"output\": [\"aaa\"]}, {\"input\": \"AAa\\r\\n\", \"output\": [\"AAa\"]}, {\"input\": \"AaR\\r\\n\", \"output\": [\"AaR\"]}, {\"input\": \"Tdr\\r\\n\", \"output\": [\"Tdr\"]}, {\"input\": \"aTF\\r\\n\", \"output\": [\"Atf\"]}, {\"input\": \"fYd\\r\\n\", \"output\": [\"fYd\"]}, {\"input\": \"dsA\\r\\n\", \"output\": [\"dsA\"]}, {\"input\": \"fru\\r\\n\", \"output\": [\"fru\"]}, {\"input\": \"hYBKF\\r\\n\", \"output\": [\"Hybkf\"]}, {\"input\": \"XweAR\\r\\n\", \"output\": [\"XweAR\"]}, {\"input\": \"mogqx\\r\\n\", \"output\": [\"mogqx\"]}, {\"input\": \"eOhEi\\r\\n\", \"output\": [\"eOhEi\"]}, {\"input\": \"nkdku\\r\\n\", \"output\": [\"nkdku\"]}, {\"input\": \"zcnko\\r\\n\", \"output\": [\"zcnko\"]}, {\"input\": \"lcccd\\r\\n\", \"output\": [\"lcccd\"]}, {\"input\": \"vwmvg\\r\\n\", \"output\": [\"vwmvg\"]}, {\"input\": \"lvchf\\r\\n\", \"output\": [\"lvchf\"]}, {\"input\": \"IUNVZCCHEWENCHQQXQYPUJCRDZLUXCLJHXPHBXEUUGNXOOOPBMOBRIBHHMIRILYJGYYGFMTMFSVURGYHUWDRLQVIBRLPEVAMJQYO\\r\\n\", \"output\": [\"iunvzcchewenchqqxqypujcrdzluxcljhxphbxeuugnxooopbmobribhhmirilyjgyygfmtmfsvurgyhuwdrlqvibrlpevamjqyo\"]}, {\"input\": \"OBHSZCAMDXEJWOZLKXQKIVXUUQJKJLMMFNBPXAEFXGVNSKQLJGXHUXHGCOTESIVKSFMVVXFVMTEKACRIWALAGGMCGFEXQKNYMRTG\\r\\n\", \"output\": [\"obhszcamdxejwozlkxqkivxuuqjkjlmmfnbpxaefxgvnskqljgxhuxhgcotesivksfmvvxfvmtekacriwalaggmcgfexqknymrtg\"]}, {\"input\": \"IKJYZIKROIYUUCTHSVSKZTETNNOCMAUBLFJCEVANCADASMZRCNLBZPQRXESHEEMOMEPCHROSRTNBIDXYMEPJSIXSZQEBTEKKUHFS\\r\\n\", \"output\": [\"ikjyzikroiyuucthsvskztetnnocmaublfjcevancadasmzrcnlbzpqrxesheemomepchrosrtnbidxymepjsixszqebtekkuhfs\"]}, {\"input\": \"cTKDZNWVYRTFPQLDAUUNSPKTDJTUPPFPRXRSINTVFVNNQNKXWUZUDHZBUSOKTABUEDQKUIVRTTVUREEOBJTSDKJKVEGFXVHXEYPE\\r\\n\", \"output\": [\"Ctkdznwvyrtfpqldauunspktdjtuppfprxrsintvfvnnqnkxwuzudhzbusoktabuedqkuivrttvureeobjtsdkjkvegfxvhxeype\"]}, {\"input\": \"uCKJZRGZJCPPLEEYJTUNKOQSWGBMTBQEVPYFPIPEKRVYQNTDPANOIXKMPINNFUSZWCURGBDPYTEKBEKCPMVZPMWAOSHJYMGKOMBQ\\r\\n\", \"output\": [\"Uckjzrgzjcppleeyjtunkoqswgbmtbqevpyfpipekrvyqntdpanoixkmpinnfuszwcurgbdpytekbekcpmvzpmwaoshjymgkombq\"]}, {\"input\": \"KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR\\r\\n\", \"output\": [\"KETAXTSWAAOBKUOKUQREHIOMVMMRSAEWKGXZKRASwTVNSSFSNIWYNPSTMRADOADEEBURRHPOOBIEUIBGYDJCEKPNLEUCANZYJKMR\"]}, {\"input\": \"ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE\\r\\n\", \"output\": [\"ZEKGDMWJPVUWFlNXRLUmWKLMMYSLRQQIBRWDPKWITUIMZYYKOEYGREKHHZRZZUFPVTNIHKGTCCTLOKSZITXXZDMPITHNZUIGDZLE\"]}, {\"input\": \"TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ\\r\\n\", \"output\": [\"TcMbVPCFvnNkCEUUCIFLgBJeCOKuJhIGwXFrhAZjuAhBraMSchBfWwIuHAEbgJOFzGtxDLDXzDSaPCFujGGxgxdlHUIQYRrMFCgJ\"]}, {\"input\": \"xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm\\r\\n\", \"output\": [\"xFGqoLILNvxARKuIntPfeukFtMbvzDezKpPRAKkIoIvwqNXnehRVwkkXYvuRCeoieBaBfTjwsYhDeCLvBwktntyluoxCYVioXGdm\"]}, {\"input\": \"udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm\\r\\n\", \"output\": [\"udvqolbxdwbkijwvhlyaelhynmnfgszbhgshlcwdkaibceqomzujndixuzivlsjyjqxzxodzbukxxhwwultvekdfntwpzlhhrIjm\"]}, {\"input\": \"jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg\\r\\n\", \"output\": [\"jgpwhetqqoncighgzbbaLwwwxkxivuwtokehrgprfgewzcwxkavwoflcgsgbhoeamzbefzoonwsyzisetoydrpufktzgbaycgaeg\"]}, {\"input\": \"vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc\\r\\n\", \"output\": [\"vyujsazdstbnkxeunedfbolicojzjpufgfemhtmdrswvmuhoivjvonacefqenbqudelmdegxqtbwezsbydmanzutvdgkgrjxzlnc\"]}, {\"input\": \"pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv\\r\\n\", \"output\": [\"pivqnuqkaofcduvbttztjbuavrqwiqrwkfncmvatoxruelyoecnkpqraiahumiaiqeyjapbqyrsxcdgjbihivtqezvasfmzntdfv\"]}, {\"input\": \"upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect\\r\\n\", \"output\": [\"upvtbsxswbohxshdrbjxcungzquhuomgxwlryvshshsfvqbrxvcikbglietlpqkiwbhiqpmdwuqosbtdvyxekkaqiwrbsibpoect\"]}, {\"input\": \"JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu\\r\\n\", \"output\": [\"JEGDOFJOFGJHFROGHOFGMHOFGHORGFHMOu\"]}, {\"input\": \"aBACABa\\r\\n\", \"output\": [\"aBACABa\"]}, {\"input\": \"AAAAAAAAAAAAAAAAAAAAAAAAaa\\r\\n\", \"output\": [\"AAAAAAAAAAAAAAAAAAAAAAAAaa\"]}, {\"input\": \"aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n\", \"output\": [\"aaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"]}, {\"input\": \"dDDDDDDDDDDDDD\\r\\n\", \"output\": [\"Dddddddddddddd\"]}, {\"input\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\", \"output\": [\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"]}, {\"input\": \"z\\r\\n\", \"output\": [\"Z\"]}, {\"input\": \"AZ\\r\\n\", \"output\": [\"az\"]}, {\"input\": \"Z\\r\\n\", \"output\": [\"z\"]}, {\"input\": \"aAAAA\\r\\n\", \"output\": [\"Aaaaa\"]}, {\"input\": \"F\\r\\n\", \"output\": [\"f\"]}]","length":31,"num_hidden_unit_tests":55}
{"prob_desc_memory_limit":"256 megabytes","difficulty":2000.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"3\", \"6\", \"100\"]","prob_desc_input_spec":"The single line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009105).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"63262317ba572d78163c91b853c05506","prob_desc_created_at":"1307458800","source_code":"\/\/ In the Name of God :D\n#include <iostream>\n#include <set>\n#include <iomanip>\n#include <cstring>\n#include <algorithm>\n#include <string>\n#include <fstream>\n#include <cmath>\n#include <deque>\n#include <queue>\n#include <vector>\n#include <map>\n#include <set>\n#include<cstdio>\n#define rep(i, n) for (int i = 0, _n = (int)(n); i < _n; i++)\n#define fer(i, x, n) for (int i = (int)(x), _n = (int)(n); i < _n; i++)\n#define rof(i, n, x) for (int i = (int)(n), _x = (int)(x); i-- > _x; )\n#define sz(x) (int((x).size()))\n#define pb push_back\n#define all(X) (X).begin(),(X).end()\n#define X first\n#define Y second\nusing namespace std;\n\ntypedef pair<int  ,int  > pii;\ntypedef   long long ll;\ntypedef long double ld;\nconst int MAXN = 1000*100+10;\nconst int MAXM = 1000+10;\nconst int MAXL=30;\nconst int INF=1000*1000*100+10;\nconst int base = 1000000000;\nconst int base_digits = 9;\n\n\nint n,f,Gr,grund[MAXN],ans[MAXN];\nbool isf[MAXM];\n\nint Mex()\n{\n    for(int i=0;i<=MAXM;i++)\n        if(!isf[i])\n            return i;\n}\nint main()\n{\n    cin>>n;\n    memset(ans,-1,sizeof ans);\n    for(int i=1;i<=n;i++)\n    {\n        memset(isf,0,sizeof isf);\n\n        for(int k=2;((2*i)-(k*k)+k)>0;k++)\n        {\n            if(((2*i)-(k*k)+k)%(2*k)!=0)\n                continue;\n\n            f=((2*i)-(k*k)+k)\/(2*k);\n\n            Gr=grund[f-1]^grund[f+k-1];\n\n            if(Gr==0 && ans[i]==-1)\n            {\n\n                ans[i]=k;\n            }\n            isf[Gr]=true;\n        }\n        grund[i]=Mex()^grund[i-1];\n    }\n\n    cout<<ans[n];\n    return 0;\n}\n\n","prob_desc_sample_outputs":"[\"2\", \"-1\", \"8\"]","lang_cluster":"C++","code_uid":"aad312bea5feeb91cb6652fcde3cc2c6","prob_desc_notes":null,"prob_desc_output_spec":"If Serozha wins, print k, which represents the minimal number of piles into which he can split the initial one during the first move in order to win the game. If Gena wins, print \"-1\" (without the quotes).","prob_desc_output_to":"standard output","prob_desc_description":"Two best friends Serozha and Gena play a game.Initially there is one pile consisting of n stones on the table. During one move one pile should be taken and divided into an arbitrary number of piles consisting of a1\u2009&gt;\u2009a2\u2009&gt;\u2009...\u2009&gt;\u2009ak\u2009&gt;\u20090 stones. The piles should meet the condition a1\u2009-\u2009a2\u2009=\u2009a2\u2009-\u2009a3\u2009=\u2009...\u2009=\u2009ak\u2009-\u20091\u2009-\u2009ak\u2009=\u20091. Naturally, the number of piles k should be no less than two.The friends play in turns. The player who cannot make a move loses. Serozha makes the first move. Who will win if both players play in the optimal way?","hidden_unit_tests":"[{\"input\": \"3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"33\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"23\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"35\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"99\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"46\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"78\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"627\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"250\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"873\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"871\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"684\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"303\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"93764\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"39509\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"70878\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"7578\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"31893\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"57113\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"66873\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"9564\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"42237\\r\\n\", \"output\": [\"18\"]}, {\"input\": \"92763\\r\\n\", \"output\": [\"22\"]}, {\"input\": \"38798\\r\\n\", \"output\": [\"76\"]}, {\"input\": \"63359\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"573\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"60879\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"67341\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"15748\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"42602\\r\\n\", \"output\": [\"17\"]}, {\"input\": \"67817\\r\\n\", \"output\": [\"73\"]}, {\"input\": \"81207\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"8149\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"95298\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"41385\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"27443\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"74424\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"35708\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"36655\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"34378\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"63478\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"42863\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"19715\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"37317\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"96992\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"56056\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"45899\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"56\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"38\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1515\\r\\n\", \"output\": [\"2\"]}]","length":76,"num_hidden_unit_tests":55}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1100.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"5\\n3 4 5 6 7\", \"7\\n12 13 14 15 14 13 12\", \"1\\n8\"]","prob_desc_input_spec":"The first line of the input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u200992)\u00a0\u2014 the number of consecutive days Vitya was watching the size of the visible part of the moon.  The second line contains n integers ai (0\u2009\u2264\u2009ai\u2009\u2264\u200915)\u00a0\u2014 Vitya's records. It's guaranteed that the input data is consistent.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"8330d9fea8d50a79741507b878da0a75","prob_desc_created_at":"1474635900","source_code":"#include<iostream>\n#include<vector>\nusing namespace std;\nint main(){\n    int no,moon;\n    vector<int> v;\n    cin>>no;\n    for(int i=0;i<no;i++){\n        cin>>moon;\n        v.push_back(moon);\n    }\n    if(no==1){\n        if(v[0]==15){\n            cout<<\"DOWN\";\n        }\n        else if(v[0]==0){\n            cout<<\"UP\";\n        }\n        else{\n            cout<<\"-1\";\n        }\n    }\n    else if(v[no-1]==15){\n        cout<<\"DOWN\";\n    }\n    else if(v[no-1]==0){\n        cout<<\"UP\";\n    }\n    else if(v[no-1]>v[no-2]){\n        cout<<\"UP\";\n    }\n    else{\n        cout<<\"DOWN\";\n    }\n    \n}","prob_desc_sample_outputs":"[\"UP\", \"DOWN\", \"-1\"]","lang_cluster":"C++","code_uid":"26d9baefbde7faaf43c131edb2b0c0a3","prob_desc_notes":"NoteIn the first sample, the size of the moon on the next day will be equal to 8, thus the answer is \"UP\".In the second sample, the size of the moon on the next day will be 11, thus the answer is \"DOWN\".In the third sample, there is no way to determine whether the size of the moon on the next day will be 7 or 9, thus the answer is -1.","prob_desc_output_spec":"If Vitya can be sure that the size of visible part of the moon on day n\u2009+\u20091 will be less than the size of the visible part on day n, then print \"DOWN\" at the only line of the output. If he might be sure that the size of the visible part will increase, then print \"UP\". If it's impossible to determine what exactly will happen with the moon, print -1.","prob_desc_output_to":"standard output","prob_desc_description":"Every summer Vitya comes to visit his grandmother in the countryside. This summer, he got a huge wart. Every grandma knows that one should treat warts when the moon goes down. Thus, Vitya has to catch the moment when the moon is down.Moon cycle lasts 30 days. The size of the visible part of the moon (in Vitya's units) for each day is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, and then cycle repeats, thus after the second 1 again goes 0.As there is no internet in the countryside, Vitya has been watching the moon for n consecutive days and for each of these days he wrote down the size of the visible part of the moon. Help him find out whether the moon will be up or down next day, or this cannot be determined by the data he has.","hidden_unit_tests":"[{\"input\": \"5\\r\\n3 4 5 6 7\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"7\\r\\n12 13 14 15 14 13 12\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"1\\r\\n8\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"44\\r\\n7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"92\\r\\n3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"6\\r\\n10 11 12 13 14 15\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"27\\r\\n11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"6\\r\\n8 7 6 5 4 3\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"27\\r\\n14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"79\\r\\n7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"25\\r\\n1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"21\\r\\n3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"56\\r\\n1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"19\\r\\n4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"79\\r\\n5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"87\\r\\n14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"13\\r\\n10 9 8 7 6 5 4 3 2 1 0 1 2\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"2\\r\\n8 9\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"3\\r\\n10 11 12\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"1\\r\\n1\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n2\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n3\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n4\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n5\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n6\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n7\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n9\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n10\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n11\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n12\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n13\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n14\\r\\n\", \"output\": [\"-1\"]}, {\"input\": \"1\\r\\n15\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"1\\r\\n0\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"3\\r\\n11 12 13\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"2\\r\\n10 9\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"92\\r\\n10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"92\\r\\n7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"2\\r\\n14 15\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"2\\r\\n1 0\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"2\\r\\n15 14\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"92\\r\\n7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"92\\r\\n13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"92\\r\\n4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"92\\r\\n14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"92\\r\\n1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"2\\r\\n2 1\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"3\\r\\n2 1 0\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"5\\r\\n4 3 2 1 0\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"2\\r\\n5 4\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"4\\r\\n3 2 1 0\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"3\\r\\n13 12 11\\r\\n\", \"output\": [\"DOWN\"]}, {\"input\": \"2\\r\\n1 2\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"2\\r\\n0 1\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"2\\r\\n13 14\\r\\n\", \"output\": [\"UP\"]}, {\"input\": \"14\\r\\n13 12 11 10 9 8 7 6 5 4 3 2 1 0\\r\\n\", \"output\": [\"UP\"]}]","length":36,"num_hidden_unit_tests":56}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1200.0,"prob_desc_time_limit":"1 second","prob_desc_sample_inputs":"[\"........\\n........\\n.B....B.\\n....W...\\n........\\n..W.....\\n........\\n........\", \"..B.....\\n..W.....\\n......B.\\n........\\n.....W..\\n......B.\\n........\\n........\"]","prob_desc_input_spec":"The input consists of the board description given in eight lines, each line contains eight characters. Character 'B' is used to denote a black pawn, and character 'W' represents a white pawn. Empty cell is marked with '.'.  It's guaranteed that there will not be white pawns on the first row neither black pawns on the last row.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"0ddc839e17dee20e1a954c1289de7fbd","prob_desc_created_at":"1446309000","source_code":"#include <bits\/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\n    std::vector<int> avoid,avoid1;\n    std::vector<int>::iterator it,it1,jt,jt1;\n    int ans1=0,ans2=0;\n\n    string pawn[8];\n    for(int i=0;i<8;i++)\n     {\n        cin>>pawn[i];\n     }\n\n     for(int i=0;i<pawn[0].size();i++)\n     {\n         if(pawn[0][i]=='B')\n         {\n            it1=avoid.insert(it1,i);\n            it1++;\n         }\n     }\n\n    for(int i=0;i<pawn[7].size();i++)\n     {\n         if(pawn[7][i]=='W')\n         {\n            jt1=avoid1.insert(jt1,i);\n            jt1++;\n         }\n     }\n\n\n    for(int i=1;i<8;i++)\n    {\n        unsigned int j=0;\n        while(j<pawn[i].size())\n        {\n\n            if(pawn[i][j]=='W')\n            {\n            \/\/    cout<<\"J: \"<<j<<endl;\n                it=find(avoid.begin(),avoid.end(),j);\n                if(it==avoid.end())\n                {\n                    ans1=i;\n                    break;\n                }\n            }\n            else if(pawn[i][j]=='B')\n            {\n                it1=avoid.insert(it1,j);\n                it1++;\n            }\n            j++;\n        }\n            if(ans1!=0)\n                break;\n    }\n\n\n    for(int i=7;i>=0;i--)\n    {\n        unsigned int j=0;\n        while(j<pawn[i].size())\n        {\n        \/\/    cout<<\"J: \"<<j<<endl;\n            if(pawn[i][j]=='B')\n            {\n                jt=find(avoid1.begin(),avoid1.end(),j);\n                if(jt==avoid1.end())\n                {\n                    ans2=7-i;\n                    break;\n                }\n            }\n            else if(pawn[i][j]=='W')\n            {\n                jt1=avoid1.insert(jt1,j);\n                jt1++;\n            }\n            j++;\n        }\n            if(ans2!=0)\n                break;\n    }\n\n    if(ans1<=ans2)\n    {\n        cout<<\"A\";\n    }\n    else\n        cout<<\"B\";\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"A\", \"B\"]","lang_cluster":"C++","code_uid":"5ed9a5d9a612c98ecb4eeb47a7c81761","prob_desc_notes":"NoteIn the first sample player A is able to complete his goal in 3 steps by always moving a pawn initially located at (4,\u20095). Player B needs at least 5 steps for any of his pawns to reach the row 8. Hence, player A will be the winner.","prob_desc_output_spec":"Print 'A' if player A wins the game on the given board, and 'B' if player B will claim the victory. Again, it's guaranteed that there will always be a winner on the given board.","prob_desc_output_to":"standard output","prob_desc_description":"Galois is one of the strongest chess players of Byteforces. He has even invented a new variant of chess, which he named \u00abPawnChess\u00bb.This new game is played on a board consisting of 8 rows and 8 columns. At the beginning of every game some black and white pawns are placed on the board. The number of black pawns placed is not necessarily equal to the number of white pawns placed.   Lets enumerate rows and columns with integers from 1 to 8. Rows are numbered from top to bottom, while columns are numbered from left to right. Now we denote as (r,\u2009c) the cell located at the row r and at the column c.There are always two players A and B playing the game. Player A plays with white pawns, while player B plays with black ones. The goal of player A is to put any of his pawns to the row 1, while player B tries to put any of his pawns to the row 8. As soon as any of the players completes his goal the game finishes immediately and the succeeded player is declared a winner.Player A moves first and then they alternate turns. On his move player A must choose exactly one white pawn and move it one step upward and player B (at his turn) must choose exactly one black pawn and move it one step down. Any move is possible only if the targeted cell is empty. It's guaranteed that for any scenario of the game there will always be at least one move available for any of the players.Moving upward means that the pawn located in (r,\u2009c) will go to the cell (r\u2009-\u20091,\u2009c), while moving down means the pawn located in (r,\u2009c) will go to the cell (r\u2009+\u20091,\u2009c). Again, the corresponding cell must be empty, i.e. not occupied by any other pawn of any color.Given the initial disposition of the board, determine who wins the game if both players play optimally. Note that there will always be a winner due to the restriction that for any game scenario both players will have some moves available.","hidden_unit_tests":"[{\"input\": \"........\\r\\n........\\r\\n.B....B.\\r\\n....W...\\r\\n........\\r\\n..W.....\\r\\n........\\r\\n........\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"..B.....\\r\\n..W.....\\r\\n......B.\\r\\n........\\r\\n.....W..\\r\\n......B.\\r\\n........\\r\\n........\\r\\n\", \"output\": [\"B\"]}, {\"input\": \".BB.B.B.\\r\\nB..B..B.\\r\\n.B.BB...\\r\\nBB.....B\\r\\nBBB....B\\r\\nB..BB...\\r\\nBB.B...B\\r\\n....WWW.\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"..BB....\\r\\n........\\r\\nWW.W..WW\\r\\nW...W...\\r\\n.W...W..\\r\\n.W..W.WW\\r\\nW.....WW\\r\\nWW......\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"BB....B.\\r\\nB.....B.\\r\\n.....B..\\r\\n..B...BB\\r\\n.W.BWBWB\\r\\n....W...\\r\\nWW.WWW..\\r\\n....W...\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"B.B.BB.B\\r\\nW.WWW.WW\\r\\n.WWWWW.W\\r\\nW.BB.WBW\\r\\n.W..BBWB\\r\\nBB.WWBBB\\r\\n.W.W.WWB\\r\\nWWW..WW.\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"BB..BB..\\r\\nBW.W.W.B\\r\\n..B.....\\r\\n.....BB.\\r\\n.B..B..B\\r\\n........\\r\\n...BB.B.\\r\\nW.WWWW.W\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"BB......\\r\\nW....BBW\\r\\n........\\r\\n.B.B.BBB\\r\\n....BB..\\r\\nB....BB.\\r\\n...WWWW.\\r\\n....WW..\\r\\n\", \"output\": [\"A\"]}, {\"input\": \".B.B..B.\\r\\nB.B....B\\r\\n...B.B.B\\r\\n..B.W..B\\r\\n.BBB.B.B\\r\\nB.BB.B.B\\r\\nBB..BBBB\\r\\nW.W.W.WW\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"..BB....\\r\\n.B.B.B.B\\r\\n..B.B...\\r\\n..B..B.B\\r\\nWWWBWWB.\\r\\n.BB...B.\\r\\n..BBB...\\r\\n......W.\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"..BB....\\r\\n.WBWBWBB\\r\\n.....BBB\\r\\n..WW....\\r\\n.W.W...W\\r\\nWWW...W.\\r\\n.W....W.\\r\\nW...W.W.\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"B...BB..\\r\\nWWBBW.BB\\r\\n.W.W....\\r\\nWWWW....\\r\\nW....W..\\r\\nW..WW...\\r\\n...W....\\r\\nWW.W....\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"B..BB..B\\r\\n..B.B...\\r\\nBW..BBW.\\r\\n...B.BBB\\r\\n.B..BB..\\r\\n..B.B.BB\\r\\n........\\r\\n........\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"....BB..\\r\\nBB......\\r\\n.B.....B\\r\\nWW..WWW.\\r\\n...BB.B.\\r\\nB...BB..\\r\\n..W..WWW\\r\\n...W...W\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"B...BBBB\\r\\n...BBB..\\r\\nBBWBWW.W\\r\\n.B..BB.B\\r\\nW..W..WW\\r\\nW.WW....\\r\\n........\\r\\nWW.....W\\r\\n\", \"output\": [\"A\"]}, {\"input\": \".BB..B..\\r\\n.B.....B\\r\\n.B......\\r\\n.B...B..\\r\\n.......B\\r\\n.WWB.WWB\\r\\nW.....W.\\r\\n...W....\\r\\n\", \"output\": [\"B\"]}, {\"input\": \".B......\\r\\n.B....B.\\r\\n...W....\\r\\n......W.\\r\\nW.WWWW.W\\r\\nW.WW....\\r\\n..WWW...\\r\\n..W...WW\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"B.......\\r\\nBBB.....\\r\\n.B....B.\\r\\n.W.BWB.W\\r\\n......B.\\r\\nW..WW...\\r\\n...W....\\r\\nW...W..W\\r\\n\", \"output\": [\"A\"]}, {\"input\": \".B......\\r\\n.B...B.B\\r\\n.B..B.BB\\r\\nW.......\\r\\n..W.....\\r\\n..WWW...\\r\\n.......W\\r\\n........\\r\\n\", \"output\": [\"A\"]}, {\"input\": \".....B..\\r\\n........\\r\\n........\\r\\n.BB..B..\\r\\n..BB....\\r\\n........\\r\\n....WWW.\\r\\n......W.\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"B.B...B.\\r\\n...BBBBB\\r\\n....B...\\r\\n...B...B\\r\\nB.B.B..B\\r\\n........\\r\\n........\\r\\nWWW..WW.\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"B.B...B.\\r\\n........\\r\\n.......B\\r\\n.BB....B\\r\\n.....W..\\r\\n.W.WW.W.\\r\\n...W.WW.\\r\\nW..WW..W\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"......B.\\r\\nB....B..\\r\\n...B.BB.\\r\\n...B....\\r\\n........\\r\\n..W....W\\r\\nWW......\\r\\n.W....W.\\r\\n\", \"output\": [\"B\"]}, {\"input\": \".BBB....\\r\\nB.B.B...\\r\\nB.BB.B..\\r\\nB.BB.B.B\\r\\n........\\r\\n........\\r\\nW.....W.\\r\\n..WW..W.\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"..B..BBB\\r\\n........\\r\\n........\\r\\n........\\r\\n...W.W..\\r\\n...W..W.\\r\\nW.......\\r\\n..W...W.\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"........\\r\\n.B.B....\\r\\n...B..BB\\r\\n........\\r\\n........\\r\\nW...W...\\r\\nW...W...\\r\\nW.WW.W..\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"...B..BB\\r\\n.B..B..B\\r\\n........\\r\\n........\\r\\n........\\r\\nW..W....\\r\\n.....WW.\\r\\n.W......\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"B....BB.\\r\\n...B...B\\r\\n.B......\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n....W..W\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"...BB.BB\\r\\nBB...B..\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n..W..W..\\r\\n......W.\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"...BB...\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n......W.\\r\\nWW...WW.\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"...B.B..\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\nWWW...WW\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"BBBBBBB.\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n.WWWWWWW\\r\\n\", \"output\": [\"A\"]}, {\"input\": \".BBBBBB.\\r\\nB.......\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n.WWWWWWW\\r\\n\", \"output\": [\"B\"]}, {\"input\": \".BBBBBBB\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\nWWWWWWW.\\r\\n\", \"output\": [\"A\"]}, {\"input\": \".BBBBBB.\\r\\n.......B\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\nWWWWWWW.\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"B..BB...\\r\\n..B...B.\\r\\n.WBB...B\\r\\nBW......\\r\\nW.B...W.\\r\\n..BBW.B.\\r\\nBW..BB..\\r\\n......W.\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"BBB.BBBB\\r\\nWB.W..B.\\r\\nBBBB...B\\r\\nB..B....\\r\\n.......W\\r\\n.BWB..BB\\r\\nB..BW.BW\\r\\n.W......\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"B.BBBBBB\\r\\nB..BBB.B\\r\\nW.BB.W.B\\r\\nB.BWBB.B\\r\\nBWBWBBBB\\r\\n...BBBBB\\r\\nB.B...BB\\r\\nWW..WW.W\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"BBBB.BBB\\r\\nBBBB.B.B\\r\\nB.B..BBB\\r\\nB.BB.BWW\\r\\nB.BB.BBB\\r\\nB.BB.BBB\\r\\n..BW.BB.\\r\\nW.WWWWWW\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"BBBB.BBB\\r\\n.B....WB\\r\\nBB.B...B\\r\\nWWWW.WWB\\r\\nBB...BWW\\r\\nWWW..BBB\\r\\nW.BW.BB.\\r\\nWWWWWWW.\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"B.BBBBBB\\r\\nW.WWBBBW\\r\\nW.BB.WBB\\r\\nW.W.BBBW\\r\\nW.BWW.WB\\r\\nB..B..BB\\r\\nB.B.W.BB\\r\\nWWWWW.WW\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"BBBBBB.B\\r\\n.BBWBB.B\\r\\nWWW..B.W\\r\\n..WW.W.W\\r\\nBWB..W.W\\r\\n..BW.B.W\\r\\nB..B....\\r\\nWWWW.WWW\\r\\n\", \"output\": [\"B\"]}, {\"input\": \".B...BB.\\r\\nWBB.BWBB\\r\\n.BWBW...\\r\\n..W...B.\\r\\nWB.BWW..\\r\\nWBW.....\\r\\n.W..W.B.\\r\\n.W.W.WW.\\r\\n\", \"output\": [\"A\"]}, {\"input\": \".B..BBBB\\r\\nBB...WWB\\r\\nB..B.W.B\\r\\nWB.W...B\\r\\n...W.WW.\\r\\nW.....W.\\r\\nWB.W.W.W\\r\\n.WW...WW\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"B.BBBBBB\\r\\nW.BB.W.B\\r\\nW.BBW...\\r\\n..WWWW.B\\r\\n....W..B\\r\\n.WW.W..W\\r\\n.W..WW.W\\r\\nW.W....W\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"........\\r\\n.......W\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n.......B\\r\\n........\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"..B.....\\r\\n..W.....\\r\\n.W....B.\\r\\n........\\r\\n.B...W..\\r\\n......B.\\r\\n.W......\\r\\n........\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"........\\r\\nB.......\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n.......W\\r\\n........\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"........\\r\\n........\\r\\n........\\r\\n.W......\\r\\n......B.\\r\\n........\\r\\n........\\r\\n........\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"........\\r\\nB.......\\r\\nW.......\\r\\n.......B\\r\\n........\\r\\n........\\r\\n........\\r\\n...W....\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"........\\r\\n.B......\\r\\n.W......\\r\\n........\\r\\n....B...\\r\\n........\\r\\n........\\r\\n.......W\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"........\\r\\n..B.....\\r\\n..W...B.\\r\\n........\\r\\n.....W..\\r\\n......B.\\r\\n........\\r\\n........\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"........\\r\\nW.......\\r\\n........\\r\\n........\\r\\n........\\r\\n........\\r\\n.......B\\r\\n........\\r\\n\", \"output\": [\"A\"]}, {\"input\": \"........\\r\\n........\\r\\n........\\r\\n........\\r\\nW.......\\r\\nB.......\\r\\n........\\r\\n........\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"........\\r\\n........\\r\\n.W......\\r\\n........\\r\\n........\\r\\n........\\r\\n.B......\\r\\n........\\r\\n\", \"output\": [\"B\"]}, {\"input\": \"........\\r\\nB.......\\r\\nW.......\\r\\n.W......\\r\\n........\\r\\nB.......\\r\\n........\\r\\n........\\r\\n\", \"output\": [\"B\"]}]","length":98,"num_hidden_unit_tests":56}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"9 9 5 5 2 1\", \"100 100 52 50 46 56\"]","prob_desc_input_spec":"The first line contains six integers n,\u2009m,\u2009x,\u2009y,\u2009a,\u2009b (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009109,\u20090\u2009\u2264\u2009x\u2009\u2264\u2009n,\u20090\u2009\u2264\u2009y\u2009\u2264\u2009m,\u20091\u2009\u2264\u2009a\u2009\u2264\u2009n,\u20091\u2009\u2264\u2009b\u2009\u2264\u2009m).","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"8f1211b995f35462ae83b2be27f54585","prob_desc_created_at":"1368363600","source_code":"#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <set>\nusing namespace std;\n#define ll long long\nint n,m,x,y,a,b;\nint main()\n{\n   \/\/ freopen(\"in.txt\",\"r\",stdin);\n    cin>>n>>m>>x>>y>>a>>b;\n    ll t=__gcd(a,b);\n    a\/=t;\n    b\/=t;\n    ll lx,ly;\n    lx=n\/a*a;\n    ly=m\/b*b;\n    if(lx*b>a*ly)\n    {\n        lx=ly\/b*a;\n    }else  ly=lx\/a*b;\n\/\/    cout<<a<<endl;\n\/\/    cout<<b<<endl;\n\/\/    cout<<lx<<endl;\n\/\/    cout<<ly<<endl;\n    ll x2=x+(lx>>1);\n    ll y2=y+(ly>>1);\n    ll x1=x2-lx;\n    ll y1=y2-ly;\n    ll mx=x1<0?-x1:x2>n?n-x2:0;\n    ll my=y1<0?-y1:y2>m?m-y2:0;\n     printf(\"%lld %lld %lld %lld\\n\",x1+mx,y1+my,x2+mx,y2+my);\n\/\/    mx=my=0;\n\/\/    prllf(\"%d %d %d %d\\n\",x1+mx,y1+my,x2+mx,y2+my);\n\n    return 0;\n}\n","prob_desc_sample_outputs":"[\"1 3 9 7\", \"17 8 86 92\"]","lang_cluster":"C++","code_uid":"11f88f12eccac7829e320b7bc6a1ffd0","prob_desc_notes":null,"prob_desc_output_spec":"Print four integers x1,\u2009y1,\u2009x2,\u2009y2, which represent the founded sub-rectangle whose left-bottom point is (x1,\u2009y1) and right-up point is (x2,\u2009y2).","prob_desc_output_to":"standard output","prob_desc_description":"You are given a rectangle grid. That grid's size is n\u2009\u00d7\u2009m. Let's denote the coordinate system on the grid. So, each point on the grid will have coordinates \u2014 a pair of integers (x,\u2009y) (0\u2009\u2264\u2009x\u2009\u2264\u2009n,\u20090\u2009\u2264\u2009y\u2009\u2264\u2009m).Your task is to find a maximum sub-rectangle on the grid (x1,\u2009y1,\u2009x2,\u2009y2) so that it contains the given point (x,\u2009y), and its length-width ratio is exactly (a,\u2009b). In other words the following conditions must hold: 0\u2009\u2264\u2009x1\u2009\u2264\u2009x\u2009\u2264\u2009x2\u2009\u2264\u2009n, 0\u2009\u2264\u2009y1\u2009\u2264\u2009y\u2009\u2264\u2009y2\u2009\u2264\u2009m, .The sides of this sub-rectangle should be parallel to the axes. And values x1,\u2009y1,\u2009x2,\u2009y2 should be integers.  If there are multiple solutions, find the rectangle which is closest to (x,\u2009y). Here \"closest\" means the Euclid distance between (x,\u2009y) and the center of the rectangle is as small as possible. If there are still multiple solutions, find the lexicographically minimum one. Here \"lexicographically minimum\" means that we should consider the sub-rectangle as sequence of integers (x1,\u2009y1,\u2009x2,\u2009y2), so we can choose the lexicographically minimum one.","hidden_unit_tests":"[{\"input\": \"9 9 5 5 2 1\\r\\n\", \"output\": [\"1 3 9 7\"]}, {\"input\": \"100 100 52 50 46 56\\r\\n\", \"output\": [\"17 8 86 92\"]}, {\"input\": \"100 100 16 60 42 75\\r\\n\", \"output\": [\"0 0 56 100\"]}, {\"input\": \"100 100 28 22 47 50\\r\\n\", \"output\": [\"0 0 94 100\"]}, {\"input\": \"100 100 44 36 96 21\\r\\n\", \"output\": [\"0 25 96 46\"]}, {\"input\": \"100 100 56 46 1 47\\r\\n\", \"output\": [\"55 0 57 94\"]}, {\"input\": \"100 100 20 53 6 22\\r\\n\", \"output\": [\"6 1 33 100\"]}, {\"input\": \"100 100 32 63 2 41\\r\\n\", \"output\": [\"30 18 34 100\"]}, {\"input\": \"100 100 48 73 63 16\\r\\n\", \"output\": [\"16 65 79 81\"]}, {\"input\": \"100 100 13 59 14 20\\r\\n\", \"output\": [\"0 0 70 100\"]}, {\"input\": \"36830763 28058366 30827357 20792295 11047103 20670351\\r\\n\", \"output\": [\"25303805 7388015 36350908 28058366\"]}, {\"input\": \"87453374 60940601 74141787 32143714 78082907 33553425\\r\\n\", \"output\": [\"9370467 15367001 87453374 48920426\"]}, {\"input\": \"71265727 62692710 12444778 3479306 21442685 5463351\\r\\n\", \"output\": [\"0 0 64328055 16390053\"]}, {\"input\": \"48445042 43730155 14655564 6244917 43454856 2866363\\r\\n\", \"output\": [\"0 4811735 43454856 7678098\"]}, {\"input\": \"85759276 82316701 8242517 1957176 10225118 547026\\r\\n\", \"output\": [\"0 0 81800944 4376208\"]}, {\"input\": \"64748258 21983760 9107246 2437546 11247507 8924750\\r\\n\", \"output\": [\"0 0 22495014 17849500\"]}, {\"input\": \"6561833 24532010 2773123 457562 6225818 23724637\\r\\n\", \"output\": [\"0 0 6225818 23724637\"]}, {\"input\": \"33417574 19362112 17938303 4013355 10231192 2596692\\r\\n\", \"output\": [\"166200 0 33417574 8439249\"]}, {\"input\": \"98540143 28776614 12080542 1456439 96484500 3125739\\r\\n\", \"output\": [\"0 0 96484500 3125739\"]}, {\"input\": \"75549175 99860242 42423626 6574859 73199290 26030615\\r\\n\", \"output\": [\"2349885 0 75549175 26030615\"]}, {\"input\": \"4309493 76088457 2523467 46484812 909115 53662610\\r\\n\", \"output\": [\"1887086 960803 3159847 76088457\"]}, {\"input\": \"99373741 10548319 82293354 9865357 58059929 5328757\\r\\n\", \"output\": [\"41313812 5219562 99373741 10548319\"]}, {\"input\": \"81460 7041354 53032 1297536 41496 5748697\\r\\n\", \"output\": [\"27916 0 78148 6958949\"]}, {\"input\": \"5664399 63519726 1914884 13554302 2435218 44439020\\r\\n\", \"output\": [\"697275 0 3132493 44439020\"]}, {\"input\": \"19213492 76256257 10302871 19808004 19174729 55280126\\r\\n\", \"output\": [\"38763 0 19213492 55280126\"]}, {\"input\": \"61430678 95017800 11901852 27772249 25202227 87778634\\r\\n\", \"output\": [\"0 0 25202227 87778634\"]}, {\"input\": \"1063740 2675928 277215 2022291 204933 298547\\r\\n\", \"output\": [\"0 1183193 1024665 2675928\"]}, {\"input\": \"71580569 68590917 4383746 13851161 9868376 8579752\\r\\n\", \"output\": [\"0 0 71545726 62203202\"]}, {\"input\": \"17818532 82586436 8482338 54895799 12444902 11112345\\r\\n\", \"output\": [\"2259887 49339626 14704789 60451971\"]}, {\"input\": \"63651025 50179036 16141802 24793214 28944209 13993078\\r\\n\", \"output\": [\"0 10800136 57888418 38786292\"]}, {\"input\": \"11996821 42550832 8901163 19214381 3510233 20406511\\r\\n\", \"output\": [\"4976355 0 11996821 40813022\"]}, {\"input\": \"27048166 72584165 4785744 2001800 24615554 27645416\\r\\n\", \"output\": [\"0 0 24615554 27645416\"]}, {\"input\": \"47001271 53942737 7275347 1652337 33989593 48660013\\r\\n\", \"output\": [\"0 0 33989593 48660013\"]}, {\"input\": \"51396415 50182729 20810973 38206844 17823753 2905275\\r\\n\", \"output\": [\"0 34333144 47530008 42080544\"]}, {\"input\": \"27087649 52123970 20327636 19640608 8481031 14569965\\r\\n\", \"output\": [\"1644556 0 27087649 43709895\"]}, {\"input\": \"41635044 16614992 36335190 11150551 30440245 13728274\\r\\n\", \"output\": [\"11194799 2886718 41635044 16614992\"]}, {\"input\": \"97253692 35192249 21833856 26094161 41611668 32149284\\r\\n\", \"output\": [\"0 363858 45079307 35192249\"]}, {\"input\": \"60300478 3471217 11842517 3192374 27980820 507119\\r\\n\", \"output\": [\"0 2456979 55961640 3471217\"]}, {\"input\": \"69914272 30947694 58532705 25740028 30431847 27728130\\r\\n\", \"output\": [\"39482425 3219564 69914272 30947694\"]}, {\"input\": \"83973381 91192149 19059738 26429459 49573749 78006738\\r\\n\", \"output\": [\"0 0 49573749 78006738\"]}, {\"input\": \"1000000000 1000000000 286536427 579261823 230782719 575570138\\r\\n\", \"output\": [\"171145067 291476754 401927786 867046892\"]}, {\"input\": \"1000000000 1000000000 42362139 725664533 91213476 617352813\\r\\n\", \"output\": [\"0 176862916 121617968 1000000000\"]}, {\"input\": \"1000000000 1000000000 503220555 167034539 244352073 511651840\\r\\n\", \"output\": [\"276322201 0 730118908 950210560\"]}, {\"input\": \"1000000000 1000000000 259046267 313437250 252266478 848401810\\r\\n\", \"output\": [\"132913028 0 385179506 848401810\"]}, {\"input\": \"1000000000 1000000000 867388331 312356312 405405075 887925029\\r\\n\", \"output\": [\"594594925 0 1000000000 887925029\"]}, {\"input\": \"1000000000 1000000000 623214043 753726318 970868535 929707704\\r\\n\", \"output\": [\"29131465 70292296 1000000000 1000000000\"]}, {\"input\": \"1000000000 1000000000 84072459 754904836 124007132 824006731\\r\\n\", \"output\": [\"22068893 175993269 146076025 1000000000\"]}, {\"input\": \"1000000000 1000000000 839898171 196274842 131921537 865789406\\r\\n\", \"output\": [\"773937402 0 905858939 865789406\"]}, {\"input\": \"1000000000 1000000000 448240235 342677552 992352294 907572080\\r\\n\", \"output\": [\"0 0 992352294 907572080\"]}, {\"input\": \"1000000000 1000000000 837887296 643696230 478881476 45404539\\r\\n\", \"output\": [\"42237048 598291691 1000000000 689100769\"]}, {\"input\": \"1000000000 500 1000 400 11 122\\r\\n\", \"output\": [\"978 12 1022 500\"]}, {\"input\": \"1000000000 1000000000 1000000000 1000000000 1 1\\r\\n\", \"output\": [\"0 0 1000000000 1000000000\"]}, {\"input\": \"1000000000 1000000000 1000000000 1000000000 1000000000 1\\r\\n\", \"output\": [\"0 999999999 1000000000 1000000000\"]}, {\"input\": \"1000000000 999999999 1000 1000 1000000000 999999999\\r\\n\", \"output\": [\"0 0 1000000000 999999999\"]}, {\"input\": \"70 10 20 5 5 3\\r\\n\", \"output\": [\"12 0 27 9\"]}, {\"input\": \"1000000000 1000000000 500000000 500000000 500000000 500000001\\r\\n\", \"output\": [\"250000000 249999999 750000000 750000000\"]}]","length":38,"num_hidden_unit_tests":56}
{"prob_desc_memory_limit":"256 megabytes","difficulty":1700.0,"prob_desc_time_limit":"2 seconds","prob_desc_sample_inputs":"[\"2\\n1263 1 2\\n8103 2 1\", \"2\\n1234 2 2\\n1256 0 2\", \"2\\n0123 1 1\\n4567 1 2\"]","prob_desc_input_spec":"The first input line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u200910) which represents the number of already made guesses. Then follow n lines in the form of \"ai bi ci\", where ai is the i-th experimental number, bi is the number of bulls, ci is the number of cows (1\u2009\u2264\u2009i\u2009\u2264\u2009n, 0\u2009\u2264\u2009bi,\u2009ci,\u2009bi\u2009+\u2009ci\u2009\u2264\u20094). The experimental numbers are correct, i.e., each of them contains exactly four digits, in each of them all the four digits are different, and there can be a leading zero. All the experimental numbers are different. As the guesser hasn't guessed the number yet, the answer \"4 bulls 0 cows\" is not present.","prob_desc_input_from":"standard input","lang":"GNU C++","exec_outcome":"PASSED","src_uid":"142e5f2f08724e53c234fc2379216b4c","prob_desc_created_at":"1298908800","source_code":"#include<stdio.h>\n#include<string.h>\nstruct node{\n    char s[5];\n    int a,b;\n}p[15];\nchar ss[5];\nchar xf[10][5];\nint main(){\n    int n,i,j,k;\n    int a1,a2,a3,a4;\n    while(scanf(\"%d\",&n)!=EOF){\n        for(i=0;i<n;i++){\n            scanf(\"%s\",p[i].s);\n            scanf(\"%d %d\",&p[i].a,&p[i].b);\n        }\n        int cnt,cntt;\n        int kk=0;\n            for(a1=0;a1<=9;a1++){\n                for(a2=0;a2<=9;a2++){\n                for(a3=0;a3<=9;a3++){\n                    for(a4=0;a4<=9;a4++){\n                        if(a1==a2||a1==a3||a1==a4||a2==a3||a2==a4||a3==a4)continue;\n                        cnt=0;\n                        cntt=0;\n                        ss[0]=a1+'0';ss[1]=a2+'0';ss[2]=a3+'0';ss[3]=a4+'0';ss[4]='\\0';\n                        \/\/printf(\"!!!!%s\\n\",ss);\n                        for(i=0;i<n;i++){\n                            cnt=0;\n                            cntt=0;\n                        for(j=0;j<4;j++){\n                            if(p[i].s[j]==ss[j])cnt++;\n                        }\n                        for(j=0;j<4;j++){\n                            for(k=0;k<4;k++){\n                                if(ss[k]==p[i].s[j]&&k!=j){\n                                    cntt++;\n                                    break;\n                                }\n                            }\n                        }\n                        if(cnt!=p[i].a||cntt!=p[i].b){\n                            break;\n                        }\n                        }\n                        \/\/printf(\"~~~~%d\\n\",i);\n                        if(i==n){strcpy(xf[kk],ss);kk++;}\n                        if(kk==2)break;\n                    }if(kk==2)break;\n                }if(kk==2)break;\n                }if(kk==2)break;\n                }\n        if(kk==2)printf(\"Need more data\\n\");\n        else if(kk==0)printf(\"Incorrect data\\n\");\n        else printf(\"%s\\n\",xf[0]);\n    }\n    return 0;\n}","prob_desc_sample_outputs":"[\"Need more data\", \"2134\", \"Incorrect data\"]","lang_cluster":"C++","code_uid":"59deb42946856434d64e76fa3b01a3ce","prob_desc_notes":null,"prob_desc_output_spec":"If the input data is enough to determine the sought number, print the number with four digits on a single line. If it has less than four digits, add leading zero. If the data is not enough, print \"Need more data\" without the quotes. If the thinker happens to have made a mistake in his replies, print \"Incorrect data\" without the quotes.","prob_desc_output_to":"standard output","prob_desc_description":"The \"Bulls and Cows\" game needs two people to play. The thinker thinks of a number and the guesser tries to guess it.The thinker thinks of a four-digit number in the decimal system. All the digits in the number are different and the number may have a leading zero. It can't have more than one leading zero, because all it's digits should be different. The guesser tries to guess the number. He makes a series of guesses, trying experimental numbers and receives answers from the first person in the format \"x bulls y cows\". x represents the number of digits in the experimental number that occupy the same positions as in the sought number. y represents the number of digits of the experimental number that present in the sought number, but occupy different positions. Naturally, the experimental numbers, as well as the sought number, are represented by four-digit numbers where all digits are different and a leading zero can be present.For example, let's suppose that the thinker thought of the number 0123. Then the guessers' experimental number 1263 will receive a reply \"1 bull 2 cows\" (3 occupies the same positions in both numbers and 1 and 2 are present in both numbers but they occupy different positions). Also, the answer to number 8103 will be \"2 bulls 1 cow\" (analogically, 1 and 3 occupy the same positions and 0 occupies a different one). When the guesser is answered \"4 bulls 0 cows\", the game is over.Now the guesser has already made several guesses and wants to know whether his next guess can possibly be the last one.","hidden_unit_tests":"[{\"input\": \"2\\r\\n1263 1 2\\r\\n8103 2 1\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"2\\r\\n1234 2 2\\r\\n1256 0 2\\r\\n\", \"output\": [\"2134\"]}, {\"input\": \"2\\r\\n0123 1 1\\r\\n4567 1 2\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"1\\r\\n1234 0 0\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"4\\r\\n4789 1 0\\r\\n7189 1 0\\r\\n7829 1 0\\r\\n7893 1 0\\r\\n\", \"output\": [\"4123\"]}, {\"input\": \"4\\r\\n1789 1 0\\r\\n7198 1 0\\r\\n9817 1 0\\r\\n8971 1 0\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"6\\r\\n1234 3 0\\r\\n1235 3 0\\r\\n1236 3 0\\r\\n1237 3 0\\r\\n1238 3 0\\r\\n1239 3 0\\r\\n\", \"output\": [\"1230\"]}, {\"input\": \"3\\r\\n0123 0 4\\r\\n1230 0 4\\r\\n3012 0 4\\r\\n\", \"output\": [\"2301\"]}, {\"input\": \"1\\r\\n0714 1 1\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"2\\r\\n0159 1 0\\r\\n0153 1 0\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"3\\r\\n9703 3 0\\r\\n0925 0 2\\r\\n3059 0 3\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"4\\r\\n1689 0 1\\r\\n0159 0 2\\r\\n4326 0 1\\r\\n9048 0 2\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"5\\r\\n9084 1 0\\r\\n4615 0 1\\r\\n0826 0 2\\r\\n1275 0 3\\r\\n5631 0 1\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"6\\r\\n1586 0 2\\r\\n6105 1 1\\r\\n5382 0 1\\r\\n8164 0 2\\r\\n0647 0 1\\r\\n6059 1 1\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"7\\r\\n7401 0 2\\r\\n1524 0 0\\r\\n1495 0 0\\r\\n9230 0 2\\r\\n9874 1 0\\r\\n9574 1 0\\r\\n4693 1 1\\r\\n\", \"output\": [\"6073\"]}, {\"input\": \"8\\r\\n7954 0 1\\r\\n5638 0 1\\r\\n8204 0 2\\r\\n8293 1 1\\r\\n3598 0 1\\r\\n0894 0 1\\r\\n6324 1 2\\r\\n0572 0 1\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"9\\r\\n8742 0 1\\r\\n5183 1 1\\r\\n6149 1 0\\r\\n3568 0 2\\r\\n9258 1 2\\r\\n5193 1 2\\r\\n7403 0 1\\r\\n9124 0 2\\r\\n3058 0 2\\r\\n\", \"output\": [\"5239\"]}, {\"input\": \"10\\r\\n7098 2 1\\r\\n7693 1 1\\r\\n6428 0 2\\r\\n5209 0 2\\r\\n1683 0 2\\r\\n0432 0 1\\r\\n5697 1 1\\r\\n2437 0 0\\r\\n4593 1 0\\r\\n1784 0 1\\r\\n\", \"output\": [\"8096\"]}, {\"input\": \"10\\r\\n8795 0 3\\r\\n4971 1 1\\r\\n5032 0 1\\r\\n5479 0 3\\r\\n2501 0 1\\r\\n9052 1 0\\r\\n3649 0 1\\r\\n1927 1 0\\r\\n9173 0 1\\r\\n8014 0 2\\r\\n\", \"output\": [\"4857\"]}, {\"input\": \"10\\r\\n0459 2 0\\r\\n2371 0 1\\r\\n5209 2 1\\r\\n1306 0 0\\r\\n0213 1 0\\r\\n4173 0 0\\r\\n5076 0 1\\r\\n9674 0 1\\r\\n2894 0 3\\r\\n3527 0 2\\r\\n\", \"output\": [\"8259\"]}, {\"input\": \"10\\r\\n0132 0 1\\r\\n6801 0 1\\r\\n8749 1 1\\r\\n8036 0 0\\r\\n7384 0 2\\r\\n8594 1 1\\r\\n9307 1 0\\r\\n7390 0 1\\r\\n6127 1 1\\r\\n0381 0 1\\r\\n\", \"output\": [\"1547\"]}, {\"input\": \"10\\r\\n9360 0 1\\r\\n5208 0 2\\r\\n7861 1 0\\r\\n8916 0 1\\r\\n5937 1 1\\r\\n7082 0 1\\r\\n3402 0 2\\r\\n7230 1 0\\r\\n1794 0 1\\r\\n8293 0 2\\r\\n\", \"output\": [\"4835\"]}, {\"input\": \"2\\r\\n3794 2 2\\r\\n8647 0 4\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"2\\r\\n9726 3 1\\r\\n6583 1 1\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"3\\r\\n6093 3 0\\r\\n7902 2 0\\r\\n2305 2 1\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"3\\r\\n6108 0 3\\r\\n4975 1 1\\r\\n0981 1 2\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"4\\r\\n7153 2 1\\r\\n5810 1 0\\r\\n8439 0 2\\r\\n2794 1 3\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"4\\r\\n4259 1 3\\r\\n1985 0 3\\r\\n5263 2 2\\r\\n5703 3 1\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"5\\r\\n9784 3 0\\r\\n2657 0 3\\r\\n7536 1 0\\r\\n0762 1 3\\r\\n2014 1 1\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"5\\r\\n2746 0 3\\r\\n1509 3 0\\r\\n4135 2 0\\r\\n7536 0 4\\r\\n1825 3 0\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"6\\r\\n5132 1 0\\r\\n3085 3 0\\r\\n0523 1 3\\r\\n6912 3 0\\r\\n7406 2 1\\r\\n3179 2 1\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"6\\r\\n1034 3 0\\r\\n0514 2 2\\r\\n1092 2 2\\r\\n0814 0 4\\r\\n9182 2 0\\r\\n9534 0 0\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"7\\r\\n9230 3 1\\r\\n7401 3 1\\r\\n6073 0 0\\r\\n1495 0 0\\r\\n9574 2 0\\r\\n4693 2 2\\r\\n1524 1 2\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"4\\r\\n0789 1 0\\r\\n7189 1 0\\r\\n7829 1 0\\r\\n7893 1 0\\r\\n\", \"output\": [\"0123\"]}, {\"input\": \"1\\r\\n1234 3 1\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"2\\r\\n1234 0 0\\r\\n5678 0 0\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"2\\r\\n1340 0 0\\r\\n2435 0 0\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"3\\r\\n1024 0 1\\r\\n5678 3 0\\r\\n1542 0 0\\r\\n\", \"output\": [\"0678\"]}, {\"input\": \"3\\r\\n1234 0 4\\r\\n2413 0 4\\r\\n4123 0 4\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"5\\r\\n0123 0 1\\r\\n4567 0 1\\r\\n8901 0 1\\r\\n6789 0 1\\r\\n2345 0 1\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"1\\r\\n1234 2 2\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"2\\r\\n1234 2 2\\r\\n2134 2 2\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"3\\r\\n6789 0 2\\r\\n1234 0 2\\r\\n3467 0 0\\r\\n\", \"output\": [\"Need more data\"]}, {\"input\": \"3\\r\\n6789 0 2\\r\\n1234 2 0\\r\\n3467 0 0\\r\\n\", \"output\": [\"1298\"]}, {\"input\": \"4\\r\\n0123 1 0\\r\\n0342 1 0\\r\\n5678 2 0\\r\\n2981 0 1\\r\\n\", \"output\": [\"0679\"]}, {\"input\": \"3\\r\\n1234 3 0\\r\\n5678 0 0\\r\\n1239 3 0\\r\\n\", \"output\": [\"1230\"]}, {\"input\": \"6\\r\\n3102 3 0\\r\\n4102 3 0\\r\\n5102 3 0\\r\\n6102 3 0\\r\\n7102 3 0\\r\\n8102 3 0\\r\\n\", \"output\": [\"9102\"]}, {\"input\": \"4\\r\\n0123 1 3\\r\\n3012 1 3\\r\\n2301 2 2\\r\\n1230 0 4\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"10\\r\\n0231 2 2\\r\\n3021 2 2\\r\\n2301 2 2\\r\\n0451 2 2\\r\\n5041 2 2\\r\\n4501 2 2\\r\\n0671 2 2\\r\\n7061 2 2\\r\\n8901 2 2\\r\\n0891 2 2\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"8\\r\\n1023 2 2\\r\\n1032 2 2\\r\\n1045 2 2\\r\\n1054 2 2\\r\\n1067 2 2\\r\\n1076 2 2\\r\\n1089 2 2\\r\\n1098 2 2\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"2\\r\\n5678 1 3\\r\\n5432 1 3\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"2\\r\\n2034 2 2\\r\\n2056 0 2\\r\\n\", \"output\": [\"0234\"]}, {\"input\": \"6\\r\\n0132 2 2\\r\\n0321 2 2\\r\\n3120 2 2\\r\\n0213 2 2\\r\\n2103 2 2\\r\\n1023 2 2\\r\\n\", \"output\": [\"0123\"]}, {\"input\": \"3\\r\\n0235 3 0\\r\\n0236 3 0\\r\\n7894 1 0\\r\\n\", \"output\": [\"0234\"]}, {\"input\": \"2\\r\\n1234 3 1\\r\\n1253 3 1\\r\\n\", \"output\": [\"Incorrect data\"]}, {\"input\": \"5\\r\\n3210 0 4\\r\\n0789 1 0\\r\\n7189 1 0\\r\\n7829 1 0\\r\\n7893 1 0\\r\\n\", \"output\": [\"0123\"]}]","length":58,"num_hidden_unit_tests":56}
